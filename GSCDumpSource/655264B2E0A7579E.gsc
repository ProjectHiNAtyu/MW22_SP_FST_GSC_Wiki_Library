// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    _id_362C58E8BB39BCDA::disablefeature( "gulag" );
    _id_362C58E8BB39BCDA::disablefeature( "randomizeCircleCenter" );
    _id_362C58E8BB39BCDA::disablefeature( "planeSnapToOOB" );

    if ( getdvarint( "dvar_C7F6B4289DEC1B29", 1 ) != 0 )
        _id_362C58E8BB39BCDA::disablefeature( "littleBirdSpawns" );

    _id_362C58E8BB39BCDA::enablefeature( "planeUseCircleRadius" );
    _id_362C58E8BB39BCDA::enablefeature( "circleEarlyStart" );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "mayConsiderPlayerDead", ::mayconsiderplayerdead );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "spawnHandled", ::spawnhandled );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "playerShouldRespawn", ::playershouldrespawn );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "createC130PathStruct", ::createc130pathstruct );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "addToC130Infil", ::addtoc130infil );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "playerSkipLootPickup", ::playerskiplootpickup );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "playerSkipKioskUse", ::playerskipkioskuse );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "modifyPlayerDamage", ::modifyplayerdamage );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "onPlayerKilled", ::onplayerkilled );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "regenHealthAdd", ::playerregenhealthadd );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "regenDelaySpeed", ::playerregendelayspeed );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "kioskRevivePlayer", ::kioskreviveplayer );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "circleTimerNext", ::circletimernext );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "markPlayerAsEliminatedOnKilled", ::markplayeraseliminatedonkilled );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "postUpdateGameEvents", ::postupdategameevents );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "addToTeamLives", ::addtoteamlives );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "removeFromTeamLives", ::removefromteamlives );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "playerWelcomeSplashes", ::playerwelcomesplashes );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "modifyVehicleDamage", ::modifyvehicledamage );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "allowMeleeVehicleDamage", ::allowmeleevehicledamage );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "ignoreVehicleExplosiveDamage", ::ignorevehicleexplosivedamage );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "playerNakedDropLoadout", ::playernakeddroploadout );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "lastStandAllowed", ::laststandallowed );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "remainingPlayersAliveOnTeam", ::_id_561F3BEAF33B80C0 );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "dropOnPlayerDeath", ::droponplayerdeath );
    level.brgametype.zombierespawning = 1;
    level.brgametype.zombiekilledlootcachecount = 0;
    level.brgametype.zombieloadout = createzombieloadout();
    level.brgametype.zombiehealth = getdvarint( "dvar_457A291554D55361", 500 );
    level.brgametype.zombiesdamagezombies = getdvarint( "dvar_7D04136E229C6D7A", 0 );
    level.brgametype.zombiesignorevehicleexplosions = getdvarint( "dvar_9E8F30B569E2ABE5", 1 );
    level.brgametype.zombiepingrate = getdvarfloat( "dvar_4DAB1AAF5C7733BE", 2.0 );
    level.brgametype.zombiepingtime = getdvarfloat( "dvar_35B72E2558F0A7CD", 0.5 );
    level.brgametype.zombienumtoconsume = getdvarint( "dvar_1322659CEB016A98", 2 );
    level.brgametype.maxtagsvisible = getdvarint( "dvar_73A8F1E18564E654", 12 );
    level.brgametype.maxtagradius = getdvarfloat( "dvar_0DEE9CF4B9B1B35D", 0 );
    level.brgametype.maxtagradiussq = level.brgametype.maxtagradius * level.brgametype.maxtagradius;
    level.brgametype.tagautopickup = getdvarint( "dvar_4673D84307B77B28", 1 );
    level.brgametype.zombieregenratescaleingas = getdvarfloat( "dvar_732DBD6BA0B0F252", 1.0 );
    level.brgametype.zombieregenratescaleoutgas = getdvarfloat( "dvar_DD936BDB4CF1F2EF", 0.5 );
    level.brgametype.zombieregendelayscaleingas = getdvarfloat( "dvar_C186667E8CB3BC6B", 1.0 );
    level.brgametype.zombieregendelayscaleoutgas = getdvarfloat( "dvar_B0687A8F2794F3B8", 1.5 );
    level.brgametype.zombiepowersenabled = getdvarint( "dvar_B760176B090452C1", 1 );
    level.brgametype.powerscooldown = getdvarint( "dvar_2546D85E9D039F6B", 1 );
    level.brgametype.zombienumhitshuman = getdvarfloat( "dvar_A08FD1AAD589D41B", 2 );
    level.brgametype.zombienumhitsheli = getdvarfloat( "dvar_8D24CF268D991C83", 2 );
    level.brgametype.zombienumhitsatv = getdvarfloat( "dvar_AFB1F56AC422F668", 2 );
    level.brgametype.zombienumhitscar = getdvarfloat( "dvar_9162A16AAD712F5B", 3 );
    level.brgametype.zombienumhitstruck = getdvarfloat( "dvar_5552790671B23F3E", 4 );
    level.brgametype.zombiespawninair = getdvarint( "dvar_9C4658BFBE5E2B39", 1 );
    level.brgametype.humanpowersenabled = getdvarint( "dvar_64F5B71A90F71B0B", 1 );
    level.brgametype.zombiedropstags = getdvarint( "dvar_A5E52332673495D5", 1 );
    level.brgametype.maxdogtags = getdvarint( "dvar_4546076A5E6BE649", 100 );
    level.brgametype.zombievehiclelaststand = getdvarint( "dvar_46634A326AA6BC5E", 1 );
    level.brgametype.zombiespawnabovedeath = getdvarint( "dvar_B2CCEFCD02E5660F", 0 );
    level.brgametype.humanspawninair = getdvarint( "dvar_9EC879D1DAFA798B", 1 );
    level.brgametype.respawntags = [];
    level.brgametype.respawntagsfreed = [];
    level._effect["zombie_trans"] = loadfx( "vfx/iw8_br/gameplay/zombie/vfx_zmb_transition_to_human.vfx" );
    level._effect["zombie_splat"] = loadfx( "vfx/iw8_br/gameplay/zombie/vfx_zmb_freefall_splat.vfx" );
    level.modegetforceoperatorcustomization = ::modegetforceoperatorcustomization;
    level.shownonspectatingwinnersplash = 1;
    level.conf_fx["vanish"] = loadfx( "vfx/core/impacts/small_snowhit" );
    level.brgametype.empvfx = loadfx( "vfx/iw8_br/gameplay/zombie/vfx_zmb_zombie_emp_blast.vfx" );
    level.brgametype.impulsefx = loadfx( "vfx/iw8_br/gameplay/zombie/vfx_zmb_human_push_blast" );
    thread initpostmain();
}

initpostmain()
{
    waittillframeend;
    thread circlesetup();
    thread setupzombierespawnglobaltimer();
    thread setupzombiepowers();
    thread setuphumanpowers();
    thread setdropbagdelay();
}

createzombieloadout()
{
    loadout = [];
    loadout["loadoutArchetype"] = "archetype_assault";
    loadout["loadoutPrimary"] = "iw9_me_fists";
    loadout["loadoutPrimaryAttachment"] = "none";
    loadout["loadoutPrimaryAttachment2"] = "none";
    loadout["loadoutPrimaryCamo"] = "none";
    loadout["loadoutPrimaryReticle"] = "none";
    loadout["loadoutSecondary"] = "none";
    loadout["loadoutSecondaryAttachment"] = "none";
    loadout["loadoutSecondaryAttachment2"] = "none";
    loadout["loadoutSecondaryCamo"] = "none";
    loadout["loadoutSecondaryReticle"] = "none";
    loadout["loadoutMeleeSlot"] = "none";
    loadout["loadoutEquipmentPrimary"] = "none";
    loadout["loadoutEquipmentSecondary"] = "none";
    loadout["loadoutStreakType"] = "assault";
    loadout["loadoutKillstreak1"] = "none";
    loadout["loadoutKillstreak2"] = "none";
    loadout["loadoutKillstreak3"] = "none";
    loadout["loadoutSuper"] = "super_br_extract";
    loadout["loadoutPerks"] = [ "specialty_null" ];
    loadout["loadoutGesture"] = "playerData";
    loadout["loadoutExecution"] = "none";
    return loadout;
}

playerwelcomesplashes()
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;

    if ( !istrue( game["liveLobbyCompleted"] ) )
        scripts\mp\hud_message::showsplash( "br_gametype_zxp_prematch_welcome" );

    if ( !istrue( level.br_infils_disabled ) )
    {
        self waittill( "br_jump" );

        while ( !self isonground() )
            waitframe();
    }
    else
        level waittill( "prematch_done" );

    _id_715028F54BAD19A1::branalytics_landing( self );

    if ( isalive( self ) && !_id_2CEDCC356F1B9FC8::playeriszombie() )
        thread playerhumanpowers();

    wait 1;
    scripts\mp\hud_message::showsplash( "br_gametype_zxp_welcome" );
    _id_2CEDCC356F1B9FC8::brleaderdialogplayer( "primary_objective", self, 0 );
}

setdropbagdelay()
{
    _id_21BE5F4D451EFD18 = -15;
    firsttime = _id_2695A20D4011076D::getcircleclosetime( 1 );
    _id_5FD1D7EEEBE96215 = max( 0, firsttime + _id_21BE5F4D451EFD18 );
    _id_23F3A96159A40D18 = getdvarfloat( "dvar_B81B25BCD8C7D749", _id_5FD1D7EEEBE96215 );
    _id_362C58E8BB39BCDA::registerbrgametypedata( "dropBagDelay", _id_23F3A96159A40D18 );
}

mayconsiderplayerdead( player )
{
    result = player playertryzombiespawn();

    if ( scripts\mp\flags::gameflag( "prematch_done" ) && !result )
        _id_0A34750D17473C49::markplayeraseliminated( player );

    return !result;
}

markplayeraseliminatedonkilled()
{
    return 0;
}

playertryzombiespawn()
{
    if ( _id_2CEDCC356F1B9FC8::playeriszombie() )
    {
        thread playerdelaydisablezombie();
        return 0;
    }

    if ( !istrue( self.br_infilstarted ) || !scripts\mp\flags::gameflag( "prematch_done" ) || level.gameended || !level.brgametype.zombierespawning )
        return 0;

    thread playerzombierespawn( 1 );
    return 1;
}

playerzombierespawn( _id_FD96C3C1EC7B2988 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "zombie_unset" );

    if ( level.gameended )
        return;

    setteamlastzombietime( self.team );
    playersetisbecomingzombie( 1 );
    playerzombiestatechange( 1 );
    waittillframeend;
    playersetiszombie( 1 );
    self.respawningbr = 1;

    if ( _id_FD96C3C1EC7B2988 )
        playerwaittospawn();
    else
        playerreadytospawn();

    [spawnorigin, spawnangles] = playergetzombiespawnlocation();
    [spawnorigin, _id_11F3B4465C8B637B] = playerzombieprestream( spawnorigin, spawnangles );
    _id_67708F418B1FAC79::gulagfadetoblack();
    wait 1;
    scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    self.pers["gamemodeLoadout"] = level.brgametype.zombieloadout;
    self.class = "gamemode";
    self.forcespawnangles = spawnangles;
    self.forcespawnorigin = _id_11F3B4465C8B637B;
    scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    scripts\cp_mp\execution::_clearexecution();
    _id_7E52B56769FA7774::initplayer( 1 );
    _id_6489FCDFE6FA2E36::playerclearspectatekillchainsystem();
    _id_3184653FDF31DB44 = makeweapon( "iw9_me_fists_mp" );
    scripts\cp_mp\utility\inventory_utility::_takeweapon( _id_3184653FDF31DB44 );
    _id_E3438B8CB9C2C515 = makeweapon( "iw8_fists_mp_zmb" );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( _id_E3438B8CB9C2C515, undefined, undefined, 1 );
    playerstreamwaittillcomplete( spawnorigin, spawnangles, _id_11F3B4465C8B637B );
    self.ffsm_state = 5;
    self skydive_setbasejumpingstatus( 0 );
    self skydive_setdeploymentstatus( 0 );
    thread scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( _id_E3438B8CB9C2C515 );
    thread playerzombiehitground();
    thread _id_1E4A61DB11011446::br_displayperkinfo();
    thread playerzombiesupersprint();
    thread playerzombiesetradar();
    thread playerzombieupdatetagobjectives();
    thread playerzombiegasthink();
    scripts\mp\utility\perk::giveperk( "specialty_tracker" );
    scripts\mp\utility\perk::giveperk( "specialty_tracker_jammer" );
    scripts\mp\utility\perk::giveperk( "specialty_sprintmelee" );
    _id_3B64EB40368C1450::set( "playerZombieSetup", "crate_use", 0 );
    _id_3B64EB40368C1450::set( "playerZombieSetup", "vehicle_use", 0 );
    self lerpfovbypreset( "zombiedefault" );
    self setclientomnvar( "ui_deadsilence_overlay", 0 );
    thread playerzombiedelayturnonfx();
    self setscriptablepartstate( "compassicon", "zombie" );

    if ( getdvarint( "dvar_04171E2BC0238543", 0 ) )
        self forcenetfieldhighlod( 1 );

    scripts\mp\hud_message::showsplash( "br_gametype_zxp_change" );

    if ( !scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) )
        scripts\mp\utility\perk::giveperk( "specialty_pistoldeath" );

    self.maxhealth = level.brgametype.zombiehealth;
    self.health = self.maxhealth;
    _id_07C40FA80892A721::_id_AC7803D45979135C( 0 );
    self.respawningbr = undefined;
}

playerzombieprestream( spawnorigin, spawnangles )
{
    _id_11F3B4465C8B637B = spawnorigin;

    if ( level.brgametype.zombiespawninair )
    {
        height = scripts\cp_mp\parachute::getc130height();
        _id_A6427A6A24F058DC = ( 0, 0, height );
        spawnorigin = _id_1E4A61DB11011446::getoffsetspawnorigin( spawnorigin, _id_A6427A6A24F058DC );
        spawnpoint = spawnstruct();
        spawnpoint.origin = spawnorigin;
        spawnpoint.angles = spawnangles;
        spawnpoint.height = height;
        _id_11F3B4465C8B637B = _id_67708F418B1FAC79::playerprestreamrespawnorigin( spawnpoint );
    }
    else
    {
        self setpredictedstreamloaddist( 0.0 );
        _id_2CEDCC356F1B9FC8::playerstreamhintlocation( _id_11F3B4465C8B637B );
    }

    return [ spawnorigin, _id_11F3B4465C8B637B ];
}

playerstreamwaittillcomplete( spawnorigin, spawnangles, _id_11F3B4465C8B637B )
{
    _id_67708F418B1FAC79::playerteleportgulag( _id_11F3B4465C8B637B, spawnangles );
    linker = spawn( "script_model", _id_11F3B4465C8B637B );
    linker setmodel( "tag_origin" );
    linker.angles = spawnangles;
    linker hide();
    linker showtoplayer( self );
    self playerlinktoabsolute( linker, "tag_origin" );
    self playerhide();
    thread _id_67708F418B1FAC79::playercleanupentondisconnect( linker );
    waitframe();
    _id_2CEDCC356F1B9FC8::playerwaittillstreamhintcomplete();
    _id_2CEDCC356F1B9FC8::playerclearstreamhintorigin();
    linker.origin = spawnorigin;
    waitframe();
    self unlink();
    self clearsoundsubmix( "deaths_door_mp" );
    self clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 2 );
    self clearclienttriggeraudiozone( 1 );
    self playershow();
    _id_BDA1DE83E1856735 = 0;

    if ( isdefined( level.parachutedeploydelay ) )
        _id_BDA1DE83E1856735 = level.parachutedeploydelay;

    thread scripts\cp_mp\parachute::startfreefall( _id_BDA1DE83E1856735, 0, undefined, undefined, 1 );
    self setclientomnvar( "ui_br_transition_type", 0 );
    self setclientomnvar( "ui_show_spectateHud", -1 );
    _id_67708F418B1FAC79::resetplayermovespeedscale();
    wait 0.5;
    _id_67708F418B1FAC79::gulagfadefromblack();
    waitframe();
    linker delete();
    self notify( "can_show_splashes" );
}

playerzombiehitground()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );

    while ( !self isonground() )
        waitframe();

    thread playerzombiepowers();
    self setclientomnvar( "ui_br_altimeter_state", 0 );
    self skydive_interrupt();
    playfxontag( level._effect["zombie_splat"], self, "j_mainroot" );
    wait 1;
    self skydive_setbasejumpingstatus( 0 );
    self skydive_setdeploymentstatus( 0 );
}

playerzombiedelayturnonfx()
{
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );
    waitframe();

    if ( getdvarint( "dvar_D2E09E5CB7C82D3F", 1 ) )
        self setscriptablepartstate( "zombie", "on_loop" );
    else
        self setscriptablepartstate( "zombie", "on" );
}

playerdelaydisablezombie()
{
    self endon( "disconnect" );
    self setscriptablepartstate( "zombie", "off" );
    self setscriptablepartstate( "compassicon", "defaulticon" );
    waittillframeend;
    playersetiszombie( 0, 1 );
}

setteamlastzombietime( team )
{
    level.teamdata[team]["lastZombieTime"] = gettime();
}

playersetiszombie( value, _id_5FD0C9CF6D0E1D68 )
{
    self.iszombie = value;
    playersetiszombieextrainfo( value );
    playervisibilityrespawntags( value );

    if ( !istrue( self.br_iseliminated ) )
        self.operatorcustomization = undefined;

    if ( value )
    {
        self notify( "zombie_set" );
        self.numconsumed = 0;
        self.bcdisabled = 1;
        self disableweaponpickup();
        playerzombiesetuphud();
        playersetisbecomingzombie( 0 );
    }
    else
    {
        self notify( "zombie_unset" );
        self.numconsumed = undefined;
        self.bcdisabled = undefined;
        self enableweaponpickup();
        playerzombiedestroyhud();
        _id_6DE14DAC59E69E69();
    }

    level notify( "players_remaining_changed" );

    if ( istrue( _id_5FD0C9CF6D0E1D68 ) )
    {
        self lerpfovbypreset( "default" );
        thread scripts\mp\supers\super_deadsilence::superdeadsilence_endhudsequence();
    }
}

playersetisbecomingzombie( value )
{
    self.isbecomingzombie = value;
}

playerisbecomingzombie()
{
    return istrue( self.isbecomingzombie );
}

playersetiszombieextrainfo( value )
{
    if ( istrue( value ) )
        self.game_extrainfo = self.game_extrainfo | 4096;
    else
        self.game_extrainfo = self.game_extrainfo & ~4096;
}

playerzombiegasthink()
{
    self endon( "zombie_unset" );
    self endon( "disconnect" );
    self.zombieingas = undefined;

    for (;;)
    {
        if ( playerzombieisingas() )
        {
            if ( !isdefined( self.zombieingas ) || !self.zombieingas )
            {
                self.zombieingas = 1;
                playerzombieentergas();
            }
        }
        else if ( !isdefined( self.zombieingas ) || self.zombieingas )
        {
            self.zombieingas = 0;
            playerzombieexitgas();
        }

        waitframe();
    }
}

playerzombieentergas()
{
    self notify( "zombie_enter_gas" );
    self unsetperk( "specialty_radarblip", 1 );
}

playerzombieexitgas()
{
    self notify( "zombie_exit_gas" );

    if ( level.brgametype.zombiepingrate >= 0 )
    {
        if ( level.brgametype.zombiepingrate == 0 )
            self setperk( "specialty_radarblip", 1 );
        else
            thread playerzombiepingoutofgas();
    }
}

playerzombiepingoutofgas()
{
    if ( level.brgametype.zombiepingrate <= 0 )
        return;

    self endon( "zombie_unset" );
    self endon( "zombie_enter_gas" );
    self endon( "disconnect" );

    for (;;)
    {
        self setperk( "specialty_radarblip", 1 );
        wait( level.brgametype.zombiepingtime );
        self unsetperk( "specialty_radarblip", 1 );
        wait( level.brgametype.zombiepingrate );
    }
}

playerzombieisingas()
{
    if ( !isdefined( level.br_circle.dangercircleent ) )
        return 0;

    _id_819EDACDACB810E4 = _id_2695A20D4011076D::getdangercircleorigin();
    _id_E86632D645C137D0 = _id_2695A20D4011076D::getdangercircleradius();
    return distance2dsquared( _id_819EDACDACB810E4, self.origin ) > _id_E86632D645C137D0 * _id_E86632D645C137D0;
}

playershouldrespawn( data )
{
    if ( !istrue( level.br_prematchstarted ) )
        return 1;

    return _id_2CEDCC356F1B9FC8::playeriszombie();
}

spawnhandled( player )
{
    if ( istrue( player.br_infilstarted ) && scripts\mp\flags::gameflag( "prematch_done" ) && player _id_2CEDCC356F1B9FC8::playeriszombie() )
    {
        player playerreadytospawn();
        return 1;
    }

    return 0;
}

playerreadytospawn()
{
    self notify( "spawnZombie" );
    scripts\mp\deathicons::hidedeathicon( self );
}

playerwaittospawn()
{
    if ( _id_2CEDCC356F1B9FC8::playeriszombie() )
        self waittill( "spawnZombie" );
}

getvalidatedspawnorgangles( origin, dir, dist )
{
    startorigin = origin + dir * dist;

    if ( _id_45B2B4A889E633FA::ispointinbounds( startorigin, 1 ) )
    {
        spawnangles = vectortoangles( dir * -1 );
        return [ startorigin, spawnangles ];
    }
    else
        return [ undefined, undefined ];
}

playergetzombiespawnlocation()
{
    _id_72541F27D0911A16 = 50;
    _id_DDB70F36E908D6D9 = 10000;
    [spawnorigin, spawnangles] = playerzombiegetrespawnbyteam();

    if ( isdefined( spawnorigin ) )
        return [ spawnorigin, spawnangles ];

    if ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.dangercircleent ) || istrue( level.brgametype.zombiespawnabovedeath ) )
        return [ self.origin, self getplayerangles() ];

    radius = _id_2695A20D4011076D::getdangercircleradius();
    origin = _id_2695A20D4011076D::getdangercircleorigin();
    dist = radius + _id_72541F27D0911A16;
    _id_AC2E1EFDF095AF8C = ( self.origin[0], self.origin[1], 0 );
    dir = vectornormalize( _id_AC2E1EFDF095AF8C - origin );
    [startorigin, spawnangles] = getvalidatedspawnorgangles( origin, dir, dist );

    if ( !isdefined( startorigin ) )
    {
        dir = dir * -1;
        [startorigin, spawnangles] = getvalidatedspawnorgangles( origin, dir, dist );
    }

    if ( !isdefined( startorigin ) )
    {
        dir = ( 1, 0, 0 );
        [startorigin, spawnangles] = getvalidatedspawnorgangles( origin, dir, dist );
    }

    if ( !isdefined( startorigin ) )
    {
        dir = ( -1, 0, 0 );
        [startorigin, spawnangles] = getvalidatedspawnorgangles( origin, dir, dist );
    }

    if ( !isdefined( startorigin ) )
    {
        dir = ( 0, 1, 0 );
        [startorigin, spawnangles] = getvalidatedspawnorgangles( origin, dir, dist );
    }

    if ( !isdefined( startorigin ) )
    {
        dir = ( 0, -1, 0 );
        [startorigin, spawnangles] = getvalidatedspawnorgangles( origin, dir, dist );
    }

    if ( !isdefined( startorigin ) )
    {
        startorigin = self.origin;
        spawnangles = self.angles;
    }

    spawnorigin = _id_2CEDCC356F1B9FC8::droptogroundmultitrace( startorigin, _id_DDB70F36E908D6D9 );
    return [ spawnorigin, spawnangles ];
}

playerzombiegetrespawnbyteam()
{
    spawnorigin = undefined;
    spawnangles = undefined;
    _id_F6AC3C609E85CB74 = getdvarfloat( "dvar_5BB9DA56E8FC0F3F", 4000 );

    if ( _id_F6AC3C609E85CB74 >= 0 )
    {
        _id_B4E45DBE012F4A40 = _id_67708F418B1FAC79::playergetbestrespawnteammate( 0 );

        if ( isdefined( _id_B4E45DBE012F4A40 ) )
        {
            spawnorigin = getsafeoriginaroundpoint( _id_B4E45DBE012F4A40.origin, _id_F6AC3C609E85CB74 );
            spawnorigin = _id_2CEDCC356F1B9FC8::droptogroundmultitrace( spawnorigin );
            spawnangles = _id_67708F418B1FAC79::getanglesfacingorigin( spawnorigin, _id_B4E45DBE012F4A40.origin );
        }
    }

    return [ spawnorigin, spawnangles ];
}

getsafeoriginaroundpoint( point, _id_C4000FD1C78D0587 )
{
    _id_974DDA820500E74A = 3.14159;
    safeorigin = _id_2695A20D4011076D::getsafecircleorigin();
    _id_CEE024D90697BB29 = vectornormalize( point - safeorigin );
    _id_8BC14603A27FA3E7 = vectortoangles( _id_CEE024D90697BB29 );
    _id_6768A915ED3C9351 = randomfloatrange( getdvarfloat( "dvar_83A1498ACDDBC2FA", 10.0 ), getdvarfloat( "dvar_83C5338ACE040D50", 60.0 ) );
    dir = _id_CEE024D90697BB29;
    origin = point + dir * _id_C4000FD1C78D0587;

    if ( _id_45B2B4A889E633FA::ispointinbounds( origin, 0 ) )
        return origin;

    dir = dir * -1;
    origin = point + dir * _id_C4000FD1C78D0587;

    if ( _id_45B2B4A889E633FA::ispointinbounds( origin, 0 ) )
        return origin;

    dir = vectornormalize( safeorigin - point );
    origin = point + dir * _id_C4000FD1C78D0587;

    if ( _id_45B2B4A889E633FA::ispointinbounds( origin, 0 ) )
        return origin;

    _id_B2867FE57BB578AF = _id_C4000FD1C78D0587;
    radius = distance2d( point, safeorigin );
    angle = _id_B2867FE57BB578AF / radius;

    if ( angle > _id_974DDA820500E74A )
        angle = _id_974DDA820500E74A;

    _id_44DFFBE9663DF3F0 = angle * 180 / _id_974DDA820500E74A;
    origin = rotatepointaroundvector( ( 0, 0, 1 ), point - safeorigin, _id_44DFFBE9663DF3F0 ) + safeorigin;

    if ( _id_45B2B4A889E633FA::ispointinbounds( origin, 0 ) )
        return origin;

    origin = _id_2695A20D4011076D::getrandompointincircle( point, _id_C4000FD1C78D0587 );

    if ( _id_45B2B4A889E633FA::ispointinbounds( origin, 0 ) )
        return origin;

    return undefined;
}

playerskiplootpickup( instance )
{
    return _id_2CEDCC356F1B9FC8::playeriszombie();
}

playerskipkioskuse( instance )
{
    return _id_2CEDCC356F1B9FC8::playeriszombie();
}

modegetforceoperatorcustomization( player, operatorref, _id_5864EA4E21A60CD4 )
{
    _id_9584B5398BF1C8B2 = 218;
    _id_4F74935FC769F639 = "kreuger_eastern";

    if ( player _id_2CEDCC356F1B9FC8::playeriszombie() )
        return [ _id_4F74935FC769F639, _id_9584B5398BF1C8B2 ];

    return [ operatorref, _id_5864EA4E21A60CD4 ];
}

playerzombiesupersprint()
{
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );

    for (;;)
    {
        if ( self issupersprinting() )
            self refreshsprinttime();

        waitframe();
    }
}

playerzombiesetradar()
{
    self endon( "disconnect" );
    self.skipuavupdate = 1;
    self.radarmode = "normal_radar";
    self.hasradar = 1;
    self waittill( "zombie_unset" );
    self.skipuavupdate = undefined;
    self.hasradar = 0;
}

entisvehicle()
{
    return scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle";
}

modifyplayerdamage( data )
{
    _id_7F41FF5F4383A3AC = 250.0;
    idamage = data.damage;
    _id_7BFCAD6985F865AC = isplayer( data.attacker ) && data.attacker _id_2CEDCC356F1B9FC8::playeriszombie();
    _id_EB938D26F29141AA = isdefined( data.attacker ) && data.attacker entisvehicle();
    _id_8D6DEEB9C425CE1B = isplayer( data.victim ) && data.victim _id_2CEDCC356F1B9FC8::playeriszombie();
    _id_5C3F9357F11D2223 = scripts\mp\utility\weapon::getweaponbasenamescript( data.objweapon );

    if ( _id_7BFCAD6985F865AC && _id_8D6DEEB9C425CE1B && !level.brgametype.zombiesdamagezombies )
        idamage = 0;
    else if ( _id_8D6DEEB9C425CE1B && data.meansofdeath == "MOD_FALLING" )
        idamage = 0;
    else if ( level.brgametype.zombiesignorevehicleexplosions && _id_8D6DEEB9C425CE1B && isexplosivedamagemod( data.meansofdeath ) && isdefined( data.inflictor ) && data.inflictor scripts\cp_mp\vehicles\vehicle::isvehicle() )
        idamage = 0;
    else if ( _id_7BFCAD6985F865AC && !_id_8D6DEEB9C425CE1B && data.meansofdeath == "MOD_MELEE" )
        idamage = _id_7F41FF5F4383A3AC / level.brgametype.zombienumhitshuman;
    else if ( _id_8D6DEEB9C425CE1B && _id_EB938D26F29141AA && istrue( data.victim.vehicledamageimmunity ) )
        idamage = 0;
    else if ( _id_7BFCAD6985F865AC && !_id_8D6DEEB9C425CE1B && data.meansofdeath == "MOD_IMPACT" && _id_5C3F9357F11D2223 == "rock_mp" )
    {
        inflictor = spawnstruct();
        inflictor.origin = data.point;
        data.victim thread scripts\mp\equipment\concussion_grenade::applyconcussion( inflictor, data.attacker );
    }
    else if ( _id_8D6DEEB9C425CE1B )
    {
        _id_E88B8A44100E399F = 0.7;
        _id_49E6EF3EDADD524E = _id_2669878CF5A1B6BC::getweaponrootname( data.objweapon );
        weapontype = weaponclass( _id_5C3F9357F11D2223 );
        _id_1646FE11681A5388 = _id_1E4A61DB11011446::isbulletpenetration( data.idflags );

        if ( !_id_1646FE11681A5388 )
        {
            switch ( weapontype )
            {
                case "sniper":
                    if ( data.shitloc == "head" || data.shitloc == "helmet" )
                    {
                        if ( _id_1E4A61DB11011446::issnipersemi( _id_49E6EF3EDADD524E ) )
                            idamage = level.brgametype.zombiehealth * _id_E88B8A44100E399F;
                        else
                            idamage = level.brgametype.zombiehealth;
                    }

                    break;
                default:
                    if ( data.shitloc == "head" || data.shitloc == "helmet" )
                        idamage = idamage / _id_7F41FF5F4383A3AC * level.brgametype.zombiehealth;

                    break;
            }
        }
    }

    return idamage;
}

modifyvehicledamage( data )
{
    idamage = data.damage;
    vehicle = data.victim;
    _id_7BFCAD6985F865AC = isplayer( data.attacker ) && data.attacker _id_2CEDCC356F1B9FC8::playeriszombie();
    vehicletype = vehicle.vehiclename;

    if ( _id_7BFCAD6985F865AC && data.meansofdeath == "MOD_MELEE" )
    {
        switch ( vehicletype )
        {
            case "atv":
                idamage = vehicle.maxhealth / level.brgametype.zombienumhitsatv;
                break;
            case "jeep":
            case "tac_rover":
                idamage = vehicle.maxhealth / level.brgametype.zombienumhitscar;
                break;
            case "cargo_truck_mg":
            case "cargo_truck":
                idamage = vehicle.maxhealth / level.brgametype.zombienumhitstruck;
                break;
            case "little_bird_mg":
            case "little_bird":
                idamage = vehicle.maxhealth / level.brgametype.zombienumhitsheli;
                break;
            default:
                break;
        }

        idamage = int( ceil( idamage ) );
    }

    return idamage;
}

allowmeleevehicledamage( data )
{
    _id_7BFCAD6985F865AC = isplayer( data.attacker ) && data.attacker _id_2CEDCC356F1B9FC8::playeriszombie();
    return _id_7BFCAD6985F865AC;
}

ignorevehicleexplosivedamage( data )
{
    if ( isexplosivedamagemod( data.meansofdeath ) && data.objweapon.basename == "emp_drone_non_player_direct_mp" || data.objweapon.basename == "emp_drone_non_player_mp" || data.objweapon.basename == "emp_drone_player_mp" )
        return 1;
    else
        return 0;
}

playerzombiebacktohuman()
{
    if ( !_id_2CEDCC356F1B9FC8::playeriszombie() )
        return;

    playersetiszombie( 0 );
    playerzombiestatechange( 0 );
    self.respawningbr = 1;
    _id_11F3B4465C8B637B = self.origin;
    spawnorigin = self.origin;
    spawnangles = self getplayerangles();
    _id_F750412DF131D69A = 0;

    if ( level.brgametype.humanspawninair )
        [spawnorigin, spawnangles, _id_11F3B4465C8B637B] = _id_1D81091658F53612();
    else
    {
        [spawnorigin, spawnangles, _id_F750412DF131D69A] = _id_1A67DB35424BF909();
        _id_11F3B4465C8B637B = spawnorigin;
    }

    playfx( scripts\engine\utility::getfx( "zombie_trans" ), self.origin );

    if ( !_id_F750412DF131D69A )
    {
        self.plotarmor = 1;
        _id_67708F418B1FAC79::gulagfadetoblack();
        wait 1;
    }
    else
        waitframe();

    scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    self.pers["gamemodeLoadout"] = level.br_respawn_loadout;
    self.pers["class"] = "gamemode";
    self.class = "gamemode";
    self.forcespawnangles = spawnangles;
    self.forcespawnorigin = _id_11F3B4465C8B637B;
    scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    thread _id_1E4A61DB11011446::br_displayperkinfo();
    self lerpfovbypreset( "default_2seconds" );
    thread scripts\mp\supers\super_deadsilence::superdeadsilence_endhudsequence();
    self setscriptablepartstate( "zombie", "off" );
    self setscriptablepartstate( "compassicon", "defaulticon" );

    if ( level.brgametype.humanspawninair )
    {
        self.plotarmor = undefined;
        playerstreamwaittillcomplete( spawnorigin, spawnangles, _id_11F3B4465C8B637B );
    }
    else
    {
        if ( !_id_F750412DF131D69A )
        {
            _id_2CEDCC356F1B9FC8::playerwaittillstreamhintcomplete();
            _id_2CEDCC356F1B9FC8::playerclearstreamhintorigin();
            playfx( scripts\engine\utility::getfx( "zombie_trans" ), self.origin );
        }

        self [[ level.parachuterestoreweaponscb ]]();
        _id_724736FCF0FB6604::br_give_starting_ammo();
        _id_724736FCF0FB6604::br_ammo_update_weapons( self );

        if ( !_id_F750412DF131D69A )
        {
            _id_67708F418B1FAC79::gulagfadefromblack();
            self.plotarmor = undefined;
        }

        thread _id_5855E4B39BAE3587();
    }

    thread playerhumanhitground();
    self.respawningbr = undefined;
}

_id_1D81091658F53612()
{
    streamtimeout = _id_2CEDCC356F1B9FC8::getdefaultstreamhinttimeoutms() / 1000;
    spawnpoint = _id_67708F418B1FAC79::playergulaggetrespawnpoint( 0, streamtimeout );
    _id_11F3B4465C8B637B = _id_67708F418B1FAC79::playerprestreamrespawnorigin( spawnpoint );
    return [ spawnpoint.origin, spawnpoint.angles, _id_11F3B4465C8B637B ];
}

_id_1A67DB35424BF909()
{
    [spawnorigin, spawnangles, _id_F750412DF131D69A] = _id_AFBD524FEC2F5EC0();

    if ( !_id_F750412DF131D69A )
        _id_2CEDCC356F1B9FC8::playerstreamhintlocation( spawnorigin );

    return [ spawnorigin, spawnangles, _id_F750412DF131D69A ];
}

_id_AFBD524FEC2F5EC0()
{
    _id_72541F27D0911A16 = 500;
    _id_DDB70F36E908D6D9 = 10000;
    _id_145D3D7AF68D22FF = 5;

    if ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.dangercircleent ) )
        return [ self.origin, self getplayerangles(), 1 ];

    _id_B2739C0F5213D0E8 = _id_2695A20D4011076D::getdangercircleradius();
    _id_EF8F7E66DC0FEB2C = _id_2695A20D4011076D::getdangercircleorigin();
    _id_02DB625E063F40B4 = distance2dsquared( self.origin, _id_EF8F7E66DC0FEB2C );

    if ( _id_02DB625E063F40B4 <= _id_B2739C0F5213D0E8 * _id_B2739C0F5213D0E8 )
        return [ self.origin, self getplayerangles(), 1 ];

    startorigin = undefined;
    spawnangles = undefined;
    _id_AC2E1EFDF095AF8C = ( self.origin[0], self.origin[1], 0 );
    _id_B55FC573AAA3D8D4 = vectornormalize( _id_AC2E1EFDF095AF8C - _id_EF8F7E66DC0FEB2C );

    for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 <= _id_145D3D7AF68D22FF; _id_AC0E594AC96AA3A8++ )
    {
        _id_BB2F1C8715395934 = _id_B2739C0F5213D0E8 - _id_72541F27D0911A16 * _id_AC0E594AC96AA3A8;

        if ( _id_BB2F1C8715395934 < 0 )
            break;

        [startorigin, spawnangles] = _id_FB6925F5E828580D( _id_EF8F7E66DC0FEB2C, _id_B55FC573AAA3D8D4, _id_BB2F1C8715395934 );

        if ( isdefined( startorigin ) )
            break;
    }

    if ( !isdefined( startorigin ) )
    {
        startorigin = _id_EF8F7E66DC0FEB2C;
        spawnangles = self getplayerangles();
    }

    spawnorigin = _id_2CEDCC356F1B9FC8::droptogroundmultitrace( startorigin, _id_DDB70F36E908D6D9 );
    return [ spawnorigin, spawnangles, 0 ];
}

_id_FB6925F5E828580D( origin, dir, dist )
{
    startorigin = origin + dir * dist;
    streamtimeout = _id_2CEDCC356F1B9FC8::getdefaultstreamhinttimeoutms() / 1000;

    if ( _id_67708F418B1FAC79::gulagisspawnpositionreasonablysafe( startorigin, streamtimeout ) )
    {
        spawnangles = vectortoangles( dir * -1 );
        return [ startorigin, spawnangles ];
    }
    else
        return [ undefined, undefined ];
}

playerhumanhitground()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_set" );

    while ( !self isonground() )
        waitframe();

    thread playerhumanpowers();
}

playerregenhealthadd( _id_7C90DD5575D81006 )
{
    if ( _id_2CEDCC356F1B9FC8::playeriszombie() )
    {
        if ( istrue( self.zombieingas ) )
            return int( level.brgametype.zombieregenratescaleingas * _id_7C90DD5575D81006 );
        else
            return int( level.brgametype.zombieregenratescaleoutgas * _id_7C90DD5575D81006 );
    }

    return undefined;
}

playerregendelayspeed( _id_DEC837630EB16CAF )
{
    if ( _id_2CEDCC356F1B9FC8::playeriszombie() )
    {
        if ( istrue( self.zombieingas ) )
            return 1 / level.brgametype.zombieregendelayscaleingas * _id_DEC837630EB16CAF;
        else
            return 1 / level.brgametype.zombieregendelayscaleoutgas * _id_DEC837630EB16CAF;
    }

    return undefined;
}

playerzombiedroploot()
{
    self.itemsdropped = 0;
    index = level.brgametype.zombiekilledlootcachecount % 10;
    level.brgametype.zombiekilledlootcachecount++;
    items = getscriptcachecontents( "zombie_death", index );

    if ( isdefined( items ) )
        _id_E05413A53B5D9167 = _id_552B8E4EA5FF7DF1::lootspawnitemlist( items, 0 );
}

playernakeddroploadout()
{
    if ( _id_2CEDCC356F1B9FC8::playeriszombie() )
        return;
    else
        _id_1E4A61DB11011446::nakeddrophandleloadout();
}

laststandallowed( damagedata )
{
    if ( _id_2CEDCC356F1B9FC8::playeriszombie() )
    {
        _id_EB938D26F29141AA = isdefined( damagedata.attacker ) && damagedata.attacker entisvehicle();

        if ( !_id_EB938D26F29141AA || !level.brgametype.zombievehiclelaststand )
            return 0;

        thread playerpowerrestartallcooldowns( level.brgametype.zombie );
        thread playerzombielaststandrevive();
        thread playerzombievehiclehittoss( damagedata );
        thread playerzombiedovehicledamageimmunity();
    }

    return 1;
}

playerzombievehiclehittoss( damagedata )
{
    _id_33A88760203205C8 = 500;
    _id_7188C5AD86F4BCDB = 90;
    _id_D511B11429292C8A = 60;
    _id_0C009F1B4120B07D = damagedata.direction_vec;
    _id_7973EC383855B23B = vectortoyaw( _id_0C009F1B4120B07D );
    _id_EE8D7FD04AE3145C = _id_7188C5AD86F4BCDB;
    _id_517B722235216A01 = _id_D511B11429292C8A;

    if ( scripts\engine\utility::cointoss() )
        _id_517B722235216A01 = _id_517B722235216A01 * -1;

    _id_517B722235216A01 = _id_517B722235216A01 + _id_7973EC383855B23B;
    _id_50600B9245D45105 = ( _id_EE8D7FD04AE3145C, _id_517B722235216A01, 0 );
    playerapplyjumpvelocity( _id_50600B9245D45105, _id_33A88760203205C8, 1.0 );
}

playerzombiedovehicledamageimmunity()
{
    self endon( "disconnect" );
    self.vehicledamageimmunity = 1;
    duration = getdvarfloat( "dvar_E466123B801BD8D4", 1.0 );
    wait( duration );
    self.vehicledamageimmunity = undefined;
}

playerzombielaststandrevive()
{
    level endon( "game_ended" );
    self endon( "last_stand_finished" );
    self endon( "death_or_disconnect" );
    self waittill( "last_stand_transition_done" );
    waittillframeend;
    self setlaststandselfreviving( 1 );
    self.isselfreviving = 1;
    self.laststandreviveent makeunusable();
    _id_6BCC6405C250ECB4 = self.laststandreviveent;
    _id_6BCC6405C250ECB4.usetime = getdvarfloat( "dvar_CA5A718F09F3343F", 3.0 ) * 1000;

    if ( !isdefined( _id_6BCC6405C250ECB4.curprogress ) )
        _id_6BCC6405C250ECB4.curprogress = 0;

    while ( scripts\mp\utility\player::isreallyalive( self ) && _id_6BCC6405C250ECB4.curprogress < _id_6BCC6405C250ECB4.usetime )
    {
        if ( self isinexecutionvictim() )
        {
            waitframe();
            continue;
        }

        if ( !isdefined( _id_6BCC6405C250ECB4.userate ) )
            _id_6BCC6405C250ECB4.userate = 0;

        _id_6BCC6405C250ECB4.curprogress = _id_6BCC6405C250ECB4.curprogress + level.frameduration * _id_6BCC6405C250ECB4.userate;
        _id_6BCC6405C250ECB4.userate = 1;
        scripts\mp\gameobjects::updateuiprogress( _id_6BCC6405C250ECB4, 1 );

        if ( _id_6BCC6405C250ECB4.curprogress >= _id_6BCC6405C250ECB4.usetime )
            break;

        waitframe();
    }

    _id_6BCC6405C250ECB4.usetime = undefined;
    _id_6BCC6405C250ECB4.curprogress = undefined;
    _id_6BCC6405C250ECB4.userate = undefined;
    scripts\mp\laststand::finishreviveplayer( "self_revive_success", self );
    self setlaststandselfreviving( 0 );
}

droponplayerdeath()
{
    if ( _id_2CEDCC356F1B9FC8::playeriszombie() )
        return 1;

    return 0;
}

onplayerkilled( _id_642470E1ABC1BBF9 )
{
    if ( !istrue( level.br_prematchstarted ) )
        return;

    if ( level.gameended )
        return;

    victim = _id_642470E1ABC1BBF9.victim;
    attacker = _id_642470E1ABC1BBF9.attacker;

    if ( !isdefined( attacker ) || !isplayer( attacker ) || !isdefined( victim ) )
        return;

    if ( victim shouldhumanspawntags( attacker ) )
        victim thread spawnhumandogtags( victim, attacker );

    if ( level.brgametype.zombiedropstags && victim shouldzombiespawntags( attacker ) )
        victim thread spawnzombiedogtags( victim, attacker );

    if ( victim shouldspawnloot( attacker ) )
        victim thread playerzombiedroploot();
}

shouldspawndropscommon( attacker )
{
    if ( isdefined( attacker ) && attacker == self )
        return 0;

    if ( level.teambased && isdefined( attacker ) && isdefined( attacker.team ) && attacker.team == self.team )
        return 0;

    if ( isdefined( attacker ) && !isdefined( attacker.team ) && ( attacker.classname == "trigger_hurt" || attacker.classname == "worldspawn" ) )
        return 0;

    if ( isagent( self ) || isagent( attacker ) )
        return 0;

    return 1;
}

shouldspawnloot( attacker )
{
    if ( !shouldspawndropscommon( attacker ) )
        return 0;

    if ( !_id_2CEDCC356F1B9FC8::playeriszombie() )
        return 0;

    return 1;
}

shouldhumanspawntags( attacker )
{
    if ( !shouldspawndropscommon( attacker ) )
        return 0;

    if ( _id_2CEDCC356F1B9FC8::playeriszombie() )
        return 0;

    return 1;
}

getoldestdogtags()
{
    _id_BD5CE62F44CDD23B = undefined;

    foreach ( dogtags in level.brgametype.respawntags )
    {
        if ( !isdefined( _id_BD5CE62F44CDD23B ) || dogtags.lastusedtime < _id_BD5CE62F44CDD23B.lastusedtime )
            _id_BD5CE62F44CDD23B = dogtags;
    }

    return _id_BD5CE62F44CDD23B;
}

spawndogtags()
{
    dogtags = undefined;

    if ( level.brgametype.respawntagsfreed.size > 0 )
    {
        lastindex = level.brgametype.respawntagsfreed.size - 1;
        dogtags = level.brgametype.respawntagsfreed[lastindex];
        level.brgametype.respawntagsfreed[lastindex] = undefined;
        dogtags.trigger triggerenable();
        dogtags.visuals[0] dontinterpolate();
    }
    else if ( level.brgametype.respawntags.size >= level.brgametype.maxdogtags )
        dogtags = getoldestdogtags();
    else
    {
        _id_77CD411079EEFC7F = "military_dogtags_iw8_blue";
        _id_EFFF9C2576FE4EF0 = 16;
        visuals[0] = spawn( "script_model", ( 0, 0, 0 ) );
        visuals[0] setmodel( _id_77CD411079EEFC7F );
        visuals[0] hudoutlineenable( "outlinefill_depth_white" );
        visuals[0] setasgametypeobjective();
        visuals[0].usetype = 1;
        visuals[0].isuseobject = 1;
        useteam = "any";
        usetime = 0;
        trigger = visuals[0];

        if ( level.brgametype.tagautopickup )
        {
            trigger = spawn( "trigger_radius", ( 0, 0, 0 ), 0, 32, 32 );
            trigger.isuseobject = 1;
            visuals[0].isuseobject = undefined;
        }

        dogtags = scripts\mp\gameobjects::createuseobject( useteam, trigger, visuals, ( 0, 0, _id_EFFF9C2576FE4EF0 ) );
        dogtags.onuse = ::onuse;
        dogtags scripts\mp\gameobjects::setusetime( usetime );
        dogtags _id_2CEDCC356F1B9FC8::_id_199ED650E3E5B30C();
    }

    dogtags.inuse = 1;
    dogtags.lastusedtime = gettime();
    _id_9E72179BF85188D2 = "" + dogtags getentitynumber();
    level.brgametype.respawntags[_id_9E72179BF85188D2] = dogtags;
    return dogtags;
}

setupdogtags( dogtags, origin )
{
    _id_C0A5049A49AD5FC7 = 14;
    _id_67A8341466780B48 = ( 0, 0, 36 );
    pos = origin + ( 0, 0, _id_C0A5049A49AD5FC7 );
    dogtags.curorigin = pos;

    if ( level.brgametype.tagautopickup )
        dogtags.trigger.origin = pos;

    dogtags.visuals[0].origin = pos;
    dogtags scripts\mp\gameobjects::initializetagpathvariables();
    dogtags.interactteam = "any";
    dogtags.visuals[0] showtozombies();
    dogtags.ownerteam = "neutral";

    if ( isdefined( dogtags.objidnum ) )
    {
        if ( dogtags.objidnum != -1 )
        {
            objid = dogtags.objidnum;
            scripts\mp\objidpoolmanager::update_objective_state( objid, "active" );
            scripts\mp\objidpoolmanager::update_objective_position( objid, origin + _id_67A8341466780B48 );
            scripts\mp\objidpoolmanager::update_objective_setbackground( objid, 1 );
            scripts\mp\objidpoolmanager::objective_set_play_intro( dogtags.objidnum, 0 );
            scripts\mp\objidpoolmanager::objective_set_play_outro( dogtags.objidnum, 0 );
            dogtags scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_dogtags_friendly", "waypoint_dogtags" );
            dogtags scripts\mp\gameobjects::setvisibleteam( "any" );
            scripts\mp\objidpoolmanager::objective_playermask_hidefromall( dogtags.objidnum );
        }
    }

    playsoundatpos( pos, "mp_killconfirm_tags_drop" );
    dogtags.visuals[0] scriptmodelplayanim( "mp_dogtag_spin" );
}

spawnhumandogtags( victim, attacker )
{
    dogtags = spawndogtags();
    setupdogtags( dogtags, victim.origin );
}

shouldzombiespawntags( attacker )
{
    if ( !shouldspawndropscommon( attacker ) )
        return 0;

    if ( _id_2CEDCC356F1B9FC8::playeriszombie() && self.numconsumed > 0 )
        return 1;

    return 0;
}

spawnzombiedogtags( victim, attacker )
{
    dogtags = spawndogtags();
    setupdogtags( dogtags, victim.origin );

    if ( self.numconsumed > 1 )
    {
        dropstruct = _id_7E52B56769FA7774::_id_7B9F3966A7A42003();

        for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < self.numconsumed; _id_AC0E594AC96AA3A8++ )
        {
            _id_CB4FAD49263E20C4 = _id_7E52B56769FA7774::getitemdroporiginandangles( dropstruct, victim.origin, victim.angles, victim, undefined, undefined, 0 );

            if ( !isdefined( _id_CB4FAD49263E20C4 ) || _id_CB4FAD49263E20C4.origin == ( 0, 0, 0 ) )
                _id_CB4FAD49263E20C4.origin = victim.origin;

            dogtags = spawndogtags();
            setupdogtags( dogtags, _id_CB4FAD49263E20C4.origin );
        }
    }
}

removetags( dogtags, _id_3737240CEFE2C793 )
{
    dogtags scripts\mp\gameobjects::allowuse( "none" );
    dogtags.inuse = 0;
    _id_9E72179BF85188D2 = "" + dogtags getentitynumber();
    level.brgametype.respawntags[_id_9E72179BF85188D2] = undefined;
    level.brgametype.respawntagsfreed[level.brgametype.respawntagsfreed.size] = dogtags;
    playfx( level.conf_fx["vanish"], dogtags.curorigin );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( dogtags.objidnum );
    dogtags.visuals[0] hide();
    dogtags.trigger triggerdisable();
}

playervisibilityrespawntags( _id_7551427E1BE613F1 )
{
    foreach ( tag in level.brgametype.respawntags )
    {
        if ( isdefined( tag.visuals[0] ) )
            tag.visuals[0] respawntagvisibility( self );
    }
}

respawntagvisibility( player )
{
    if ( player _id_2CEDCC356F1B9FC8::playeriszombie() )
    {
        self showtoplayer( player );

        if ( !level.brgametype.tagautopickup )
            self enableplayeruse( player );
    }
    else
    {
        self hidefromplayer( player );

        if ( !level.brgametype.tagautopickup )
            self disableplayeruse( player );
    }
}

showtozombies()
{
    self hide();

    if ( !level.brgametype.tagautopickup )
    {
        self makeusable();
        self setcursorhint( "HINT_NOICON" );
        self sethintstring( &"MP_ZXP/PICKUP" );
        self setuseprioritymax();
    }

    foreach ( player in level.players )
        respawntagvisibility( player );
}

playercanusetags( player )
{
    return player _id_2CEDCC356F1B9FC8::playeriszombie();
}

onuse( player )
{
    if ( !playercanusetags( player ) )
        return;

    self.trigger playsound( "mp_killconfirm_tags_pickup" );
    player.numconsumed++;
    player playerhudupdatenumconsumed();

    if ( player.numconsumed >= level.brgametype.zombienumtoconsume )
        player playerzombiebacktohuman();

    thread removetags( self );
}

playerzombieupdatetagobjectives()
{
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );
    _id_89A9BD2ED8D2C87F = 0.5;

    for (;;)
    {
        _id_B83277038678746D = sortbydistance( level.brgametype.respawntags, self.origin );
        _id_C1B3D6B48E668752 = 0;

        foreach ( tag in _id_B83277038678746D )
        {
            distsq = undefined;

            if ( _id_C1B3D6B48E668752 < level.brgametype.maxtagsvisible && level.brgametype.maxtagradiussq > 0 )
                distsq = distance2dsquared( self.origin, tag.origin );

            if ( _id_C1B3D6B48E668752 < level.brgametype.maxtagsvisible && ( level.brgametype.maxtagradiussq == 0 || distsq < level.brgametype.maxtagradiussq ) )
            {
                _id_C1B3D6B48E668752++;
                scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( tag.objidnum, self );
                continue;
            }

            _id_C1B3D6B48E668752 = level.brgametype.maxtagsvisible;
            scripts\mp\objidpoolmanager::objective_playermask_hidefrom( tag.objidnum, self );
        }

        wait( _id_89A9BD2ED8D2C87F );
    }
}

_id_6DE14DAC59E69E69()
{
    foreach ( tag in level.brgametype.respawntags )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( tag.objidnum, self );
}

circletimernext( circleindex )
{
    if ( istrue( level.brgametype.zombierespawning ) )
    {
        if ( getdvarint( "dvar_26476F821DF5D01F", 0 ) == 0 )
            return;

        _id_837F5B5677ADC8FE = _id_67708F418B1FAC79::getgulagclosedcircleindex();

        if ( circleindex >= _id_837F5B5677ADC8FE )
            level.brgametype.zombierespawning = 0;
    }
}

setupzombierespawnglobaltimer()
{
    if ( istrue( level.br_circle_disabled ) )
        return;

    if ( getdvarint( "dvar_26476F821DF5D01F", 0 ) == 0 )
        return;

    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    _id_D3926F6303934FF8 = "hudsmall";
    _id_3C99DE187802DF31 = 0.8;
    _id_9F83FCC7A160F4E6 = -100;
    _id_ECF4E1D902A24C73 = -290;
    _id_1461CE6F6B22E869 = 90;
    _id_2948CA54731DE34F = _id_67708F418B1FAC79::gettimetogulagclosed();
    _id_AD40392184F37BAC = createhudelem( _id_D3926F6303934FF8, _id_3C99DE187802DF31 );
    _id_AD40392184F37BAC scripts\mp\hud_util::setpoint( "RIGHT", "CENTER", _id_ECF4E1D902A24C73, _id_9F83FCC7A160F4E6 );
    _id_AD40392184F37BAC.label = &"MP_ZXP/RESPAWN_ALLOWED";
    _id_32E699637BC9C0BB = scripts\mp\hud_util::createservertimer( _id_D3926F6303934FF8, _id_3C99DE187802DF31 );
    _id_32E699637BC9C0BB scripts\mp\hud_util::setpoint( "LEFT", "CENTER", _id_ECF4E1D902A24C73, _id_9F83FCC7A160F4E6 );
    _id_32E699637BC9C0BB settenthstimer( _id_2948CA54731DE34F );
    _id_FC133E1A9D8063A1 = getdvarint( "dvar_BF9AAA13E23F04AE", _id_1461CE6F6B22E869 );
    _id_6113FC02B7117903 = _id_2948CA54731DE34F - _id_FC133E1A9D8063A1;

    if ( _id_6113FC02B7117903 > 0 )
    {
        wait( _id_6113FC02B7117903 );
        _id_32E699637BC9C0BB.color = ( 1, 0, 0 );
        _id_32E699637BC9C0BB thread huddopulse();
        wait( _id_FC133E1A9D8063A1 );
    }
    else
        wait( _id_2948CA54731DE34F );

    wait 2;
    _id_32E699637BC9C0BB destroy();
    _id_AD40392184F37BAC destroy();
}

kioskreviveplayer( _id_4AC881E2A39322A5, _id_57D71760971F748F )
{
    player = self;
    level endon( "game_ended" );
    player endon( "disconnect" );
    player notify( "gulag_auto_win" );

    if ( istrue( player.respawningfromtoken ) )
        return;

    player playersetisbecomingzombie( 1 );
    [_id_84E2123AACA9A965, _id_DF2FBB13C226BE75] = _id_67708F418B1FAC79::playerhandlesponsor( _id_4AC881E2A39322A5, _id_57D71760971F748F, 0, 1 );
    player.respawningfromtoken = 1;
    _id_1476E0F78320A501 = player _id_67708F418B1FAC79::playerwaitforprestreaming();

    if ( _id_1476E0F78320A501 )
        player scripts\mp\utility\lower_message::setlowermessageomnvar( "clear_lower_msg" );

    player scripts\mp\hud_message::clearsplashqueue();
    player playerzombierespawn( 0 );
    _id_9D45F503AE900A7D = "br_gulag_kiosk_redeploy";
    _id_1F0A356715870574 = _id_4AC881E2A39322A5;
    player thread scripts\mp\hud_message::showsplash( _id_9D45F503AE900A7D, undefined, _id_4AC881E2A39322A5 );
    player.respawningfromtoken = undefined;
}

playerzombiesetuphud()
{
    _id_5F243323AF462B6A = -60;
    _id_5522365EA860860B = 120;
    _id_748F3DDC7533D2A9 = 180;
    self.hudnumconsumed = playercreatehudelement( _id_5F243323AF462B6A, _id_5522365EA860860B, "right", "middle", "center", "middle", &"MP_ZXP/NUM_CONSUMED", 0 );
    self.hudnumtoconsume = playercreatehudelement( _id_5F243323AF462B6A, _id_5522365EA860860B, "left", "middle", "center", "middle", &"MP_ZXP/NUM_TO_CONSUME", level.brgametype.zombienumtoconsume );
    self.hudzombie = playercreatehudelement( 0, _id_748F3DDC7533D2A9, "center", "middle", "center", "middle", &"MP_ZXP/ZOMBIE" );
}

playerzombiedestroyhud()
{
    if ( isdefined( self.hudnumconsumed ) )
        thread delaydestroyhudelem( self.hudnumconsumed, 1.5 );

    if ( isdefined( self.hudnumtoconsume ) )
        thread delaydestroyhudelem( self.hudnumtoconsume, 1.5 );

    if ( isdefined( self.hudzombie ) )
        self.hudzombie destroy();

    self.hudnumconsumed = undefined;
    self.hudnumtoconsume = undefined;
    self.hudzombie = undefined;
}

delaydestroyhudelem( _id_94480E1669B7FF0D, _id_74B5B12BB6514385 )
{
    wait( _id_74B5B12BB6514385 );

    if ( isdefined( _id_94480E1669B7FF0D ) )
        _id_94480E1669B7FF0D destroy();
}

playercreatehudelement( xoffset, yoffset, alignx, aligny, horzalign, vertalign, label, value )
{
    _id_94480E1669B7FF0D = scripts\mp\hud_util::createfontstring( "default", 1.5 );
    _id_94480E1669B7FF0D.x = xoffset;
    _id_94480E1669B7FF0D.y = yoffset;
    _id_94480E1669B7FF0D.alignx = alignx;
    _id_94480E1669B7FF0D.aligny = aligny;
    _id_94480E1669B7FF0D.horzalign = horzalign;
    _id_94480E1669B7FF0D.vertalign = vertalign;
    _id_94480E1669B7FF0D.alpha = 1;
    _id_94480E1669B7FF0D.glowalpha = 0;
    _id_94480E1669B7FF0D.hidewheninmenu = 1;
    _id_94480E1669B7FF0D.archived = 0;

    if ( isdefined( label ) )
        _id_94480E1669B7FF0D.label = label;

    if ( isdefined( value ) )
        _id_94480E1669B7FF0D setvalue( value );

    return _id_94480E1669B7FF0D;
}

playerhudupdatenumconsumed()
{
    _id_6BDB7EFE3AF494BA = ( 0, 1, 0 );
    self.hudnumconsumed setvalue( self.numconsumed );
    self.hudnumconsumed thread huddopulse( _id_6BDB7EFE3AF494BA );
    self.hudnumtoconsume thread huddopulse( _id_6BDB7EFE3AF494BA );
}

createhudelem( font, fontscale, team )
{
    if ( isdefined( team ) )
        _id_372B658AEA9D2487 = newteamhudelem( team );
    else
        _id_372B658AEA9D2487 = newhudelem();

    _id_372B658AEA9D2487.elemtype = "font";
    _id_372B658AEA9D2487.font = font;
    _id_372B658AEA9D2487.fontscale = fontscale;
    _id_372B658AEA9D2487.basefontscale = fontscale;
    _id_372B658AEA9D2487.x = 0;
    _id_372B658AEA9D2487.y = 0;
    _id_372B658AEA9D2487.width = 0;
    _id_372B658AEA9D2487.height = int( level.fontheight * fontscale );
    _id_372B658AEA9D2487.xoffset = 0;
    _id_372B658AEA9D2487.yoffset = 0;
    _id_372B658AEA9D2487.children = [];
    _id_372B658AEA9D2487 scripts\mp\hud_util::setparent( level.uiparent );
    _id_372B658AEA9D2487.hidden = 0;
    _id_372B658AEA9D2487.alpha = 1;
    return _id_372B658AEA9D2487;
}

huddopulse( _id_A1C90D2E290C03FD )
{
    self endon( "death" );

    if ( istrue( self.pulsing ) )
        return;

    _id_CC2C2F3EAC3C7BD2 = 0.5;
    _id_5F2809F4E8852C13 = 4;
    self.pulsing = 1;
    _id_B96028986997E29C = self.fontscale;
    _id_672265C8E01995A1 = self.color;

    if ( isdefined( _id_A1C90D2E290C03FD ) )
        self.color = _id_A1C90D2E290C03FD;

    self changefontscaleovertime( _id_CC2C2F3EAC3C7BD2 );
    self.fontscale = _id_5F2809F4E8852C13;
    wait( _id_CC2C2F3EAC3C7BD2 );
    self changefontscaleovertime( _id_CC2C2F3EAC3C7BD2 );
    self.fontscale = _id_B96028986997E29C;
    wait( _id_CC2C2F3EAC3C7BD2 );
    self.color = _id_672265C8E01995A1;
    self.pulsing = undefined;
}

circlesetup()
{
    level.br_level.br_circledelaytimes[1] = level.br_level.br_circledelaytimes[0];
    level.br_level.br_circledelaytimes[0] = 1;
    level.br_level.br_circleclosetimes[0] = 1;
    level.br_level.br_circleshowdelaydanger[0] = 1;
}

createc130pathstruct( _id_B2D2EEC29DBABA05 )
{
    _id_F9CBFF5134DA960B = ( level.br_level.br_circlecenters[1][0], level.br_level.br_circlecenters[1][1], 0 );
    _id_E5BD279D3767139F = level.br_level.br_circleradii[1];
    c130pathstruct = _id_45B2B4A889E633FA::createtestc130path( _id_F9CBFF5134DA960B, _id_E5BD279D3767139F, _id_B2D2EEC29DBABA05 );
    return c130pathstruct;
}

addtoc130infil()
{
    thread kickplayersatcircleedge();
}

kickplayersatcircleedge()
{
    level endon( "game_ended" );
    self endon( "death" );
    _id_432421C6EC2BFCD9 = distance( self.pathstruct.startpt, self.pathstruct.endptui );
    _id_42F65B4B53C1F5D4 = _id_432421C6EC2BFCD9 / _id_45B2B4A889E633FA::getc130speed() - 5;
    wait( _id_42F65B4B53C1F5D4 );

    foreach ( player in level.players )
    {
        if ( isdefined( player ) && isdefined( player.br_infil_type ) && player.br_infil_type == "c130" && !isdefined( player.jumptype ) )
        {
            player.jumptype = "outOfBounds";
            player notify( "halo_kick_c130" );
        }
    }
}

addtoteamlives( player, team )
{
    player playerupdatealivecounthuman();
}

removefromteamlives( player, team )
{
    player playerupdatealivecounthuman();
}

playerzombiestatechange( _id_E2C92CCEDE3B063E )
{
    team = self.team;
    scripts\mp\utility\teams::validatealivecount( "mode", team, self );
    playerupdatealivecounthuman();

    if ( istrue( _id_E2C92CCEDE3B063E ) )
        [[ level.updategameevents ]]();
}

playerupdatealivecounthuman()
{
    team = self.team;
    level.teamdata[team]["aliveCountHuman"] = 0;

    foreach ( player in level.teamdata[team]["alivePlayers"] )
    {
        if ( !player _id_2CEDCC356F1B9FC8::playeriszombie() && !player playerisbecomingzombie() )
            level.teamdata[team]["aliveCountHuman"]++;
    }
}

postupdategameevents()
{
    if ( istrue( level.br_debugsolotest ) || level.gameended )
        return;

    _id_9B38D0E276C29D82 = [];
    _id_B163962774DEBC06 = undefined;

    foreach ( team in level.teamnamelist )
    {
        _id_652F47620AC4713F = level.teamdata[team]["teamCount"];

        if ( _id_652F47620AC4713F > 0 )
        {
            if ( level.teamdata[team]["aliveCountHuman"] > 0 )
            {
                if ( isdefined( _id_B163962774DEBC06 ) )
                    return;

                _id_B163962774DEBC06 = team;
                continue;
            }

            if ( level.teamdata[team]["aliveCount"] > 0 )
                _id_9B38D0E276C29D82[_id_9B38D0E276C29D82.size] = team;
        }
    }

    _id_5FF08E2D8E068B53 = scripts\mp\utility\script::quicksort( _id_9B38D0E276C29D82, ::sortbylastzombietime );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_5FF08E2D8E068B53.size; _id_AC0E594AC96AA3A8++ )
    {
        team = _id_5FF08E2D8E068B53[_id_AC0E594AC96AA3A8];
        teamplacement = _id_AC0E594AC96AA3A8 + 2;
        thread _id_1E4A61DB11011446::onsquadeliminatedplacement( team, teamplacement, 0, 1 );
    }

    thread scripts\mp\gamelogic::endgame( _id_B163962774DEBC06, game["end_reason"]["enemies_eliminated"] );
}

sortbylastzombietime( left, right )
{
    _id_10374502ED47925D = level.teamdata[left]["lastZombieTime"];
    _id_1B1911B9658C8A60 = level.teamdata[right]["lastZombieTime"];
    return _id_10374502ED47925D >= _id_1B1911B9658C8A60;
}

_id_561F3BEAF33B80C0( team )
{
    if ( !isdefined( level.teamdata[team]["aliveCountHuman"] ) )
        return level.teamdata[team]["aliveCount"];
    else
        return level.teamdata[team]["aliveCountHuman"];
}

playerstartpowers( _id_6C9D93D4584E15F7 )
{
    thread playerpowerssetupkeybindings( _id_6C9D93D4584E15F7 );
    thread playerpowershud( _id_6C9D93D4584E15F7 );
    thread playerpowersmonitorinput( _id_6C9D93D4584E15F7 );
    thread playerpowersupdateongamepadchange( _id_6C9D93D4584E15F7 );
    thread _id_539DC27334184E77( _id_6C9D93D4584E15F7 );
    thread playerpowerscleanup( _id_6C9D93D4584E15F7 );
}

addpowerbutton( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB, _id_F6E93DDAB08E9BE9, _id_BCDD0CD7EB4BF7C8, _id_FB3A9F61FC511DB4, _id_1A5269312D3A0B00, cleanupfunc, _id_7939D347ADE41DA0, label, labelpc, cooldownsec )
{
    _id_2AFD19924DAD2B4F = _func_2EF675C13CA1C4AF( "dvar_B75FF36B09040395", _id_EF7579BE51267BDB );

    if ( getdvarint( _id_2AFD19924DAD2B4F, 1 ) == 0 )
        return;

    _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB] = spawnstruct();
    _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB].binding = _id_F6E93DDAB08E9BE9;
    _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB].bindingpc = _id_BCDD0CD7EB4BF7C8;
    _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB].func = _id_FB3A9F61FC511DB4;
    _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB]._id_1A5269312D3A0B00 = _id_1A5269312D3A0B00;
    _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB].cleanupfunc = cleanupfunc;
    _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB]._id_7939D347ADE41DA0 = _id_7939D347ADE41DA0;
    _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB].label = label;
    _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB].labelpc = labelpc;
    _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB].cooldownsec = cooldownsec;
}

_id_539DC27334184E77( _id_6C9D93D4584E15F7 )
{
    foreach ( _id_EF7579BE51267BDB, _id_8723CFF430A72C82 in _id_6C9D93D4584E15F7.powers )
    {
        if ( isdefined( _id_8723CFF430A72C82._id_1A5269312D3A0B00 ) )
            self thread [[ _id_8723CFF430A72C82._id_1A5269312D3A0B00 ]]( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
    }
}

playerpowerssetupkeybindings( _id_6C9D93D4584E15F7 )
{
    if ( isbot( self ) )
        return;

    foreach ( _id_EF7579BE51267BDB, _id_8723CFF430A72C82 in _id_6C9D93D4584E15F7.powers )
    {
        self notifyonplayercommand( _id_EF7579BE51267BDB, _id_8723CFF430A72C82.binding );

        if ( isdefined( _id_8723CFF430A72C82.bindingpc ) )
            self notifyonplayercommand( _id_EF7579BE51267BDB, _id_8723CFF430A72C82.bindingpc );
    }
}

playerpowerscleanupkeybindings( _id_6C9D93D4584E15F7 )
{
    if ( isbot( self ) )
        return;

    foreach ( _id_EF7579BE51267BDB, _id_8723CFF430A72C82 in _id_6C9D93D4584E15F7.powers )
    {
        self notifyonplayercommandremove( _id_EF7579BE51267BDB, _id_8723CFF430A72C82.binding );

        if ( isdefined( _id_8723CFF430A72C82.bindingpc ) )
            self notifyonplayercommandremove( _id_EF7579BE51267BDB, _id_8723CFF430A72C82.bindingpc );
    }
}

playerpowersaddhudelem( label, labelpc, currenthudy )
{
    _id_94480E1669B7FF0D = scripts\mp\hud_util::createfontstring( "default", 1.5 );
    _id_94480E1669B7FF0D.x = 15;
    _id_94480E1669B7FF0D.y = currenthudy;
    _id_94480E1669B7FF0D.alignx = "left";
    _id_94480E1669B7FF0D.aligny = "top";
    _id_94480E1669B7FF0D.horzalign = "left_adjustable";
    _id_94480E1669B7FF0D.vertalign = "top_adjustable";
    _id_94480E1669B7FF0D.alpha = 1;
    _id_94480E1669B7FF0D.glowalpha = 0;
    _id_94480E1669B7FF0D.hidewheninmenu = 1;
    _id_94480E1669B7FF0D.archived = 0;

    if ( isdefined( labelpc ) && !scripts\engine\utility::is_player_gamepad_enabled() )
        _id_94480E1669B7FF0D.label = labelpc;
    else if ( isdefined( label ) )
        _id_94480E1669B7FF0D.label = label;

    barelem = scripts\mp\hud_util::createbar( ( 1, 1, 1 ), 160, 14 );
    barelem.x = 13;
    barelem.y = currenthudy;
    barelem.alignx = "left";
    barelem.aligny = "top";
    barelem.horzalign = "left_adjustable";
    barelem.vertalign = "top_adjustable";
    barelem shiftbar();
    barelem.archived = 0;
    barelem.hidewheninmenu = 1;
    barelem.bar.archived = 0;
    barelem.bar.hidewheninmenu = 1;
    _id_94480E1669B7FF0D.barelem = barelem;
    return _id_94480E1669B7FF0D;
}

shiftbar( point, relativepoint, xoffset, yoffset )
{
    self.bar.horzalign = self.horzalign;
    self.bar.vertalign = self.vertalign;
    self.bar.alignx = "left";
    self.bar.aligny = self.aligny;
    self.bar.y = self.y + 2;
    self.bar.x = self.x + 2;
    scripts\mp\hud_util::updatebar( self.bar.frac );
}

playerpowershud( _id_6C9D93D4584E15F7 )
{
    _id_6E2C1BD41E3923D6 = 200;
    _id_6D8E1E3CBD28DE50 = 18;
    currenthudy = _id_6E2C1BD41E3923D6;
    self.powershud = [];

    foreach ( _id_EF7579BE51267BDB, _id_8723CFF430A72C82 in _id_6C9D93D4584E15F7.powers )
    {
        if ( isdefined( _id_8723CFF430A72C82.label ) )
        {
            self.powershud[_id_EF7579BE51267BDB] = playerpowersaddhudelem( _id_8723CFF430A72C82.label, _id_8723CFF430A72C82.labelpc, currenthudy );
            self.powershud[_id_EF7579BE51267BDB].incooldown = 0;
            currenthudy = currenthudy + _id_6D8E1E3CBD28DE50;
        }
    }
}

playerpowerscleanuphud( _id_6C9D93D4584E15F7 )
{
    foreach ( _id_94480E1669B7FF0D in self.powershud )
    {
        if ( isdefined( _id_94480E1669B7FF0D ) )
        {
            if ( isdefined( _id_94480E1669B7FF0D.barelem ) )
                _id_94480E1669B7FF0D.barelem scripts\mp\hud_util::destroyelem();

            _id_94480E1669B7FF0D destroy();
        }
    }

    self.powershud = undefined;
}

playerpowerscleanup( _id_6C9D93D4584E15F7 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    scripts\engine\utility::waittill_any_3( "death", "zombie_unset", "zombie_set" );
    thread playerpowerscleanupkeybindings( _id_6C9D93D4584E15F7 );
    thread playerpowerscleanuppowers( _id_6C9D93D4584E15F7 );
    thread playerpowerscleanuphud( _id_6C9D93D4584E15F7 );
}

playerpowerscleanuppowers( _id_6C9D93D4584E15F7 )
{
    foreach ( _id_EF7579BE51267BDB, _id_8723CFF430A72C82 in _id_6C9D93D4584E15F7.powers )
    {
        if ( isdefined( _id_8723CFF430A72C82.cleanupfunc ) )
            self thread [[ _id_8723CFF430A72C82.cleanupfunc ]]( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
    }
}

playerpowersmonitorinput( _id_6C9D93D4584E15F7 )
{
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );
    self endon( "zombie_set" );
    level endon( "game_ended" );

    if ( isbot( self ) )
        return;

    for (;;)
    {
        _id_EF7579BE51267BDB = playerpowerswaittillinputreturn( _id_6C9D93D4584E15F7 );

        if ( !isdefined( _id_EF7579BE51267BDB ) )
            continue;

        waittillframeend;

        if ( isdefined( self.powershud[_id_EF7579BE51267BDB] ) && self.powershud[_id_EF7579BE51267BDB].incooldown )
            continue;

        self thread [[ _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB].func ]]( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
    }
}

playerpowerswaittillinputreturn( _id_6C9D93D4584E15F7 )
{
    ent = spawnstruct();

    foreach ( _id_EF7579BE51267BDB, _id_8723CFF430A72C82 in _id_6C9D93D4584E15F7.powers )
        childthread scripts\engine\utility::waittill_string( _id_EF7579BE51267BDB, ent );

    ent waittill( "returned", msg );
    ent notify( "die" );
    return msg;
}

playerpowersupdateongamepadchange( _id_6C9D93D4584E15F7 )
{
    level endon( "game_ended" );
    self endon( "zombie_unset" );
    self endon( "zombie_set" );
    self endon( "death_or_disconnect" );

    if ( isbot( self ) )
        return;

    waittillframeend;
    _id_FD0EFA5C23BE8228 = scripts\engine\utility::is_player_gamepad_enabled();

    for (;;)
    {
        _id_890736E866204B96 = scripts\engine\utility::is_player_gamepad_enabled();

        if ( _id_890736E866204B96 != _id_FD0EFA5C23BE8228 )
        {
            _id_FD0EFA5C23BE8228 = _id_890736E866204B96;

            if ( _id_890736E866204B96 )
            {
                foreach ( _id_EF7579BE51267BDB, _id_8723CFF430A72C82 in _id_6C9D93D4584E15F7.powers )
                {
                    if ( isdefined( _id_8723CFF430A72C82.labelpc ) )
                        self.powershud[_id_EF7579BE51267BDB].label = _id_8723CFF430A72C82.label;
                }
            }
            else
            {
                foreach ( _id_EF7579BE51267BDB, _id_8723CFF430A72C82 in _id_6C9D93D4584E15F7.powers )
                {
                    if ( isdefined( _id_8723CFF430A72C82.labelpc ) )
                        self.powershud[_id_EF7579BE51267BDB].label = _id_8723CFF430A72C82.labelpc;
                }
            }
        }

        waitframe();
    }
}

playerpowerstartcooldown( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );
    self endon( "zombie_set" );
    self endon( "disableCooldown" );

    if ( !isdefined( self.powershud[_id_EF7579BE51267BDB] ) || istrue( self.powershud[_id_EF7579BE51267BDB].incooldown ) )
        return;

    _id_D671E5BEFA0CFAE3 = self.powershud[_id_EF7579BE51267BDB].barelem;

    if ( level.brgametype.powerscooldown && _id_D671E5BEFA0CFAE3.bar.frac > 0 )
    {
        self.powershud[_id_EF7579BE51267BDB].incooldown = 1;
        cooldownsec = _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB].cooldownsec;
        _id_B1F7CE0445D66AC9 = _func_2EF675C13CA1C4AF( "dvar_A726FD9FDB5568E5", _id_EF7579BE51267BDB );

        if ( getdvarint( _id_B1F7CE0445D66AC9, 0 ) != 0 )
            cooldownsec = getdvarint( _id_B1F7CE0445D66AC9, 0 );

        fraction = _id_D671E5BEFA0CFAE3.bar.frac;
        cooldownsec = cooldownsec * fraction;
        _id_D671E5BEFA0CFAE3.bar.color = ( 1, 0.6, 0 );
        _id_D671E5BEFA0CFAE3.bar scaleovertime( cooldownsec, 0, _id_D671E5BEFA0CFAE3.height );
        wait( cooldownsec );
        self.powershud[_id_EF7579BE51267BDB].incooldown = 0;
    }
    else
        _id_D671E5BEFA0CFAE3 scripts\mp\hud_util::updatebar( 0, 0 );

    _id_D671E5BEFA0CFAE3.bar.color = ( 1, 1, 1 );

    if ( isdefined( _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB]._id_7939D347ADE41DA0 ) )
        self [[ _id_6C9D93D4584E15F7.powers[_id_EF7579BE51267BDB]._id_7939D347ADE41DA0 ]]( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
}

playerpowerrestartallcooldowns( _id_6C9D93D4584E15F7 )
{
    if ( !isdefined( _id_6C9D93D4584E15F7 ) )
        return;

    self notify( "disableCooldown" );

    foreach ( _id_EF7579BE51267BDB, _id_8723CFF430A72C82 in _id_6C9D93D4584E15F7.powers )
    {
        if ( !isdefined( self.powershud[_id_EF7579BE51267BDB] ) )
            continue;

        self.powershud[_id_EF7579BE51267BDB].incooldown = 0;
        thread _id_120695737ABD78F4( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
    }
}

playerpowerresetpowers( _id_6C9D93D4584E15F7 )
{
    if ( !isdefined( _id_6C9D93D4584E15F7 ) )
        return;

    self notify( "disableCooldown" );

    foreach ( _id_EF7579BE51267BDB, _id_8723CFF430A72C82 in _id_6C9D93D4584E15F7.powers )
    {
        if ( !isdefined( self.powershud[_id_EF7579BE51267BDB] ) )
            continue;

        self.powershud[_id_EF7579BE51267BDB].incooldown = 0;
        _id_D671E5BEFA0CFAE3 = self.powershud[_id_EF7579BE51267BDB].barelem;
        _id_D671E5BEFA0CFAE3.bar.frac = 0.0;
        _id_D671E5BEFA0CFAE3 scripts\mp\hud_util::updatebar( _id_D671E5BEFA0CFAE3.bar.frac, 0 );
        thread playerpowerstartcooldown( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
    }
}

_id_120695737ABD78F4( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB )
{
    _id_D671E5BEFA0CFAE3 = self.powershud[_id_EF7579BE51267BDB].barelem;
    _id_D671E5BEFA0CFAE3.bar.frac = 1.0;
    _id_D671E5BEFA0CFAE3 scripts\mp\hud_util::updatebar( _id_D671E5BEFA0CFAE3.bar.frac, 0 );
    thread playerpowerstartcooldown( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
}

setupzombiepowers()
{
    if ( !level.brgametype.zombiepowersenabled )
        return;

    level.brgametype.zombie = spawnstruct();
    level.brgametype.zombie.powers = [];
    addpowerbutton( level.brgametype.zombie, "jump", "+smoke", undefined, ::playerzombiejump, undefined, ::playerzombiejumpcleanup, undefined, &"MP_ZXP/CHARGED_JUMP", undefined, 6 );
    addpowerbutton( level.brgametype.zombie, "jumpStop", "-smoke", undefined, ::playerzombiejumpstop );
    addpowerbutton( level.brgametype.zombie, "emp", "+frag", undefined, ::playerzombieemp, undefined, undefined, undefined, &"MP_ZXP/EMP", undefined, 6 );
    addpowerbutton( level.brgametype.zombie, "thermal", "+actionslot 3", "killstreak1", ::playerzombiethermal, undefined, ::playerzombiethermalcleanup, undefined, &"MP_ZXP/THERMAL", undefined, 6 );
}

playerzombiepowers()
{
    if ( !level.brgametype.zombiepowersenabled )
        return;

    thread playerstartpowers( level.brgametype.zombie );
}

playerzombiethermal( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB )
{
    if ( istrue( self.zombiethermalon ) )
    {
        self.zombiethermalon = undefined;
        self thermalvisionoff();

        if ( level.brgametype.powerscooldown )
        {
            self notify( "playerZombieThermalOff" );
            _id_D671E5BEFA0CFAE3 = self.powershud[_id_EF7579BE51267BDB].barelem;
            _id_D671E5BEFA0CFAE3 scripts\mp\hud_util::updatebar( _id_D671E5BEFA0CFAE3.bar.frac, 0 );
            thread playerpowerstartcooldown( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
        }
    }
    else
    {
        self.zombiethermalon = 1;
        self visionsetthermalforplayer( "flir_0_black_to_white" );
        self thermalvisionon();

        if ( level.brgametype.powerscooldown )
            thread playerzombiethermalupdate( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
        else
            self.powershud[_id_EF7579BE51267BDB].barelem scripts\mp\hud_util::hideelem();
    }
}

playerzombiethermalupdate( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );
    self endon( "playerZombieThermalOff" );
    _id_819F38EE529283FD = 10;
    _id_D671E5BEFA0CFAE3 = self.powershud[_id_EF7579BE51267BDB].barelem;
    _id_D671E5BEFA0CFAE3.bar.color = ( 0, 1, 0 );
    _id_D671E5BEFA0CFAE3.bar scaleovertime( _id_819F38EE529283FD, _id_D671E5BEFA0CFAE3.width, _id_D671E5BEFA0CFAE3.height );
    _id_396646EDB4BA78FE = getdvarfloat( "dvar_7A698200B6CE9C2B", _id_819F38EE529283FD );
    _id_5659806E75F89695 = _id_396646EDB4BA78FE * 1000;
    starttime = gettime();
    endtime = gettime() + _id_5659806E75F89695;

    while ( gettime() < endtime )
    {
        fraction = ( gettime() - starttime ) / _id_5659806E75F89695;
        _id_D671E5BEFA0CFAE3.bar.frac = fraction;
        waitframe();
    }

    _id_D671E5BEFA0CFAE3.bar.frac = 1;
    thread playerzombiethermal( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
}

playerzombiethermalcleanup( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB )
{
    if ( istrue( self.zombiethermalon ) )
    {
        self.zombiethermalon = undefined;
        self thermalvisionoff();
    }
}

playerzombiejump( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );
    self endon( "playerZombieJumpStop" );
    _id_2C602BB60DAB6883 = 0.025;
    _id_EA41C3F0BDBF3F3A = 0;
    _id_A2D1E16B613B535C = 0;
    _id_92B09CF3A4719720 = 1300;
    _id_3B3681F0D6AAE16E = 0.25;
    _id_47784F0C32FA1AE1 = 1;
    _id_4CA6E232B3A08AE5 = 3.0;
    _id_943D5ECBD9A29E50 = getdvarint( "dvar_5E1D6A08A06AAB7A", _id_EA41C3F0BDBF3F3A );
    _id_57BD73D0ECAEE169 = getdvarfloat( "dvar_2FC6C2DC7F9C722A", _id_2C602BB60DAB6883 );
    _id_EEC1CA5327266614 = getdvarfloat( "dvar_F3ADFE2BA0C4E72E", _id_3B3681F0D6AAE16E );
    _id_E5482B00771C4909 = getdvarint( "dvar_2A5201CCBCD3B1A1", _id_47784F0C32FA1AE1 );
    _id_6B00AA3867C7F0D9 = getdvarint( "dvar_69111E35067F9D8F", _id_4CA6E232B3A08AE5 );
    _id_F71D03F58AF1672A = getdvarfloat( "dvar_FD6822A1C2607510", _id_92B09CF3A4719720 );

    while ( !self secondaryoffhandbuttonpressed() )
        waitframe();

    _id_FFDFC86379CFC071 = getdvarint( "dvar_7C6A7CE1709F1EFF", _id_A2D1E16B613B535C );

    if ( _id_FFDFC86379CFC071 )
    {
        self.zombiejumplink = spawn( "script_model", self.origin );
        self.zombiejumplink setmodel( "tag_player" );
        self playerlinkto( self.zombiejumplink, "tag_player" );
    }

    self.zombiejumping = 1;
    zombiejumpbar = self.powershud[_id_EF7579BE51267BDB].barelem;
    fraction = 0.0;
    up = 1;
    _id_715D7709363E068C = undefined;

    while ( self secondaryoffhandbuttonpressed() )
    {
        zombiejumpbar scripts\mp\hud_util::updatebar( fraction, 0 );
        _id_9D6D9B43B9128E64 = fraction;

        if ( up )
        {
            fraction = fraction + _id_57BD73D0ECAEE169;

            if ( fraction >= 1 )
            {
                fraction = 1.0;

                if ( _id_943D5ECBD9A29E50 )
                    up = 0;
                else if ( _id_6B00AA3867C7F0D9 >= 0 )
                {
                    if ( !isdefined( _id_715D7709363E068C ) )
                    {
                        _id_715D7709363E068C = gettime() + _id_6B00AA3867C7F0D9 * 1000;
                        thread playerzombiejumpmaxholdwarning( _id_EF7579BE51267BDB, _id_6B00AA3867C7F0D9 );
                    }

                    if ( gettime() >= _id_715D7709363E068C )
                        break;
                }
            }

            if ( _id_9D6D9B43B9128E64 < _id_EEC1CA5327266614 && fraction >= _id_EEC1CA5327266614 )
                zombiejumpbar.bar.color = ( 0, 1, 0 );
        }
        else
        {
            fraction = fraction - _id_57BD73D0ECAEE169;

            if ( fraction <= 0 )
            {
                fraction = 0.0;
                up = 1;
            }

            if ( _id_9D6D9B43B9128E64 > _id_EEC1CA5327266614 && fraction <= _id_EEC1CA5327266614 )
                zombiejumpbar.bar.color = ( 1, 1, 1 );
        }

        waitframe();
    }

    self notify( "playerZombieJumpChargeEnd" );

    if ( _id_FFDFC86379CFC071 )
        self unlink();

    if ( fraction >= _id_EEC1CA5327266614 )
    {
        _id_DEE6508B0BA437C5 = self getplayerangles();
        playerapplyjumpvelocity( _id_DEE6508B0BA437C5, _id_F71D03F58AF1672A, fraction );
    }
    else if ( _id_E5482B00771C4909 )
        zombiejumpbar.bar.frac = 0;

    playerzombiejumpcleanup( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB, 1 );
    thread _id_A3335DA8620D547C();
}

_id_A3335DA8620D547C()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self setscriptablepartstate( "skydiveVfx", "enabled_zombie", 0 );
    wait 0.2;

    while ( !self isonground() )
        waitframe();

    self setscriptablepartstate( "skydiveVfx", "default", 0 );
}

playerapplyjumpvelocity( _id_44AAE8E966034513, _id_F71D03F58AF1672A, fraction )
{
    _id_355760D151D56E05 = 1;
    _id_DEE6508B0BA437C5 = _id_44AAE8E966034513;

    if ( getdvarint( "dvar_CE6D7D66848CDBCC", _id_355760D151D56E05 ) )
    {
        _id_AA4EA3B3807E1650 = get_ground_normal();

        if ( !isdefined( _id_AA4EA3B3807E1650 ) )
            _id_AA4EA3B3807E1650 = ( 0, 0, 1 );

        _id_0A2A227242F2C364 = ( 0, _id_DEE6508B0BA437C5[1], 0 );
        right = anglestoright( _id_0A2A227242F2C364 );
        fwd = vectorcross( _id_AA4EA3B3807E1650, right );
        _id_829CEAC2F5EC057B = vectortoangles( fwd );
        _id_B184911D23195923 = _id_829CEAC2F5EC057B[0];
        _id_98B04C3F8A107752 = -85;
        _id_9D83796E5DFB9A1C = _id_B184911D23195923;
        _id_5A112B1311CF05E5 = _id_DEE6508B0BA437C5[0];

        if ( _id_5A112B1311CF05E5 > _id_B184911D23195923 )
            _id_5A112B1311CF05E5 = _id_B184911D23195923;

        _id_E6BC250926C6D64D = getdvarfloat( "dvar_9EC479015407C245", -45.0 );
        _id_E6980F09269E2B33 = getdvarfloat( "dvar_9EE78301542E1FFB", 0.0 );
        frac = ( _id_5A112B1311CF05E5 - _id_98B04C3F8A107752 ) / ( _id_9D83796E5DFB9A1C - _id_98B04C3F8A107752 );
        _id_AEE49E405BF58492 = _id_E6980F09269E2B33 + frac * ( _id_E6BC250926C6D64D - _id_E6980F09269E2B33 );
        _id_DEE6508B0BA437C5 = ( _id_5A112B1311CF05E5 + _id_AEE49E405BF58492, _id_DEE6508B0BA437C5[1], _id_DEE6508B0BA437C5[2] );
    }

    _id_179DB9ACB8F30E85 = getdvarfloat( "dvar_CF56037C34EA141F", 0.0 );

    if ( _id_179DB9ACB8F30E85 != 0.0 )
        _id_DEE6508B0BA437C5 = ( _id_DEE6508B0BA437C5[0] + _id_179DB9ACB8F30E85, _id_DEE6508B0BA437C5[1], _id_DEE6508B0BA437C5[2] );

    dir = anglestoforward( _id_DEE6508B0BA437C5 );
    velocity = dir * fraction * _id_F71D03F58AF1672A;
    self setorigin( self.origin + ( 0, 0, 20 ) );
    self setvelocity( velocity );
}

playerzombiejumpstop( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB )
{
    if ( !istrue( self.zombiejumping ) )
        self notify( "playerZombieJumpStop" );
}

get_ground_normal( _id_31CAEF840B7AC074, debug )
{
    if ( !isdefined( _id_31CAEF840B7AC074 ) )
        ignore = self;
    else
        ignore = _id_31CAEF840B7AC074;

    if ( !isdefined( debug ) )
        debug = 0;

    ignorelist = [ ignore ];
    _id_D895C679F6A927E5 = [ self.origin ];

    for ( _id_AC0E594AC96AA3A8 = -1.0; _id_AC0E594AC96AA3A8 <= 1.0; _id_AC0E594AC96AA3A8 = _id_AC0E594AC96AA3A8 + 2.0 )
    {
        for ( _id_AC0E5C4AC96AAA41 = -1.0; _id_AC0E5C4AC96AAA41 <= 1.0; _id_AC0E5C4AC96AAA41 = _id_AC0E5C4AC96AAA41 + 2.0 )
        {
            _id_4E6D9BE609009734 = ignore getpointinbounds( _id_AC0E594AC96AA3A8, _id_AC0E5C4AC96AAA41, 0.0 );
            _id_4E6D9BE609009734 = ( _id_4E6D9BE609009734[0], _id_4E6D9BE609009734[1], self.origin[2] );
            _id_D895C679F6A927E5[_id_D895C679F6A927E5.size] = _id_4E6D9BE609009734;
        }
    }

    _id_F863280C4EB41018 = ( 0, 0, 0 );
    _id_97D8F5A9EB04C1F2 = 0;

    foreach ( point in _id_D895C679F6A927E5 )
    {
        trace = scripts\engine\trace::_bullet_trace( point + ( 0, 0, 4 ), point + ( 0, 0, -16 ), 0, ignorelist );
        _id_B68850986D4C6C13 = trace["fraction"] > 0.0 && trace["fraction"] < 1;

        if ( _id_B68850986D4C6C13 )
        {
            _id_F863280C4EB41018 = _id_F863280C4EB41018 + trace["normal"];
            _id_97D8F5A9EB04C1F2++;
        }
    }

    if ( _id_97D8F5A9EB04C1F2 > 0 )
    {
        _id_F863280C4EB41018 = _id_F863280C4EB41018 / _id_97D8F5A9EB04C1F2;
        return _id_F863280C4EB41018;
    }
    else
        return undefined;
}

playerzombiejumpcleanup( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB, _id_1FC7E7DDBA5D5771 )
{
    if ( istrue( _id_1FC7E7DDBA5D5771 ) )
        thread playerpowerstartcooldown( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );

    if ( isdefined( self.zombiejumplink ) )
        self.zombiejumplink delete();

    if ( isdefined( self.zombiejumpbar ) )
        self.zombiejumpbar scripts\mp\hud_util::destroyelem();

    if ( isdefined( self.zombiejumpbartext ) )
        self.zombiejumpbartext scripts\mp\hud_util::destroyelem();

    self.zombiejumping = undefined;
}

playerzombiejumpmaxholdwarning( _id_EF7579BE51267BDB, time )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );
    self endon( "playerZombieJumpStop" );
    self endon( "playerZombieJumpChargeEnd" );

    if ( time <= 0 )
        return;

    zombiejumpbar = self.powershud[_id_EF7579BE51267BDB].barelem;
    _id_2C728360E4C9326A = _id_2695A20D4011076D::array_init_distribute( time, int( time * 5 ), 1 );
    color = 1;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_2C728360E4C9326A.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( color )
            zombiejumpbar.bar.color = ( 1, 0, 0 );
        else
            zombiejumpbar.bar.color = ( 0, 1, 0 );

        wait( _id_2C728360E4C9326A[_id_AC0E594AC96AA3A8] );
        color = !color;
    }
}

playerzombieemp( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB )
{
    _id_0586C1D1F0EDB26D = 60;
    _id_0563ABD1F0C73A53 = 1;
    _id_3CAAB8FCBD7ABEA7 = 64;
    _id_831D830A88DA2326 = _id_3CAAB8FCBD7ABEA7 * _id_3CAAB8FCBD7ABEA7;
    _id_46510802261E5510 = 768;
    _id_F74B59CCD4832F97 = _id_46510802261E5510 * _id_46510802261E5510;
    _id_0514DE94FFD672FE = "iw8_rc_plane_engine_exp";
    zombie = self;
    zombie playsound( _id_0514DE94FFD672FE );
    forward = anglestoforward( zombie.angles );
    playfx( level.brgametype.empvfx, zombie.origin, forward );
    _id_ADB14FF6EDFB13E3 = makeweapon( "emp_drone_non_player_mp" );
    _id_6A96CEBAF12D3691 = makeweapon( "emp_drone_non_player_direct_mp" );
    ents = scripts\cp_mp\emp_debuff::get_emp_ents();

    foreach ( ent in ents )
    {
        entowner = ent.owner;

        if ( isdefined( entowner ) )
        {
            if ( entowner != zombie && !scripts\cp_mp\utility\player_utility::playersareenemies( zombie, entowner ) )
                continue;
        }

        _id_457471485336C961 = distancesquared( zombie.origin, ent.origin );

        if ( _id_457471485336C961 > _id_F74B59CCD4832F97 )
            continue;

        weapon = scripts\engine\utility::ter_op( _id_457471485336C961 > _id_831D830A88DA2326, _id_ADB14FF6EDFB13E3, _id_6A96CEBAF12D3691 );
        ent dodamage( 1, zombie.origin, zombie, zombie, "MOD_EXPLOSIVE", weapon );
        data = scripts\cp_mp\utility\damage_utility::packdamagedata( zombie, ent, 1, weapon, "MOD_EXPLOSIVE", zombie, zombie.origin );
        thread playerzombieapplyemp( data );
    }

    _id_D13380BB17A918C0 = makeweapon( "emp_drone_player_mp" );
    players = undefined;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "player", "getPlayersInRadius" ) )
        players = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "getPlayersInRadius" ) ]]( zombie.origin, _id_46510802261E5510 );

    foreach ( player in players )
    {
        if ( player == zombie )
            continue;

        if ( player _id_2CEDCC356F1B9FC8::playeriszombie() )
            continue;

        if ( !player scripts\cp_mp\emp_debuff::can_emp_player() )
            continue;

        if ( player != zombie && !scripts\cp_mp\utility\player_utility::playersareenemies( zombie, player ) )
            continue;

        player dodamage( 1, zombie.origin, zombie, zombie, "MOD_EXPLOSIVE", _id_D13380BB17A918C0 );
        data = scripts\cp_mp\utility\damage_utility::packdamagedata( zombie, player, 1, _id_D13380BB17A918C0, "MOD_EXPLOSIVE", zombie, zombie.origin );
        thread playerzombieapplyemp( data );
    }

    thread _id_120695737ABD78F4( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
}

playerzombieapplyemp( data )
{
    _id_CC821E93395EEB9E = 8;
    _id_A89E373F593C61ED = 2;
    scripts\cp_mp\emp_debuff::apply_emp_struct( data );
    duration = _id_CC821E93395EEB9E;

    if ( isplayer( data.victim ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "hasPerk" ) )
        {
            if ( data.victim != self && data.victim [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "hasPerk" ) ]]( "specialty_emp_resist" ) )
            {
                duration = _id_A89E373F593C61ED;

                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "damage", "updateDamageFeedback" ) )
                    self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "damage", "updateDamageFeedback" ) ]]( "hittacresist" );
            }
        }
    }

    empendearly( data, duration );

    if ( isdefined( data.victim ) )
        data.victim scripts\cp_mp\emp_debuff::remove_emp();
}

empendearly( data, duration )
{
    data.victim endon( "death_or_disconnect" );
    level endon( "game_ended" );
    result = scripts\engine\utility::waittill_notify_or_timeout_return( "emp_cleared", duration );

    if ( result != "emp_cleared" )
        data.empremoved = 1;
}

setuphumanpowers()
{
    if ( !level.brgametype.humanpowersenabled )
        return;

    level.brgametype.human = spawnstruct();
    level.brgametype.human.powers = [];
    addpowerbutton( level.brgametype.human, "push", "+stance", "+movedown", ::playerhumanconcusspush, undefined, ::playerhumanconcusspushcleanup, undefined, &"MP_ZXP/PUSH", undefined, 60 );
}

playerhumanpowers()
{
    if ( !level.brgametype.humanpowersenabled )
        return;

    thread playerstartpowers( level.brgametype.human );
}

playerhumanconcusspush( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_set" );
    _id_86BCAC53E1A0E492 = 750;

    if ( istrue( self.concusspushstart ) )
    {
        _id_3A0A5A93E61D5DD5 = getdvarint( "dvar_53C7F9AFD0C26FF0", _id_86BCAC53E1A0E492 );
        _id_5659806E75F89695 = gettime() - self.concusspushstart;

        if ( _id_5659806E75F89695 <= _id_3A0A5A93E61D5DD5 )
        {
            _id_5855E4B39BAE3587();
            thread _id_120695737ABD78F4( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB );
            self.concusspushstart = undefined;
            return;
        }
    }

    self.concusspushstart = gettime();
}

_id_5855E4B39BAE3587()
{
    _id_95F31FD5810A9C2C = 650;
    _id_5991EF3EA72A6543 = getdvarint( "dvar_C631CB451D62F9EA", _id_95F31FD5810A9C2C );
    _id_0A427DED21077317 = sortbydistancecullbyradius( level.players, self.origin, _id_5991EF3EA72A6543 );

    foreach ( player in _id_0A427DED21077317 )
    {
        if ( player _id_2CEDCC356F1B9FC8::playeriszombie() && player.team != self.team && isalive( player ) )
            playerhumanconcusspushplayer( player, _id_5991EF3EA72A6543 );
    }

    forward = anglestoforward( self.angles );
    playfx( level.brgametype.impulsefx, self.origin, forward );
    playsoundatpos( self.origin, "sentry_explode_smoke" );
    playrumbleonposition( "grenade_rumble", self.origin );
    earthquake( 0.5, 1.5, self.origin, _id_5991EF3EA72A6543 );
}

playerhumanconcusspushplayer( victim, _id_5991EF3EA72A6543 )
{
    _id_00F508C8516E132D = 1800;
    inflictor = spawnstruct();
    inflictor.origin = self.origin;
    victim thread scripts\mp\equipment\concussion_grenade::applyconcussion( inflictor, self );
    victim thread playerpowerrestartallcooldowns( level.brgametype.zombie );
    dir = victim.origin - self.origin;
    _id_44AAE8E966034513 = vectortoangles( dir );
    dist = distance( victim.origin, self.origin );
    fraction = 1.0 - dist / _id_5991EF3EA72A6543;
    victim playerapplyjumpvelocity( _id_44AAE8E966034513, _id_00F508C8516E132D, fraction );
}

playerhumanconcusspushcleanup( _id_6C9D93D4584E15F7, _id_EF7579BE51267BDB )
{
    self.concusspushstart = undefined;
}
