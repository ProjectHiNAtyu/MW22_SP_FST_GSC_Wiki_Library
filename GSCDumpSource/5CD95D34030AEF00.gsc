// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_01EA3E44FD8A18D1()
{
    if ( isbot( self ) && getdvarint( "dvar_EB038CA43332E718", 0 ) == 0 )
        return 0;

    if ( isagent( self ) )
        return 0;

    if ( istestclient( self ) )
        return 0;

    return 1;
}

_giveexecution( ref )
{
    if ( !_id_01EA3E44FD8A18D1() )
        return;

    if ( _func_03B6961B424A382F() )
    {
        _id_25A38DFAF37FC298 = tolower( getdvar( "dvar_88BA4CA6E5FF9D5A", "" ) );

        if ( isdefined( level.execution.table[_id_25A38DFAF37FC298] ) )
            ref = _id_25A38DFAF37FC298;
    }

    _clearexecution();
    propweapon = execution_getpropweaponbyref( ref );

    if ( isdefined( propweapon ) )
    {
        self giveweapon( propweapon );
        self giveexecution( execution_getexecutionbyref( ref ), propweapon );
    }
    else
        self giveexecution( execution_getexecutionbyref( ref ) );

    self.executionref = ref;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "lpcFeatureGated" ) && ![[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "lpcFeatureGated" ) ]]() )
        thread watchinexecution();
}

_clearexecution()
{
    if ( isdefined( self.executionref ) )
    {
        self clearexecution();
        propweapon = execution_getpropweaponbyref( self.executionref );

        if ( isdefined( propweapon ) && self hasweapon( propweapon ) )
            self takeweapon( propweapon );

        self.executionref = undefined;
    }
}

hasexecution()
{
    return isdefined( self.executionref );
}

execution_init()
{
    level.execution = spawnstruct();
    level.enableexecutionattackfunc = ::enableexecutionattackwrapper;
    level.disableexecutionattackfunc = ::disableexecutionattackwrapper;
    level.enableexecutionvictimfunc = ::enableexecutionvictimwrapper;
    level.disableexecutionvictimfunc = ::disableexecutionvictimwrapper;
    execution_loadtable();

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "execution", "init" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "execution", "init" ) ]]();
}

enableexecutionattackwrapper()
{
    self enableexecutionattack();
}

disableexecutionattackwrapper()
{
    self disableexecutionattack();
}

enableexecutionvictimwrapper()
{
    self enableexecutionvictim();
}

disableexecutionvictimwrapper()
{
    self disableexecutionvictim();
}

execution_loadtable()
{
    level.execution.table = [];
    _id_CB89110314447B2F = 0;

    for (;;)
    {
        ref = tablelookupbyrow( "mp_cp/executiontable.csv", _id_CB89110314447B2F, 1 );

        if ( !isdefined( ref ) || ref == "" )
            break;

        _id_39061D840C9E9B1F = tolower( ref );
        struct = spawnstruct();
        struct.ref = _id_39061D840C9E9B1F;
        id = tablelookupbyrow( "mp_cp/executiontable.csv", _id_CB89110314447B2F, 0 );
        struct.id = int( id );
        execution = tablelookupbyrow( "mp_cp/executiontable.csv", _id_CB89110314447B2F, 12 );

        if ( execution != "none" )
            struct.execution = execution;

        propweapon = tablelookupbyrow( "mp_cp/executiontable.csv", _id_CB89110314447B2F, 13 );

        if ( propweapon != "none" )
        {
            struct.propweapon = makeweapon( propweapon );

            if ( isnullweapon( struct.propweapon ) )
            {
                _id_CB89110314447B2F++;
                continue;
            }
        }

        level.execution.table[_id_39061D840C9E9B1F] = struct;
        _id_CB89110314447B2F++;
    }
}

execution_getexecutionbyref( ref )
{
    struct = level.execution.table[ref];

    if ( isdefined( struct ) )
        return struct.execution;

    return undefined;
}

execution_getpropweaponbyref( ref )
{
    struct = level.execution.table[ref];

    if ( isdefined( struct ) )
        return struct.propweapon;

    return undefined;
}

execution_getrefbyplayer( player )
{
    return player.executionref;
}

execution_getidbyref( ref )
{
    struct = level.execution.table[ref];

    if ( isdefined( struct ) )
        return struct.id;
}

execution_blockladders()
{
    if ( self isonladder() )
    {
        if ( !istrue( self.ladderexecutionblocked ) )
        {
            _id_3B64EB40368C1450::set( "ladderExecution", "execution_attack", 0 );
            _id_3B64EB40368C1450::set( "ladderExecution", "execution_victim", 0 );
            self.ladderexecutionblocked = 1;
        }
    }
    else if ( istrue( self.ladderexecutionblocked ) )
    {
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "ladderExecution" );
        self.ladderexecutionblocked = undefined;
    }
}

watchinexecution()
{
    self endon( "disconnect" );
    self notify( "watchInExecution" );
    self endon( "watchInExecution" );
    _id_A9EE87CC06BD6B39 = 0;

    for (;;)
    {
        _id_350E6177AC9228D0 = self isinexecutionattack() || self isinexecutionvictim();

        if ( _id_350E6177AC9228D0 != _id_A9EE87CC06BD6B39 )
        {
            if ( _id_350E6177AC9228D0 )
            {
                self enablephysicaldepthoffieldscripting();
                self setphysicaldepthoffield( 2.5, 60, 20, 20 );
            }
            else
                self disablephysicaldepthoffieldscripting();
        }

        _id_A9EE87CC06BD6B39 = _id_350E6177AC9228D0;
        waitframe();
    }
}
