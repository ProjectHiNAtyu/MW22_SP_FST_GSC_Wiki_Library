// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( !getdvarint( "dvar_9D10EC32552BD102", 0 ) )
        return;

    level.br_alt_mode_inflation = spawnstruct();
    level.br_alt_mode_inflation.disabled = 0;
    level.br_alt_mode_inflation.cost = getdvarint( "dvar_EC3657BEE62B649E", 45 );
    level.br_alt_mode_inflation.drop_percent = getdvarfloat( "dvar_4D6E3B73A7976700", 1.0 );
    level.br_alt_mode_inflation.drop_max = getdvarint( "dvar_7FD93EE5262C8A9B", -1 );
    level.br_alt_mode_inflation.respawn_delay = getdvarfloat( "dvar_82A04F5B65ED7D09", 10.0 );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "playerDropPlunderOnDeath", ::playerdropplunderondeath );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "circleTimer", ::circletimer );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "postPlunder", ::postplunder );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "markPlayerAsEliminatedOnKilled", ::markplayeraseliminatedonkilled );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "playerGulagAutoWinWait", ::playergulagautowinwait );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "triggerRespawnOverlay", ::triggerrespawnoverlay );
    _id_362C58E8BB39BCDA::registerbrgametypefunc( "assignSpectatorToSpectatePlayer", ::assignspectatortospectateplayer );

    if ( !getdvarint( "dvar_83FC1574C6A65EFD", 0 ) )
        _id_362C58E8BB39BCDA::disablefeature( "gulag" );

    _id_362C58E8BB39BCDA::disablefeature( "useTokenToReviveTeammate" );
    _id_362C58E8BB39BCDA::disablefeature( "gulagWinnerRestoreLoadoutUseGulag" );
    thread initcallbacks();
}

initcallbacks()
{
    while ( !isdefined( level.onplayerspawncallbacks ) )
        waitframe();

    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawned );
}

onplayerspawned()
{
    updaterespawnstatus();
}

playercanbuyrespawn()
{
    return istrue( level.br_prematchstarted ) && !istrue( self.br_iseliminated ) && !level.br_alt_mode_inflation.disabled && self.plundercount >= level.br_alt_mode_inflation.cost;
}

playerdropplunderondeath( dropstruct, attacker )
{
    _id_43E1B640EEC49671 = self.plundercount;

    if ( istrue( self.respawningfromtoken ) )
    {
        _id_43E1B640EEC49671 = _id_43E1B640EEC49671 - level.br_alt_mode_inflation.cost;

        if ( _id_43E1B640EEC49671 < 0 )
            _id_43E1B640EEC49671 = 0;
    }

    _id_B64F283113C99581 = int( _id_43E1B640EEC49671 * level.br_alt_mode_inflation.drop_percent );
    _id_43E1B640EEC49671 = _id_43E1B640EEC49671 - _id_B64F283113C99581;
    _id_6AFF3948CF4CCA03::playersetplundercount( _id_43E1B640EEC49671, getsetplundercountdatanosplash() );

    if ( level.br_alt_mode_inflation.drop_max >= 0 )
        _id_B64F283113C99581 = int( min( level.br_alt_mode_inflation.drop_max, _id_B64F283113C99581 ) );

    _id_6AFF3948CF4CCA03::dropcondensedplunder( _id_B64F283113C99581, dropstruct );
    return 1;
}

circletimer( circleindex )
{
    if ( !circleindex )
        _id_67708F418B1FAC79::setupgulagtimer();

    _id_6B3FE6B83B1C6B9E = _id_67708F418B1FAC79::getgulagclosedcircleindex();

    if ( !level.br_alt_mode_inflation.disabled && circleindex >= _id_6B3FE6B83B1C6B9E )
    {
        level.br_alt_mode_inflation.disabled = 1;

        foreach ( player in level.players )
        {
            if ( !isdefined( player ) || !isalive( player ) )
                continue;

            player updaterespawnstatus();
            _id_1671F48D05259D22::dangernotifyplayer( player, "cash_deploy_closed", undefined, 3 );
        }
    }

    return 0;
}

postplunder( data )
{
    skipsplash = 0;

    if ( isdefined( data ) )
        skipsplash = data.skipsplash;

    updaterespawnstatus( skipsplash );
}

updaterespawnstatus( skipsplash )
{
    if ( playercanbuyrespawn() )
    {
        if ( !_id_2CEDCC356F1B9FC8::hasrespawntoken() )
        {
            _id_7E52B56769FA7774::addrespawntoken( 1 );

            if ( !istrue( skipsplash ) )
                thread scripts\mp\hud_message::showsplash( "br_inflation_respawn_token_pickup" );
        }
    }
    else if ( _id_2CEDCC356F1B9FC8::hasrespawntoken() )
    {
        _id_7E52B56769FA7774::removerespawntoken();

        if ( !istrue( skipsplash ) )
            thread scripts\mp\hud_message::showsplash( "br_inflation_respawn_token_lost" );
    }
}

showrespawntimer( timer )
{
    waittillframeend;
    scripts\mp\utility\lower_message::setlowermessageomnvar( "waiting_to_spawn", int( gettime() + timer * 1000 ) );
    _id_67708F418B1FAC79::setplayeringulagjailextrainfo( 1 );
    thread hiderespawntimer( timer );
}

hiderespawntimer( waittime )
{
    self endon( "disconnect" );

    if ( isdefined( waittime ) )
        wait( waittime );

    _id_67708F418B1FAC79::setplayeringulagjailextrainfo( 0 );
    scripts\mp\utility\lower_message::setlowermessageomnvar( "clear_lower_msg" );
}

getsetplundercountdatanosplash()
{
    data = spawnstruct();
    data.skipsplash = 1;
    return data;
}

markplayeraseliminatedonkilled()
{
    return 0;
}

playergulagautowinwait( _id_4AC881E2A39322A5, _id_57D71760971F748F )
{
    if ( !isdefined( _id_4AC881E2A39322A5 ) )
    {
        if ( level.br_alt_mode_inflation.respawn_delay )
        {
            respawndelay = level.br_alt_mode_inflation.respawn_delay;
            thread showrespawntimer( respawndelay );
            wait( respawndelay );
            return 1;
        }
    }

    return 0;
}

triggerrespawnoverlay( _id_8D90BD1972A435BF )
{
    return 1;
}

assignspectatortospectateplayer( spectator, playertospectate )
{
    spectator notify( "assignSpectatorToSpectatePlayerWaitForTeam" );

    if ( istrue( level.brspawnplayersending ) )
        return 0;

    if ( !isdefined( playertospectate ) || !isplayer( playertospectate ) || !isalive( playertospectate ) && !isdefined( playertospectate.streampoint ) )
        return 0;

    if ( spectator.team == playertospectate.team )
        return 0;

    if ( !scripts\mp\utility\teams::getteamdata( spectator.team, "aliveCount" ) )
        return 0;

    thread assignspectatortospectatetryagain( spectator );
    return 1;
}

assignspectatortospectatetryagain( spectator )
{
    level endon( "brSpawnPlayersEnding" );
    spectator endon( "assignSpectatorToSpectatePlayerWaitForTeam" );
    spectator endon( "death_or_disconnect" );
    spectator _id_6489FCDFE6FA2E36::playerspawnintermissionifneeded();
    spectator setclientomnvar( "ui_show_spectateHud", spectator getentitynumber() );
    wait 1.0;
    playertospectate = _id_6489FCDFE6FA2E36::getbestspectatecandidate( spectator );
    thread _id_6489FCDFE6FA2E36::assignspectatortospectateplayer( spectator, playertospectate );
}
