// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

gettweakabledvarvalue( category, name )
{
    switch ( category )
    {
        case "rule":
            dvar = level.rules[name].dvar;
            break;
        case "game":
            dvar = level.gametweaks[name].dvar;
            break;
        case "team":
            dvar = level.teamtweaks[name].dvar;
            break;
        case "player":
            dvar = level.playertweaks[name].dvar;
            break;
        case "class":
            dvar = level.classtweaks[name].dvar;
            break;
        case "weapon":
            dvar = level.weapontweaks[name].dvar;
            break;
        case "hardpoint":
            dvar = level.hardpointtweaks[name].dvar;
            break;
        case "hud":
            dvar = level.hudtweaks[name].dvar;
            break;
        default:
            dvar = undefined;
            break;
    }

    value = getdvarint( dvar );
    return value;
}

gettweakabledvar( category, name )
{
    switch ( category )
    {
        case "rule":
            value = level.rules[name].dvar;
            break;
        case "game":
            value = level.gametweaks[name].dvar;
            break;
        case "team":
            value = level.teamtweaks[name].dvar;
            break;
        case "player":
            value = level.playertweaks[name].dvar;
            break;
        case "class":
            value = level.classtweaks[name].dvar;
            break;
        case "weapon":
            value = level.weapontweaks[name].dvar;
            break;
        case "hardpoint":
            value = level.hardpointtweaks[name].dvar;
            break;
        case "hud":
            value = level.hudtweaks[name].dvar;
            break;
        default:
            value = undefined;
            break;
    }

    return value;
}

gettweakablevalue( category, name )
{
    switch ( category )
    {
        case "rule":
            value = level.rules[name].value;
            break;
        case "game":
            value = level.gametweaks[name].value;
            break;
        case "team":
            value = level.teamtweaks[name].value;
            break;
        case "player":
            value = level.playertweaks[name].value;
            break;
        case "class":
            value = level.classtweaks[name].value;
            break;
        case "weapon":
            value = level.weapontweaks[name].value;
            break;
        case "hardpoint":
            value = level.hardpointtweaks[name].value;
            break;
        case "hud":
            value = level.hudtweaks[name].value;
            break;
        default:
            value = undefined;
            break;
    }

    return value;
}

gettweakablelastvalue( category, name )
{
    switch ( category )
    {
        case "rule":
            value = level.rules[name].lastvalue;
            break;
        case "game":
            value = level.gametweaks[name].lastvalue;
            break;
        case "team":
            value = level.teamtweaks[name].lastvalue;
            break;
        case "player":
            value = level.playertweaks[name].lastvalue;
            break;
        case "class":
            value = level.classtweaks[name].lastvalue;
            break;
        case "weapon":
            value = level.weapontweaks[name].lastvalue;
            break;
        case "hardpoint":
            value = level.hardpointtweaks[name].lastvalue;
            break;
        case "hud":
            value = level.hudtweaks[name].lastvalue;
            break;
        default:
            value = undefined;
            break;
    }

    return value;
}

settweakabledvar( category, name, value )
{
    switch ( category )
    {
        case "rule":
            dvar = level.rules[name].dvar;
            break;
        case "game":
            dvar = level.gametweaks[name].dvar;
            break;
        case "team":
            dvar = level.teamtweaks[name].dvar;
            break;
        case "player":
            dvar = level.playertweaks[name].dvar;
            break;
        case "class":
            dvar = level.classtweaks[name].dvar;
            break;
        case "weapon":
            dvar = level.weapontweaks[name].dvar;
            break;
        case "hardpoint":
            dvar = level.hardpointtweaks[name].dvar;
            break;
        case "hud":
            dvar = level.hudtweaks[name].dvar;
            break;
        default:
            dvar = undefined;
            break;
    }

    setdvar( dvar, value );
}

settweakablevalue( category, name, value )
{
    switch ( category )
    {
        case "rule":
            level.rules[name].value = value;
            break;
        case "game":
            level.gametweaks[name].value = value;
            break;
        case "team":
            level.teamtweaks[name].value = value;
            break;
        case "player":
            level.playertweaks[name].value = value;
            break;
        case "class":
            level.classtweaks[name].value = value;
            break;
        case "weapon":
            level.weapontweaks[name].value = value;
            break;
        case "hardpoint":
            level.hardpointtweaks[name].value = value;
            break;
        case "hud":
            level.hudtweaks[name].v = value;
            break;
        default:
            break;
    }
}

settweakablelastvalue( category, name, value )
{
    switch ( category )
    {
        case "rule":
            level.rules[name].lastvalue = value;
            break;
        case "game":
            level.gametweaks[name].lastvalue = value;
            break;
        case "team":
            level.teamtweaks[name].lastvalue = value;
            break;
        case "player":
            level.playertweaks[name].lastvalue = value;
            break;
        case "class":
            level.classtweaks[name].lastvalue = value;
            break;
        case "weapon":
            level.weapontweaks[name].lastvalue = value;
            break;
        case "hardpoint":
            level.hardpointtweaks[name].lastvalue = value;
            break;
        case "hud":
            level.hudtweaks[name].lastvalue = value;
            break;
        default:
            break;
    }
}

registertweakable( category, name, dvar, value )
{
    if ( isstring( value ) )
        value = getdvar( dvar, value );
    else
        value = getdvarint( dvar, value );

    switch ( category )
    {
        case "rule":
            if ( !isdefined( level.rules[name] ) )
                level.rules[name] = spawnstruct();

            level.rules[name].value = value;
            level.rules[name].lastvalue = value;
            level.rules[name].dvar = dvar;
            break;
        case "game":
            if ( !isdefined( level.gametweaks[name] ) )
                level.gametweaks[name] = spawnstruct();

            level.gametweaks[name].value = value;
            level.gametweaks[name].lastvalue = value;
            level.gametweaks[name].dvar = dvar;
            break;
        case "team":
            if ( !isdefined( level.teamtweaks[name] ) )
                level.teamtweaks[name] = spawnstruct();

            level.teamtweaks[name].value = value;
            level.teamtweaks[name].lastvalue = value;
            level.teamtweaks[name].dvar = dvar;
            break;
        case "player":
            if ( !isdefined( level.playertweaks[name] ) )
                level.playertweaks[name] = spawnstruct();

            level.playertweaks[name].value = value;
            level.playertweaks[name].lastvalue = value;
            level.playertweaks[name].dvar = dvar;
            break;
        case "class":
            if ( !isdefined( level.classtweaks[name] ) )
                level.classtweaks[name] = spawnstruct();

            level.classtweaks[name].value = value;
            level.classtweaks[name].lastvalue = value;
            level.classtweaks[name].dvar = dvar;
            break;
        case "weapon":
            if ( !isdefined( level.weapontweaks[name] ) )
                level.weapontweaks[name] = spawnstruct();

            level.weapontweaks[name].value = value;
            level.weapontweaks[name].lastvalue = value;
            level.weapontweaks[name].dvar = dvar;
            break;
        case "hardpoint":
            if ( !isdefined( level.hardpointtweaks[name] ) )
                level.hardpointtweaks[name] = spawnstruct();

            level.hardpointtweaks[name].value = value;
            level.hardpointtweaks[name].lastvalue = value;
            level.hardpointtweaks[name].dvar = dvar;
            break;
        case "hud":
            if ( !isdefined( level.hudtweaks[name] ) )
                level.hudtweaks[name] = spawnstruct();

            level.hudtweaks[name].value = value;
            level.hudtweaks[name].lastvalue = value;
            level.hudtweaks[name].dvar = dvar;
            break;
    }
}

init()
{
    level.clienttweakables = [];
    level.tweakablesinitialized = 1;
    level.rules = [];
    level.gametweaks = [];
    level.teamtweaks = [];
    level.playertweaks = [];
    level.classtweaks = [];
    level.weapontweaks = [];
    level.hardpointtweaks = [];
    level.hudtweaks = [];
    registertweakable( "game", "graceperiod", "dvar_C653D32C30815D2B", 20 );
    registertweakable( "game", "graceperiod_comp", "dvar_72B071FCAB2E5A53", 30 );
    registertweakable( "game", "onlyheadshots", "dvar_A54EDEED7C5B587F", 0 );
    registertweakable( "game", "allowkillcam", "dvar_399F13D1217738FE", 1 );
    registertweakable( "game", "spectatetype", "dvar_DF992051D6FE8149", 1 );
    registertweakable( "game", "allow3rdspectate", "dvar_433CE15D514EF091", 0 );
    registertweakable( "game", "deathpointloss", "dvar_CD8FC3BF8ABA4931", 0 );
    registertweakable( "game", "suicidepointloss", "dvar_1EF34A7CBAFDA853", 0 );
    registertweakable( "team", "teamkillpointloss", "dvar_E8121D056BDE22A3", 0 );
    registertweakable( "team", "fftype", "dvar_E5A33D679C26221F", 0 );
    registertweakable( "team", "teamkillspawndelay", "dvar_15EE15C57C8BC94C", 0 );
    registertweakable( "player", "maxhealth", "dvar_B1D561F9A9241E09", 100 );
    registertweakable( "player", "laststand", "dvar_E723CC761DE7B161", 0 );
    registertweakable( "player", "healthregentime", "dvar_2922210021914DD7", 6 );
    registertweakable( "player", "forcerespawn", "dvar_5D64CD3B24CF883A", 1 );
    registertweakable( "player", "streamingwaittime", "dvar_2EC2FF107406B60D", 5 );
    registertweakable( "weapon", "allowfrag", "dvar_2FC9C691FE9E9D22", 1 );
    registertweakable( "weapon", "allowsmoke", "dvar_B8A406C61271E276", 1 );
    registertweakable( "weapon", "allowflash", "dvar_29CA538F5DB22A99", 1 );
    registertweakable( "weapon", "allowc4", "dvar_A6A5AE00FBB8F062", 1 );
    registertweakable( "weapon", "allowclaymores", "dvar_0FB822E5B2C3150E", 1 );
    registertweakable( "weapon", "allowrpgs", "dvar_8B06B31C44C17B51", 1 );
    registertweakable( "weapon", "allowmines", "dvar_E1C3217DC4C4A76F", 1 );
    registertweakable( "hardpoint", "allowartillery", "dvar_CC7CDCC9FAE6CF74", 1 );
    registertweakable( "hardpoint", "allowuav", "dvar_A3FDCC0352D0CDDE", 1 );
    registertweakable( "hardpoint", "allowsupply", "dvar_92E6EAC5A7E8A8B9", 1 );
    registertweakable( "hardpoint", "allowhelicopter", "dvar_477CFB1BBABAA927", 1 );
    registertweakable( "hud", "showobjicons", "dvar_CA282AA74382A87F", 1 );
    setdvar( "dvar_CA282AA74382A87F", 1 );
}
