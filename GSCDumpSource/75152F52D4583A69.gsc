// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

initialize_create_script()
{
    init_create_script_for_level();
}

init_create_script_for_level( _id_D118031DB9B990AA )
{
    if ( isdefined( level.scripted_spawner_func ) )
        return;

    level.threadedscriptspawners = istrue( _id_D118031DB9B990AA );
    level.create_script_file_ids = [];
    level.cs_scripted_spawners = [];
    level.scripted_spawners = [];
    level.cs_scripted_spawners_triggers = [];
    level.scripted_spawners_triggers = [];
    level.cs_scripted_spawners_models = [];
    level.scripted_spawners_models = [];
    level.createscriptfilesinitialized = 0;
    level.scripted_spawner_func_strings = [];
    level.scripted_spawner_map_strings = [];
    level.scripted_spawner_func = [];
    level._id_FD1365CE671037DB = 0;
}

initialize_registered_create_script_files()
{
    if ( isdefined( level.scripted_spawner_func ) )
    {
        level.cs_creation_counter = 0;

        if ( isarray( level.scripted_spawner_func ) )
        {
            for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.scripted_spawner_func.size; _id_AC0E594AC96AA3A8++ )
                [[ level.scripted_spawner_func[_id_AC0E594AC96AA3A8] ]]( 1, "cs" + _id_AC0E594AC96AA3A8 );
        }
        else if ( istrue( level.threadedscriptspawners ) )
            [[ level.scripted_spawner_func ]]( 1 );
        else
            [[ level.scripted_spawner_func ]]();
    }
}

register_create_script_arrays( script, _id_365929041E4386ED, index, func )
{
    if ( isdefined( func ) )
        level.scripted_spawner_func[level.scripted_spawner_func.size] = func;

    if ( isdefined( script ) )
        level.scripted_spawner_func_strings[level.scripted_spawner_func_strings.size] = script;

    if ( isdefined( _id_365929041E4386ED ) )
        level.scripted_spawner_map_strings[level.scripted_spawner_func_strings.size] = _id_365929041E4386ED;

    if ( isdefined( index ) )
        level.create_script_file_ids[script] = "cs" + index;
}

initialize_create_script_file( _id_B3D026D11EC695FB )
{
    if ( scripts\engine\utility::flag_exist( _id_B3D026D11EC695FB ) )
    {
        scripts\engine\utility::flag_set( _id_B3D026D11EC695FB );

        if ( scripts\engine\utility::flag_exist( _id_B3D026D11EC695FB + "_completed" ) )
        {
            level endon( "game_ended" );
            scripts\engine\utility::flag_wait( _id_B3D026D11EC695FB + "_completed" );
        }
    }
}

register_valid_gametypes_for_create_script( _id_61FB539E50D5658A )
{
    if ( !isdefined( level.allowed_gametypes ) )
        level.allowed_gametypes = [];

    level.allowed_gametypes = scripts\engine\utility::array_add( level.allowed_gametypes, _id_61FB539E50D5658A );
}

register_valid_objectives_for_create_script( _id_9AF68064717C528B )
{
    if ( !isdefined( level.allowed_objectives ) )
        level.allowed_objectives = [];

    level.allowed_objectives = scripts\engine\utility::array_add( level.allowed_objectives, _id_9AF68064717C528B );
}

strike_setup_arrays( index, _id_9F279646ED66AB76 )
{
    if ( !isdefined( level.scripted_spawners ) )
        level.scripted_spawners = [];

    if ( !isdefined( level.scripted_spawners_triggers ) )
        level.scripted_spawners_triggers = [];

    if ( !isdefined( level.scripted_spawners_models ) )
        level.scripted_spawners_models = [];

    if ( !isdefined( level.cs_origin_offset ) )
        level.cs_origin_offset = [];

    if ( !isdefined( level.cs_angle_offset ) )
        level.cs_angle_offset = [];

    if ( !isdefined( level.cs_scripted_spawners ) )
        level.cs_scripted_spawners = [];

    if ( !isdefined( level.cs_scripted_spawners_triggers ) )
        level.cs_scripted_spawners_triggers = [];

    if ( !isdefined( level.cs_scripted_spawners_models ) )
        level.cs_scripted_spawners_models = [];

    if ( isdefined( index ) && !isdefined( level.scripted_spawners[index] ) )
        level.scripted_spawners[index] = [];

    if ( isdefined( index ) && !isdefined( level.scripted_spawners_triggers[index] ) )
        level.scripted_spawners_triggers[index] = [];

    if ( isdefined( index ) && !isdefined( level.scripted_spawners_models[index] ) )
        level.scripted_spawners_models[index] = [];

    if ( isdefined( index ) && !isdefined( level.cs_scripted_spawners[index] ) )
        level.cs_scripted_spawners[index] = [];

    if ( isdefined( index ) && !isdefined( level.cs_scripted_spawners_triggers[index] ) )
        level.cs_scripted_spawners_triggers[index] = [];

    if ( isdefined( index ) && !isdefined( level.cs_scripted_spawners_models[index] ) )
        level.cs_scripted_spawners_models[index] = [];
}

cs_setup_arrays( index, _id_9F279646ED66AB76 )
{
    if ( !isdefined( level.scripted_spawners ) )
        level.scripted_spawners = [];

    if ( !isdefined( level.scripted_spawners_triggers ) )
        level.scripted_spawners_triggers = [];

    if ( !isdefined( level.scripted_spawners_models ) )
        level.scripted_spawners_models = [];

    if ( !isdefined( level.cs_origin_offset ) )
        level.cs_origin_offset = [];

    if ( !isdefined( level.cs_angle_offset ) )
        level.cs_angle_offset = [];

    if ( !isdefined( level.cs_scripted_spawners ) )
        level.cs_scripted_spawners = [];

    if ( !isdefined( level.cs_scripted_spawners_triggers ) )
        level.cs_scripted_spawners_triggers = [];

    if ( !isdefined( level.cs_scripted_spawners_models ) )
        level.cs_scripted_spawners_models = [];

    if ( isdefined( index ) && !isdefined( level.scripted_spawners[index] ) )
        level.scripted_spawners[index] = [];

    if ( isdefined( index ) && !isdefined( level.scripted_spawners_triggers[index] ) )
        level.scripted_spawners_triggers[index] = [];

    if ( isdefined( index ) && !isdefined( level.scripted_spawners_models[index] ) )
        level.scripted_spawners_models[index] = [];

    if ( isdefined( index ) && !isdefined( level.cs_scripted_spawners[index] ) )
        level.cs_scripted_spawners[index] = [];

    if ( isdefined( index ) && !isdefined( level.cs_scripted_spawners_triggers[index] ) )
        level.cs_scripted_spawners_triggers[index] = [];

    if ( isdefined( index ) && !isdefined( level.cs_scripted_spawners_models[index] ) )
        level.cs_scripted_spawners_models[index] = [];
}

strike_additem( struct, index, _id_9F279646ED66AB76, origin, angles, targetname, target, script_noteworthy, script_linkto, script_linkname, _id_A1306EE53C20150F, _id_E3C2F7A7F3D4CCE6, radius, speed, spawnflags, script_unload )
{
    level endon( "game_ended" );

    if ( !struct object_is_valid() )
        return;

    if ( isdefined( level.cs_creation_counter ) && !cs_is_starttime() )
    {
        level.cs_creation_counter++;

        if ( level.cs_creation_counter % 25 == 0 )
            waitframe();
    }

    _id_ED4382CB70A213E2 = 0;

    if ( isdefined( origin ) )
        struct.origin = origin;

    if ( isdefined( angles ) )
        struct.angles = angles;
    else if ( !isdefined( struct.angles ) )
        struct.angles = ( 0, 0, 0 );

    if ( isdefined( targetname ) )
    {
        _id_ED4382CB70A213E2 = 1;
        struct.targetname = targetname;
    }

    if ( isdefined( target ) )
    {
        _id_ED4382CB70A213E2 = 1;
        struct.target = target;
    }

    if ( isdefined( script_noteworthy ) )
    {
        _id_ED4382CB70A213E2 = 1;
        struct.script_noteworthy = script_noteworthy;
    }

    if ( isdefined( script_linkto ) )
        struct.script_linkto = script_linkto;

    if ( isdefined( script_linkname ) )
    {
        _id_ED4382CB70A213E2 = 1;
        struct.script_linkname = script_linkname;
    }

    if ( isdefined( speed ) )
        struct.speed = speed;

    if ( isdefined( radius ) )
        struct.radius = radius;

    if ( isdefined( spawnflags ) )
        struct.spawnflags = int( spawnflags );

    if ( isdefined( script_unload ) )
        struct.script_unload = script_unload;

    translate_position_with_offset_data( _id_9F279646ED66AB76, struct, _id_A1306EE53C20150F, _id_E3C2F7A7F3D4CCE6 );

    if ( !isdefined( index ) )
        index = "_";

    strike_fixautokvps( struct, index );
    typecast_kvps( struct );

    if ( isdefined( self.objects ) )
        self.objects[self.objects.size] = struct;

    if ( isdefined( struct.model ) )
    {
        if ( istrue( struct.is_cs_model ) )
            struct.is_cs_model = undefined;

        strike_modelcreate( struct, index );
    }
    else if ( istrue( struct.is_cs_trigger ) )
    {
        struct.is_cs_trigger = undefined;
        strike_triggercreate( struct, index, 1 );
    }
    else if ( istrue( struct.is_cs_model ) )
    {
        strike_modelcreate( struct, index );
        struct.is_cs_model = undefined;
    }
    else if ( istrue( struct.is_cs_script_origin ) )
    {
        struct.is_cs_script_origin = undefined;
        strike_scriptorigincreate( struct, index );
    }
    else
    {
        if ( isdefined( struct.targetname ) )
        {
            switch ( struct.targetname )
            {
                case "trigger_spawn":
                    strike_triggercreate( struct, index );
                    break;
                case "trigger_fallback":
                    strike_triggercreate( struct, index );
                    break;
                case "module_update":
                    strike_triggercreate( struct, index, 1 );
                    break;
                case "cs_trigger":
                    strike_triggercreate( struct, index, 1 );
                    break;
                case "interaction":
                    strike_interactioncreate( struct, index );
                    break;
                case "trigger_kill_floodspawner":
                    strike_triggercreate( struct, index, 1 );
                    break;
                default:
                    scripts\engine\utility::_id_1F6C1A9B7564DC61( struct );
                    break;
            }

            return;
        }

        scripts\engine\utility::_id_1F6C1A9B7564DC61( struct );
    }
}

object_is_valid()
{
    _id_EE2438927A30059C = 0;
    _id_0E83560F72B6E4E7 = 0;

    if ( isdefined( level.allowed_gametypes ) )
    {
        if ( isdefined( self.script_gameobjectname ) )
        {
            for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.allowed_gametypes.size; _id_AC0E594AC96AA3A8++ )
            {
                if ( getsubstr( level.allowed_gametypes[_id_AC0E594AC96AA3A8], 0, 1 ) == "!" )
                    _id_E88E346FEAB6A5E9 = 1;
                else
                    _id_E88E346FEAB6A5E9 = 0;

                if ( is_object_allowed_in_gametype( self.script_gameobjectname, level.allowed_gametypes[_id_AC0E594AC96AA3A8] ) != _id_E88E346FEAB6A5E9 )
                {
                    _id_EE2438927A30059C = 1;
                    break;
                }
            }
        }
        else
            _id_EE2438927A30059C = 1;
    }
    else
        _id_EE2438927A30059C = 1;

    if ( isdefined( level.allowed_objectives ) )
    {
        if ( isdefined( self.script_gameobjectname ) )
        {
            for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.allowed_objectives.size; _id_AC0E594AC96AA3A8++ )
            {
                if ( getsubstr( level.allowed_objectives[_id_AC0E594AC96AA3A8], 0, 1 ) == "!" )
                    _id_E88E346FEAB6A5E9 = 1;
                else
                    _id_E88E346FEAB6A5E9 = 0;

                if ( is_object_allowed_in_gametype( self.script_gameobjectname, level.allowed_objectives[_id_AC0E594AC96AA3A8] ) != _id_E88E346FEAB6A5E9 )
                {
                    _id_0E83560F72B6E4E7 = 1;
                    break;
                }
            }
        }
        else
            _id_0E83560F72B6E4E7 = 1;
    }
    else
        _id_0E83560F72B6E4E7 = 1;

    return istrue( _id_EE2438927A30059C && _id_0E83560F72B6E4E7 );
}

is_object_allowed_in_gametype( _id_5598168FD5B0E734, gametype )
{
    if ( !isdefined( _id_5598168FD5B0E734 ) || _id_5598168FD5B0E734 == "" || !isdefined( gametype ) || gametype == "" )
        return 0;

    return issubstr( _id_5598168FD5B0E734, gametype );
}

translate_position_with_offset_data( _id_9F279646ED66AB76, struct, _id_5F0A2CDF1E857BAC, _id_82B752B102F67A72 )
{
    translate_and_rotate_from_level_overrides( _id_9F279646ED66AB76, struct );

    if ( isdefined( _id_5F0A2CDF1E857BAC ) )
    {
        if ( !isdefined( _id_82B752B102F67A72 ) )
            _id_82B752B102F67A72 = ( 0, 0, 0 );

        _id_8DD49492E28FCABB = ( 0, 0, 0 );

        if ( isdefined( struct.angles ) )
            _id_8DD49492E28FCABB = struct.angles;

        _id_B0FDD17853C7B165 = struct.origin;
        struct.origin = _id_5F0A2CDF1E857BAC + rotatevector( _id_B0FDD17853C7B165, _id_82B752B102F67A72 );

        if ( isdefined( struct.script_origin_other ) )
            struct.script_origin_other = _id_5F0A2CDF1E857BAC + rotatevector( struct.script_origin_other, _id_82B752B102F67A72 );

        _id_D241032D837036A4 = combineangles( _id_82B752B102F67A72, _id_8DD49492E28FCABB );
        struct.angles = _id_D241032D837036A4;
    }
}

translate_and_rotate_from_level_overrides( _id_9F279646ED66AB76, struct )
{
    if ( isdefined( _id_9F279646ED66AB76 ) && isdefined( level.cs_origin_offset ) && isdefined( level.cs_angle_offset[_id_9F279646ED66AB76] ) )
    {
        _id_82B752B102F67A72 = level.cs_angle_offset[_id_9F279646ED66AB76];
        _id_5F0A2CDF1E857BAC = level.cs_origin_offset[_id_9F279646ED66AB76];
        _id_8DD49492E28FCABB = ( 0, 0, 0 );

        if ( isdefined( struct.angles ) )
            _id_8DD49492E28FCABB = struct.angles;

        _id_B0FDD17853C7B165 = struct.origin;
        struct.origin = _id_5F0A2CDF1E857BAC + rotatevector( _id_B0FDD17853C7B165, _id_82B752B102F67A72 );

        if ( isdefined( struct.script_origin_other ) )
            struct.script_origin_other = _id_5F0A2CDF1E857BAC + rotatevector( struct.script_origin_other, _id_82B752B102F67A72 );

        _id_D241032D837036A4 = combineangles( _id_82B752B102F67A72, _id_8DD49492E28FCABB );
        struct.angles = _id_D241032D837036A4;
    }
}

strike_add_to_cs_arrays( _id_3215B787C2BE06C8, struct, index )
{
    if ( !getdvarint( "dvar_AD6E2FED4A549F49", 0 ) )
        return;

    if ( _id_3215B787C2BE06C8 == "struct" )
        level.scripted_spawners[index][level.scripted_spawners[index].size] = struct;
    else if ( _id_3215B787C2BE06C8 == "trigger" )
        level.scripted_spawners_triggers[index][level.scripted_spawners_triggers[index].size] = struct;
    else if ( _id_3215B787C2BE06C8 == "model" )
        level.scripted_spawners_models[index][level.scripted_spawners_models[index].size] = struct;
}

strike_interactioncreate( struct, index )
{
    scripts\engine\utility::_id_1F6C1A9B7564DC61( struct );
}

strike_scriptorigincreate( struct, index )
{
    model = spawn( "script_origin", struct.origin );

    if ( !isdefined( struct.angles ) )
        model.angles = ( 0, 0, 0 );
    else
        model.angles = struct.angles;

    if ( isdefined( struct.model ) )
        model setmodel( struct.model );

    if ( isdefined( struct.targetname ) )
        model.targetname = struct.targetname;

    if ( isdefined( struct.script_noteworthy ) )
        model.script_noteworthy = struct.script_noteworthy;

    if ( isdefined( struct.script_linkto ) )
        model.script_linkto = struct.script_linkto;

    if ( isdefined( struct.script_linkname ) )
        model.script_linkname = struct.script_linkname;

    if ( isdefined( struct.target ) )
        model.target = struct.target;

    model.struct = struct;

    if ( isdefined( self.objects ) )
        self.objects[self.objects.size] = model;
}

strike_modelcreate( struct, index )
{
    strike_add_to_cs_arrays( "model", struct, index );

    if ( !isdefined( struct.angles ) )
        struct.angles = ( 0, 0, 0 );

    model = spawn( "script_model", struct.origin );
    model setmodel( struct.model );
    model.angles = struct.angles;

    if ( isdefined( struct.targetname ) )
        model.targetname = struct.targetname;

    if ( isdefined( struct.script_noteworthy ) )
        model.script_noteworthy = struct.script_noteworthy;

    if ( isdefined( struct.script_linkto ) )
        model.script_linkto = struct.script_linkto;

    if ( isdefined( struct.script_linkname ) )
        model.script_linkname = struct.script_linkname;

    if ( isdefined( struct.target ) )
        model.target = struct.target;

    if ( isdefined( struct.name ) )
        model.name = struct.name;

    model.struct = struct;
    struct.is_cs_model = undefined;
    struct.is_cs_scriptable = undefined;

    if ( isdefined( self.objects ) )
        self.objects[self.objects.size] = model;
}

strike_triggercreate( struct, index, _id_EDB06D254FFF788C )
{
    strike_add_to_cs_arrays( "trigger", struct, index );
    trigger = spawn( "trigger_rotatable_radius", struct.origin, 0, int( struct.radius ), int( struct.height ) );

    if ( isdefined( struct.angles ) && struct.angles != ( 0, 0, 0 ) )
    {
        if ( istrue( _id_EDB06D254FFF788C ) )
            trigger.angles = struct.angles;
        else
            trigger.angles = ( -90, 0, 0 ) + struct.angles;
    }

    trigger.struct = struct;

    if ( isdefined( self.objects ) )
        self.objects[self.objects.size] = trigger;

    trigger strike_triggerassignvalues( struct );
}

strike_triggerassignvalues( struct )
{
    if ( !isdefined( struct.angles ) )
        struct.angles = ( 0, 0, 0 );

    if ( isdefined( struct.script_label ) )
        self.script_label = struct.script_label;

    if ( isdefined( struct.script_function ) )
        self.script_function = struct.script_function;

    if ( isdefined( struct.script_noteworthy ) )
        self.script_noteworthy = struct.script_noteworthy;

    if ( isdefined( struct.script_gesture ) )
        self.script_gesture = struct.script_gesture;

    if ( isdefined( struct.target ) )
        self.target = struct.target;

    if ( isdefined( struct.script_wtf ) )
        self.script_wtf = struct.script_wtf;

    if ( isdefined( struct.script_flag ) )
        self.script_flag = struct.script_flag;

    if ( isdefined( struct.script_linkto ) )
        self.script_linkto = struct.script_linkto;

    if ( isdefined( struct.script_linkname ) )
        self.script_linkname = struct.script_linkname;

    if ( isdefined( struct.groupname ) )
        self.groupname = struct.groupname;

    if ( isdefined( struct.script_count ) )
        self.script_count = struct.script_count;

    if ( isdefined( struct.script_count_min ) )
        self.script_count_min = struct.script_count_min;

    if ( isdefined( struct.script_count_max ) )
        self.script_count_max = struct.script_count_max;

    if ( isdefined( struct.script_maxdist ) )
        self.script_maxdist = struct.script_maxdist;

    if ( isdefined( struct.script_parameters ) )
        self.script_parameters = struct.script_parameters;

    self.targetname = struct.targetname;
}

strike_fixautokvps( struct, index )
{
    if ( isdefined( struct.target ) && issubstr( struct.target, "auto" ) )
        struct.target = "CS|" + index + struct.target;

    if ( isdefined( struct.targetname ) && issubstr( struct.targetname, "auto" ) )
        struct.targetname = "CS|" + index + struct.targetname;

    if ( isdefined( struct.script_linkto ) )
    {
        _id_10744F696C62CE23 = "";
        _id_58C555D673EEB36E = strtok( struct.script_linkto, " " );

        foreach ( _id_12EBA3D580C9458A, _id_E97377032A878881 in _id_58C555D673EEB36E )
        {
            if ( _id_12EBA3D580C9458A != 0 )
            {
                if ( int( struct.script_linkto ) == 0 )
                    _id_10744F696C62CE23 = _id_10744F696C62CE23 + " " + _id_E97377032A878881;
                else
                    _id_10744F696C62CE23 = _id_10744F696C62CE23 + " " + "CS|" + index + _id_E97377032A878881;

                continue;
            }

            if ( int( struct.script_linkto ) == 0 )
            {
                _id_10744F696C62CE23 = _id_10744F696C62CE23 + _id_E97377032A878881;
                continue;
            }

            _id_10744F696C62CE23 = _id_10744F696C62CE23 + "CS|" + index + _id_E97377032A878881;
        }

        struct.script_linkto = _id_10744F696C62CE23;
    }

    if ( isdefined( struct.script_linkname ) )
    {
        if ( int( struct.script_linkname ) != 0 )
            struct.script_linkname = "CS|" + index + struct.script_linkname;
    }
}

typecast_kvps( struct )
{
    if ( istrue( struct.ishelistruct ) )
    {
        if ( isdefined( struct.script_unload ) )
            struct.script_unload = int( struct.script_unload );
    }

    if ( isdefined( struct.script_wait_min ) )
        struct.script_wait_min = float( struct.script_wait_min );

    if ( isdefined( struct.script_wait_max ) )
        struct.script_wait_max = float( struct.script_wait_max );

    if ( isdefined( struct.script_wait_add ) )
        struct.script_wait_add = float( struct.script_wait_add );

    if ( isdefined( struct.script_brake ) )
        struct.script_brake = float( struct.script_brake );

    if ( isdefined( struct._id_9E5F6CA242B92628 ) )
        struct._id_9E5F6CA242B92628 = int( struct._id_9E5F6CA242B92628 );

    if ( isdefined( struct.lookahead ) )
        struct.lookahead = int( struct.lookahead );

    if ( isdefined( struct.speed ) )
        struct.speed = int( struct.speed );

    if ( isdefined( struct._id_3F0312E6382C878F ) )
    {
        if ( struct._id_3F0312E6382C878F == "true" || struct._id_3F0312E6382C878F == "1" )
            struct._id_3F0312E6382C878F = 1;
        else
            struct._id_3F0312E6382C878F = 0;
    }

    if ( isdefined( struct.dont_enter_combat ) )
        struct.dont_enter_combat = int( struct.dont_enter_combat );

    if ( isdefined( struct._id_9FF99CFC426066A2 ) )
        struct._id_9FF99CFC426066A2 = int( struct._id_9FF99CFC426066A2 );

    if ( isdefined( struct.script_accel ) )
        struct.script_accel = int( struct.script_accel );

    if ( isdefined( struct.script_decel ) )
        struct.script_decel = int( struct.script_decel );

    if ( isdefined( struct.script_speed ) )
        struct.script_speed = int( struct.script_speed );

    if ( isdefined( struct.script_goalyaw ) )
    {
        if ( struct.script_goalyaw == "true" || struct.script_goalyaw == "1" )
            struct.script_goalyaw = 1;
        else
            struct.script_goalyaw = undefined;
    }

    if ( isdefined( struct.script_anglevehicle ) )
    {
        if ( struct.script_anglevehicle == "true" || struct.script_anglevehicle == "1" )
            struct.script_goalyaw = 1;
        else
            struct.script_goalyaw = undefined;
    }

    if ( isdefined( struct.script_delay ) )
        struct.script_delay = float( struct.script_delay );

    if ( isdefined( struct.script_ignoreme ) )
        struct.script_ignoreme = int( struct.script_ignoreme );

    if ( isdefined( struct.script_ignoreall ) )
        struct.script_ignoreall = int( struct.script_ignoreall );

    if ( isdefined( struct.script_death ) )
        struct.script_death = int( struct.script_death );

    if ( isdefined( struct.script_wait ) )
        struct.script_wait = float( struct.script_wait );

    if ( isdefined( struct.script_forcespawn ) )
        struct.script_forcespawn = int( struct.script_forcespawn );

    if ( isdefined( struct.script_timer ) )
        struct.script_timer = int( struct.script_timer );

    if ( isdefined( struct.script_dist_only ) )
        struct.script_dist_only = int( struct.script_dist_only ) * int( struct.script_dist_only );

    if ( isdefined( struct.script_speed ) )
        struct.script_speed = int( struct.script_speed );

    if ( isdefined( struct.script_count ) )
        struct.script_count = int( struct.script_count );

    if ( isdefined( struct.script_radius ) )
        struct.script_radius = int( struct.script_radius );

    if ( isdefined( struct.script_delay_min ) )
        struct.script_delay_min = float( struct.script_delay_min );

    if ( isdefined( struct.script_delay_max ) )
        struct.script_delay_max = float( struct.script_delay_max );

    if ( isdefined( struct.script_escalation_level ) )
        struct.script_escalation_level = int( struct.script_escalation_level );

    if ( isdefined( struct.script_goalheight ) )
        struct.script_goalheight = int( struct.script_goalheight );

    if ( isdefined( struct.script_timeout ) )
        struct.script_timeout = float( struct.script_timeout );

    if ( isdefined( struct.script_pacifist ) )
        struct.script_pacifist = int( struct.script_pacifist );

    if ( isdefined( struct.script_forcespawn ) )
        struct.script_forcespawn = int( struct.script_forcespawn );

    if ( isdefined( struct.dontkilloff ) )
        struct.dontkilloff = int( struct.dontkilloff );

    if ( isdefined( struct.script_origin_other ) )
        struct.script_origin_other = struct.script_origin_other;

    if ( isdefined( struct.script_dot ) )
        struct.script_dot = int( struct.script_dot );

    if ( isdefined( struct.script_ignoreall ) )
        struct.script_ignoreall = int( struct.script_ignoreall );

    if ( isdefined( struct.script_stopnode ) )
        struct.script_stopnode = int( struct.script_stopnode );
}

cs_is_starttime()
{
    if ( scripts\common\utility::iscp() )
        return gettime() <= level.starttime + 250;
    else
        return gettime() <= level.starttimeutcseconds + 250;
}

cs_init_flags( _id_01315B36154A5E3E )
{
    if ( !scripts\engine\utility::flag_exist( "strike_init_done" ) )
        scripts\engine\utility::flag_init( "strike_init_done" );

    if ( !scripts\engine\utility::flag_exist( "create_script_initialized" ) )
        scripts\engine\utility::flag_init( "create_script_initialized" );

    _id_01315B36154A5E3E.objects = [];
    _id_01315B36154A5E3E scripts\engine\utility::ent_flag_init( "cs_structs_complete" );
    _id_01315B36154A5E3E scripts\engine\utility::ent_flag_init( "cs_models_complete" );
    _id_01315B36154A5E3E scripts\engine\utility::ent_flag_init( "cs_triggers_complete" );
}

cs_flags_init( _id_01315B36154A5E3E )
{
    if ( !scripts\engine\utility::flag_exist( "strike_init_done" ) )
        scripts\engine\utility::flag_init( "strike_init_done" );

    if ( !scripts\engine\utility::flag_exist( "create_script_initialized" ) )
        scripts\engine\utility::flag_init( "create_script_initialized" );

    _id_01315B36154A5E3E.objects = [];
    _id_01315B36154A5E3E scripts\engine\utility::ent_flag_init( "cs_objects_created" );
}

wait_for_flags( _id_01315B36154A5E3E, _id_039DC2B41CCB722D )
{
    if ( _id_01315B36154A5E3E scripts\engine\utility::ent_flag_exist( "cs_structs_complete" ) )
        _id_01315B36154A5E3E scripts\engine\utility::ent_flag_wait( "cs_structs_complete" );

    if ( _id_01315B36154A5E3E scripts\engine\utility::ent_flag_exist( "cs_triggers_complete" ) )
        _id_01315B36154A5E3E scripts\engine\utility::ent_flag_wait( "cs_triggers_complete" );

    if ( _id_01315B36154A5E3E scripts\engine\utility::ent_flag_exist( "cs_objects_created" ) )
        _id_01315B36154A5E3E scripts\engine\utility::ent_flag_wait( "cs_objects_created" );

    scripts\engine\utility::flag_set( _id_039DC2B41CCB722D + "_completed" );

    if ( cs_is_starttime() )
        endcreatescript( _id_01315B36154A5E3E );
}

endcreatescript( _id_01315B36154A5E3E )
{
    if ( isdefined( level.createscriptfilesinitialized ) )
    {
        level.createscriptfilesinitialized++;

        if ( level.createscriptfilesinitialized >= level.scripted_spawner_func.size )
        {
            scripts\engine\utility::flag_set( "strike_init_done" );
            scripts\engine\utility::flag_set( "create_script_initialized" );
        }
    }
    else
    {
        scripts\engine\utility::flag_set( "strike_init_done" );
        scripts\engine\utility::flag_set( "create_script_initialized" );
    }
}

wait_for_cs_flag( _id_82097CDAC1C61CCE )
{
    level endon( "game_ended" );
    scripts\engine\utility::flag_init( _id_82097CDAC1C61CCE + "_completed" );

    if ( !should_wait_for_cs_flag( _id_82097CDAC1C61CCE ) )
    {
        endcreatescript();
        scripts\engine\utility::flag_wait( _id_82097CDAC1C61CCE );
    }
}

should_wait_for_cs_flag( _id_82097CDAC1C61CCE )
{
    _id_F077ADF688122C36 = strtok( getdvar( "dvar_DB88B998734440CC", "" ), " " );
    _id_F077ADF688122C36 = scripts\engine\utility::array_combine( _id_F077ADF688122C36, level.active_cs_files );

    if ( _id_F077ADF688122C36.size < 1 )
        return 1;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_F077ADF688122C36.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_E97377032A878881 = _id_F077ADF688122C36[_id_AC0E594AC96AA3A8];

        if ( _id_E97377032A878881 == "all" )
            return 1;

        if ( _id_82097CDAC1C61CCE == _id_E97377032A878881 )
            return 1;
    }

    return 0;
}

register_cs_offsets( _id_9F279646ED66AB76, origin_offset, angle_offset )
{
    if ( isdefined( origin_offset ) )
        level.cs_origin_offset[_id_9F279646ED66AB76] = origin_offset;

    if ( isdefined( angle_offset ) )
        level.cs_angle_offset[_id_9F279646ED66AB76] = angle_offset;
}

set_cs_file_dvar( _id_B3D026D11EC695FB )
{
    level.active_cs_files[level.active_cs_files.size] = _id_B3D026D11EC695FB;
}

cleanup_cs_file_objects( _id_9F279646ED66AB76 )
{
    scripts\engine\utility::flag_clear( _id_9F279646ED66AB76 + "_completed" );
    scripts\engine\utility::flag_clear( _id_9F279646ED66AB76 );

    if ( isdefined( level.cs_object_container[_id_9F279646ED66AB76] ) && isdefined( level.cs_object_container[_id_9F279646ED66AB76].objects ) )
    {
        _id_6D906809844C7CB1 = level.cs_object_container[_id_9F279646ED66AB76].objects;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_6D906809844C7CB1.size; _id_AC0E594AC96AA3A8++ )
        {
            object = _id_6D906809844C7CB1[_id_AC0E594AC96AA3A8];
            level.cs_object_container[_id_9F279646ED66AB76].objects[_id_AC0E594AC96AA3A8] = undefined;

            if ( isstruct( object ) )
                scripts\engine\utility::deletestruct_ref( object );

            if ( isent( object ) )
                object delete();
        }
    }
}

s()
{
    return spawnstruct();
}

spawn_cover_nodes( _id_2D486638FB4FCC1F )
{
    _id_25189A7111F6896C = scripts\engine\utility::getstructarray( _id_2D486638FB4FCC1F, "targetname" );

    foreach ( struct in _id_25189A7111F6896C )
    {
        if ( !isdefined( struct.angles ) )
            struct.angles = ( 0, 0, 0 );

        type = "Cover Stand";

        switch ( struct.nodetype )
        {
            case "cover_left":
                type = "Cover Left";
                break;
            case "cover_right":
                type = "Cover Right";
                break;
            case "cover_crouch":
                type = "Cover Crouch";
                break;
            case "cover_stand":
                type = "Cover Stand";
                break;
            case "cover_crouch_window":
                type = "Cover Crouch Window";
                break;
            case "conceal_crouch":
                type = "Conceal Crouch";
                break;
            case "cover_exposed":
                type = "Exposed";
            case "turret":
                type = "Turret";
                break;
        }

        targetname = undefined;

        if ( isdefined( struct.node_targetname ) )
            targetname = struct.node_targetname;

        spawnflags = 0;

        if ( isdefined( struct.nostand ) && int( struct.nostand ) != 0 && struct.nostand != "false" )
            spawnflags = 4;

        if ( isdefined( struct.nocrouch ) && int( struct.nocrouch ) != 0 && struct.nocrouch != "false" )
            spawnflags = spawnflags + 8;

        if ( isdefined( struct.noprone ) && int( struct.noprone ) != 0 && struct.noprone != "false" )
            spawnflags = spawnflags + 16;

        struct.covernode = spawncovernode( struct.origin, struct.angles, type, spawnflags, targetname );

        if ( isdefined( struct.radius ) )
            struct.covernode.radius = struct.radius;
    }

    return _id_25189A7111F6896C;
}

delete_covernodes( _id_2D486638FB4FCC1F )
{
    _id_25189A7111F6896C = scripts\engine\utility::getstructarray( _id_2D486638FB4FCC1F, "targetname" );

    foreach ( struct in _id_25189A7111F6896C )
    {
        if ( isdefined( struct.covernode ) )
        {
            despawncovernode( struct.covernode );
            struct.covernode = undefined;
        }
    }
}

_id_B055D49370405173()
{
    _id_748A5B6E1EB008F5 = level._id_FD1365CE671037DB;
    level._id_FD1365CE671037DB++;
    return "cs" + _id_748A5B6E1EB008F5;
}
