// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

enter_demeanor_normal()
{
    thread set_demeanor_code_think( "normal" );
    thread demeanor_exit_func_wait( ::exit_demeanor_normal );
}

exit_demeanor_normal()
{

}

enter_demeanor_relaxed()
{
    thread set_demeanor_code_think( "relaxed", "iw8_ges_demeanor_relaxed" );
    thread demeanor_exit_func_wait( ::exit_demeanor_relaxed );
}

enter_demeanor_green_beam()
{
    thread set_demeanor_code_think( "relaxed", "iw8_ges_green_laser_demeanor_relaxed" );
    thread demeanor_exit_func_wait( ::exit_demeanor_relaxed );
}

exit_demeanor_relaxed()
{

}

enter_demeanor_safe( _id_5966E857C28E93C5 )
{
    thread set_demeanor_code_think( "relaxed", "iw8_ges_demeanor_safe" );
    thread demeanor_exit_func_wait( ::exit_demeanor_safe );
}

exit_demeanor_safe( _id_8B35AD057A83D7E7 )
{

}

safe_zoom_think()
{
    self endon( "entering_new_demeanor" );
    self endon( "death" );
    self.gestures.safedefaultfov = getdvarint( "dvar_B38FCF293D1E91A8" );
    childthread safe_zoom_in_listen();
    childthread safe_zoom_out_listen();
    thread safe_zoom_end_think();
}

safe_zoom_in_listen()
{
    level.player notifyonplayercommand( "safe_zoom_pressed", "+toggleads_throw" );
    level.player notifyonplayercommand( "safe_zoom_pressed", "+ads_akimbo_accessible" );
    level.player notifyonplayercommand( "safe_zoom_pressed", "+speed_throw" );

    for (;;)
    {
        self waittill( "safe_zoom_pressed" );
        self _meth_1D98630AA343510D( self.gestures.safedefaultfov - 9, 0.14 );
    }
}

safe_zoom_out_listen()
{
    level.player notifyonplayercommand( "safe_zoom_released", "-toggleads_throw" );
    level.player notifyonplayercommand( "safe_zoom_released", "-ads_akimbo_accessible" );
    level.player notifyonplayercommand( "safe_zoom_released", "-speed_throw" );

    for (;;)
    {
        self waittill( "safe_zoom_released" );
        self _meth_1D98630AA343510D( self.gestures.safedefaultfov, 0.1 );
    }
}

safe_zoom_end_think()
{
    self endon( "death" );
    self waittill( "entering_new_demeanor" );
    self _meth_1D98630AA343510D( self.gestures.safedefaultfov, 0.1 );
}

demeanor_exit_func_wait( _id_797F8708C9891E55 )
{
    self waittill( "entering_new_demeanor" );
    self [[ _id_797F8708C9891E55 ]]();
}

set_demeanor_code_think( _id_F7EE87DC76B45E62, _id_4134E028B4E08330 )
{
    self endon( "entering_new_demeanor" );
    self endon( "death" );

    for (;;)
    {
        if ( isdefined( _id_4134E028B4E08330 ) )
            result = self setdemeanorviewmodel( _id_F7EE87DC76B45E62, _id_4134E028B4E08330 );
        else
            result = self setdemeanorviewmodel( _id_F7EE87DC76B45E62 );

        if ( result )
            break;

        wait 0.05;
    }
}

player_gestures_input_disable( _id_B03CFAC5EE568943, _id_6C960BC6468BB7E4, mantle, sprint, fire, reload, _id_19AF0860C5502839, _id_8B953A03A24F231D, _id_1E38D543B5684DF6, _id_F3F382855FD4A9F8, _id_02346A16649C235F, _id_8DAD292B46B837C8, _id_C3C4590965030E9E, tag )
{
    self endon( "death" );

    if ( !isdefined( tag ) )
        tag = "gesture";

    if ( !isdefined( self.gestures ) )
        self.gestures = spawnstruct();

    if ( isdefined( _id_6C960BC6468BB7E4 ) && _id_6C960BC6468BB7E4 == 1 )
    {
        if ( level.player getstance() == "prone" )
        {
            scripts\engine\sp\utility::blend_movespeedscale( 0.0, 0, "gesture" );
            thread player_gestures_prone_getup_think( _id_B03CFAC5EE568943, tag );

            if ( !isdefined( self.gestures.restrictingpronespeed ) )
                self.gestures.restrictingpronespeed = 0;

            self.gestures.restrictingpronespeed++;
        }
        else
        {
            if ( !isdefined( self.gestures.restrictingpronestance ) )
                self.gestures.restrictingpronestance = 0;

            self.gestures.restrictingpronestance++;
            _id_3B64EB40368C1450::set( tag, "prone", 0 );
        }

        self.gestures.restrictingpronemovement = 1;
    }

    if ( isdefined( mantle ) && mantle == 1 )
    {
        if ( !isdefined( self.gestures.restrictingmantle ) )
            self.gestures.restrictingmantle = 0;

        self.gestures.restrictingmantle++;
        _id_3B64EB40368C1450::set( tag, "mantle", 0 );
    }

    if ( isdefined( sprint ) && sprint == 1 )
    {
        if ( !isdefined( self.gestures.restrictingsprint ) )
            self.gestures.restrictingsprint = 0;

        self.gestures.restrictingsprint++;
        _id_3B64EB40368C1450::set( tag, "sprint", 0 );
    }

    if ( isdefined( fire ) && fire == 1 )
    {
        if ( !isdefined( self.gestures.restrictingfire ) )
            self.gestures.restrictingfire = 0;

        self.gestures.restrictingfire++;
        _id_3B64EB40368C1450::set( tag, "fire", 0 );
    }

    if ( isdefined( reload ) && reload == 1 )
    {
        if ( !isdefined( self.gestures.restrictingreload ) )
            self.gestures.restrictingreload = 0;

        self.gestures.restrictingreload++;
        _id_3B64EB40368C1450::set( tag, "reload", 0 );
    }

    if ( isdefined( _id_19AF0860C5502839 ) && _id_19AF0860C5502839 == 1 )
    {
        if ( !isdefined( self.gestures.restrictingweaponswitch ) )
            self.gestures.restrictingweaponswitch = 0;

        self.gestures.restrictingweaponswitch++;
        _id_3B64EB40368C1450::set( tag, "weapon_switch", 0 );
    }

    if ( isdefined( _id_8B953A03A24F231D ) && _id_8B953A03A24F231D == 1 )
    {
        if ( !isdefined( self.gestures.restrictingads ) )
            self.gestures.restrictingads = 0;

        self.gestures.restrictingads++;
        _id_3B64EB40368C1450::set( tag, "ads", 0 );
    }

    if ( isdefined( _id_1E38D543B5684DF6 ) && _id_1E38D543B5684DF6 == 1 )
    {
        if ( !isdefined( self.gestures.restrictingwallrun ) )
            self.gestures.restrictingwallrun = 0;

        self.gestures.restrictingwallrun++;
        _id_3B64EB40368C1450::set( tag, "wallrun", 0 );
    }

    if ( isdefined( _id_F3F382855FD4A9F8 ) && _id_F3F382855FD4A9F8 == 1 )
    {
        if ( !isdefined( self.gestures.restrictingdoublejump ) )
            self.gestures.restrictingdoublejump = 0;

        self.gestures.restrictingdoublejump++;
        _id_3B64EB40368C1450::set( tag, "doublejump", 0 );
    }

    if ( isdefined( _id_02346A16649C235F ) && _id_02346A16649C235F == 1 )
    {
        if ( !isdefined( self.gestures.restrictingmeleeattack ) )
            self.gestures.restrictingmeleeattack = 0;

        self.gestures.restrictingmeleeattack++;
        _id_3B64EB40368C1450::set( tag, "melee", 0 );
    }

    if ( isdefined( _id_8DAD292B46B837C8 ) && _id_8DAD292B46B837C8 == 1 )
    {
        if ( !isdefined( self.gestures.restrictingoffhandweapons ) )
            self.gestures.restrictingoffhandweapons = 0;

        self.gestures.restrictingoffhandweapons++;
        _id_3B64EB40368C1450::set( tag, "offhand_weapons", 0 );
    }

    if ( isdefined( _id_C3C4590965030E9E ) )
        wait( _id_C3C4590965030E9E );
    else
    {
        self waittill( "gesture_stopped", _id_8F353B054812A006 );

        if ( _id_8F353B054812A006 != _id_B03CFAC5EE568943 )
        {
            for (;;)
            {
                if ( !self isgestureplaying( _id_B03CFAC5EE568943 ) )
                    break;

                wait 0.05;
            }
        }
    }

    self notify( _id_B03CFAC5EE568943 + "gesture_stopped_internal" );
    player_gestures_input_enable( _id_6C960BC6468BB7E4, mantle, sprint, fire, reload, _id_19AF0860C5502839, _id_8B953A03A24F231D, _id_1E38D543B5684DF6, _id_F3F382855FD4A9F8, _id_02346A16649C235F, _id_8DAD292B46B837C8, tag );
}

player_gestures_input_enable( _id_6C960BC6468BB7E4, mantle, sprint, fire, reload, _id_19AF0860C5502839, _id_8B953A03A24F231D, _id_1E38D543B5684DF6, _id_F3F382855FD4A9F8, _id_02346A16649C235F, _id_8DAD292B46B837C8, tag )
{
    if ( !isdefined( self.gestures ) )
        self.gestures = spawnstruct();

    if ( isdefined( _id_6C960BC6468BB7E4 ) && _id_6C960BC6468BB7E4 > 0 )
    {
        if ( isdefined( self.gestures.restrictingpronespeed ) && self.gestures.restrictingpronespeed > 0 )
        {
            if ( isdefined( level.player.movespeedscale ) && level.player.movespeedscale == 0.0 )
            {
                self.gestures.restrictingpronespeed--;

                if ( self.gestures.restrictingpronespeed <= 0 )
                    scripts\engine\sp\utility::blend_movespeedscale( 1.0, 0, "gesture" );
            }
        }

        if ( isdefined( self.gestures.restrictingpronestance ) && self.gestures.restrictingpronestance > 0 )
        {
            self.gestures.restrictingpronestance--;
            _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( tag );
        }
    }

    if ( isdefined( mantle ) && mantle == 1 )
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( tag );

    if ( isdefined( sprint ) && sprint == 1 )
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( tag );

    if ( isdefined( fire ) && fire == 1 )
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( tag );

    if ( isdefined( reload ) && reload == 1 )
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( tag );

    if ( isdefined( _id_19AF0860C5502839 ) && _id_19AF0860C5502839 == 1 )
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( tag );

    if ( isdefined( _id_8B953A03A24F231D ) && _id_8B953A03A24F231D == 1 )
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( tag );

    if ( isdefined( _id_1E38D543B5684DF6 ) && _id_1E38D543B5684DF6 == 1 )
        _id_3B64EB40368C1450::set( tag, "wallrun", 0 );

    if ( isdefined( _id_F3F382855FD4A9F8 ) && _id_F3F382855FD4A9F8 == 1 )
        _id_3B64EB40368C1450::set( tag, "doublejump", 0 );

    if ( isdefined( _id_02346A16649C235F ) && _id_02346A16649C235F == 1 )
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( tag );

    if ( isdefined( _id_8DAD292B46B837C8 ) && _id_8DAD292B46B837C8 == 1 )
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( tag );
}

player_gestures_prone_getup_think( _id_B03CFAC5EE568943, tag )
{
    self endon( "death" );
    self endon( _id_B03CFAC5EE568943 + "gesture_stopped_internal" );
    _id_90D39FD3F5A9895D = 1;

    while ( _id_90D39FD3F5A9895D )
    {
        if ( self getstance() != "prone" )
        {
            waittillframeend;

            if ( isdefined( level.player.movespeedscale ) && level.player.movespeedscale == 0.0 )
            {
                self.gestures.restrictingpronespeed--;

                if ( self.gestures.restrictingpronespeed <= 0 )
                    scripts\engine\sp\utility::blend_movespeedscale( 1.0, 0, "gesture" );
            }

            if ( !isdefined( self.gestures.restrictingpronestance ) )
                self.gestures.restrictingpronestance = 0;

            self.gestures.restrictingpronestance++;
            _id_3B64EB40368C1450::set( tag, "prone", 0 );
            _id_90D39FD3F5A9895D = 0;
        }

        wait 0.05;
    }
}

_id_5231B0F285527A15()
{
    level.player endon( "death" );

    for (;;)
    {
        while ( _id_A233E21442860E82() )
            waitframe();

        if ( !_id_E4C009184C8A30E6() )
        {
            _id_B173118A12EA61B0 = undefined;

            while ( !scripts\engine\utility::time_has_passed( _id_B173118A12EA61B0, 0.5 ) )
            {
                if ( !_id_E4C009184C8A30E6() )
                    _id_B173118A12EA61B0 = gettime();

                waitframe();
            }
        }

        level.player scripts\engine\sp\utility::set_player_demeanor( "relaxed" );
        _id_FBE80FD3686A42FD = undefined;

        while ( !scripts\engine\utility::time_has_passed( _id_FBE80FD3686A42FD, 1 ) )
        {
            if ( _id_A233E21442860E82() )
                break;

            if ( _id_E4C009184C8A30E6() )
                _id_FBE80FD3686A42FD = gettime();

            waitframe();
        }

        level.player scripts\engine\sp\utility::set_player_demeanor( "normal" );
    }
}

_id_A233E21442860E82()
{
    if ( level.player.currentweapon.type != "bullet" || istrue( level.player._id_046ABBA9D70107BE ) )
        return 1;

    return !getdvarint( "dvar_92EDCD4E782939E5", 0 ) || istrue( level.player._id_336DB6C8B15AD3DF );
}

wait_combat_cooldown( _id_08254592D885A289, timeout, radius )
{
    while ( !isdefined( timeout ) || timeout > 0 )
    {
        if ( !_id_53F1CFF70B5D2981( timeout, radius ) )
            return 0;

        waitframe();

        if ( isdefined( timeout ) )
            timeout = timeout - 0.05;
    }

    return 1;
}

_id_53F1CFF70B5D2981( time, radius )
{
    _id_CD61D27D5F87DCB0 = isdefined( level.player._id_A350546E224CE766 ) && !scripts\engine\utility::time_has_passed( level.player._id_A350546E224CE766, time );
    _id_95613AE52F97AD40 = isdefined( level.player._id_2216ECBCDD3468A4 ) && !scripts\engine\utility::time_has_passed( level.player._id_2216ECBCDD3468A4, time );
    _id_D13B91A3E165B579 = isdefined( level.player._id_0B4410F6C6F5B0F5 ) && !scripts\engine\utility::time_has_passed( level.player._id_0B4410F6C6F5B0F5, time );
    damaged = level.player.health < level.player.maxhealth;

    if ( level.player _meth_D90F68A0167DD7BE() || _id_CD61D27D5F87DCB0 || _id_95613AE52F97AD40 || damaged )
        return 1;

    if ( istrue( radius ) )
    {
        _id_1A96B3062BB2C598 = radius * radius;
        _id_310236DBF257FBB5 = getaiarray();

        foreach ( ai in _id_310236DBF257FBB5 )
        {
            if ( !isalive( ai ) || !isdefined( ai.team ) || ai.team == "dead" || ai.team == "neutral" )
                continue;

            if ( !scripts\engine\utility::is_equal( ai.enemy, level.player ) && distancesquared( ai.origin, level.player.origin ) > _id_1A96B3062BB2C598 )
                continue;

            if ( ai _id_35DE402EFC5ACFB3::_id_45F570789FF9A0FD( time ) )
                return 1;
        }
    }

    return 0;
}

_id_0160704EE50B41FA()
{
    level.player endon( "death" );
    childthread _id_0CA0FE6201120DF5();
    level.player._id_F087A6EE658D07E1 = 800;
    level.player._id_4AB685C88F4B57BA = 1.5;

    for (;;)
    {
        level.player._id_046ABBA9D70107BE = 0;
        setsaveddvar( "dvar_632794AC5E880915", 0 );

        while ( !_id_53F1CFF70B5D2981( level.player._id_4AB685C88F4B57BA * 2, level.player._id_F087A6EE658D07E1 ) )
            wait( level.player._id_4AB685C88F4B57BA );

        level.player._id_046ABBA9D70107BE = 1;
        setsaveddvar( "dvar_632794AC5E880915", 1 );

        while ( _id_53F1CFF70B5D2981( level.player._id_4AB685C88F4B57BA * 2, level.player._id_F087A6EE658D07E1 ) )
            wait( level.player._id_4AB685C88F4B57BA );
    }
}

_id_0CA0FE6201120DF5()
{
    _id_38C64AEFBD73546A = -9999;

    for (;;)
    {
        result = level.player scripts\engine\utility::waittill_any_return( "weapon_fired", "aim", "bulletwhizby", "damage" );

        switch ( result )
        {
            case "weapon_fired":
                level.player.last_weapon_fire_time = gettime();
                break;
            case "aim":
                if ( gettime() - _id_38C64AEFBD73546A > 50 )
                    level.player._id_2216ECBCDD3468A4 = gettime();

                _id_38C64AEFBD73546A = gettime();
                break;
            case "bulletwhizby":
            case "damage":
                level.player._id_0B4410F6C6F5B0F5 = gettime();
                break;
        }
    }
}

_id_E4C009184C8A30E6()
{
    allies = getaiarrayinradius( level.player.origin, 1500, "allies" );
    civs = getaiarrayinradius( level.player.origin, 1500, "neutral" );

    foreach ( _id_A5638903B40C5A21 in civs )
    {
        if ( istrue( _id_A5638903B40C5A21._id_63E89CA6BECCAE42 ) )
            allies[allies.size] = _id_A5638903B40C5A21;
    }

    _id_8B333A88CE97BA96 = level.player geteye();
    _id_70222FBC47330166 = anglestoforward( level.player getplayerangles() );
    end = _id_8B333A88CE97BA96 + anglestoforward( level.player getplayerangles() ) * 1500;
    result = scripts\engine\trace::ray_trace( _id_8B333A88CE97BA96, end, level.player );
    return isdefined( result["entity"] ) && !istrue( result["entity"].bisincombat ) && scripts\engine\utility::array_contains( allies, result["entity"] );
    return 0;
}

_id_B2385036531DEB4D( ent, _id_21B0311D64CADFA2, _id_8B333A88CE97BA96, _id_70222FBC47330166, _id_B1EDB654DE127CC7 )
{
    _id_C9ACE7E9AFBC3263 = ent getapproxeyepos() - ( 0, 0, 15 );
    _id_132A7E059D13E4DA = vectordot( _id_C9ACE7E9AFBC3263 - _id_8B333A88CE97BA96, _id_70222FBC47330166 ) > 0;
    _id_5979848104C205BC = length( vectorfromlinetopoint( _id_8B333A88CE97BA96, _id_8B333A88CE97BA96 + _id_70222FBC47330166, _id_C9ACE7E9AFBC3263 ) );

    if ( !_id_132A7E059D13E4DA || _id_5979848104C205BC > _id_B1EDB654DE127CC7 )
        return 0;

    return scripts\engine\trace::ray_trace_passed( _id_8B333A88CE97BA96, _id_C9ACE7E9AFBC3263, ent );
}
