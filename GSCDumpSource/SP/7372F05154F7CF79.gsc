// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    missionsettings = createmission();
    level.missionsettings = missionsettings;
    level.lowestgameskill = getdvarint( "dvar_B46C8A551FF66D53" );
    _id_65008204419B6580 = undefined;
    addlevel( "strike", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "nightwar", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "marina", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "montage_canals", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "border", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "backstabbed", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "gunship_compound", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 0, 100, _id_65008204419B6580, [ "gunship_compound_tr" ], 0 );
    addlevel( "gunship_ambush", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 0, 100, _id_65008204419B6580, [ "gunship_ambush_tr" ], 0 );
    addlevel( "intercept", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "convoy_chase", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "party", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "shipaf", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "wounded", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "prison", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "stolen", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "shadowbase", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );
    addlevel( "tower", 0, _id_65008204419B6580, 1, _id_65008204419B6580, 10, 100, _id_65008204419B6580, _id_65008204419B6580, 0 );

    if ( isdefined( level.endmission_main_func ) )
    {
        [[ level.endmission_main_func ]]();
        level.endmission_main_func = undefined;
    }
}

debug_test_next_mission()
{
    wait 10;

    while ( getdvarint( "dvar_1B003ACE1EE16807" ) < 1 )
        wait 3;

    nextmission_internal();
}

nextmission_preload_internal( type, _id_740CF07D74DBA935 )
{
    if ( !isdefined( type ) )
        type = "full";

    if ( !isdefined( _id_740CF07D74DBA935 ) )
        _id_740CF07D74DBA935 = 1;

    _id_3012ABBF8B098D0F = level.missionsettings getlevelindex( level.script );
    _id_AD4E2213692993B6 = _id_3012ABBF8B098D0F + 1;
    preload_transients = level.missionsettings.levels[_id_AD4E2213692993B6].preload_transients;

    if ( _id_740CF07D74DBA935 )
        level thread scripts\engine\sp\utility::nextmission_primeloadbink();

    if ( getdvarint( "dvar_0B61CA996F1AB8A8", 1 ) )
    {
        _id_0D4C90180F6E4B32 = level.missionsettings getlevelname( _id_AD4E2213692993B6 );

        switch ( type )
        {
            case "full":
                if ( isdefined( preload_transients ) )
                {
                    array = scripts\engine\utility::array_combine( [ _id_0D4C90180F6E4B32 ], preload_transients );
                    _func_5A68088C98516ED5( array );
                }
                else
                    _func_5A68088C98516ED5( _id_0D4C90180F6E4B32 );

                break;
            case "root":
                _func_5A68088C98516ED5( _id_0D4C90180F6E4B32 );
                break;
            case "transients":
                if ( isdefined( preload_transients ) )
                    _func_5A68088C98516ED5( preload_transients );

                break;
        }

        while ( !_func_5924D03BE18328C2() )
            waitframe();
    }

    scripts\engine\utility::flag_set( "nextmission_preload_complete" );
}

nextmission_primeloadbink_internal()
{
    if ( !isdefined( getlevelindex( level.script ) ) || !isdefined( getlevelindex( level.script ) + 1 ) )
        return;

    if ( !scripts\engine\utility::flag_exist( "nextmission_transition_bink_primed" ) )
        scripts\engine\utility::flag_init( "nextmission_transition_bink_primed" );

    _id_AD4E2213692993B6 = getlevelindex( level.script ) + 1;
    _id_1B5061C6C41A4D30 = getlevelbink( _id_AD4E2213692993B6 );
    setsaveddvar( "dvar_551829B57FE2B8F6", "0" );
    setsaveddvar( "dvar_D3EE5A6578FE61DE", "0" );
    setsaveddvar( "dvar_B9FF37D084074DF3", "1" );
    _func_ 5770D2EA2D158CF();
    waitframe();

    if ( !isdefined( _id_1B5061C6C41A4D30 ) )
        _id_1B5061C6C41A4D30 = "default";

    _func_1EB3E4964FF5A2EF( _id_1B5061C6C41A4D30, 1, 1, 1, 0, 0, 1 );

    while ( !_func_D0860C69E8E4022C() )
        waitframe();

    scripts\engine\utility::flag_set( "nextmission_transition_bink_primed" );
}

createmission()
{
    _id_AA1ED8F12D71A7A5 = spawnstruct();
    _id_AA1ED8F12D71A7A5.levels = [];
    _id_AA1ED8F12D71A7A5.prereqs = [];
    return _id_AA1ED8F12D71A7A5;
}

getrestartlevel( _id_0D4C90180F6E4B32 )
{
    if ( !isdefined( level.missionsettings ) )
        return undefined;

    index = getlevelindex( _id_0D4C90180F6E4B32 );

    if ( isdefined( level.missionsettings.levels[index].restartlevel ) )
        return level.missionsettings.levels[index].restartlevel;
}

level_settle_time_get( _id_0D4C90180F6E4B32 )
{
    index = getlevelindex( _id_0D4C90180F6E4B32 );

    if ( !isdefined( index ) )
        return 0;
    else
        return level.missionsettings.levels[index].settletime;
}

client_settle_time_get( _id_0D4C90180F6E4B32 )
{
    index = getlevelindex( _id_0D4C90180F6E4B32 );

    if ( !isdefined( index ) )
        return 0;
    else
        return level.missionsettings.levels[index].clientsettletime;
}

level_settle_time_wait( _id_0D4C90180F6E4B32 )
{
    if ( !isdefined( _id_0D4C90180F6E4B32 ) )
        _id_0D4C90180F6E4B32 = level.script;

    settletime = level_settle_time_get( _id_0D4C90180F6E4B32 );
    clientsettletime = client_settle_time_get( _id_0D4C90180F6E4B32 );

    if ( !isdefined( settletime ) )
        settletime = 0;

    if ( !isdefined( clientsettletime ) )
        clientsettletime = 0;
    else
        clientsettletime = clientsettletime * 0.02;

    _id_0814A0605452D6C7 = settletime + clientsettletime;

    if ( isdefined( _id_0814A0605452D6C7 ) )
        wait( _id_0814A0605452D6C7 * 0.05 );

    if ( isdefined( clientsettletime ) && clientsettletime <= 0 )
        waitframe();
    else if ( !isdefined( settletime ) || settletime <= 0 )
        waitframe();
}

nextmission_internal()
{
    if ( scripts\sp\utility::is_demo() )
    {
        if ( isdefined( level.nextmission_exit_time ) )
            _func_DD2FFD2B8725F9F9( "", 0, level.nextmission_exit_time );
        else
            _func_DD2FFD2B8725F9F9( "", 0 );
    }
    else
    {
        scripts\sp\analytics::analytics_upload_during_nextmission();
        level notify( "nextmission" );
        level.nextmission = 1;
        level.player enableinvulnerability();
        _id_3012ABBF8B098D0F = undefined;
        setdvar( "dvar_8C684D38F4200B12", "0" );
        setdvar( "dvar_B5229012CCF8E014", "" );
        setdvar( "dvar_3E810E7DCF052F5D", level.script );
        game["previous_map"] = undefined;
        _id_3012ABBF8B098D0F = getlevelindex( level.script );

        if ( !isdefined( _id_3012ABBF8B098D0F ) )
        {
            _func_563A386437F84FD0( level.script );
            return;
        }

        if ( !scripts\sp\utility::is_lastlevel() )
            scripts\engine\sp\utility::level_end_save();

        setlevelcompleted( _id_3012ABBF8B098D0F );
        collateraldamageassessment( level.script );
        _id_E1F111891B10722C = updatesppercent();
        _func_71B5F6B0E248E225();

        if ( level.missionsettings hasachievement( _id_3012ABBF8B098D0F ) )
            scripts\sp\utility::giveachievement_wrapper( level.missionsettings getachievement( _id_3012ABBF8B098D0F ) );

        if ( level.missionsettings haslevelveteranaward( _id_3012ABBF8B098D0F ) && getlevelcompleted( _id_3012ABBF8B098D0F ) == 4 && level.missionsettings check_other_haslevelveteranachievement( _id_3012ABBF8B098D0F ) )
            scripts\sp\utility::giveachievement_wrapper( level.missionsettings getlevelveteranaward( _id_3012ABBF8B098D0F ) );

        if ( level.missionsettings hasmissionhardenedaward() && level.missionsettings getlowestskill() > 2 )
            scripts\sp\utility::giveachievement_wrapper( level.missionsettings gethardenedaward() );

        scripts\sp\analytics::start_point_update( "mission_end", 1 );

        if ( scripts\sp\utility::is_lastlevel() )
        {
            _func_DD2FFD2B8725F9F9( "", 0 );
            return;
        }

        _id_AD4E2213692993B6 = _id_3012ABBF8B098D0F + 1;
        _id_1B5061C6C41A4D30 = getlevelbink( _id_AD4E2213692993B6 );

        if ( isdefined( _id_1B5061C6C41A4D30 ) && !istrue( level.endmission_bink_skip ) )
        {
            setdvar( "dvar_4967B5F5316F16AF", _id_1B5061C6C41A4D30 );

            if ( !scripts\engine\utility::flag_exist( "nextmission_transition_bink_primed" ) )
                scripts\engine\utility::flag_init( "nextmission_transition_bink_primed" );

            setomnvar( "ui_hide_hud", 1 );

            if ( !level.player islinked() )
            {
                tag = level.player scripts\engine\utility::spawn_tag_origin();
                level.player playerlinktoabsolute( tag );
            }

            level.player freezecontrols( 1 );

            if ( scripts\engine\utility::flag( "nextmission_transition_bink_primed" ) )
            {
                setsaveddvar( "dvar_551829B57FE2B8F6", "0" );
                setsaveddvar( "dvar_D3EE5A6578FE61DE", "1" );
                setsaveddvar( "dvar_B9FF37D084074DF3", "1" );
                _func_ F6145A54AB9811F( 0 );
            }
            else
            {
                setsaveddvar( "dvar_551829B57FE2B8F6", "0" );
                setsaveddvar( "dvar_D3EE5A6578FE61DE", "1" );
                setsaveddvar( "dvar_B9FF37D084074DF3", "1" );
                _func_1EB3E4964FF5A2EF( _id_1B5061C6C41A4D30, 0, 1, 1, 0, 0, 1 );
            }
        }

        if ( _func_8F7452209F2FA982() )
        {
            if ( isdefined( level._id_483EEDD411DDB20E ) && level.script != "gunship_compound" )
                _func_CD65C2CDEEB89A30( level._id_483EEDD411DDB20E, "completed" );
        }

        scripts\sp\analytics::analytics_lui_mission_end_dlog();

        if ( level.missionsettings getlevelstreamsync( _id_AD4E2213692993B6 ) )
            _func_7FB82BC892E44CAA();

        if ( isdefined( level.missionsettings getfadetime( _id_3012ABBF8B098D0F ) ) )
        {
            _func_DD2FFD2B8725F9F9( level.missionsettings getlevelname( _id_AD4E2213692993B6 ), level.missionsettings getkeepweapons( _id_3012ABBF8B098D0F ), level.missionsettings getfadetime( _id_3012ABBF8B098D0F ) );
            return;
        }

        _func_DD2FFD2B8725F9F9( level.missionsettings getlevelname( _id_AD4E2213692993B6 ), level.missionsettings getkeepweapons( _id_3012ABBF8B098D0F ) );
    }
}

collateraldamageassessment( _id_0D4C90180F6E4B32 )
{
    _id_92FF386352D386A0 = getcollateraldamagegrade();
    level.player _meth_8E232755197D2A79( "civiliansKilledGrade", _id_0D4C90180F6E4B32, _id_92FF386352D386A0 );
    _id_3C7588416D5EB213 = level.player _meth_2583E4BC5ABCA7B5( "civiliansKilledGradeBest", _id_0D4C90180F6E4B32 );

    if ( _id_92FF386352D386A0 > _id_3C7588416D5EB213 )
        level.player _meth_8E232755197D2A79( "civiliansKilledGradeBest", _id_0D4C90180F6E4B32, _id_92FF386352D386A0 );
}

getcollateraldamagegrade()
{
    _id_0D40D6D92361E9A2 = 4;
    _id_92FF386352D386A0 = int( min( level.friendlyfire["civilians_killed"], _id_0D40D6D92361E9A2 ) );
    _id_92FF386352D386A0 = _id_0D40D6D92361E9A2 - _id_92FF386352D386A0;
    return int( _id_92FF386352D386A0 );
}

updatesppercent()
{
    _id_E1F111891B10722C = int( gettotalpercentcompletesp() * 100 );

    if ( getdvarint( "dvar_B8B8E25BB75B206D" ) == 0 )
        level.player _meth_98122FA7C7A078D8( "percentCompleteSP", _id_E1F111891B10722C );

    return _id_E1F111891B10722C;
}

addlevel( _id_0D4C90180F6E4B32, keepweapons, achievement, completion, postloadbink, settletime, clientsettletime, restartlevel, preload_transients, streamsync )
{
    count = level.missionsettings.levels.size;
    level.missionsettings.levels[count] = spawnstruct();
    level.missionsettings.levels[count].name = _id_0D4C90180F6E4B32;
    level.missionsettings.levels[count].keepweapons = keepweapons;
    level.missionsettings.levels[count].achievement = achievement;
    level.missionsettings.levels[count].completion = completion;
    level.missionsettings.levels[count].postloadbink = postloadbink;
    level.missionsettings.levels[count].settletime = settletime;
    level.missionsettings.levels[count].clientsettletime = clientsettletime;
    level.missionsettings.levels[count].restartlevel = restartlevel;
    level.missionsettings.levels[count].preload_transients = preload_transients;
    level.missionsettings.levels[count].streamsync = streamsync;
    level.missionsettings.levels[count].fade_time = 0;
    _id_24407299B37C0607 = tablelookup( "sp/levels.csv", 1, _id_0D4C90180F6E4B32, 3 );

    if ( _id_24407299B37C0607 != "" )
        level.missionsettings.levels[count].bink = _id_24407299B37C0607;
}

addprereq( _id_373249E63DD9730B )
{
    _id_82B6D1FBEFCC5FAE = level.missionsettings.prereqs.size;
    level.missionsettings.prereqs[_id_82B6D1FBEFCC5FAE] = _id_373249E63DD9730B;
}

getlevelindex( _id_0D4C90180F6E4B32 )
{
    if ( !isdefined( level.missionsettings ) || !isdefined( level.missionsettings.levels ) )
        return undefined;

    foreach ( _id_3012ABBF8B098D0F, _id_DF2C1E9FC9EEBC02 in level.missionsettings.levels )
    {
        if ( _id_DF2C1E9FC9EEBC02.name == _id_0D4C90180F6E4B32 )
            return _id_3012ABBF8B098D0F;
    }

    return undefined;
}

getlevelbink( _id_3012ABBF8B098D0F )
{
    bink = undefined;

    if ( _id_3012ABBF8B098D0F < level.missionsettings.levels.size )
        bink = level.missionsettings.levels[_id_3012ABBF8B098D0F].bink;

    return bink;
}

getpostloadbink( _id_0D4C90180F6E4B32 )
{
    index = getlevelindex( _id_0D4C90180F6E4B32 );

    if ( isdefined( index ) )
    {
        if ( isdefined( level.missionsettings.levels[index].postloadbink ) )
            return level.missionsettings.levels[index].postloadbink;
    }

    return "none";
}

getlevelname( _id_3012ABBF8B098D0F )
{
    return self.levels[_id_3012ABBF8B098D0F].name;
}

_id_823F915153B5FCD8()
{
    return level.missionsettings.levels[level.missionsettings.levels.size - 1].name;
}

getkeepweapons( _id_3012ABBF8B098D0F )
{
    return self.levels[_id_3012ABBF8B098D0F].keepweapons;
}

getachievement( _id_3012ABBF8B098D0F )
{
    return self.levels[_id_3012ABBF8B098D0F].achievement;
}

getlevelveteranaward( _id_3012ABBF8B098D0F )
{
    return self.levels[_id_3012ABBF8B098D0F].veteran_achievement;
}

getlevelstreamsync( _id_3012ABBF8B098D0F )
{
    return self.levels[_id_3012ABBF8B098D0F].streamsync;
}

setfadetime( index, time )
{
    level.missionsettings.levels[index].fade_time = time;
}

getfadetime( index )
{
    if ( !isdefined( self.levels[index].fade_time ) )
        return undefined;

    return self.levels[index].fade_time;
}

haslevelveteranaward( _id_3012ABBF8B098D0F )
{
    if ( isdefined( self.levels[_id_3012ABBF8B098D0F].veteran_achievement ) )
        return 1;
    else
        return 0;
}

hasachievement( _id_3012ABBF8B098D0F )
{
    if ( isdefined( self.levels[_id_3012ABBF8B098D0F].achievement ) )
        return 1;
    else
        return 0;
}

check_other_haslevelveteranachievement( _id_3012ABBF8B098D0F )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < self.levels.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( _id_AC0E594AC96AA3A8 == _id_3012ABBF8B098D0F )
            continue;

        if ( !haslevelveteranaward( _id_AC0E594AC96AA3A8 ) )
            continue;

        if ( self.levels[_id_AC0E594AC96AA3A8].veteran_achievement == self.levels[_id_3012ABBF8B098D0F].veteran_achievement )
        {
            if ( getlevelcompleted( _id_AC0E594AC96AA3A8 ) < 4 )
                return 0;
        }
    }

    return 1;
}

gethardenedaward()
{
    return self.hardenedaward;
}

hasmissionhardenedaward()
{
    if ( isdefined( self.hardenedaward ) )
        return 1;
    else
        return 0;
}

gettotalpercentcompletesp()
{
    _id_A5DA2519A559B16B = max( getstat_progression( 1 ), getstat_progression( 2 ) );
    _id_870CA0C572D3B097 = 0.5;
    _id_44A90F29EE2B00FF = getstat_progression( 3 );
    _id_BE0978EC6507B6F3 = 0.25;
    _id_7BCBE5E3D1151D8B = getstat_progression( 4 );
    _id_286FDC6F7B7F3EF7 = 0.1;
    _id_40B251F18DFA02CC = getstat_intel();
    _id_64951E461B04A4C0 = 0.15;
    _id_D40A0853F6656185 = 0.0;
    _id_D40A0853F6656185 = _id_D40A0853F6656185 + _id_870CA0C572D3B097 * _id_A5DA2519A559B16B;
    _id_D40A0853F6656185 = _id_D40A0853F6656185 + _id_BE0978EC6507B6F3 * _id_44A90F29EE2B00FF;
    _id_D40A0853F6656185 = _id_D40A0853F6656185 + _id_286FDC6F7B7F3EF7 * _id_7BCBE5E3D1151D8B;
    _id_D40A0853F6656185 = _id_D40A0853F6656185 + _id_64951E461B04A4C0 * _id_40B251F18DFA02CC;
    return _id_D40A0853F6656185;
}

getstat_progression( difficulty )
{
    _id_99487D1DB884E234 = level.player _meth_569AC32FF1837D7C( "missionHighestDifficulty" );
    levels = 0;
    _id_C51133D2565044C9 = [];
    skipped = 0;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.missionsettings.levels.size - 1; _id_AC0E594AC96AA3A8++ )
    {
        if ( int( _id_99487D1DB884E234[_id_AC0E594AC96AA3A8] ) >= difficulty )
            levels++;
    }

    completion = levels / ( level.missionsettings.levels.size - 1 ) * 100;
    return completion;
}

getstat_intel()
{
    return level.player _meth_569AC32FF1837D7C( "cheatPoints" ) / 45 * 100;
}

getlevelcompleted( _id_3012ABBF8B098D0F )
{
    return int( level.player _meth_569AC32FF1837D7C( "missionHighestDifficulty" )[_id_3012ABBF8B098D0F] );
}

setlevelcompleted( _id_3012ABBF8B098D0F )
{
    levelprogressioncomplete( _id_3012ABBF8B098D0F );
    _id_D8525FE4D08C6CD8 = level.player _meth_569AC32FF1837D7C( "missionHighestDifficulty" );
    _id_E30EE4AE67D05D90 = "";

    for ( index = 0; index < _id_D8525FE4D08C6CD8.size; index++ )
    {
        if ( index != _id_3012ABBF8B098D0F )
        {
            _id_E30EE4AE67D05D90 = _id_E30EE4AE67D05D90 + _id_D8525FE4D08C6CD8[index];
            continue;
        }

        if ( level.lowestgameskill + 1 > int( _id_D8525FE4D08C6CD8[_id_3012ABBF8B098D0F] ) )
        {
            _id_E30EE4AE67D05D90 = _id_E30EE4AE67D05D90 + ( level.lowestgameskill + 1 );
            continue;
        }

        _id_E30EE4AE67D05D90 = _id_E30EE4AE67D05D90 + _id_D8525FE4D08C6CD8[index];
    }

    _id_66EE9F2919CCAB46 = "";
    _id_887D42B1410C39FE = 0;
    _id_FCB005BA59DA2C8B = 0;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_E30EE4AE67D05D90.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( int( _id_E30EE4AE67D05D90[_id_AC0E594AC96AA3A8] ) == 0 || _id_887D42B1410C39FE )
        {
            _id_66EE9F2919CCAB46 = _id_66EE9F2919CCAB46 + "0";
            _id_887D42B1410C39FE = 1;
            continue;
        }

        _id_66EE9F2919CCAB46 = _id_66EE9F2919CCAB46 + _id_E30EE4AE67D05D90[_id_AC0E594AC96AA3A8];
        _id_FCB005BA59DA2C8B++;
    }

    mission_diffstring_ifnotcheating_set( _id_66EE9F2919CCAB46 );
}

levelprogressioncomplete( _id_3012ABBF8B098D0F )
{
    _id_6E0EEACBD0C484E7 = level.missionsettings.levels[_id_3012ABBF8B098D0F].name;
    level.player _meth_8E232755197D2A79( "missionStateData", _id_6E0EEACBD0C484E7, "complete" );
    _id_3012ABBF8B098D0F++;

    if ( level.missionsettings.levels.size > _id_3012ABBF8B098D0F )
    {
        _id_B02CE1C02CD503C9 = level.missionsettings.levels[_id_3012ABBF8B098D0F].name;
        scripts\sp\autosave::startsavedprogression( _id_B02CE1C02CD503C9 );
    }
}

highestmission_ifnotcheating_set( _id_AA1ED8F12D71A7A5 )
{
    if ( getdvar( "dvar_B8B8E25BB75B206D" ) == "1" )
        return;

    level.player _meth_98122FA7C7A078D8( "highestMission", _id_AA1ED8F12D71A7A5 );
}

mission_diffstring_ifnotcheating_set( _id_68901CBFB0976F22 )
{
    if ( getdvar( "dvar_B8B8E25BB75B206D" ) == "1" )
        return;

    level.player _meth_98122FA7C7A078D8( "missionHighestDifficulty", _id_68901CBFB0976F22 );
    _id_F6FEF0A5F712672B = 1;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.missionsettings.levels.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( _id_68901CBFB0976F22[_id_AC0E594AC96AA3A8] != "4" && _id_68901CBFB0976F22[_id_AC0E594AC96AA3A8] != "5" )
        {
            _id_F6FEF0A5F712672B = undefined;
            break;
        }
    }

    if ( istrue( _id_F6FEF0A5F712672B ) )
        level thread scripts\sp\utility::giveachievement_wrapper( "vetfinish", 1 );
}

getlevelskill( _id_3012ABBF8B098D0F )
{
    _id_D8525FE4D08C6CD8 = level.player _meth_569AC32FF1837D7C( "missionHighestDifficulty" );
    return int( _id_D8525FE4D08C6CD8[_id_3012ABBF8B098D0F] );
}

getlowestskill()
{
    _id_D8525FE4D08C6CD8 = level.player _meth_569AC32FF1837D7C( "missionHighestDifficulty" );
    _id_37C87FD960C29BC4 = 4;

    for ( index = 0; index < self.levels.size; index++ )
    {
        if ( int( _id_D8525FE4D08C6CD8[index] ) < _id_37C87FD960C29BC4 )
            _id_37C87FD960C29BC4 = int( _id_D8525FE4D08C6CD8[index] );
    }

    return _id_37C87FD960C29BC4;
}

getnextlevelindex()
{
    for ( index = 0; index < self.levels.size; index++ )
    {
        if ( !getlevelskill( index ) )
            return index;
    }

    return 0;
}

force_all_complete()
{
    _id_D8525FE4D08C6CD8 = level.player _meth_569AC32FF1837D7C( "missionHighestDifficulty" );
    _id_E30EE4AE67D05D90 = "";

    for ( index = 0; index < _id_D8525FE4D08C6CD8.size; index++ )
    {
        if ( index < 20 )
        {
            _id_E30EE4AE67D05D90 = _id_E30EE4AE67D05D90 + 2;
            continue;
        }

        _id_E30EE4AE67D05D90 = _id_E30EE4AE67D05D90 + 0;
    }

    level.player _meth_98122FA7C7A078D8( "missionHighestDifficulty", _id_E30EE4AE67D05D90 );
    level.player _meth_98122FA7C7A078D8( "highestMission", 20 );
}

clearall()
{
    level.player _meth_98122FA7C7A078D8( "missionHighestDifficulty", "00000000000000000000000000000000000000000000000000" );
    level.player _meth_98122FA7C7A078D8( "highestMission", 1 );
}
