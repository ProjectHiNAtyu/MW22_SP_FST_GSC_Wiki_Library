// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    setdvarifuninitialized( "dvar_359DABA9E2592B36", "0" );
    scripts\common\anim::initanim();
    _id_55B3046625FB79B6::registernotetracksifnot();
    _id_4FD828EC1A0272AE::initpainfx();
    _id_3AEB9F02DE401A76::init_deathfx();
    anim.callbacks["PlaySoundAtViewHeight"] = ::play_sound_at_viewheight;
    anim.callbacks["TeleportEnt"] = ::teleport_entity;
    anim.callbacks["ShouldDoAnim"] = ::should_do_anim;
    anim.callbacks["DoAnimation"] = ::do_animation;
    anim.callbacks["DoFacialAnim"] = ::do_facial_anim;
    anim.callbacks["StopAnimscripted"] = scripts\engine\sp\utility::anim_stopanimscripted;
    anim.callbacks["AnimHandleNotetrack"] = scripts\sp\anim_notetrack::sp_anim_handle_notetrack;
    anim.callbacks["EntityHandleNotetrack"] = scripts\sp\anim_notetrack::entity_handle_notetrack;
    anim.callbacks["AIAnimFirstFrame"] = ::ai_anim_first_frame;
    anim.callbacks["CheckPlayerAnimtree"] = ::_id_6B36E63FB918CD04;
    anim.callbacks["PrintText"] = scripts\engine\sp\utility::_id_077BCF02459F2BA7;
    anim.callbacks["playXcam"] = ::_id_A871831543FD27EF;
    scripts\asm\asm::asm_globalinit();
    scripts\aitypes\bt_util::init();
    scripts\asm\asm::setup_level_ents();

    if ( !isdefined( level.notetrackmissionfailedvo ) )
        level.notetrackmissionfailedvo = 1;

    if ( !isdefined( level.notetrackvo ) )
        level.notetrackvo = 1;
}

_id_3A81A3F984FC4A09( anime )
{
    names = scripts\engine\sp\utility::_id_DF57C8A03E293DB4( anime );
    _id_B1EA6E95CD5257DD = undefined;
    time = undefined;
    _id_EAF05D29B3FD082C = 1;
    _id_B1EA6E95CD5257DD = getanimlength( level.scr_anim[names[0]][anime] );

    for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < names.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_DEC9BCCE93873125 = "";
        time = getanimlength( level.scr_anim[names[_id_AC0E594AC96AA3A8]][anime] );

        if ( _id_B1EA6E95CD5257DD != time )
        {
            _id_EAF05D29B3FD082C = 0;
            _id_DEC9BCCE93873125 = "^3WARNING: ";
        }

        _id_B1EA6E95CD5257DD = time;
    }

    return _id_EAF05D29B3FD082C;
}

_id_CF49D3451C08681C( _id_4C9DD34F67CCAFAD )
{
    self waittillmatch( "single anim", "vo_" + _id_4C9DD34F67CCAFAD );
    _id_CE433278F5985365 = lookupsoundlength( _id_4C9DD34F67CCAFAD );
    wait( _id_CE433278F5985365 / 1000 );
}

_id_F73A68C0F2AC4A90( _id_E3108E412AFB3811 )
{
    _id_8343675ABCFBF20D = "igc";
    scripts\engine\sp\utility::_id_1AE8F046DEE579E0( _id_E3108E412AFB3811 );

    if ( _id_E3108E412AFB3811 )
    {
        level.player scripts\sp\player::remove_damage_effects_instantly();
        level.player setstance( "stand", 1, 1, 1 );
        level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "freezecontrols", 1 );
        level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "cinematic_motion", 0 );
        level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "weapon", 0 );
        level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "damage", 0 );
        level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "breath_system", 0 );
        level scripts\sp\utility::context_melee_enable( 0 );
        level.player cleardamageindicators();
    }
    else
    {
        level.player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( _id_8343675ABCFBF20D );
        level scripts\sp\utility::context_melee_enable( 1 );
    }
}

_id_A7634932F5D9565C( _id_E3108E412AFB3811, time )
{
    time = scripts\engine\utility::_id_53C4C53197386572( time, 2 );

    if ( _id_E3108E412AFB3811 )
    {
        level.player scripts\engine\utility::ent_flag_set( "letterbox_enabled" );
        level.player lerpfovscalefactor( 0, time );
        _func_8A209454C6F57E9E( time );
    }
    else
    {
        level.player scripts\engine\utility::ent_flag_clear( "letterbox_enabled" );
        level.player lerpfovscalefactor( 1, time );
        _func_274BF339B4FE2645( time );
    }
}

_id_A871831543FD27EF( _id_437B6BB41D98DF26, origin, angles )
{
    _id_F25CB776566AA658 = undefined;
    _id_F25CB776566AA658 = scripts\engine\utility::_id_53C4C53197386572( _id_F25CB776566AA658, 0 );
    level.player _meth_33010A90BCF48DB4( _id_437B6BB41D98DF26, _id_F25CB776566AA658, origin, angles );
    wait( _func_4358B309FDCC6D44( _id_437B6BB41D98DF26 ) );
}

_id_E2CA6C74C16376CC( attacker, inflictor, meansofdeath, weaponobj )
{
    self.allowdeath = 1;
    self.deathanimmode = "nophysics";
    self.disabledeathorient = 1;
    self.noragdoll = 1;
    self.skipdeathanim = 1;
    self.diequietly = 1;

    if ( istrue( self.magic_bullet_shield ) )
        scripts\common\ai::stop_magic_bullet_shield();

    attacker = scripts\engine\utility::_id_53C4C53197386572( attacker, undefined );
    inflictor = scripts\engine\utility::_id_53C4C53197386572( inflictor, undefined );
    meansofdeath = scripts\engine\utility::_id_53C4C53197386572( meansofdeath, undefined );
    weaponobj = scripts\engine\utility::_id_53C4C53197386572( weaponobj, undefined );
    self dodamage( self.health + 1, self.origin, attacker, inflictor, meansofdeath, undefined );
}

anim_generic_gravity( guy, anime, tag )
{
    pain = guy.allowpain;
    guy scripts\engine\utility::disable_pain();
    anim_generic_custom_animmode( guy, "gravity", anime, tag );

    if ( pain )
        guy scripts\engine\utility::enable_pain();
}

anim_generic_reach( guy, anime, tag )
{
    guys = [];
    guys[0] = guy;
    anim_reach( guys, anime, tag, "generic" );
}

anim_generic_reach_and_arrive( guy, anime, tag, _id_14C67B74B8DDFDA3 )
{
    reach_and_arrive_internal( guy, anime, tag, _id_14C67B74B8DDFDA3, "generic" );
}

anim_reach_and_arrive( guy, anime, tag, _id_14C67B74B8DDFDA3 )
{
    reach_and_arrive_internal( guy, anime, tag, _id_14C67B74B8DDFDA3, guy.animname );
}

reach_and_arrive_internal( guy, anime, tag, _id_14C67B74B8DDFDA3, _id_B0B2C762643058D2 )
{
    if ( scripts\sp\interaction::is_interact_struct( self ) || scripts\sp\interaction::is_state_interact_struct( self ) )
    {
        if ( isdefined( self.script_reaction ) )
            guy.asm.customdata.interaction = self.script_reaction;
        else
            guy.asm.customdata.interaction = self.script_noteworthy;

        interaction = scripts\sp\interaction::get_interaction( guy.asm.customdata.interaction );

        if ( !isdefined( interaction ) )
            interaction = scripts\sp\interaction::get_state_interaction( guy.asm.customdata.interaction );

        guy.asm.customdata.arrivalstate = undefined;

        if ( isdefined( interaction ) )
            guy.asm.customdata.arrivalstate = guy scripts\sp\interaction::get_arrivalstate_from_interaction( interaction );

        if ( isdefined( guy.asm.customdata.arrivalstate ) )
        {
            anim_reach_with_funcs( [ guy ], anime, tag, _id_B0B2C762643058D2, ::reach_to_interact_begin, ::reach_to_interact_end, _id_14C67B74B8DDFDA3 );
            return;
        }

        anim_reach_with_funcs( [ guy ], anime, tag, _id_B0B2C762643058D2, ::reach_with_arrivals_begin, ::reach_with_standard_adjustments_end, _id_14C67B74B8DDFDA3 );
        return;
    }
    else
        anim_reach_with_funcs( [ guy ], anime, tag, _id_B0B2C762643058D2, ::reach_with_arrivals_begin, ::reach_with_standard_adjustments_end, _id_14C67B74B8DDFDA3 );
}

anim_reach_and_plant( guys, anime, tag )
{
    anim_reach_with_funcs( guys, anime, tag, undefined, ::reach_with_planting, ::reach_with_standard_adjustments_end );
}

anim_reach_and_plant_and_arrive( guys, anime, tag )
{
    anim_reach_with_funcs( guys, anime, tag, undefined, ::reach_with_planting_and_arrivals, ::reach_with_standard_adjustments_end );
}

anim_custom_animmode( guys, _id_9481A070A25EB0BD, anime, tag )
{
    array = scripts\common\anim::get_anim_position( tag );
    org = array["origin"];
    angles = array["angles"];
    _id_729C6CFE1296E25B = undefined;

    foreach ( guy in guys )
    {
        _id_729C6CFE1296E25B = guy;
        thread anim_custom_animmode_on_guy( guy, _id_9481A070A25EB0BD, anime, org, angles, guy.animname, 0 );
    }

    _id_729C6CFE1296E25B wait_until_anim_finishes( anime );
    self notify( anime );
}

anim_custom_animmode_loop( guys, _id_9481A070A25EB0BD, anime, tag )
{
    array = scripts\common\anim::get_anim_position( tag );
    org = array["origin"];
    angles = array["angles"];

    foreach ( guy in guys )
        thread anim_custom_animmode_on_guy( guy, _id_9481A070A25EB0BD, anime, org, angles, guy.animname, 1 );

    guys[0] wait_until_anim_finishes( anime );
    self notify( anime );
}

wait_until_anim_finishes( anime )
{
    self endon( "finished_custom_animmode" + anime );
    self waittill( "death" );
}

anim_generic_custom_animmode( guy, _id_9481A070A25EB0BD, anime, tag, _id_49500266747F0F18, _id_212B748F7DF888B0 )
{
    array = scripts\common\anim::get_anim_position( tag );
    org = array["origin"];
    angles = array["angles"];
    thread anim_custom_animmode_on_guy( guy, _id_9481A070A25EB0BD, anime, org, angles, "generic", 0, _id_49500266747F0F18, _id_212B748F7DF888B0 );
    guy wait_until_anim_finishes( anime );
    self notify( anime );
}

anim_generic_custom_animmode_loop( guy, _id_9481A070A25EB0BD, anime, tag, _id_49500266747F0F18, _id_212B748F7DF888B0 )
{
    array = scripts\common\anim::get_anim_position( tag );
    org = array["origin"];
    angles = array["angles"];
    thread anim_custom_animmode_on_guy( guy, _id_9481A070A25EB0BD, anime, org, angles, "generic", 1, _id_49500266747F0F18, _id_212B748F7DF888B0 );
    guy wait_until_anim_finishes( anime );
    self notify( anime );
}

anim_custom_animmode_solo( guy, _id_9481A070A25EB0BD, anime, tag )
{
    guys = [];
    guys[0] = guy;
    anim_custom_animmode( guys, _id_9481A070A25EB0BD, anime, tag );
}

anim_custom_animmode_loop_solo( guy, _id_9481A070A25EB0BD, anime, tag )
{
    guys = [];
    guys[0] = guy;
    anim_custom_animmode_loop( guys, _id_9481A070A25EB0BD, anime, tag );
}

anim_custom_animmode_on_guy( guy, _id_9481A070A25EB0BD, anime, org, angles, _id_8E3B87ACAAD3DE58, loop, _id_49500266747F0F18, _id_212B748F7DF888B0 )
{
    if ( isai( guy ) && guy scripts\engine\utility::doinglongdeath() )
        return;

    animname = undefined;

    if ( isdefined( _id_8E3B87ACAAD3DE58 ) )
        animname = _id_8E3B87ACAAD3DE58;
    else
        animname = guy.animname;

    if ( !isdefined( _id_212B748F7DF888B0 ) || !_id_212B748F7DF888B0 )
        guy scripts\common\anim::set_start_pos( anime, org, angles, _id_8E3B87ACAAD3DE58, loop );

    guy._animmode = _id_9481A070A25EB0BD;
    guy._custom_anim = anime;
    guy._tag_entity = self;
    guy._anime = anime;
    guy._animname = animname;
    guy._custom_anim_loop = loop;
    guy._custom_anim_thread = _id_49500266747F0F18;

    if ( getdvarint( "dvar_44D5699D19BFAFC2", 0 ) == 1 )
    {
        guy scripts\asm\asm_sp::asm_animcustom( _id_5B8E8BB3DC00AE30::main, scripts\asm\asm_sp::asm_stopanimcustom );
        return;
    }

    guy _meth_60C24A3E3E8B1747( _id_5B8E8BB3DC00AE30::main );
}

anim_single_gravity( guys, anime, tag )
{
    foreach ( guy in guys )
        guy scripts\engine\utility::disable_pain();

    anim_custom_animmode( guys, "gravity", anime, tag );

    foreach ( guy in guys )
    {
        if ( isdefined( guy ) && isalive( guy ) )
            guy scripts\engine\utility::enable_pain();
    }
}

anim_single_run( guys, anime, tag, _id_8E3B87ACAAD3DE58 )
{
    scripts\common\anim::anim_single_internal( guys, anime, tag, 0.25, _id_8E3B87ACAAD3DE58 );
}

anim_reach_and_idle( guys, anime, _id_E4201394BCCEEF66, ender, tag )
{
    thread anim_reach( guys, anime, tag );
    ent = spawnstruct();
    ent.reachers = 0;

    foreach ( guy in guys )
    {
        ent.reachers++;
        thread idle_on_reach( guy, _id_E4201394BCCEEF66, ender, tag, ent );
    }

    for (;;)
    {
        ent waittill( "reached_position" );

        if ( ent.reachers <= 0 )
            return;
    }
}

wait_for_guy_to_die_or_get_in_position()
{
    self endon( "death" );
    self waittill( "anim_reach_complete" );
}

idle_on_reach( guy, _id_E4201394BCCEEF66, ender, tag, ent )
{
    guy wait_for_guy_to_die_or_get_in_position();
    ent.reachers--;
    ent notify( "reached_position" );

    if ( isalive( guy ) )
        scripts\common\anim::anim_loop_solo( guy, _id_E4201394BCCEEF66, ender, tag );
}

anim_reach_together( guys, anime, tag, _id_8E3B87ACAAD3DE58 )
{
    _id_54E516BEF4218C8F = [];

    foreach ( guy in guys )
        _id_54E516BEF4218C8F[_id_54E516BEF4218C8F.size] = [ guy ];

    thread _id_75212273DAEAE48A( _id_54E516BEF4218C8F );
    anim_reach_with_funcs( guys, anime, tag, _id_8E3B87ACAAD3DE58, ::reach_with_standard_adjustments_begin, ::reach_with_standard_adjustments_end );
}

_id_75212273DAEAE48A( _id_54E516BEF4218C8F, _id_4BC185AF207D5706, _id_AD86B98C8C9DEF3D )
{
    waittillframeend;
    _id_4BC185AF207D5706 = scripts\engine\utility::_id_53C4C53197386572( _id_4BC185AF207D5706, 140 );
    _id_AD86B98C8C9DEF3D = scripts\engine\utility::_id_53C4C53197386572( _id_AD86B98C8C9DEF3D, 4 );

    foreach ( index, _id_64B5AB50F22A4EFC in _id_54E516BEF4218C8F )
    {
        guy = _id_64B5AB50F22A4EFC[0];
        _id_93E32C180CAB35B3 = _id_64B5AB50F22A4EFC[3];
        _id_FDEB26D1DB94E98C = isdefined( _id_93E32C180CAB35B3 ) && _id_93E32C180CAB35B3 == "Exposed Moving";
        _id_BE82B88C46AE8890 = _id_FDEB26D1DB94E98C;

        if ( _id_BE82B88C46AE8890 )
            guy childthread _id_BD7939BF3EB6FEC9( _id_AD86B98C8C9DEF3D, _id_4BC185AF207D5706 );

        guy aisetdesiredspeed( _id_4BC185AF207D5706 );
    }

    for (;;)
    {
        _id_E8A584C1F8D1B0FD = undefined;
        _id_5D5CB5AA330E94CE = 0;
        dist = [];
        _id_33AE59F14A7C225D = [];
        _id_91CA07907A589301 = [];

        foreach ( index, _id_64B5AB50F22A4EFC in _id_54E516BEF4218C8F )
        {
            guy = _id_64B5AB50F22A4EFC[0];

            if ( !isalive( guy ) )
            {
                _id_91CA07907A589301[_id_91CA07907A589301.size] = index;
                continue;
            }

            dist[index] = guy pathdisttogoal();

            if ( dist[index] == 0 )
            {
                pos = guy.goalpos;

                if ( isdefined( guy.reach_goal_pos ) )
                    pos = guy.reach_goal_pos;

                dist[index] = distance( guy.origin, pos );
            }

            if ( dist[index] <= 4 )
            {
                _id_91CA07907A589301[_id_91CA07907A589301.size] = index;
                continue;
            }

            if ( dist[index] > _id_5D5CB5AA330E94CE )
            {
                _id_E8A584C1F8D1B0FD = guy;
                _id_5D5CB5AA330E94CE = dist[index];
            }
        }

        foreach ( index in _id_91CA07907A589301 )
        {
            guy = _id_54E516BEF4218C8F[index][0];

            if ( isalive( guy ) )
            {
                guy _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "anim_reach_speed_control" );
                guy _meth_7E763899297EC59C( 1, 1 );
                guy._id_546B551CB7A41E2F = undefined;
                guy notify( "anim_reach_speed_control_avg" );
            }

            _id_54E516BEF4218C8F[index] = undefined;
        }

        if ( _id_54E516BEF4218C8F.size == 0 )
            break;

        foreach ( index, _id_64B5AB50F22A4EFC in _id_54E516BEF4218C8F )
        {
            guy = _id_64B5AB50F22A4EFC[0];
            _id_93E32C180CAB35B3 = _id_64B5AB50F22A4EFC[3];
            _id_FDEB26D1DB94E98C = isdefined( _id_93E32C180CAB35B3 ) && _id_93E32C180CAB35B3 == "Exposed Moving";

            if ( dist[index] < 96 )
                guy _meth_7E763899297EC59C( 0, 0 );

            _id_33AE59F14A7C225D[index] = dist[index] / _id_5D5CB5AA330E94CE;
            _id_BFF2A7822F594386 = 1.0;

            if ( _id_E8A584C1F8D1B0FD != guy )
            {
                if ( _id_FDEB26D1DB94E98C && dist[index] <= 16 )
                    _id_BFF2A7822F594386 = min( 1, guy._id_546B551CB7A41E2F._id_E2B417B32DBED0F7 + 0.05 );
                else
                    _id_BFF2A7822F594386 = max( _id_33AE59F14A7C225D[index], 0.4 );
            }

            _id_9743A24AC8368484 = _id_BFF2A7822F594386 * _id_4BC185AF207D5706;

            switch ( guy _meth_869F129F31D72088() )
            {
                case "patrol":
                case "alert":
                    guy _id_3B64EB40368C1450::set( "anim_reach_speed_control", "move_speed_scale", _id_BFF2A7822F594386 );
                    guy _id_3B64EB40368C1450::_id_462E6336A0DC84A8( "anim_reach_speed_control", "desired_speed" );
                    break;
                default:
                    guy _id_3B64EB40368C1450::set( "anim_reach_speed_control", "desired_speed", _id_9743A24AC8368484 );
                    guy _id_3B64EB40368C1450::_id_462E6336A0DC84A8( "anim_reach_speed_control", "move_speed_scale" );
                    break;
            }
        }

        waitframe();
    }
}

_id_BD7939BF3EB6FEC9( _id_AD86B98C8C9DEF3D, _id_4BC185AF207D5706 )
{
    self endon( "death" );
    self notify( "anim_reach_speed_control_avg" );
    self endon( "anim_reach_speed_control_avg" );
    self._id_546B551CB7A41E2F = spawnstruct();
    _id_546B551CB7A41E2F = self._id_546B551CB7A41E2F;
    _id_546B551CB7A41E2F._id_E2B417B32DBED0F7 = _id_4BC185AF207D5706;
    _id_546B551CB7A41E2F._id_D479BFC40454BB40 = [];
    _id_546B551CB7A41E2F._id_D2341BF5AE1766A9 = 0;
    curr = 0;

    for (;;)
    {
        index = scripts\engine\utility::mod( curr, _id_AD86B98C8C9DEF3D );
        curr++;

        if ( isdefined( _id_546B551CB7A41E2F._id_D479BFC40454BB40[index] ) )
            _id_546B551CB7A41E2F._id_D2341BF5AE1766A9 = _id_546B551CB7A41E2F._id_D2341BF5AE1766A9 - _id_546B551CB7A41E2F._id_D479BFC40454BB40[index];

        _id_546B551CB7A41E2F._id_D479BFC40454BB40[index] = length( self.velocity );
        _id_546B551CB7A41E2F._id_D2341BF5AE1766A9 = _id_546B551CB7A41E2F._id_D2341BF5AE1766A9 + _id_546B551CB7A41E2F._id_D479BFC40454BB40[index];
        _id_546B551CB7A41E2F._id_E2B417B32DBED0F7 = _id_546B551CB7A41E2F._id_D2341BF5AE1766A9 / _id_546B551CB7A41E2F._id_D479BFC40454BB40.size;
        waitframe();
    }
}

anim_reach_failsafe( _id_420777C0F0775A09, time )
{
    if ( isarray( _id_420777C0F0775A09 ) )
    {
        foreach ( guy in _id_420777C0F0775A09 )
            thread anim_reach_failsafe( guy, time );

        return;
    }

    guy = _id_420777C0F0775A09;
    guy endon( "new_anim_reach" );
    wait( time );
    guy notify( "goal" );
}

anim_reach( guys, anime, tag, _id_8E3B87ACAAD3DE58 )
{
    if ( scripts\sp\interaction::is_interact_struct( self ) )
    {
        foreach ( guy in guys )
        {
            if ( isdefined( self.script_reaction ) )
            {
                guy.asm.customdata.interaction = self.script_reaction;
                continue;
            }

            guy.asm.customdata.interaction = self.script_noteworthy;
        }

        anim_reach_with_funcs( guys, anime, tag, _id_8E3B87ACAAD3DE58, ::reach_to_interact_begin, ::reach_to_interact_end );
    }
    else
        anim_reach_with_funcs( guys, anime, tag, _id_8E3B87ACAAD3DE58, ::reach_with_standard_adjustments_begin, ::reach_with_standard_adjustments_end );
}

_id_DCA1A3A29D2EE467( _id_54E516BEF4218C8F, _id_4BC185AF207D5706 )
{
    thread _id_75212273DAEAE48A( _id_54E516BEF4218C8F, _id_4BC185AF207D5706 );
    _id_9DBE1A78B03782F2( _id_54E516BEF4218C8F, ::reach_with_standard_adjustments_begin, ::reach_with_standard_adjustments_end );
}

_id_9DBE1A78B03782F2( _id_54E516BEF4218C8F, start_func, end_func, _id_14C67B74B8DDFDA3 )
{
    ent = spawnstruct();
    _id_C5416631ED26148A = 0;
    threads = 0;
    guys = [];

    foreach ( _id_64B5AB50F22A4EFC in _id_54E516BEF4218C8F )
    {
        guy = _id_64B5AB50F22A4EFC[0];
        animation = _id_64B5AB50F22A4EFC[1];
        _id_1F5A164731710A9A = _id_64B5AB50F22A4EFC[2];
        _id_93E32C180CAB35B3 = _id_64B5AB50F22A4EFC[3];
        _id_D917428537562C1F = self.origin;
        startangles = self.angles;

        if ( isdefined( _id_1F5A164731710A9A ) )
        {
            _id_D917428537562C1F = _id_1F5A164731710A9A.origin;
            startangles = _id_1F5A164731710A9A.angles;
        }

        if ( isdefined( animation ) )
        {
            animorg = getstartorigin( _id_D917428537562C1F, startangles, animation );
            _id_8C94765CA587F86C = getstartangles( _id_D917428537562C1F, startangles, animation );
            _id_D917428537562C1F = animorg;
            startangles = _id_8C94765CA587F86C;
        }

        if ( !isdefined( _id_93E32C180CAB35B3 ) )
            _id_93E32C180CAB35B3 = _id_14C67B74B8DDFDA3;

        if ( isdefined( _id_93E32C180CAB35B3 ) )
        {
            if ( isdefined( guy.scriptedarrivalent ) )
            {
                guy.scriptedarrivalent delete();
                guy.scriptedarrivalent = undefined;
            }

            guy.scriptedarrivalent = spawn( "script_origin", _id_D917428537562C1F );
            guy.scriptedarrivalent.angles = startangles;
            guy.scriptedarrivalent.type = _id_93E32C180CAB35B3;
            guy.scriptedarrivalent.arrivalstance = "stand";
            guy.forcenextpathfindimmediate = 1;
            _id_36C12D04A03471D6 = guy getmovingplatformparent();

            if ( isdefined( _id_36C12D04A03471D6 ) )
                guy.scriptedarrivalent linkto( _id_36C12D04A03471D6 );
        }

        threads++;
        guy thread begin_anim_reach( ent, _id_D917428537562C1F, startangles, start_func, end_func );
    }

    while ( threads )
    {
        ent waittill( "reach_notify" );
        threads--;
    }

    foreach ( _id_64B5AB50F22A4EFC in _id_54E516BEF4218C8F )
    {
        guy = _id_64B5AB50F22A4EFC[0];

        if ( !isalive( guy ) )
            continue;

        guy.goalradius = guy.oldgoalradius;

        if ( isdefined( guy.scriptedarrivalent ) )
        {
            guy.scriptedarrivalent delete();
            guy.scriptedarrivalent = undefined;
        }

        guy.stopanimdistsq = 0;
    }
}

anim_reach_with_funcs( guys, anime, tag, _id_8E3B87ACAAD3DE58, start_func, end_func, _id_14C67B74B8DDFDA3 )
{
    array = scripts\common\anim::get_anim_position( tag );
    _id_BAE27D121B581202 = spawnstruct();
    _id_BAE27D121B581202.origin = array["origin"];
    _id_BAE27D121B581202.angles = array["angles"];
    _id_54E516BEF4218C8F = [];

    foreach ( guy in guys )
    {
        if ( isdefined( _id_8E3B87ACAAD3DE58 ) )
            animname = _id_8E3B87ACAAD3DE58;
        else
            animname = guy.animname;

        animation = undefined;

        if ( isdefined( level.scr_anim[animname][anime] ) )
        {
            if ( isarray( level.scr_anim[animname][anime] ) )
                animation = level.scr_anim[animname][anime][0];
            else
                animation = level.scr_anim[animname][anime];
        }

        _id_54E516BEF4218C8F[_id_54E516BEF4218C8F.size] = [ guy, animation, _id_BAE27D121B581202 ];
    }

    _id_9DBE1A78B03782F2( _id_54E516BEF4218C8F, start_func, end_func, _id_14C67B74B8DDFDA3 );
}

anim_reach_cleanup_solo( guy )
{
    if ( !isalive( guy ) )
        return;

    if ( isdefined( guy.oldgoalradius ) )
        guy.goalradius = guy.oldgoalradius;

    if ( isdefined( guy.scriptedarrivalent ) )
        guy.scriptedarrivalent delete();

    guy.disablearrivals = 0;
    guy.stopanimdistsq = 0;
}

anim_spawner_teleport( guys, anime, tag )
{
    pos = scripts\common\anim::get_anim_position( tag );
    org = pos["origin"];
    angles = pos["angles"];
    ent = spawnstruct();

    foreach ( guy in guys )
    {
        _id_D917428537562C1F = getstartorigin( org, angles, level.scr_anim[guy.animname][anime] );
        guy.origin = _id_D917428537562C1F;
    }
}

reach_death_notify( ent )
{
    scripts\engine\utility::waittill_either( "death", "goal" );

    while ( isalive( self ) && self.arriving )
        wait 0.05;

    ent notify( "reach_notify" );
}

begin_anim_reach( ent, _id_D917428537562C1F, startangles, start_func, end_func )
{
    self endon( "death" );
    self endon( "new_anim_reach" );
    thread reach_death_notify( ent );
    _id_D917428537562C1F = [[ start_func ]]( _id_D917428537562C1F, startangles );
    scripts\engine\sp\utility::set_goal_pos( _id_D917428537562C1F );
    self.reach_goal_pos = _id_D917428537562C1F;
    self.goalradius = 0;
    self.stopanimdistsq = squared( 120 );
    self waittill( "goal" );
    self notify( "anim_reach_complete" );
    [[ end_func ]]();
    self notify( "new_anim_reach" );
}

reach_to_interact_begin( _id_D917428537562C1F, startangles )
{
    self.oldgoalradius = self.goalradius;
    self.oldpathenemyfightdist = self.pathenemyfightdist;
    self.oldpathenemylookahead = self.pathenemylookahead;
    self.pathenemyfightdist = 128;
    self.pathenemylookahead = 128;
    scripts\engine\sp\utility::disable_ai_color();
    anim_changes_pushplayer( 1 );
    self.nododgemove = 1;
    self.doavoidanceblocking = 0;
    self.fixednodewason = self.fixednode;
    self.fixednode = 0;
    self._id_0A4700673C6EF6C4 = self._id_B29C3655B12E292D;
    self._id_B29C3655B12E292D = 0;
    self.old_disablearrivals = self.disablearrivals;
    self.disablearrivals = 0;
    self.reach_goal_pos = undefined;
    interaction = scripts\sp\interaction::get_interaction( self.asm.customdata.interaction );

    if ( !isdefined( interaction ) )
        interaction = scripts\sp\interaction::get_state_interaction( self.asm.customdata.interaction );

    self._id_A57082FDF62BC898 = scripts\sp\interaction::get_arrivalstate_from_interaction( interaction );
    self._id_0A41EDF45BB0FF97 = startangles;
    self._id_85ECBBE4FAE7C0AE = scripts\sp\interaction::get_idlestate_from_interaction( interaction );
    self._id_171120E99DF3E286 = 1;

    if ( isdefined( interaction.arrival_animmode ) )
        self._id_18EB79D0DEEB3B75 = interaction.arrival_animmode;

    return _id_D917428537562C1F;
}

reach_with_standard_adjustments_begin( _id_D917428537562C1F, startangles )
{
    self.oldgoalradius = self.goalradius;
    self.oldpathenemyfightdist = self.pathenemyfightdist;
    self.oldpathenemylookahead = self.pathenemylookahead;
    self.pathenemyfightdist = 0;
    self.pathenemylookahead = 128;
    scripts\engine\sp\utility::disable_ai_color();
    anim_changes_pushplayer( 1 );
    self.nododgemove = 1;
    self.doavoidanceblocking = 0;
    self.fixednodewason = self.fixednode;
    self.fixednode = 0;
    self._id_0A4700673C6EF6C4 = self._id_B29C3655B12E292D;
    self._id_B29C3655B12E292D = 0;

    if ( !isdefined( self.scriptedarrivalent ) )
    {
        self.old_disablearrivals = self.disablearrivals;
        self.disablearrivals = 1;
    }
    else
    {
        self.scriptedarrivalent.angles = startangles;
        self.scriptedarrivalent.origin = _id_D917428537562C1F;
    }

    self.reach_goal_pos = undefined;
    return _id_D917428537562C1F;
}

reach_to_interact_end()
{
    anim_changes_pushplayer( 0 );
    self.nododgemove = 0;
    self.doavoidanceblocking = 1;
    self.fixednode = self.fixednodewason;
    self.fixednodewason = undefined;
    self._id_B29C3655B12E292D = self._id_0A4700673C6EF6C4;
    self._id_0A4700673C6EF6C4 = undefined;
    self.pathenemyfightdist = self.oldpathenemyfightdist;
    self.pathenemylookahead = self.oldpathenemylookahead;
    self.disablearrivals = self.old_disablearrivals;
    interaction = scripts\sp\interaction::get_interaction( self.asm.customdata.interaction );

    if ( !isdefined( interaction ) )
        interaction = scripts\sp\interaction::get_state_interaction( self.asm.customdata.interaction );

    self._id_57E1B0C4AD45DB70 = scripts\sp\interaction::get_exitstate_from_interaction( interaction );
    self.asm.customdata.interaction = undefined;
    self._id_A57082FDF62BC898 = undefined;
    self._id_0A41EDF45BB0FF97 = undefined;
}

reach_with_standard_adjustments_end()
{
    anim_changes_pushplayer( 0 );
    self.nododgemove = 0;
    self.doavoidanceblocking = 1;
    self.fixednode = self.fixednodewason;
    self.fixednodewason = undefined;
    self._id_B29C3655B12E292D = self._id_0A4700673C6EF6C4;
    self._id_0A4700673C6EF6C4 = undefined;
    self.pathenemyfightdist = self.oldpathenemyfightdist;
    self.pathenemylookahead = self.oldpathenemylookahead;

    if ( isdefined( self.old_disablearrivals ) )
        self.disablearrivals = self.old_disablearrivals;
}

anim_changes_pushplayer( value )
{
    if ( isdefined( self.dontchangepushplayer ) )
        return;

    self pushplayer( value );
    return;
}

reach_with_arrivals_begin( _id_D917428537562C1F, startangles )
{
    _id_D917428537562C1F = reach_with_standard_adjustments_begin( _id_D917428537562C1F, startangles );
    self.disablearrivals = 0;
    return _id_D917428537562C1F;
}

reach_with_planting( _id_D917428537562C1F, startangles )
{
    _id_A9706ADAF7C52E27 = self getdroptofloorposition( _id_D917428537562C1F );
    _id_D917428537562C1F = _id_A9706ADAF7C52E27;
    _id_D917428537562C1F = reach_with_standard_adjustments_begin( _id_D917428537562C1F, startangles );
    self.disablearrivals = 1;
    return _id_D917428537562C1F;
}

reach_with_planting_and_arrivals( _id_D917428537562C1F, startangles )
{
    _id_A9706ADAF7C52E27 = self getdroptofloorposition( _id_D917428537562C1F );
    _id_D917428537562C1F = _id_A9706ADAF7C52E27;
    _id_D917428537562C1F = reach_with_standard_adjustments_begin( _id_D917428537562C1F, startangles );
    self.disablearrivals = 0;
    return _id_D917428537562C1F;
}

anim_reach_and_idle_solo( guy, anime, _id_E4201394BCCEEF66, ender, tag )
{
    self endon( "death" );
    _id_280EE35A5ECCE148[0] = guy;
    anim_reach_and_idle( _id_280EE35A5ECCE148, anime, _id_E4201394BCCEEF66, ender, tag );
}

anim_reach_solo( guy, anime, tag )
{
    self endon( "death" );
    _id_280EE35A5ECCE148[0] = guy;
    anim_reach( _id_280EE35A5ECCE148, anime, tag );
}

anim_reach_and_approach_solo( guy, anime, tag, _id_14C67B74B8DDFDA3 )
{
    self endon( "death" );
    _id_280EE35A5ECCE148[0] = guy;
    anim_reach_and_approach( _id_280EE35A5ECCE148, anime, tag, _id_14C67B74B8DDFDA3 );
}

anim_reach_and_approach_node_solo( guy, anime, tag, node_type, _id_0318D1AA38F85DFF )
{
    self endon( "death" );
    _id_280EE35A5ECCE148[0] = guy;
    array = scripts\common\anim::get_anim_position( tag );
    origin = array["origin"];
    angles = array["angles"];
    animname = guy.animname;

    if ( isdefined( level.scr_anim[animname][anime] ) )
    {
        if ( isarray( level.scr_anim[animname][anime] ) )
            animation = level.scr_anim[animname][anime][0];
        else
            animation = level.scr_anim[animname][anime];

        origin = getstartorigin( origin, angles, animation );
        angles = getstartorigin( origin, angles, animation );
    }

    _id_5BB322DB0BEFE793 = spawn( "script_origin", origin );
    _id_5BB322DB0BEFE793.angles = angles;

    if ( isdefined( node_type ) )
        _id_5BB322DB0BEFE793.type = node_type;
    else
        _id_5BB322DB0BEFE793.type = self.type;

    if ( isdefined( _id_0318D1AA38F85DFF ) )
        _id_5BB322DB0BEFE793.arrivalstance = _id_0318D1AA38F85DFF;
    else
        _id_5BB322DB0BEFE793.arrivalstance = self gethighestnodestance();

    guy.scriptedarrivalent = _id_5BB322DB0BEFE793;
    anim_reach_and_approach( _id_280EE35A5ECCE148, anime, tag );
    guy.scriptedarrivalent = undefined;
    _id_5BB322DB0BEFE793 delete();

    while ( guy.a.movement != "stop" )
        wait 0.05;
}

anim_reach_and_approach( guys, anime, tag, _id_14C67B74B8DDFDA3 )
{
    self endon( "death" );

    if ( scripts\sp\interaction::is_interact_struct( self ) )
    {
        foreach ( guy in guys )
        {
            if ( isdefined( self.script_noteworthy ) )
            {
                guy.asm.customdata.interaction = self.script_noteworthy;
                continue;
            }

            guy.asm.customdata.interaction = self.script_reaction;
        }

        anim_reach_with_funcs( guys, anime, tag, undefined, ::reach_to_interact_begin, ::reach_to_interact_end, _id_14C67B74B8DDFDA3 );
    }
    else
    {
        if ( !isdefined( _id_14C67B74B8DDFDA3 ) )
            _id_14C67B74B8DDFDA3 = "Exposed";

        anim_reach_with_funcs( guys, anime, tag, undefined, ::reach_with_arrivals_begin, ::reach_with_standard_adjustments_end, _id_14C67B74B8DDFDA3 );
    }
}

add_animation( animname, anime )
{
    if ( !isdefined( level.completedanims ) )
        level.completedanims[animname][0] = anime;
    else if ( !isdefined( level.completedanims[animname] ) )
        level.completedanims[animname][0] = anime;
    else
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.completedanims[animname].size; _id_AC0E594AC96AA3A8++ )
        {
            if ( level.completedanims[animname][_id_AC0E594AC96AA3A8] == anime )
                return;
        }

        level.completedanims[animname][level.completedanims[animname].size] = anime;
    }
}

anim_single_queue( guy, anime, tag, _id_9E8A16D47A03007A )
{
    if ( !isdefined( _id_9E8A16D47A03007A ) )
        _id_9E8A16D47A03007A = 0;

    if ( isdefined( guy.last_queue_time ) )
        scripts\engine\sp\utility::wait_for_buffer_time_to_pass( guy.last_queue_time, 0.5 );

    scripts\engine\sp\utility::function_stack( scripts\common\anim::anim_single_solo, guy, anime, tag, _id_9E8A16D47A03007A );

    if ( isalive( guy ) )
        guy.last_queue_time = gettime();
}

anim_generic_queue( guy, anime, tag, _id_9E8A16D47A03007A, timeout )
{
    guy endon( "death" );

    if ( !isdefined( _id_9E8A16D47A03007A ) )
        _id_9E8A16D47A03007A = 0;

    if ( isdefined( guy.last_queue_time ) )
        scripts\engine\sp\utility::wait_for_buffer_time_to_pass( guy.last_queue_time, 0.5 );

    if ( isdefined( timeout ) )
        scripts\engine\sp\utility::function_stack_timeout( timeout, scripts\common\anim::anim_single_solo, guy, anime, tag, _id_9E8A16D47A03007A, "generic" );
    else
        scripts\engine\sp\utility::function_stack( scripts\common\anim::anim_single_solo, guy, anime, tag, _id_9E8A16D47A03007A, "generic" );

    if ( isalive( guy ) )
        guy.last_queue_time = gettime();
}

anim_dontpushplayer( guys )
{
    foreach ( guy in guys )
        guy pushplayer( 0 );
}

anim_pushplayer( guys )
{
    foreach ( guy in guys )
        guy pushplayer( 1 );
}

anim_facialanim( guy, anime, _id_1945C9E13FCD068D )
{
    guy endon( "death" );
    self endon( anime );
    _id_E3F91B8C2C172248 = 0.05;
    guy notify( "newLookTarget" );
    guy notify( "newFacialAnim" );
    scripts\asm\shared\utility::disabledefaultfacialanims();
    waittillframeend;

    if ( !isdefined( self.scriptedtalkingknob ) )
        self.scriptedtalkingknob = scripts\asm\asm::asm_getxanim( "knobs", scripts\asm\asm::asm_lookupanimfromalias( "knobs", "scripted_talking" ) );

    _id_5ADB4AEC861050B6 = "scripted_face_" + anime;
    guy setanim( self.scriptedtalkingknob, 1, 0.2 );
    guy setflaggedanimknobrestart( _id_5ADB4AEC861050B6, _id_1945C9E13FCD068D, 1, 0, 1 );
    thread facial_notetrack_handler( guy, _id_5ADB4AEC861050B6, anime );
    thread clearfaceanimonanimdone( guy, _id_5ADB4AEC861050B6, anime );
}

facial_notetrack_handler( guy, _id_5ADB4AEC861050B6, anime )
{
    self endon( anime );
    guy endon( "death" );
    guy endon( "stop_loop" );
    guy endon( "scripted_face_done" );
    guy endon( "newFacialAnim" );

    for (;;)
    {
        self waittill( _id_5ADB4AEC861050B6, notetracks );

        foreach ( _id_A234A65C378F3289 in notetracks )
        {
            _id_DEC9BCCE93873125 = getsubstr( _id_A234A65C378F3289, 0, 3 );

            if ( _id_DEC9BCCE93873125 == "vo_" )
            {
                alias = getsubstr( _id_A234A65C378F3289, 3 );

                if ( !issentient( self ) )
                    thread scripts\engine\sp\utility::play_sound_on_tag( alias, "j_head", 1, alias );
                else
                    play_sound_at_viewheight( alias, "face_sounddone", 1 );

                continue;
            }

            if ( _id_DEC9BCCE93873125 == "pvo" )
            {
                alias = getsubstr( _id_A234A65C378F3289, 4 );
                thread scripts\engine\sp\utility::smart_player_dialogue( alias );
            }
        }
    }
}

anim_facialfiller( msg, looktarget, _id_F8048727716242B0, _id_F5B8C1160179B1F8, intensity )
{
    intensity = scripts\engine\utility::_id_53C4C53197386572( intensity, "sm" );
    self endon( "death" );
    self notify( "newFacialAnim" );

    if ( !isdefined( _id_F5B8C1160179B1F8 ) )
        _id_F5B8C1160179B1F8 = self;

    if ( isai( self ) && !isalive( self ) )
        return;

    if ( !isai( self ) )
    {
        if ( !isdefined( self.fakeactor_face_anim ) )
            return;
        else if ( !self.fakeactor_face_anim || !isalive( self ) )
            return;
    }

    if ( istrue( self.nofacialfiller ) )
        return;

    if ( !istrue( _id_F8048727716242B0 ) && !scripts\asm\shared\utility::isfacialstateallowed( "filler" ) )
        return;

    if ( isdefined( self.unittype ) && ( self.unittype == "c6" || self.unittype == "c8" || self.unittype == "c12" ) )
        return;

    _id_E3F91B8C2C172248 = 0.05;
    self notify( "newLookTarget" );
    self endon( "newLookTarget" );
    waittillframeend;

    if ( !isdefined( looktarget ) && isdefined( self.bc_looktarget ) )
        looktarget = self.bc_looktarget;

    archetype = scripts\asm\shared\utility::_id_2285421DFC79C4D5();
    _id_6B7315AEDC52F8E2 = self.defaulttalk;
    headknob = self.scriptedtalkingknob;
    scripts\asm\shared\utility::setfacialstate( "filler" );

    if ( archetype != "" )
    {
        if ( isai( self ) )
            self setfacialindex( "talk_" + intensity );
        else if ( istrue( self._id_5247D15DA29E8539 ) )
            scripts\asm\shared\utility::_id_EE3E5D584E317D35( "talk_" + intensity );
        else
            scripts\asm\shared\utility::setfacialindexfornonai( "talk_" + intensity );
    }
    else
    {
        self setanimknoblimitedrestart( _id_6B7315AEDC52F8E2, 1, 0, 1 );
        self setanim( headknob, 5, 0.267 );
    }

    _id_F5B8C1160179B1F8 waittill( msg );

    if ( archetype != "" && isai( self ) )
        self setfacialindex( "none" );
    else if ( istrue( self._id_5247D15DA29E8539 ) && isdefined( self._id_7A140EE03CFC699E ) )
        scripts\asm\shared\utility::_id_EE3E5D584E317D35( "none" );

    scripts\asm\shared\utility::clearfacialstate( "filler" );
}

talk_for_time( timer )
{
    self endon( "death" );
    _id_6B7315AEDC52F8E2 = self.defaulttalk;
    self setanimknoblimitedrestart( _id_6B7315AEDC52F8E2, 1, 0, 1 );
    self setanim( self.scriptedtalkingknob, 5, 0.4 );
    scripts\asm\shared\utility::disabledefaultfacialanims();
    wait( timer );
    _id_E3F91B8C2C172248 = 0.3;
    self clearanim( self.scriptedtalkingknob, 0.2 );
    scripts\asm\shared\utility::disabledefaultfacialanims( 0 );
}

anim_reach_idle( guys, anime, idle )
{
    ent = spawnstruct();
    ent.count = guys.size;

    foreach ( guy in guys )
        thread reachidle( guy, anime, idle, ent );

    while ( ent.count )
        ent waittill( "reached_goal" );

    self notify( "stopReachIdle" );
}

reachidle( guy, anime, idle, ent )
{
    anim_reach_solo( guy, anime );
    ent.count--;
    ent notify( "reached_goal" );

    if ( ent.count > 0 )
        scripts\common\anim::anim_loop_solo( guy, idle, "stopReachIdle" );
}

clearfaceanimonanimdone( guy, _id_5ADB4AEC861050B6, anime )
{
    guy endon( "death" );
    guy endon( "newFacialAnim" );
    guy waittillmatch( _id_5ADB4AEC861050B6, "end" );
    guy notify( "scripted_face_done" );
    _id_E3F91B8C2C172248 = 0.3;
    guy clearanim( self.scriptedtalkingknob, 0.2 );
    scripts\asm\shared\utility::disabledefaultfacialanims( 0 );
}

anim_set_rate_single( guy, anime, rate )
{
    guy thread anim_set_rate_internal( anime, rate );
}

anim_set_rate( guys, anime, rate )
{
    scripts\engine\utility::array_thread( guys, ::anim_set_rate_internal, anime, rate );
}

anim_set_rate_internal( anime, rate, _id_8E3B87ACAAD3DE58 )
{
    animname = undefined;

    if ( isdefined( _id_8E3B87ACAAD3DE58 ) )
        animname = _id_8E3B87ACAAD3DE58;
    else
        animname = self.animname;

    self setflaggedanim( "single anim", scripts\engine\utility::getanim_from_animname( anime, animname ), 1, 0, rate );
}

create_anim_scene( animtree, anim_sequence, _id_1A9F98127777F9F7, animname, model )
{
    if ( !isdefined( animname ) )
        animname = "generic";
    else
        level.scr_animtree[animname] = animtree;

    scene = spawnstruct();
    scene.animtree = animtree;
    scene.model = model;

    if ( isdefined( model ) )
        level.scr_model[animname] = model;

    if ( isdefined( _id_1A9F98127777F9F7 ) )
        level.scr_anim[animname][anim_sequence] = _id_1A9F98127777F9F7;

    scene.animname = animname;
    scene.anim_sequence = anim_sequence;
    level.current_anim_data_scene = scene;
}

blended_loop_solo( guy, _id_9523E27B0F4FE3AF, anim_array, ender )
{
    guy.anim_array = anim_array;
    guy.ender = ender;
    guy.gesture_lookat = _id_9523E27B0F4FE3AF;
    guy.animnode = self;
    guy scripts\asm\asm_sp::asm_animcustom( scripts\asm\gesture\script_funcs::blended_loop_anim, scripts\asm\gesture\script_funcs::blended_loop_cleanup );
}

blended_anim_solo( guy, _id_9523E27B0F4FE3AF, anim_array )
{
    while ( isdefined( guy.anim_array ) )
        wait 0.05;

    guy.anim_array = anim_array;
    guy.gesture_lookat = _id_9523E27B0F4FE3AF;
    guy.animnode = self;
    guy scripts\asm\asm_sp::asm_animcustom( scripts\asm\gesture\script_funcs::blended_anim );
}

anim_block_in_single( guys, anime, _id_03E77CB39C95BA5C )
{
    foreach ( guy in guys )
        thread anim_block_in_internal( guy, anime, _id_03E77CB39C95BA5C );
}

anim_block_in_solo( guy, anime, _id_03E77CB39C95BA5C )
{
    thread anim_block_in_internal( guy, anime, _id_03E77CB39C95BA5C );
}

anim_block_in_internal( _id_280EE35A5ECCE148, anime, _id_03E77CB39C95BA5C )
{
    _id_280EE35A5ECCE148 endon( "death" );
    _id_280EE35A5ECCE148 endon( "stop_blockin" );
    animname = _id_280EE35A5ECCE148.animname;
    _id_280EE35A5ECCE148 scripts\common\anim::assert_existance_of_anim( anime, animname );

    if ( isdefined( level.scr_blockin[animname] ) && isdefined( level.scr_blockin[animname][anime] ) )
        start = scripts\engine\utility::getstruct( level.scr_blockin[animname][anime], "targetname" );
    else
        return;

    if ( !isdefined( _id_03E77CB39C95BA5C ) )
        _id_03E77CB39C95BA5C = 50;

    _id_7B05333688FBCD77 = spawn( "script_model", _id_280EE35A5ECCE148.origin );
    _id_7B05333688FBCD77.angles = _id_280EE35A5ECCE148.angles;
    _id_7B05333688FBCD77 setmodel( "tag_origin" );
    _id_05EDE15B5B3C5EF1 = _id_280EE35A5ECCE148.ignoreall;
    _id_DDE60030D0CCF9A0 = _id_280EE35A5ECCE148.ignoreme;
    _id_280EE35A5ECCE148 thread anim_block_in_cleanup_internal( _id_7B05333688FBCD77, _id_05EDE15B5B3C5EF1, _id_DDE60030D0CCF9A0 );
    dist = distance( _id_280EE35A5ECCE148.origin, start.origin );
    _id_D8C375423B38300C = dist / _id_03E77CB39C95BA5C;

    if ( isplayer( _id_280EE35A5ECCE148 ) )
        _id_280EE35A5ECCE148 playerlinktoabsolute( _id_7B05333688FBCD77 );
    else if ( isai( _id_280EE35A5ECCE148 ) )
    {
        _id_280EE35A5ECCE148 _meth_60C24A3E3E8B1747( ::t_poser );
        _id_280EE35A5ECCE148 linkto( _id_7B05333688FBCD77, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        _id_280EE35A5ECCE148.ignoreall = 1;
    }
    else
    {
        _id_280EE35A5ECCE148 linkto( _id_7B05333688FBCD77, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        _id_280EE35A5ECCE148.ignoreall = 1;
    }

    _id_280EE35A5ECCE148.ignoreme = 1;
    _id_D8C375423B38300C = scripts\engine\utility::ter_op( _id_D8C375423B38300C == 0, 0.05, _id_D8C375423B38300C );
    _id_13764104713A2272 = 0.05;
    _id_7B05333688FBCD77 moveto( start.origin, _id_13764104713A2272 );
    _id_7B05333688FBCD77 rotateto( start.angles, _id_13764104713A2272 );

    if ( isai( _id_280EE35A5ECCE148 ) )
    {
        if ( !isdefined( start.angles ) )
            _id_280EE35A5ECCE148 orientmode( "face point", start.origin );
        else
            _id_280EE35A5ECCE148 orientmode( "face angle", start.angles[1] );
    }

    _id_7B05333688FBCD77 waittill( "movedone" );
    start scripts\engine\utility::script_wait();

    while ( isdefined( start.target ) )
    {
        next = scripts\engine\utility::getstruct( start.target, "targetname" );

        if ( isdefined( start.script_speed ) )
            _id_03E77CB39C95BA5C = start.script_speed;

        start scripts\engine\utility::script_delay();
        start = next;
        dist = distance( _id_280EE35A5ECCE148.origin, start.origin );
        _id_D8C375423B38300C = dist / _id_03E77CB39C95BA5C;
        _id_7B05333688FBCD77 moveto( start.origin, _id_D8C375423B38300C );

        if ( isdefined( start.angles ) )
        {
            _id_7B05333688FBCD77 rotateto( start.angles, _id_D8C375423B38300C );

            if ( isai( _id_280EE35A5ECCE148 ) )
                _id_280EE35A5ECCE148 orientmode( "face angle", start.angles[1] );
        }
        else
        {
            _id_7B05333688FBCD77 rotateto( vectortoangles( next.origin - _id_7B05333688FBCD77.origin ), _id_D8C375423B38300C );

            if ( isai( _id_280EE35A5ECCE148 ) )
                _id_280EE35A5ECCE148 orientmode( "face point", next.origin );
        }

        _id_7B05333688FBCD77 waittill( "movedone" );
        start scripts\engine\utility::script_wait();
    }

    _id_280EE35A5ECCE148 notify( "tposer done" );
}

t_poser()
{
    self animmode( "noclip" );
    scripts\engine\utility::waittill_any( "tposer done", "stop_blockin" );
}

anim_block_in_cleanup_internal( _id_7B05333688FBCD77, _id_05EDE15B5B3C5EF1, _id_DDE60030D0CCF9A0 )
{
    scripts\engine\utility::waittill_any( "tposer done", "stop_blockin", "death" );
    self unlink();

    if ( isai( self ) )
        self.ignoreall = _id_05EDE15B5B3C5EF1;

    self.ignoreme = _id_DDE60030D0CCF9A0;
    _id_7B05333688FBCD77 delete();
}

should_do_anim()
{
    return !isai( self ) || !scripts\engine\utility::doinglongdeath();
}

teleport_entity( origin, angles )
{
    if ( isai( self ) )
    {
        if ( isdefined( self.anim_start_at_groundpos ) )
            origin = scripts\engine\utility::drop_to_ground( origin );

        self forceteleport( origin, angles, 9999 );
    }
    else if ( isdefined( self.vehicletype ) )
    {
        self vehicle_teleport( origin, angles );
        self dontinterpolate();
    }
    else
    {
        self.origin = origin;
        self.angles = angles;
        self dontinterpolate();
    }
}

play_sound_at_viewheight( aliasname, _id_B1A4E9FA39B3858A, _id_A68ADBD3EEFE9282 )
{
    if ( !soundexists( aliasname ) )
        return;

    if ( isdefined( _id_B1A4E9FA39B3858A ) && isdefined( _id_A68ADBD3EEFE9282 ) )
        self playsoundatviewheight( aliasname, _id_B1A4E9FA39B3858A, _id_A68ADBD3EEFE9282 );
    else if ( isdefined( _id_B1A4E9FA39B3858A ) )
        self playsoundatviewheight( aliasname, _id_B1A4E9FA39B3858A );
    else
        self playsoundatviewheight( aliasname );

    if ( isdefined( _id_B1A4E9FA39B3858A ) )
        self.scripteddialoguenotify = gettime();
    else
        self.scripteddialoguenonotify = gettime();

    thread bcs_scripted_dialog_clear( aliasname, _id_B1A4E9FA39B3858A );
}

bcs_scripted_dialog_clear( aliasname, _id_B1A4E9FA39B3858A )
{
    self endon( "death" );

    if ( isdefined( _id_B1A4E9FA39B3858A ) )
    {
        self waittill( _id_B1A4E9FA39B3858A );
        self.scripteddialoguenotify = undefined;
    }
    else
    {
        length = lookupsoundlength( aliasname ) * 0.001;
        wait( length );
        self.scripteddialoguenonotify = undefined;
    }
}

do_facial_anim( _id_63A1F320F9C2DDF5, _id_09AC73A1996D2DAE, _id_83D9EFDEA230AF8E, anime, animname, dialogue, _id_1208CA5973245D19 )
{
    if ( _id_63A1F320F9C2DDF5 && !_id_1208CA5973245D19 )
    {
        if ( _id_09AC73A1996D2DAE )
            thread _id_4ADE3AE5C138C8B3::sayspecificdialogue( dialogue );

        thread anim_facialanim( self, anime, level.scr_face[animname][anime] );
        return 1;
    }
    else if ( isai( self ) || isdefined( self.fakeactor_face_anim ) && self.fakeactor_face_anim )
    {
        if ( _id_83D9EFDEA230AF8E )
            _id_4ADE3AE5C138C8B3::sayspecificdialogue( dialogue );
        else
        {
            if ( !_id_1208CA5973245D19 )
                thread anim_facialfiller( "single dialogue" );

            _id_4ADE3AE5C138C8B3::sayspecificdialogue( dialogue, "single dialogue" );
        }
    }
    else
        thread scripts\engine\sp\utility::play_sound_on_entity( dialogue, "single dialogue" );

    return 0;
}

#using_animtree("animscripted_default_headlook");

do_animation( org, angles, animname, anime, _id_314C4455B996B224, idleanim, _id_43E50904D011917E )
{
    if ( isdefined( level._id_79C41A27B516111F[anime] ) )
    {
        if ( isplayer( self ) )
        {

        }
    }

    animation = undefined;

    if ( scripts\common\anim::_id_F1E7EE8DDEECE062( anime ) )
        animation = scripts\common\anim::_id_C099F6FD9C19F5A6( anime, org, angles, animname );
    else if ( isdefined( idleanim ) )
        animation = level.scr_anim[animname][anime][idleanim];
    else
        animation = level.scr_anim[animname][anime];

    goaltime = scripts\common\anim::anim_get_goal_time( animname, anime );
    scripts\common\anim::last_anim_time_check();

    if ( !isdefined( idleanim ) )
        self._lastanime = anime;

    if ( self.code_classname == "misc_turret" && !isdefined( idleanim ) )
        self setflaggedanim( _id_314C4455B996B224, animation, 1, goaltime );
    else
    {
        root = undefined;

        if ( isai( self ) || scripts\sp\fakeactor::is_fakeactor() )
            root = scripts\asm\asm::asm_getbodyknob();
        else if ( isdefined( self.anim_getrootfunc ) )
            root = [[ self.anim_getrootfunc ]]();

        if ( isdefined( self.asm ) && !isai( self ) )
            scripts\asm\asm_sp::asm_animscripted();

        _id_3CA191C06A619895 = [ -90, 90, -60, 60 ];
        _id_208A5303001324ED = %lookatpos_animscripted_default;

        if ( isdefined( level.scr_lookat ) && isdefined( level.scr_lookat[animname] ) && isdefined( level.scr_lookat[animname][anime] ) )
        {
            _id_3CA191C06A619895 = level.scr_lookat[animname][anime].ranges;
            _id_208A5303001324ED = level.scr_lookat[animname][anime].atr_node;
        }

        self animscripted( _id_314C4455B996B224, org, angles, animation, undefined, root, goaltime, 1.0, _id_3CA191C06A619895[0], _id_3CA191C06A619895[1], _id_3CA191C06A619895[2], _id_3CA191C06A619895[3], _id_208A5303001324ED, _id_43E50904D011917E );
    }

    thread scripts\common\notetrack::start_notetrack_wait( self, _id_314C4455B996B224, anime, animname, animation );
    thread animscriptdonotetracksthread( self, _id_314C4455B996B224, anime );
    return getanimlength( animation );
}

animscriptdonotetracksthread( guy, _id_65DC1767352C19CD, anime )
{
    if ( isdefined( guy.dontdonotetracks ) && guy.dontdonotetracks )
        return;

    guy endon( "stop_sequencing_notetracks" );
    guy endon( "death" );
    guy _id_357B9A54DFEDBD4A::donotetracks( _id_65DC1767352C19CD );
}

ai_anim_first_frame( animation, animname )
{
    self._first_frame_anim = animation;
    self._animname = animname;
    scripts\asm\asm_sp::asm_animcustom( _id_3769CAD2888DE2AC::main );
}

anim_react_new( guys, node, anime )
{
    data = spawnstruct();

    if ( !isarray( guys ) )
        guys = [ guys ];

    data.guys = guys;
    data.node = node;
    data.anime = anime;
    return data;
}

anim_react( guys, anime, _id_EEED06D134835EA6, gotocombatonly )
{
    data = anim_react_new( guys, self, anime );
    data.fnreact = _id_EEED06D134835EA6;
    data.gotocombatonly = gotocombatonly;
    anim_react_data( data );
}

anim_react_data( data )
{
    scripts\engine\utility::array_thread( data.guys, ::anim_react_thread, data );
    anime = data.anime;

    foreach ( guy in data.guys )
    {
        _id_336C378E595973FA = anime + "_death";

        if ( isdefined( level.scr_anim[guy.animname][_id_336C378E595973FA] ) )
            guy scripts\common\ai::set_deathanim( _id_336C378E595973FA );

        if ( isdefined( guy.animents ) )
        {
            foreach ( _id_B2A3F9ABCEE9D071 in guy.animents )
            {
                if ( isdefined( level.scr_anim[_id_B2A3F9ABCEE9D071.animname][_id_336C378E595973FA] ) )
                    _id_B2A3F9ABCEE9D071.deathanime = _id_336C378E595973FA;
            }
        }

        level thread anim_react_death( data.node, guy, data.fnreact );
    }

    _id_0E37654271F1284E = anime + "_intro";

    if ( isdefined( level.scr_anim[data.guys[0].animname][_id_0E37654271F1284E] ) )
        data.node anim_single_with_props( data.guys, _id_0E37654271F1284E );

    _id_AE35B765A1677580 = anime + "_loop";
    _id_D8D4AD804645FC13 = anime + "_outro";

    foreach ( guy in data.guys )
    {
        if ( !isalive( guy ) )
            continue;

        if ( guy scripts\engine\utility::ent_flag( "anim_reacted" ) )
            continue;

        if ( isdefined( level.scr_anim[guy.animname][_id_AE35B765A1677580] ) )
        {
            data.node thread anim_loop_with_props( guy, _id_AE35B765A1677580, "stop_anim_loop_" + guy.animname );
            continue;
        }

        if ( isdefined( level.scr_anim[guy.animname][_id_D8D4AD804645FC13] ) )
        {
            data.node thread anim_single_with_props( guy, _id_D8D4AD804645FC13 );
            guy thread scripts\engine\utility::waittillmatch_notify( "single anim", "end", "outro_anim_end" );
            guy scripts\engine\utility::thread_on_notify( "outro_anim_end", scripts\engine\utility::send_notify, "stop_anim_react", undefined, undefined, guy, "anim_react" );
            continue;
        }

        guy notify( "stop_anim_react" );
        guy notify( "stop_anim_react_death" );
    }
}

anim_react_thread( data )
{
    self endon( "death" );
    self notify( "stop_anim_react" );
    self endon( "stop_anim_react" );
    type = anim_react_wait_thread();
    anim_react_alertgroup_msg( "reacted", type );
    self notify( "anim_react" );
    data.node notify( "anim_react" );

    if ( !istrue( self.anim_react_skip_stopanimscripted ) )
    {
        data.node notify( "stop_anim_loop_" + self.animname );
        scripts\engine\sp\utility::anim_stopanimscripted();
    }

    _id_718C9420062248C1 = 0;

    if ( isdefined( data.fnreact ) )
    {
        result = self [[ data.fnreact ]]( type );

        if ( isdefined( result ) )
        {
            if ( result == "skip_reaction" )
                _id_718C9420062248C1 = 1;
            else
                type = result;
        }
    }

    if ( !_id_718C9420062248C1 )
    {
        _id_8017DF2752812115 = get_react_type( type );
        anime = data.anime;
        _id_036CD2DBC4C68490 = undefined;

        if ( isdefined( data.fnreactanime ) )
            _id_036CD2DBC4C68490 = [[ data.fnreactanime ]]( type );

        if ( type == "pain" )
        {
            _id_036CD2DBC4C68490 = anime + "_react_pain";

            if ( isdefined( level.scr_anim[self.animname][_id_036CD2DBC4C68490] ) )
            {
                self.allowdeath = 1;

                if ( !isdefined( self.animreactrelative ) )
                    data.node anim_single_with_props( self, _id_036CD2DBC4C68490 );
                else
                    anim_single_with_props( self, _id_036CD2DBC4C68490 );
            }
            else if ( isdefined( self.script_stealthgroup ) )
                scripts\stealth\enemy::bt_set_stealth_state( "combat" );
        }
        else
        {
            level thread detach_linkedaniments( self );

            if ( !isdefined( _id_036CD2DBC4C68490 ) )
                _id_036CD2DBC4C68490 = anime + "_react_" + _id_8017DF2752812115;

            if ( !isdefined( level.scr_anim[self.animname][_id_036CD2DBC4C68490] ) )
                _id_036CD2DBC4C68490 = anime + "_react";

            if ( isdefined( level.scr_anim[self.animname][_id_036CD2DBC4C68490] ) )
            {
                self.allowdeath = 1;

                if ( !isdefined( self.animreactrelative ) )
                    data.node anim_single_with_props( self, _id_036CD2DBC4C68490 );
                else
                    anim_single_with_props( self, _id_036CD2DBC4C68490 );
            }

            _id_4EA0ADD0A87E4316 = _id_036CD2DBC4C68490 + "_loop";

            if ( isdefined( level.scr_anim[self.animname][_id_4EA0ADD0A87E4316] ) )
            {
                if ( !isdefined( self.animreactrelative ) )
                    data.node anim_loop_with_props( self, _id_4EA0ADD0A87E4316 );
                else
                    anim_loop_with_props( self, _id_4EA0ADD0A87E4316 );
            }

            if ( isdefined( self.script_stealthgroup ) && istrue( data.gotocombatonly ) )
                scripts\stealth\enemy::bt_set_stealth_state( "combat" );
        }
    }
    else
    {

    }

    self notify( "anim_react_done" );

    if ( isdefined( self.target ) )
        scripts\sp\spawner::go_to_node();

    if ( !isdefined( self.script_forcegoal ) )
        self.goalradius = level.default_goalradius;
}

get_react_type( type )
{
    switch ( type )
    {
        case "ai_event_low":
            return "low";
        default:
            return "high";
    }
}

anim_react_wait_thread()
{
    self endon( "death" );
    self endon( "stop_anim_react" );

    if ( !scripts\engine\utility::ent_flag_exist( "anim_reacted" ) )
        scripts\engine\utility::ent_flag_init( "anim_reacted" );

    scripts\engine\utility::ent_flag_clear( "anim_reacted" );
    childthread anim_react_damage();
    childthread anim_react_waittill( "react" );
    childthread anim_react_waittill( "doFlashBanged" );
    childthread anim_react_waittill( "too_close" );
    childthread anim_react_waittill( "friend_died" );
    childthread anim_react_waittill( "friend_reacted" );
    childthread anim_react_waittill( "friend_pained" );
    childthread anim_react_ai_events();
    childthread anim_react_radius();
    self waittill( "anim_react_notify", type, event );

    if ( isdefined( event ) )
        self.anim_react_event = event;

    scripts\engine\utility::ent_flag_set( "anim_reacted" );

    if ( type == "friend_died" || type == "friend_pained" )
        wait( randomfloatrange( 0.2, 0.4 ) );

    return type;
}

anim_react_damage()
{
    self waittill( "damage", dmg, attacker, dir, point, _id_DA747E187BCBDBC5, model, tag, part, idflag, objweapon );

    if ( _id_DA747E187BCBDBC5 != "MOD_GRENADE_SPLASH" && isdefined( objweapon ) && objweapon.basename != "flash" )
        self notify( "anim_react_notify", "pain" );
}

anim_react_waittill( msg )
{
    self waittill( msg, extra );
    self notify( "anim_react_notify", msg, extra );
}

anim_react_radius()
{
    self endon( "anim_reacted" );

    if ( !isdefined( self.radius ) )
        self.radius = 72;

    trigger = undefined;

    if ( isdefined( self.target ) )
    {
        ent = getent( self.target, "targetname" );

        if ( isdefined( ent ) )
        {
            if ( ent.code_classname == "trigger_multiple" )
                trigger = ent;
        }
    }

    for (;;)
    {
        waitframe();

        if ( distancesquared( level.player.origin, self.origin ) < squared( self.radius ) )
            break;

        if ( !isdefined( trigger ) )
            continue;

        if ( level.player istouching( trigger ) )
            break;
    }

    self notify( "too_close" );
}

force_high_reaction()
{
    self aieventlistenerevent( "cover_blown", self, self.origin );
}

force_low_reaction()
{
    self aieventlistenerevent( "investigate", self, self.origin );
}

anim_react_ai_events()
{
    self endon( "death" );
    self endon( "anim_reacted" );

    for (;;)
    {
        level waittill( "stealth_event", event, receiver );

        if ( receiver != self )
            continue;

        switch ( event.type )
        {
            case "cover_blown":
            case "combat":
                self notify( "anim_react_notify", "ai_event_high", event );
                return;
            case "investigate":
                self notify( "anim_react_notify", "ai_event_low", event );
                return;
        }
    }
}

anim_react_alertgroup_msg( _id_0E4731409BD255E0, type )
{
    if ( !isdefined( self.alertgroupnames ) )
        return;

    event = undefined;

    if ( isdefined( self.anim_react_event ) )
        event = self.anim_react_event;

    if ( type == "pain" )
        _id_0E4731409BD255E0 = "pained";
    else if ( type == "death" )
        _id_0E4731409BD255E0 = "died";

    foreach ( groupname in self.alertgroupnames )
    {
        level.alertgroup[groupname] = scripts\engine\utility::array_removeundefined( level.alertgroup[groupname] );

        foreach ( ai in level.alertgroup[groupname] )
            ai notify( "friend_" + _id_0E4731409BD255E0, event );
    }
}

anim_react_add_to_alertgroup( groupname )
{
    if ( !isdefined( level.alertgroup ) )
        level.alertgroup = [];

    if ( !isdefined( level.alertgroup[groupname] ) )
        level.alertgroup[groupname] = [];

    level.alertgroup[groupname][level.alertgroup[groupname].size] = self;

    if ( !isdefined( self.alertgroupnames ) )
        self.alertgroupnames = [];

    self.alertgroupnames[self.alertgroupnames.size] = groupname;
}

add_animents( array, anime )
{
    _id_BFC65A378A6D8EFE = array;

    foreach ( ent in array )
    {
        if ( !isdefined( ent.animents ) )
            continue;

        foreach ( _id_B2A3F9ABCEE9D071 in ent.animents )
        {
            if ( !isdefined( level.scr_anim[_id_B2A3F9ABCEE9D071.animname] ) )
                continue;

            if ( !isdefined( level.scr_anim[_id_B2A3F9ABCEE9D071.animname][anime] ) )
                continue;

            _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = _id_B2A3F9ABCEE9D071;
        }
    }

    return _id_BFC65A378A6D8EFE;
}

anim_single_with_props( ents, anime, tag, _id_9E8A16D47A03007A, _id_8E3B87ACAAD3DE58 )
{
    if ( !isarray( ents ) )
        ents = [ ents ];

    ents = add_animents( ents, anime );
    scripts\common\anim::anim_single( ents, anime, tag, _id_9E8A16D47A03007A, _id_8E3B87ACAAD3DE58 );
}

anim_loop_with_props( ents, anime, ender, tag, _id_656E3D548572FAF6, _id_8E3B87ACAAD3DE58 )
{
    if ( !isarray( ents ) )
        ents = [ ents ];

    ents = add_animents( ents, anime );
    scripts\common\anim::anim_loop( ents, anime, ender, tag, _id_656E3D548572FAF6, _id_8E3B87ACAAD3DE58 );
}

anim_react_death( node, guy, _id_EEED06D134835EA6 )
{
    guy endon( "entitydeleted" );
    guy endon( "anim_react_done" );
    guy endon( "stop_anim_react_death" );
    guy waittill( "death" );

    if ( isdefined( _id_EEED06D134835EA6 ) )
        guy thread [[ _id_EEED06D134835EA6 ]]( "death" );

    if ( isdefined( guy.animents ) )
    {
        foreach ( ent in guy.animents )
            ent thread prop_deathanim( node );
    }

    level thread detach_linkedaniments( guy );
}

prop_deathanim( node )
{
    self endon( "death" );

    if ( !isdefined( self.deathanime ) )
        return;

    if ( !isdefined( level.scr_anim[self.animname][self.deathanime] ) )
        return;

    node scripts\common\anim::anim_single_solo( self, self.deathanime );
}

detach_linkedaniments( guy )
{
    if ( !isdefined( guy.linkedaniments ) )
        return;

    foreach ( ent in guy.linkedaniments )
        ent thread detach_linkedaniment( guy );

    guy.linkedaniments = undefined;
}

detach_linkedaniment( guy )
{
    _id_182038C1B0416C06 = guy gettagorigin( self.parenttag );
    waitframe();

    if ( !isdefined( guy ) )
        _id_6C53D859D582A421 = _id_182038C1B0416C06 + ( 0, 0, 10 );
    else
        _id_6C53D859D582A421 = guy gettagorigin( self.parenttag );

    forward = vectornormalize( _id_6C53D859D582A421 - _id_182038C1B0416C06 );
    velocity = forward * randomfloatrange( 1, 2 );
    self unlink();

    if ( isdefined( self.nophysics ) )
    {
        pos = scripts\engine\utility::drop_to_ground( self.origin, 16, -500 );
        dist = distance( pos, self.origin );
        time = dist / 120;
        time = max( time, 0.05 );
        self moveto( pos, time, 0, time - 0.05 );
    }
    else
    {
        if ( isdefined( self.children ) )
        {
            foreach ( child in self.children )
            {
                child unlink();
                _id_A2F2186A1C89494F = ( 0, 0, 1 ) * randomfloatrange( 25, 60 ) + velocity;
                child physicslaunchclient( child.origin + ( 0, 0, 1 ), _id_A2F2186A1C89494F );
            }
        }

        if ( isdefined( self.overridevelocity ) )
            velocity = self.overridevelocity;

        self physicslaunchclient( _id_6C53D859D582A421, velocity );
    }
}

primaryweapon_leave_behind( tagname, _id_EA111DE8E9327C27 )
{
    origin = self gettagorigin( tagname );
    angles = self gettagangles( tagname );
    primaryweapon_leave_behind_internal( origin, angles, _id_EA111DE8E9327C27 );
}

primaryweapon_leave_behind_internal( origin, angles, spawnflags )
{
    if ( isdefined( self.gun_on_ground ) )
        return;

    if ( !isdefined( spawnflags ) )
        spawnflags = 0;

    gun = spawn( "weapon_" + getcompleteweaponname( self.weapon ), origin, spawnflags );
    gun.angles = angles;
    self.gun_on_ground = gun;
    _id_3433EE6B63C7E243::placeweaponon( self.weapon, "none" );
    self.dropweapon = 0;
}

#using_animtree("player");

_id_6B36E63FB918CD04( animname )
{
    if ( isdefined( level.scr_animtree[animname] ) && level.scr_animtree[animname] == #animtree )
        return 1;

    return 0;
}
