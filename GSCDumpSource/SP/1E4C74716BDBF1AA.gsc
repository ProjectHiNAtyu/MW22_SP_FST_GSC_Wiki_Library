// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

precache( offhand )
{
    level.offhands.c4 = spawnstruct();
    scripts\sp\equipment\offhands::registeroffhandfirefunc( offhand, ::c4firemain );
}

c4firemain( grenade, weapon )
{
    if ( !isdefined( grenade ) )
        return;

    grenade endon( "death" );
    grenade.owner = self;
    grenade setentityowner( self );
    grenade setotherent( self );
    grenade makeunusable();
    grenade.targetname = "offhand_car_grenade";
    grenade setotherent( self );
    grenade setnodeploy( 1 );
    grenade.throwtime = gettime();
    c4_addtoarray( self, grenade );
    thread c4_watchfordetonation();
    grenade thread minedamagemonitor();
    grenade thread c4_explodeonnotify();
    grenade waittill( "missile_stuck" );
    thread scripts\sp\equipment\offhands::_id_6E5CE23490C6FEA6( grenade, weapon, &"EQUIPMENT/IMPROVISED_MINE_PICKUP" );
    grenade setscriptablepartstate( "effects", "plant", 0 );
}

c4_watchfordetonation()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "c4_unset" );
    self notify( "watchForDetonation" );
    self endon( "watchForDetonation" );
    childthread _id_72907A80AA28034D();

    for (;;)
    {
        self waittill( "detonate" );
        thread c4_detonateall();
    }
}

_id_72907A80AA28034D()
{
    self endon( "detonate" );
    _id_81A669DA4DEAFDB8 = "use_pressed";
    _id_5792D39F08A40B38 = 0.5;

    for (;;)
    {
        self waittill( _id_81A669DA4DEAFDB8 );

        if ( scripts\engine\sp\utility::player_has_equipment( "c4_sp" ) )
            continue;

        result = scripts\engine\utility::waittill_notify_or_timeout_return( _id_81A669DA4DEAFDB8, 1.0 );

        if ( result != _id_81A669DA4DEAFDB8 )
            continue;

        wait( _id_5792D39F08A40B38 );
        self notify( "detonate" );
    }
}

c4_watchforaltdetonation()
{
    self endon( "death" );
    self endon( "c4_unset" );
    level endon( "game_ended" );

    if ( !getdvarint( "dvar_78D40BC744BA9F00", 0 ) )
        return;

    self notify( "watchForAltDetonation" );
    self endon( "watchForAltDetonation" );

    while ( self usebuttonpressed() )
        waitframe();

    _id_8B07FA3892A3A8A4 = 0;

    for (;;)
    {
        if ( self usebuttonpressed() )
        {
            _id_8B07FA3892A3A8A4 = 0;

            while ( self usebuttonpressed() )
            {
                _id_8B07FA3892A3A8A4 = _id_8B07FA3892A3A8A4 + 0.05;
                waitframe();
            }

            if ( _id_8B07FA3892A3A8A4 >= 0.5 )
                continue;

            _id_8B07FA3892A3A8A4 = 0;

            while ( !self usebuttonpressed() && _id_8B07FA3892A3A8A4 < 0.25 )
            {
                _id_8B07FA3892A3A8A4 = _id_8B07FA3892A3A8A4 + 0.05;
                waitframe();
            }

            if ( _id_8B07FA3892A3A8A4 >= 0.25 )
                continue;

            if ( c4_validdetonationstate() )
                thread c4_animdetonate();
        }

        waitframe();
    }
}

c4_animdetonate()
{
    objweapon = makeweapon( "c4_empty_sp" );
    self giveandfireoffhand( objweapon );
    thread c4_animdetonatecleanup();
}

c4_animdetonatecleanup()
{
    self endon( "death_or_disconnect" );
    self notify( "c4_animDetonateCleanup()" );
    self endon( "c4_animDetonateCleanup()" );
    objweapon = makeweapon( "c4_empty_sp" );
    wait 1;

    if ( self hasweapon( objweapon ) )
        self takeweapon( objweapon );
}

c4_validdetonationstate()
{
    if ( !isalive( self ) )
        return 0;

    if ( !isdefined( self.c4s ) || self.c4s.size <= 0 )
        return 0;

    return 1;
}

c4_candetonate()
{
    return ( gettime() - self.throwtime ) / 1000 > 0.3;
}

c4_detonateall()
{
    if ( isdefined( self.c4s ) )
    {
        foreach ( c4 in self.c4s )
        {
            if ( c4 c4_candetonate() )
                c4 thread c4_detonate();
        }
    }
}

c4_detonate()
{
    self endon( "death" );
    wait 0.1;
    thread c4_explode( self.owner );
}

c4_explode( attacker )
{
    self setentityowner( attacker );
    self clearscriptabledamageowner();
    self setscriptablepartstate( "effects", "explode", 0 );
    _id_FE7BBB1BFCD13664();
    thread c4_delete( 2.5 );
}

c4_destroy( attacker )
{
    thread c4_delete( 2.5 );
    self setscriptablepartstate( "effects", "destroy", 0 );
}

c4_delete( _id_CBF7BE4F62A0DDB2 )
{
    self notify( "death" );
    self setcandamage( 0 );
    self makeunusable();
    self.exploding = 1;
    owner = self.owner;

    if ( isdefined( owner ) )
    {
        c4_removefromarray( owner, self, self getentitynumber() );
        owner notify( "c4_update", 0 );
    }

    wait( _id_CBF7BE4F62A0DDB2 );

    if ( isdefined( self ) )
        self delete();
}

_id_FE7BBB1BFCD13664()
{
    _id_08234AEA40E5AB7C = scripts\sp\door::get_all_interactive_doors();
    _id_175138D237722678 = _func_E31087776398EA53( self.origin, self.origin, 256, scripts\engine\trace::create_item_contents(), _id_08234AEA40E5AB7C, "physicsquery_all" );

    foreach ( _id_C6C9D254F2E977DB in _id_175138D237722678 )
    {
        door = _id_C6C9D254F2E977DB["entity"];
        opener = spawnstruct();
        opener.origin = self.origin;
        door notify( "breached" );
        door scripts\sp\door::unlock_door( 1 );
        door scripts\sp\door::door_open_completely( opener, 0.3 );
    }
}

c4_explodeonnotify()
{
    self endon( "entitydeleted" );
    level endon( "game_ended" );
    owner = self.owner;
    self waittill( "detonateExplosive", attacker );

    if ( isdefined( attacker ) )
        thread c4_explode( attacker );
    else
        thread c4_explode( owner );
}

c4_addtoarray( owner, grenade )
{
    if ( !isdefined( owner.c4s ) )
        owner.c4s = [];

    entnum = grenade getentitynumber();
    owner.c4s[entnum] = grenade;

    if ( isplayer( owner ) )
        owner _meth_BCC86382F02470E6( 1 );

    thread c4_removefromarrayondeath( owner, grenade, entnum );
}

c4_removefromarray( owner, grenade, entnum )
{
    if ( isdefined( grenade ) )
        grenade notify( "c4_removeFromArray" );

    if ( isdefined( owner ) && isdefined( owner.c4s ) && isplayer( owner ) )
    {
        owner.c4s[entnum] = undefined;

        foreach ( c4 in owner.c4s )
        {
            if ( isdefined( c4 ) )
                return;
        }

        owner _meth_BCC86382F02470E6( 0 );
    }
}

c4_removefromarrayondeath( owner, grenade, entnum )
{
    grenade endon( "c4_removeFromArray" );
    owner endon( "disconnect" );
    grenade waittill( "death" );
    thread c4_removefromarray( owner, grenade, entnum );
}

c4nodetonatorfiremain( c4 )
{
    if ( !isdefined( c4 ) )
        return;

    level.player endon( "death" );
    c4 waittill( "missile_stuck", stuckto );
    c4.targetname = "offhand_c4_no_detonator";
    c4.owner = self;
    c4 setscriptablepartstate( "effects", "plant", 0 );
    c4 makeunusable();
    c4.interact = c4 c4createcursor();
    result = scripts\engine\utility::waittill_any_ents_return( c4, "detonate", c4.interact, "trigger", c4.interact, "entitydeleted" );

    if ( isdefined( c4.interact ) )
        c4.interact delete();

    if ( result == "detonate" )
        c4 thread c4detonation();
    else if ( result == "trigger" )
    {
        c4 delete();
        thread scripts\engine\utility::play_sound_in_space( "weap_pickup", level.player.origin );

        if ( level.player scripts\engine\sp\utility::player_has_weapon( "c4_no_detonator" ) )
        {
            _id_D1AD88BF84DAA67F = level.player getweaponammostock( "c4_no_detonator" );
            level.player setweaponammoclip( "c4_no_detonator", _id_D1AD88BF84DAA67F + 1 );
        }
        else
        {
            level.player scripts\engine\sp\utility::give_offhand( "c4_no_detonator" );
            level.player setweaponammoclip( "c4_no_detonator", 1 );
        }
    }
}

c4detonation()
{
    self setscriptablepartstate( "effects", "explode", 0 );
}

c4createcursor()
{
    interact = scripts\engine\utility::spawn_tag_origin();
    interact linkto( self );
    interact scripts\sp\player\cursor_hint::create_cursor_hint( "tag_origin", ( 0, 0, 10 ), "^2Pickup", 35, 250, 100, 0, undefined, undefined, undefined, "duration_short", undefined, undefined, 8 );
    return interact;
}

minedamagemonitor()
{
    self endon( "mine_selfdestruct" );
    self endon( "entitydeleted" );
    self setcandamage( 1 );
    self.maxhealth = 100000;
    self.health = self.maxhealth;
    attacker = undefined;
    hits = 1;

    for (;;)
    {
        self waittill( "damage", damage, attacker, direction_vec, point, type, modelname, tagname, partname, idflags, objweapon, origin, angles, normal, inflictor );

        if ( !isplayer( attacker ) && !isagent( attacker ) )
            continue;

        if ( isdefined( objweapon ) && objweapon.basename == "flash" )
            continue;

        if ( isplayer( attacker ) )
            scripts\sp\damagefeedback::updatehitmarker( "standard", 1, 0, 0 );

        _id_8C97D5D29E3F5523 = 1;
        hits = hits - _id_8C97D5D29E3F5523;

        if ( hits <= 0 )
            break;
    }

    self notify( "mine_destroyed" );

    if ( isdefined( type ) && ( issubstr( type, "MOD_GRENADE" ) || issubstr( type, "MOD_EXPLOSIVE" ) ) )
        self.waschained = 1;

    if ( isdefined( idflags ) && isdefined( level.idflags_penetration ) && idflags & level.idflags_penetration )
        self.wasdamagedfrombulletpenetration = 1;

    if ( isdefined( idflags ) && isdefined( level.idflags_ricochet ) && idflags & level.idflags_ricochet )
        self.wasdamagedfrombulletricochet = 1;

    self.wasdamaged = 1;

    if ( isdefined( attacker ) )
        self.damagedby = attacker;

    self notify( "detonateExplosive", attacker );
}

_id_F375135DD6B57A71( c4, _id_FF882F75755F7367 )
{
    self endon( "death" );
    self endon( "detonate" );

    for (;;)
    {
        c4 scripts\sp\player\cursor_hint::create_cursor_hint( undefined, ( 0, 0, 5 ), &"EQUIPMENT/IMPROVISED_MINE_PICKUP", 55, 100, 70, 0 );
        c4 childthread scripts\sp\equipment\offhands::_id_BB7D0FD0262D852D( &"EQUIPMENT/IMPROVISED_MINE_PICKUP", _id_FF882F75755F7367 );
        c4 waittill( "trigger" );
        pickedup = scripts\sp\equipment\offhands::_id_E2C7F0ED80637008( _id_FF882F75755F7367 );

        if ( !pickedup )
            continue;
        else
        {
            c4 delete();
            return;
        }
    }
}
