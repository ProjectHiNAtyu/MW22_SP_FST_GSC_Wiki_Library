// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

seeker_getplayerriganims()
{
    _id_0C18282FA5D72EBE = [];
    return _id_0C18282FA5D72EBE;
}

seeker_evaluatesyncedmelee( asmname, statename, _id_F2B19B25D457C2A6, params )
{
    target = self._id_9BFC452192B23C7A;

    if ( isplayer( target ) )
        return 0;

    self._id_74666F91F95A6EF8 = 1;
    target._id_74666F91F95A6EF8 = 0;
    [self.melee.direction, self.melee.offset] = seeker_pickattachdirection( self, self._id_9BFC452192B23C7A );
    target.melee.direction = self.melee.direction;
    meleeanim = chooseanimmelee_seekerjump( asmname, _id_F2B19B25D457C2A6, self.melee.direction );
    _id_A626CCAD8052F1BF = vectortoyaw( self.origin - self._id_9BFC452192B23C7A.origin );
    targetangles = ( 0, self.melee.offset + _id_A626CCAD8052F1BF, 0 );
    self._id_290BE0985580A7A0 = self.angles[1];
    target._id_290BE0985580A7A0 = targetangles[1];
    target.ignoreme = 1;
    self.ignoreme = 1;
    self notify( "meleegrab_start" );
    self.bt.target_locked = 1;
    return 1;
}

seeker_pickattachdirection( _id_A03F1B2D2EA7D57E, target )
{
    _id_C99A285CABF7EC7B = target.angles;
    _id_88DAF353E30ACF25 = target.origin;
    targetorigin = _id_A03F1B2D2EA7D57E.origin;
    _id_87617967D6BB7D22 = vectortoangles( targetorigin - _id_88DAF353E30ACF25 );
    angle = angleclamp( _id_C99A285CABF7EC7B[1] - _id_87617967D6BB7D22[1] );

    if ( angle > 315 || angle < 45 )
        return [ "front", 0 ];
    else if ( angle < 135 )
        return [ "right", 90 ];
    else if ( angle > 225 )
        return [ "left", -90 ];
    else
        return [ "back", 180 ];
}

chooseanimmelee_seekerjump( asmname, statename, direction )
{
    return scripts\asm\asm::asm_lookupanimfromalias( statename, "jump_" + direction );
}

chooseanimmelee_seekerloop( asmname, statename, direction )
{
    return scripts\asm\asm::asm_lookupanimfromalias( statename, "loop_" + direction );
}

seekermeleedetonate()
{
    _id_954C389C60768848 = 0.7071;

    for (;;)
    {
        wait 0.05;

        if ( scripts\engine\utility::within_fov( level.player geteye(), level.player getplayerangles(), self.origin, _id_954C389C60768848 ) )
        {
            self notify( "on_screen" );
            return;
        }
    }
}

setseekerattached()
{
    self.attached = 1;
}

valid_reaction_sound( npcid )
{
    switch ( npcid )
    {
        case "w2":
        case "w1":
        case "w0":
        case "slt":
        case "omr":
        case "4":
        case "2":
        case "3":
        case "5":
        case "1":
        case "0":
            return 1;
    }

    return 0;
}

playmeleeanim_seekerattack( asmname, statename, params )
{
    self endon( statename + "_finished" );
    self._id_DFFF4C701BB9523C = 1;
    target = self._id_9BFC452192B23C7A;
    meleeanim = chooseanimmelee_seekerjump( asmname, statename, self.melee.direction );
    scripts\asm\asm::asm_fireephemeralevent( "melee_attack", "begin" );
    scripts\asm\soldier\melee::melee_synced_setup( statename, 1 );

    if ( !isdefined( target.seenatseeker ) )
    {
        target.seenatseeker = 1;

        if ( isdefined( target.battlechatter.countryid ) && isdefined( target.battlechatter.npcid ) && ( target.battlechatter.countryid == "UN" || target.battlechatter.countryid == "SD" ) )
        {
            if ( valid_reaction_sound( target.battlechatter.npcid ) && !isdefined( level.in_vr ) )
            {
                _id_1C0A80596DFD6B64 = target.battlechatter.countryid + "_" + target.battlechatter.npcid + "_reaction_seeker_attack";
                target playsound( _id_1C0A80596DFD6B64 );
            }
        }
    }

    target scripts\asm\asm::asm_setstate( statename + "_victim" );
    createnavrepulsor( "ent_" + self getentitynumber() + "_seeker_repulsor", -1, self, 250, 1, self.bt.enemy_team );
    self animmode( "zonly_physics" );
    self linktoblendtotag( self._id_9BFC452192B23C7A, "tag_sync", 0, 0 );
    self clearanim( scripts\asm\asm::asm_getbodyknob(), 0 );
    self setflaggedanimrestart( statename, meleeanim, 1, 0, 1 );
    scripts\engine\utility::delaythread( 0.25, ::setseekerattached );
    _id_8E7DD7004797F1B4 = scripts\asm\asm::asm_donotetracks( asmname, statename, scripts\asm\soldier\melee::melee_handlenotetracks );
    loopanim = chooseanimmelee_seekerloop( asmname, statename, self.melee.direction );
    self aisetanim( statename, loopanim );
    childthread seekermeleedetonate();
    scripts\engine\utility::waittill_notify_or_timeout( "on_screen", 1.5 );
    wait 0.4;
    playworldsound( "seeker_expl_beep", self.origin );
    wait 0.6;
    destroynavrepulsor( "ent_" + self getentitynumber() + "_seeker_repulsor" );
    self.is_detonated = 1;
}

playmeleeanim_seekerattack_cleanup( asmname, statename, params )
{
    destroynavrepulsor( "ent_" + self getentitynumber() + "_seeker_repulsor" );

    if ( isdefined( self._id_9BFC452192B23C7A ) )
    {
        if ( self._id_9BFC452192B23C7A._id_A97AC004F00C5DF9 )
            self._id_9BFC452192B23C7A._id_4ECD594AE357F55B = 1;

        self._id_9BFC452192B23C7A.ignoreme = 0;
    }
}

seeker_meleegrabplayer( asmname, statename, params )
{
    level.player.damageshield = 1;
    self.disableattack = 1;
    self.ignoreme = 1;
    scripts\engine\sp\utility::hudoutline_disable( "default_seeker" );
    scripts\asm\shared\sp\utility::meleegrab_common();
    scripts\asm\asm::asm_fireephemeralevent( "melee_attack", "begin" );
    thread seeker_playerrig_meleegrabplayer();
    scripts\asm\asm::asm_playanimstate( asmname, statename );
}

seeker_playerrig_meleegrabplayer()
{
    if ( isdefined( self.forcemeleeyaw ) )
        angles = ( 0, self.forcemeleeyaw, 0 );
    else
    {
        angles = vectortoangles( self.origin - level.player.origin );
        angles = ( 0, angles[1], 0 );
    }

    player_rig = scripts\asm\shared\sp\utility::spawnplayerrig();
    player_rig.angles = angles;
    self notify( "jumped_on_player" );
    playworldsound( "seeker_expl_beep", self.origin );
    level.player._id_68D2F73EE95055FB = self;
    level.player.melee.rig = player_rig;
    _id_0C18282FA5D72EBE = seeker_getplayerriganims();
    flagname = "meleeAnim";
    player_rig setflaggedanimknoballrestart( flagname, _id_0C18282FA5D72EBE["seekerMeleeGrab"], player_rig.root, 1, 0.0, 1 );
    thread seeker_playerrig_link( player_rig );
    _id_EB5B1F36E255152D = getanimlength( _id_0C18282FA5D72EBE["seekerMeleeGrab"] );
    thread seeker_meleegrab_counterinput( 1.25, 0.75 );
    player_rig thread scripts\common\notetrack::start_notetrack_wait( player_rig, flagname );
    player_rig _id_357B9A54DFEDBD4A::donotetracks( flagname );
}

seeker_meleegrab_counterinput( delay, bashtime )
{
    level.player notifyonplayercommand( "bash_pressed", "+usereload" );
    level.player notifyonplayercommand( "bash_pressed", "+activate" );
    scripts\engine\utility::waittill_notify_or_timeout_return( "death", delay );

    if ( !level.player._id_A97AC004F00C5DF9 )
        return;

    scripts\sp\player\cursor_hint::create_cursor_hint( "j_body", undefined, undefined, undefined, 1000, 1000, 1, 1 );
    _id_06266AB9D537A487 = seeker_meleegrab_bash( bashtime );

    if ( !isdefined( level.player ) || !level.player._id_A97AC004F00C5DF9 )
        return;

    level.player.melee.countersuccess = _id_06266AB9D537A487;
    scripts\sp\player\cursor_hint::remove_cursor_hint();
}

seeker_meleegrab_bash( bashtime )
{
    self endon( "meleegrab_interupt" );
    bashtime = bashtime * 1000;
    _id_C015628D5530953E = 1.0;
    _id_7512730C72725305 = 0.4;
    _id_EBF37221AA00EF0D = _id_C015628D5530953E;
    starttime = undefined;

    for (;;)
    {
        timeout = level.player scripts\engine\utility::waittill_notify_or_timeout_return( "bash_pressed", _id_EBF37221AA00EF0D );

        if ( isdefined( timeout ) && timeout == "timeout" )
            break;

        if ( !isdefined( starttime ) )
            starttime = gettime();

        if ( gettime() - starttime > bashtime )
            return 1;

        _id_EBF37221AA00EF0D = _id_7512730C72725305;
    }

    return 0;
}

seeker_meleegrab_rumble()
{
    self endon( "meleegrab_interupt" );

    for (;;)
    {
        level.player playrumbleonentity( "damage_light" );
        earthquake( 0.15, 0.1, level.player.origin, 5000 );
        wait 0.05;
    }
}

seeker_meleegrab_hint()
{
    tag = spawn( "script_model", self.origin );
    tag linkto( self, "j_hip_le", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    tag scripts\sp\player\cursor_hint::create_cursor_hint( undefined, undefined, "", undefined, undefined, undefined, 1, 1 );
    self waittill( "meleegrab_interupt" );
    tag scripts\sp\player\cursor_hint::remove_cursor_hint();
}

seeker_meleegrab_counterhint( delay )
{
    level.player endon( "meleegrab_interupt" );
    _id_B54C12788DC982C7 = 0.2;
    _id_A4972F5C6A743696 = 0.3;
    wait( delay - _id_B54C12788DC982C7 - 0.05 );

    if ( isdefined( self.melee.meleecounterhint ) )
        self.melee.meleecounterhint destroy();

    self.melee.meleecounterhint = newclienthudelem( level.player );
    self.melee.meleecounterhint.color = ( 1, 1, 1 );
    self.melee.meleecounterhint settext( &"SCRIPT_PLATFORM/HINT_MELEE_TAP" );
    self.melee.meleecounterhint.x = 0;
    self.melee.meleecounterhint.y = 20;
    self.melee.meleecounterhint.alignx = "center";
    self.melee.meleecounterhint.aligny = "middle";
    self.melee.meleecounterhint.horzalign = "center";
    self.melee.meleecounterhint.vertalign = "middle";
    self.melee.meleecounterhint.foreground = 1;
    self.melee.meleecounterhint.alpha = 0;
    self.melee.meleecounterhint.fontscale = 0.5;
    self.melee.meleecounterhint.hidewhendead = 1;
    self.melee.meleecounterhint.sort = -1;
    self.melee.meleecounterhint endon( "death" );
    self.melee.meleecounterhint fadeovertime( _id_B54C12788DC982C7 );
    self.melee.meleecounterhint changefontscaleovertime( _id_B54C12788DC982C7 );
    self.melee.meleecounterhint.fontscale = 1.3;
    self.melee.meleecounterhint.alpha = 1;
    wait( _id_B54C12788DC982C7 );

    if ( !isdefined( self.melee.meleecounterhint ) )
        return;

    self.melee.meleecounterhint fadeovertime( _id_A4972F5C6A743696 );
    self.melee.meleecounterhint changefontscaleovertime( _id_A4972F5C6A743696 );
    self.melee.meleecounterhint.fontscale = 1.2;
}

seeker_playerrig_link( player_rig )
{
    time = 0.3;
    player_rig thread seeker_meleegrab_interrupt( self );
    level.player playerlinktoblend( player_rig, "tag_player", time, 0, time );
    level.player viewkick( 5, self.origin );
    scripts\asm\shared\sp\utility::playergrabbed( "seeker" );
    self linktoblendtotag( player_rig, "tag_sync", 0, 0 );
    wait( time );

    if ( !isalive( self ) )
        return;

    level.player _meth_D7D5EF1BA6D19E25();
    thread scripts\asm\shared\sp\utility::delayenabledof( 0.5, 2, 20, 10, 5, 60, 10, 0.1 );
    thread scripts\asm\shared\sp\utility::delayenabledof( 1, 2, 20, 4, 50, 90, 10, 0.1 );
    thread scripts\asm\shared\sp\utility::delaymodifybasefov( 1, 50, 0.4 );
    player_rig show();
    level.player thread scripts\asm\shared\sp\utility::playerhealth();
    level.player playerlinktodelta( player_rig, "tag_player", 1, 0, 0, 0, 0, 1 );
    level.player lerpviewangleclamp( 0.4, 0, 0, 15, 20, 30, 0 );
    thread seeker_playergrabbed_screenshake();
}

seeker_playergrabbed_screenshake()
{
    wait 0.1;
    origin = level.player.origin + anglestoforward( level.player.angles ) * -100;
    _func_8111D316E1958815( origin, 10, 2, 1, 0.4, 0.2, 0.2, 700, 0.2, 1, 1 );
    wait 0.5;
    origin = level.player.origin + anglestoforward( level.player.angles ) * 100;
    _func_8111D316E1958815( origin, 10, 2, 1, 0.6, 0.3, 0.3, 700, 0.2, 1, 1 );
}

seeker_meleegrab_notetracks( _id_A234A65C378F3289 )
{
    switch ( _id_A234A65C378F3289 )
    {
        case "unlink":
            self unlink();
            break;
        case "disable_weapons":
            level.player disableweapons();
            level.player viewkick( 10, self.origin );
            break;
    }
}

seeker_meleegrab_interrupt( _id_A03F1B2D2EA7D57E )
{
    self endon( "death" );
    level.player endon( "bt_stop_meleegrab" );

    while ( !seeker_meleegrab_checkinterrupt( _id_A03F1B2D2EA7D57E ) )
        wait 0.05;

    level.player notify( "meleegrab_interupt" );

    if ( level.player._id_A97AC004F00C5DF9 && isdefined( level.player.melee.meleecounterhint ) )
        level.player.melee.meleecounterhint destroy();

    thread scripts\asm\shared\sp\utility::delaydisabledof( 0.2 );
    thread scripts\asm\shared\sp\utility::delaymodifybasefov( 0.25, 65, 0.4 );
    scripts\asm\shared\sp\utility::playerletgo();
    level.player.damageshield = 0;
    level.player.ignoreme = 0;
    level.player setcandamage( 1 );
    level.player unlink();
    self delete();
}

seeker_meleegrab_checkinterrupt( _id_A03F1B2D2EA7D57E )
{
    if ( !isalive( _id_A03F1B2D2EA7D57E ) )
        return 1;

    if ( isdefined( _id_A03F1B2D2EA7D57E.antigravtag ) )
        return 1;

    return 0;
}

seeker_meleegrabplayercounter( asmname, statename, params )
{
    _id_04E97F72027D0729 = seeker_getplayerriganims();
    _id_F838C66354200D40 = _id_04E97F72027D0729["seekerMeleeGrab_win"];
    player_rig = level.player.melee.rig;
    thread scripts\asm\shared\sp\utility::delaydisabledof( 0.2 );
    thread scripts\asm\shared\sp\utility::delaymodifybasefov( 0.2, 65, 0.4 );
    player_rig setflaggedanimknoballrestart( "meleeCounter", _id_F838C66354200D40, player_rig.root, 1, 0.2, 1 );
    player_rig thread scripts\common\notetrack::start_notetrack_wait( player_rig, "meleeCounter" );
    player_rig thread _id_357B9A54DFEDBD4A::donotetracks( "meleeCounter", ::seeker_meleegrab_notetracks );
    animation = scripts\asm\asm::asm_getanim( asmname, statename );
    playworldsound( "seeker_expl_beep", self.origin );
    thread seeker_collide();
    self aisetanim( statename, animation );
    thread scripts\common\notetrack::start_notetrack_wait( self, statename );
    scripts\asm\asm::asm_donotetracks( asmname, statename, scripts\asm\asm::asm_getnotehandler( asmname, statename ) );
    seeker_meleeexplode();
}

seeker_meleeexplode( _id_BB9898C2199A7487 )
{
    if ( isdefined( self.is_detonated ) && self.is_detonated )
        return;

    level.player viewkick( 50, self.origin );
    level.player enableinvulnerability();
    self.is_detonated = 1;
    level.player thread post_meleeexplode();
}

post_meleeexplode()
{
    wait 0.1;
    self disableinvulnerability();
}

seeker_collide()
{
    self endon( "death" );

    for (;;)
    {
        _id_B003E2C45A4BF6F7 = self gettagorigin( "j_body" );
        wait 0.05;
        contents = scripts\engine\trace::create_solid_ai_contents( 1 );
        trace = scripts\engine\trace::ray_trace( _id_B003E2C45A4BF6F7, self gettagorigin( "j_body" ), self, contents );

        if ( trace["hittype"] != "hittype_none" )
        {
            seeker_meleeexplode( trace["position"] );
            return;
        }
    }
}

seeker_meleegrabkillplayer( asmname, statename, params )
{
    level.player thread scripts\asm\shared\sp\utility::counterhintdestroy();
    _id_04E97F72027D0729 = seeker_getplayerriganims();
    _id_F838C66354200D40 = _id_04E97F72027D0729["seekerMeleeGrab_lose"];
    player_rig = level.player.melee.rig;
    wait 0.8;

    if ( isdefined( self ) )
        self.is_detonated = 1;
}

playmeleeanim_seekerattack_victim( asmname, statename, params )
{
    self endon( statename + "_finished" );
    self._id_DFFF4C701BB9523C = 1;
    self animmode( "zonly_physics" );
    self orientmode( "face angle", self._id_290BE0985580A7A0 );
    scripts\asm\soldier\melee::melee_synced_setup( statename, 0 );
    thread scripts\asm\soldier\melee::melee_waitfordroppedweapon( statename );
    _id_A553F65A4CB20B34 = chooseanimmelee_seekerjump( asmname, statename, self.melee.direction );
    self aisetanim( statename, _id_A553F65A4CB20B34 );
    scripts\asm\asm::asm_playfacialanim( asmname, statename, _id_A553F65A4CB20B34 );
    _id_4ADE3AE5C138C8B3::saygenericdialogue( "pain" );
    _id_8E7DD7004797F1B4 = scripts\asm\asm::asm_donotetracks( asmname, statename, scripts\asm\soldier\melee::melee_handlenotetracks );
    loopanim = chooseanimmelee_seekerloop( asmname, statename, self.melee.direction );
    self aisetanim( statename, loopanim );
    childthread seekerattack_victim_checkattacker();
    scripts\asm\asm::asm_donotetracks( asmname, statename, scripts\asm\soldier\melee::melee_handlenotetracks );
}

seekerattack_victim_checkattacker()
{
    _id_A03F1B2D2EA7D57E = self._id_68D2F73EE95055FB;

    for (;;)
    {
        if ( !self._id_A97AC004F00C5DF9 )
            break;

        if ( !isdefined( self._id_68D2F73EE95055FB ) || !isalive( self._id_68D2F73EE95055FB ) )
        {
            self._id_4ECD594AE357F55B = 1;
            break;
        }

        wait 0.05;
    }
}
