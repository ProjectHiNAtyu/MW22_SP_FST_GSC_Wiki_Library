// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

spawn_ai_mode()
{

}

init_spawners()
{
    spawnaimode = level.debug.spawnaimode;
    spawnaimode.realspawners = [];
    spawnaimode.listaitypes = [];
    _id_F9DE49798947A6A9 = [];
    spawners = _func_91E8F01DD90DE05A();

    foreach ( spawner in spawners )
    {
        if ( !isdefined( spawnaimode.realspawners[spawner.classname] ) )
        {
            spawnaimode.realspawners[spawner.classname] = spawner;
            spawnaimode.listaitypes[spawnaimode.listaitypes.size] = spawner.classname;
        }
    }

    spawnaimode.listaitypes = scripts\engine\utility::alphabetize( spawnaimode.listaitypes );
}

input()
{
    _id_7E877E9AE6532AAD = undefined;
    spawnaimode = level.debug.spawnaimode;
    updategameon();

    if ( spawnaimode.gameon )
        return;

    if ( spawnaimode.selectedaitype == "undefined" && isdefined( level.debug.spawnaimode.heldspawner ) )
        clear_heldspawner();

    foreach ( spawner in spawnaimode.placedspawners )
    {
        if ( distancesquared( spawner.origin, level.debug.cursor_pos ) < 2304 )
        {
            _id_7E877E9AE6532AAD = spawner;
            break;
        }
    }

    if ( isdefined( _id_7E877E9AE6532AAD ) )
    {
        clear_heldspawner();
        highlightent( _id_7E877E9AE6532AAD );
    }

    if ( !canpressuse() )
        return;

    if ( !isdefined( _id_7E877E9AE6532AAD ) )
    {
        if ( isdefined( spawnaimode.selectedents ) )
        {

        }
        else
            unhighlightent();
    }

    if ( isdefined( spawnaimode.highlightent ) )
    {
        if ( level.player usebuttonpressed() )
        {
            removeselected = undefined;

            if ( isdefined( spawnaimode.selectedents ) )
            {
                foreach ( ent in spawnaimode.selectedents )
                {
                    if ( ent == spawnaimode.highlightent )
                    {
                        removeselected = ent;
                        break;
                    }
                }
            }

            if ( isdefined( removeselected ) )
                removeselected( removeselected );
            else
                addselected( spawnaimode.highlightent );

            delayusetime();
            return;
        }
        else if ( level.player buttonpressed( "del" ) )
        {
            spawnaimode.placedspawners = scripts\engine\utility::array_remove( spawnaimode.placedspawners, spawnaimode.highlightent );
            spawnaimode.highlightent delete();
        }
    }
}

gameon_toggle()
{
    updategameon( 1 );
    return level.debug.spawnaimode.gameon;
}

updategameon( _id_41D8BF229CF29051 )
{
    if ( !canpressuse() )
        return;

    if ( level.player meleebuttonpressed() || isdefined( _id_41D8BF229CF29051 ) )
    {
        level.debug.spawnaimode.gameon = !level.debug.spawnaimode.gameon;

        if ( level.debug.spawnaimode.gameon )
            thread gameon_thread();
        else
            gameoff();

        delayusetime();
    }
}

canpressuse()
{
    return gettime() > level.debug.spawnaimode.nextusepress;
}

delayusetime()
{
    level.debug.spawnaimode.nextusepress = gettime() + 400;
}

assigngoalpos( pos, radius )
{
    self.spawnai_goalpos = pos;
    self.spawnai_goalradius = radius;
    thread drawassignedgoalpos();
}

drawassignedgoalpos()
{
    self endon( "death" );
    self endon( "selected" );
    level endon( "gameOn" );

    for (;;)
    {
        waitframe();
        drawgoalpos( self.spawnai_goalpos, self.spawnai_goalradius );
    }
}

highlightent( ent )
{
    if ( isdefined( level.debug.spawnaimode.highlightent ) && level.debug.spawnaimode.highlightent == ent )
        return;

    unhighlightent();
    ent hudoutlineenable( "outline_nodepth_orange" );
    level.debug.spawnaimode.highlightent = ent;
}

unhighlightent()
{
    if ( !isdefined( level.debug.spawnaimode.highlightent ) )
        return;

    level.debug.spawnaimode.highlightent hudoutlinedisable();
    level.debug.spawnaimode.highlightent = undefined;
}

addselected( ent )
{
    if ( !isdefined( level.debug.spawnaimode.selectedents ) )
        level.debug.spawnaimode.selectedents = [];

    level.debug.spawnaimode.selectedents[level.debug.spawnaimode.selectedents.size] = ent;
    ent hudoutlineenable( "outline_nodepth_cyan" );
    ent notify( "selected" );
    level.debug.spawnaimode.highlightent = undefined;
}

removeselected( ent )
{
    level.debug.spawnaimode.selectedents = scripts\engine\utility::array_remove( level.debug.spawnaimode.selectedents, ent );
    ent hudoutlinedisable();

    if ( level.debug.spawnaimode.selectedents.size == 0 )
        level.debug.spawnaimode.selectedents = undefined;
}

drawgoalpos( pos, radius )
{
    color = ( 1, 1, 1 );
}

createspawner()
{
    spawnaimode = level.debug.spawnaimode;
    spawner = get_spawner( spawnaimode.selectedaitype );
    ent = scripts\engine\sp\utility::dronespawn_bodyonly( spawner );
    ent.aitype = spawner.classname;
    ent.pathpoints = [];
    return ent;
}

get_spawner( classname )
{
    return level.debug.spawnaimode.realspawners[classname];
}

spawnguy()
{
    spawnaimode = level.debug.spawnaimode;
    spawner = spawnaimode.realspawners[randomint( spawnaimode.realspawners.size )];

    for (;;)
    {
        spawner.count = spawner.count + 1;
        og_origin = spawner.origin;
        spawner.origin = level.debug.cursor_pos;
        spawner stripspawner();
        guy = spawner scripts\engine\sp\utility::spawn_ai( 1 );
        spawner restorespawner();
        spawner.origin = og_origin;

        if ( !scripts\common\ai::spawn_failed( guy ) )
        {
            guy.ignoreme = 1;
            guy.ignoreall = 1;
            guy _meth_8A144CB1601C409A();
            guy.spawnai_realspawner = spawner;
            break;
        }
    }

    guy.spawnai_linkent = scripts\engine\utility::spawn_tag_origin( guy.origin );
    guy linkto( guy.spawnai_linkent );
    return guy;
}

tryplacespawner()
{
    angles = ( 0, 0, 0 );
    spawnaimode = level.debug.spawnaimode;

    if ( spawnaimode.mode != "default" )
        return;

    clear_heldspawner();
    spawnaimode.heldspawner = createspawner();
    spawnaimode.heldspawner thread heldspawner_think();
}

heldspawner_think()
{
    self endon( "death" );
    spawnaimode = level.debug.spawnaimode;

    for (;;)
    {
        self.origin = level.debug.cursor_pos;

        if ( canpressuse() && level.player usebuttonpressed() )
        {
            if ( getaicount() > 32 )
            {
                spawnaimode.placedspawners[0].guy delete();
                spawnaimode.placedspawners = scripts\engine\utility::array_remove_index( spawnaimode.placedspawners, 0 );
            }

            spawnaimode.placedspawners[spawnaimode.placedspawners.size] = self;
            spawnaimode.highlightent = self;
            spawnaimode.heldspawner = undefined;
            level thread edit_spawner();
            delayusetime();
            break;
        }

        waitframe();
    }
}

clear_aitype()
{
    clear_heldspawner();
    level.debug.spawnaimode.selectedaitype = "undefined";
    return "undefined";
}

clear_heldspawner()
{
    if ( isdefined( level.debug.spawnaimode.heldspawner ) )
        level.debug.spawnaimode.heldspawner delete();
}

set_mode( mode )
{
    level.debug.spawnaimode.mode = mode;
}

gameon_thread()
{
    spawnaimode = level.debug.spawnaimode;
    duration = 3;
    endtime = gettime() + duration * 1000;
    setdvar( "dvar_BB1A296DF27C0F74", 1 );
    hud = newhudelem();
    hud.x = 320;
    hud.y = 100;
    hud.alignx = "center";
    hud.vertalign = "fullscreen";
    hud.horzalign = "fullscreen";
    hud setvalue( duration );
    hud.fontscale = 1.5;

    while ( getdvarint( "dvar_BB1A296DF27C0F74" ) == 1 )
    {
        if ( !spawnaimode.gamestarted )
        {
            time = ( endtime - gettime() ) * 0.001;
            time = int( time / 0.1 ) * 0.1;

            if ( time <= 0 )
            {
                hud settext( "GAME ON!" );
                spawnaimode.gamestarted = 1;

                if ( isdefined( hud ) )
                    hud scripts\engine\utility::delaycall( 1, ::destroy );

                gameon();
            }
            else
                hud setvalue( time );
        }

        waitframe();
    }

    if ( isdefined( hud ) )
        hud scripts\engine\utility::delaycall( 0.5, ::destroy );

    spawnaimode.gamestarted = 0;
}

gameoff()
{
    setdvar( "dvar_BB1A296DF27C0F74", 0 );

    foreach ( spawner in level.debug.spawnaimode.placedspawners )
    {
        if ( isalive( spawner.guy ) )
            spawner.guy delete();

        spawner show();
    }
}

gameon()
{
    foreach ( spawner in level.debug.spawnaimode.placedspawners )
    {
        spawner hide();
        guy = _func_482B56384D6F1991( spawner.aitype, spawner.origin, spawner.angles, 1 );

        if ( isdefined( guy ) )
        {
            guy.pathpoints = spawner.pathpoints;
            spawner.guy = guy;
            guy thread guy_think();
        }
    }
}

guy_think()
{
    self endon( "death" );

    foreach ( point in self.pathpoints )
        scripts\sp\spawner::go_to_node( point );
}

menu_default()
{
    spawnaimode = level.debug.spawnaimode;
    menu = "spawnai_main";
    scripts\sp\debug_menu::add_menu( menu, "Main" );
    scripts\sp\debug_menu::add_menuoptions( menu, "Game On", ::gameon_toggle, undefined, getdvarint( "dvar_BB1A296DF27C0F74" ) );
    scripts\sp\debug_menu::add_menuoptions( menu, "Place Spawner", ::pick_aitype, ::clear_aitype, spawnaimode.selectedaitype );
    scripts\sp\debug_menu::add_menuoptions( menu, "Edit Spawner", ::edit_spawner );
    scripts\sp\debug_menu::enable_menu( menu );
}

pick_aitype()
{
    hud = scripts\sp\debug_menu::menu_get_selected_optionsvalue();
    spawnaimode = level.debug.spawnaimode;

    if ( spawnaimode.selectedaitype == "undefined" )
        _id_B8E34FEB74A21467 = 12 * ( spawnaimode.selectedaitype.size + 1 );
    else
        _id_B8E34FEB74A21467 = 12 * ( spawnaimode.selectedaitype.size - 7 );

    num = scripts\sp\debug_menu::list_menu( spawnaimode.listaitypes, hud.x + _id_B8E34FEB74A21467, hud.y );

    if ( !isdefined( num ) )
        return undefined;

    spawnaimode.selectedaitype = spawnaimode.listaitypes[num];
    tryplacespawner();
    return getsubstr( spawnaimode.selectedaitype, 6 );
}

edit_spawner()
{
    _id_641550BE2CC9108E = scripts\sp\debug_menu::get_current_menu_name();
    clear_aitype();

    if ( !isdefined( level.debug.spawnaimode.highlightent ) || !isdefined( level.debug.spawnaimode.highlightent.aitype ) )
        return;

    set_mode( "edit_spawner" );
    scripts\sp\debug_menu::disable_menu( "current_menu" );
    menu = "spawnai_editspawner";

    if ( scripts\sp\debug_menu::menu_exists( menu ) )
        scripts\sp\debug_menu::destroy_menu( menu );

    scripts\sp\debug_menu::add_menu( menu, "Edit Spawner" );
    scripts\sp\debug_menu::add_menuoptions( menu, "Add Path Points", ::add_pathpoints );
    scripts\sp\debug_menu::add_menuoptions( menu, "Goal Radius", ::menu_goalradius_inc, ::menu_goalradius_dec, level.debug.spawnaimode.goalradius );
    scripts\sp\debug_menu::add_menuoptions( menu, "Clear Path Points", ::clear_pathpoints );
    scripts\sp\debug_menu::add_menuoptions( menu, "Exit", scripts\sp\debug_menu::exit_menu );
    scripts\sp\debug_menu::add_menuent( menu, level.debug.spawnaimode.highlightent );
    scripts\sp\debug_menu::enable_menu( menu );
    level thread edit_spawner_exit( _id_641550BE2CC9108E );
}

edit_spawner_exit( _id_641550BE2CC9108E )
{
    spawner = level.debug.spawnaimode.highlightent;

    for (;;)
    {
        spawner draw_spawner_edit_path();

        if ( scripts\sp\debug_menu::can_exit() )
            break;

        waitframe();
    }

    scripts\sp\debug_menu::disable_menu( "current_menu" );
    set_mode( "default" );

    if ( isdefined( _id_641550BE2CC9108E ) )
        scripts\sp\debug_menu::enable_menu( _id_641550BE2CC9108E );
}

menu_goalradius_inc()
{
    level.debug.spawnaimode.goalradius = level.debug.spawnaimode.goalradius + 2;
    level.debug.spawnaimode.goalradius = min( level.debug.spawnaimode.goalradius, 2048 );
    return level.debug.spawnaimode.goalradius;
}

menu_goalradius_dec()
{
    level.debug.spawnaimode.goalradius = level.debug.spawnaimode.goalradius - 2;
    level.debug.spawnaimode.goalradius = max( level.debug.spawnaimode.goalradius, 4 );
    return level.debug.spawnaimode.goalradius;
}

draw_spawner_edit_path()
{
    _id_AE4BBF6283072CF2 = self;

    foreach ( index, point in self.pathpoints )
        _id_AE4BBF6283072CF2 = point;
}

add_pathpoints()
{
    if ( !isdefined( self.pathpoints ) )
        self.pathpoints = [];

    struct = spawnstruct();
    struct.origin = level.debug.cursor_pos;
    struct.angles = ( 0, 0, 0 );
    struct.radius = level.debug.spawnaimode.goalradius;

    foreach ( point in self.pathpoints )
    {
        if ( distancesquared( point.origin, struct.origin ) < 16 )
            return;
    }

    self.pathpoints[self.pathpoints.size] = struct;
}

clear_pathpoints()
{
    self.pathpoints = [];
}

stripspawner()
{
    if ( isdefined( self.target ) )
    {
        self.og_target = self.target;
        self.target = undefined;
    }

    if ( isdefined( self.script_dontshootwhilemoving ) )
    {
        self.og_script_dontshootwhilemoving = self.script_dontshootwhilemoving;
        self.script_dontshootwhilemoving = undefined;
    }

    if ( isdefined( self.script_deathflag ) )
    {
        self.og_script_deathflag = self.script_deathflag;
        self.script_deathflag = undefined;
    }

    if ( isdefined( self.script_attackeraccuracy ) )
    {
        self.og_script_attackeraccuracy = self.script_attackeraccuracy;
        self.script_attackeraccuracy = undefined;
    }

    if ( isdefined( self.script_startrunning ) )
    {
        self.og_script_startrunning = self.script_startrunning;
        self.script_startrunning = undefined;
    }

    if ( isdefined( self.script_deathtime ) )
    {
        self.og_script_deathtime = self.script_deathtime;
        self.script_deathtime = undefined;
    }

    if ( isdefined( self.script_nosurprise ) )
    {
        self.og_script_nosurprise = self.script_nosurprise;
        self.script_nosurprise = undefined;
    }

    if ( isdefined( self.script_nobloodpool ) )
    {
        self.og_script_nobloodpool = self.script_nobloodpool;
        self.script_nobloodpool = undefined;
    }

    if ( isdefined( self.script_animname ) )
    {
        self.og_script_animname = self.script_animname;
        self.script_animname = undefined;
    }

    if ( isdefined( self.script_laser ) )
    {
        self.og_script_laser = self.script_laser;
        self.script_laser = undefined;
    }

    if ( isdefined( self.script_danger_react ) )
    {
        self.og_script_danger_react = self.script_danger_react;
        self.script_danger_react = undefined;
    }

    if ( isdefined( self.script_faceenemydist ) )
    {
        self.og_script_faceenemydist = self.script_faceenemydist;
        self.script_faceenemydist = undefined;
    }

    if ( isdefined( self.script_forcecolor ) )
    {
        self.og_script_forcecolor = self.script_forcecolor;
        self.script_forcecolor = undefined;
    }

    if ( isdefined( self.dontdropweapon ) )
    {
        self.og_dontdropweapon = self.dontdropweapon;
        self.dontdropweapon = undefined;
    }

    if ( isdefined( self.script_fixednode ) )
    {
        self.og_script_fixednode = self.script_fixednode;
        self.script_fixednode = undefined;
    }

    if ( isdefined( self.script_no_reorient ) )
    {
        self.og_script_no_reorient = self.script_no_reorient;
        self.script_no_reorient = undefined;
    }

    if ( isdefined( self.script_goalvolume ) )
    {
        self.og_script_no_reorient = self.script_no_reorient;
        self.script_no_reorient = undefined;
    }

    if ( isdefined( self.script_stealthgroup ) )
    {
        self.og_script_stealthgroup = self.script_stealthgroup;
        self.script_stealthgroup = undefined;
    }

    if ( isdefined( self.script_threatbiasgroup ) )
    {
        self.og_script_threatbiasgroup = self.script_threatbiasgroup;
        self.script_threatbiasgroup = undefined;
    }

    if ( isdefined( self.script_bcdialog ) )
    {
        self.og_script_bcdialog = self.script_bcdialog;
        self.script_bcdialog = undefined;
    }

    if ( isdefined( self.script_accuracy ) )
    {
        self.og_script_accuracy = self.script_accuracy;
        self.script_accuracy = undefined;
    }

    if ( isdefined( self.script_ignoreme ) )
    {
        self.og_script_ignoreme = self.script_ignoreme;
        self.script_ignoreme = undefined;
    }

    if ( isdefined( self.script_ignore_suppression ) )
    {
        self.og_script_ignore_suppression = self.script_ignore_suppression;
        self.script_ignore_suppression = undefined;
    }

    if ( isdefined( self.script_ignoreall ) )
    {
        self.og_script_ignoreall = self.script_ignoreall;
        self.script_ignoreall = undefined;
    }

    if ( isdefined( self.script_no_seeker ) )
    {
        self.og_script_no_seeker = self.script_no_seeker;
        self.script_no_seeker = undefined;
    }

    if ( isdefined( self.script_offhands ) )
    {
        self.og_script_offhands = self.script_offhands;
        self.script_offhands = undefined;
    }

    if ( isdefined( self.script_favoriteenemy ) )
    {
        self.og_script_favoriteenemy = self.script_favoriteenemy;
        self.script_favoriteenemy = undefined;
    }

    if ( isdefined( self.script_sightrange ) )
    {
        self.og_script_sightrange = self.script_sightrange;
        self.script_sightrange = undefined;
    }

    if ( isdefined( self.script_fightdist ) )
    {
        self.og_script_fightdist = self.script_fightdist;
        self.script_fightdist = undefined;
    }

    if ( isdefined( self.script_maxdist ) )
    {
        self.og_script_maxdist = self.script_maxdist;
        self.script_maxdist = undefined;
    }

    if ( isdefined( self.script_longdeath ) )
    {
        self.og_script_longdeath = self.script_longdeath;
        self.script_longdeath = undefined;
    }

    if ( isdefined( self.script_diequietly ) )
    {
        self.og_script_diequietly = self.script_diequietly;
        self.script_diequietly = undefined;
    }

    if ( isdefined( self.script_noragdoll ) )
    {
        self.og_script_noragdoll = self.script_noragdoll;
        self.script_noragdoll = undefined;
    }

    if ( isdefined( self.script_pacifist ) )
    {
        self.og_script_pacifist = self.script_pacifist;
        self.script_pacifist = undefined;
    }

    if ( isdefined( self.script_bulletshield ) )
    {
        self.og_script_bulletshield = self.script_bulletshield;
        self.script_bulletshield = undefined;
    }

    if ( isdefined( self.script_startinghealth ) )
    {
        self.og_script_startinghealth = self.script_startinghealth;
        self.script_startinghealth = undefined;
    }

    if ( isdefined( self.script_nodrop ) )
    {
        self.og_script_nodrop = self.script_nodrop;
        self.script_nodrop = undefined;
    }

    if ( isdefined( self.script_demeanor ) )
    {
        self.og_script_demeanor = self.script_demeanor;
        self.script_demeanor = undefined;
    }
}

restorespawner()
{
    if ( isdefined( self.og_target ) )
    {
        self.target = self.og_target;
        self.og_target = undefined;
    }

    if ( isdefined( self.og_script_dontshootwhilemoving ) )
    {
        self.script_dontshootwhilemoving = self.og_script_dontshootwhilemoving;
        self.og_script_dontshootwhilemoving = undefined;
    }

    if ( isdefined( self.og_script_deathflag ) )
    {
        self.script_deathflag = self.og_script_deathflag;
        self.og_script_deathflag = undefined;
    }

    if ( isdefined( self.og_script_attackeraccuracy ) )
    {
        self.script_attackeraccuracy = self.og_script_attackeraccuracy;
        self.og_script_attackeraccuracy = undefined;
    }

    if ( isdefined( self.og_script_startrunning ) )
    {
        self.script_startrunning = self.og_script_startrunning;
        self.og_script_startrunning = undefined;
    }

    if ( isdefined( self.og_script_deathtime ) )
    {
        self.script_deathtime = self.og_script_deathtime;
        self.og_script_deathtime = undefined;
    }

    if ( isdefined( self.og_script_nosurprise ) )
    {
        self.script_nosurprise = self.og_script_nosurprise;
        self.og_script_nosurprise = undefined;
    }

    if ( isdefined( self.og_script_nobloodpool ) )
    {
        self.script_nobloodpool = self.og_script_nobloodpool;
        self.og_script_nobloodpool = undefined;
    }

    if ( isdefined( self.og_script_animname ) )
    {
        self.script_animname = self.og_script_animname;
        self.og_script_animname = undefined;
    }

    if ( isdefined( self.og_script_laser ) )
    {
        self.script_laser = self.og_script_laser;
        self.og_script_laser = undefined;
    }

    if ( isdefined( self.og_script_danger_react ) )
    {
        self.script_danger_react = self.og_script_danger_react;
        self.og_script_danger_react = undefined;
    }

    if ( isdefined( self.og_script_faceenemydist ) )
    {
        self.script_faceenemydist = self.og_script_faceenemydist;
        self.og_script_faceenemydist = undefined;
    }

    if ( isdefined( self.og_script_forcecolor ) )
    {
        self.script_forcecolor = self.og_script_forcecolor;
        self.og_script_forcecolor = undefined;
    }

    if ( isdefined( self.og_dontdropweapon ) )
    {
        self.dontdropweapon = self.og_dontdropweapon;
        self.og_dontdropweapon = undefined;
    }

    if ( isdefined( self.og_script_fixednode ) )
    {
        self.script_fixednode = self.og_script_fixednode;
        self.og_script_fixednode = undefined;
    }

    if ( isdefined( self.og_script_no_reorient ) )
    {
        self.script_no_reorient = self.og_script_no_reorient;
        self.og_script_no_reorient = undefined;
    }

    if ( isdefined( self.og_script_goalvolume ) )
    {
        self.script_goalvolume = self.og_script_goalvolume;
        self.og_script_goalvolume = undefined;
    }

    if ( isdefined( self.og_script_stealthgroup ) )
    {
        self.script_stealthgroup = self.og_script_stealthgroup;
        self.og_script_stealthgroup = undefined;
    }

    if ( isdefined( self.og_script_threatbiasgroup ) )
    {
        self.script_threatbiasgroup = self.og_script_threatbiasgroup;
        self.og_script_threatbiasgroup = undefined;
    }

    if ( isdefined( self.og_script_bcdialog ) )
    {
        self.script_bcdialog = self.og_script_bcdialog;
        self.og_script_bcdialog = undefined;
    }

    if ( isdefined( self.og_script_accuracy ) )
    {
        self.script_accuracy = self.og_script_accuracy;
        self.og_script_accuracy = undefined;
    }

    if ( isdefined( self.og_script_ignoreme ) )
    {
        self.script_ignoreme = self.og_script_ignoreme;
        self.og_script_ignoreme = undefined;
    }

    if ( isdefined( self.og_script_ignore_suppression ) )
    {
        self.script_ignore_suppression = self.og_script_ignore_suppression;
        self.og_script_ignore_suppression = undefined;
    }

    if ( isdefined( self.og_script_ignoreall ) )
    {
        self.script_ignoreall = self.og_script_ignoreall;
        self.og_script_ignoreall = undefined;
    }

    if ( isdefined( self.og_script_no_seeker ) )
    {
        self.script_no_seeker = self.og_script_no_seeker;
        self.og_script_no_seeker = undefined;
    }

    if ( isdefined( self.og_script_offhands ) )
    {
        self.script_offhands = self.og_script_offhands;
        self.og_script_offhands = undefined;
    }

    if ( isdefined( self.og_script_favoriteenemy ) )
    {
        self.script_favoriteenemy = self.og_script_favoriteenemy;
        self.og_script_favoriteenemy = undefined;
    }

    if ( isdefined( self.og_script_sightrange ) )
    {
        self.script_sightrange = self.og_script_sightrange;
        self.og_script_sightrange = undefined;
    }

    if ( isdefined( self.og_script_fightdist ) )
    {
        self.script_fightdist = self.og_script_fightdist;
        self.og_script_fightdist = undefined;
    }

    if ( isdefined( self.og_script_maxdist ) )
    {
        self.script_maxdist = self.og_script_maxdist;
        self.og_script_maxdist = undefined;
    }

    if ( isdefined( self.og_script_longdeath ) )
    {
        self.script_longdeath = self.og_script_longdeath;
        self.og_script_longdeath = undefined;
    }

    if ( isdefined( self.og_script_diequietly ) )
    {
        self.script_diequietly = self.og_script_diequietly;
        self.og_script_diequietly = undefined;
    }

    if ( isdefined( self.og_script_noragdoll ) )
    {
        self.script_noragdoll = self.og_script_noragdoll;
        self.og_script_noragdoll = undefined;
    }

    if ( isdefined( self.og_script_pacifist ) )
    {
        self.script_pacifist = self.og_script_pacifist;
        self.og_script_pacifist = undefined;
    }

    if ( isdefined( self.og_script_bulletshield ) )
    {
        self.script_bulletshield = self.og_script_bulletshield;
        self.og_script_bulletshield = undefined;
    }

    if ( isdefined( self.og_script_startinghealth ) )
    {
        self.script_startinghealth = self.og_script_startinghealth;
        self.og_script_startinghealth = undefined;
    }

    if ( isdefined( self.og_script_nodrop ) )
    {
        self.script_nodrop = self.og_script_nodrop;
        self.og_script_nodrop = undefined;
    }

    if ( isdefined( self.og_script_demeanor ) )
    {
        self.script_demeanor = self.og_script_demeanor;
        self.og_script_demeanor = undefined;
    }
}

get_colortable()
{
    _id_4202356743546128["white"] = ( 0.996094, 0.996094, 0.996094 );
    _id_4202356743546128["red"] = ( 0.996094, 0, 0 );
    _id_4202356743546128["green"] = ( 0, 0.996094, 0 );
    _id_4202356743546128["blue"] = ( 0, 0, 0.996094 );
    _id_4202356743546128["magenta"] = ( 0.996094, 0, 0.996094 );
    _id_4202356743546128["cyan"] = ( 0, 0.996094, 0.996094 );
    _id_4202356743546128["yellow"] = ( 0.996094, 0.996094, 0 );
    _id_4202356743546128["black"] = ( 0, 0, 0 );
    _id_4202356743546128["aquamarine"] = ( 0.4375, 0.855469, 0.574219 );
    _id_4202356743546128["brass"] = ( 0.707031, 0.648438, 0.257812 );
    _id_4202356743546128["cadet blue"] = ( 0.371094, 0.621094, 0.621094 );
    _id_4202356743546128["copper"] = ( 0.71875, 0.449219, 0.199219 );
    _id_4202356743546128["dark green"] = ( 0.183594, 0.308594, 0.183594 );
    _id_4202356743546128["dark orchid"] = ( 0.597656, 0.195312, 0.800781 );
    _id_4202356743546128["dark purple"] = ( 0.527344, 0.121094, 0.46875 );
    _id_4202356743546128["dark wood"] = ( 0.519531, 0.367188, 0.257812 );
    _id_4202356743546128["dim grey"] = ( 0.328125, 0.328125, 0.328125 );
    _id_4202356743546128["firebrick"] = ( 0.554688, 0.136719, 0.136719 );
    _id_4202356743546128["flesh"] = ( 0.957031, 0.796875, 0.6875 );
    _id_4202356743546128["forest green"] = ( 0.136719, 0.554688, 0.136719 );
    _id_4202356743546128["gold"] = ( 0.800781, 0.496094, 0.195312 );
    _id_4202356743546128["goldenrod"] = ( 0.855469, 0.855469, 0.4375 );
    _id_4202356743546128["grey"] = ( 0.75, 0.75, 0.75 );
    _id_4202356743546128["green copper"] = ( 0.320312, 0.496094, 0.460938 );
    _id_4202356743546128["khaki"] = ( 0.621094, 0.621094, 0.371094 );
    _id_4202356743546128["maroon"] = ( 0.554688, 0.136719, 0.417969 );
    _id_4202356743546128["midnight blue"] = ( 0.183594, 0.183594, 0.308594 );
    _id_4202356743546128["new tan"] = ( 0.917969, 0.777344, 0.617188 );
    _id_4202356743546128["old gold"] = ( 0.808594, 0.707031, 0.230469 );
    _id_4202356743546128["orange"] = ( 0.996094, 0.496094, 0 );
    _id_4202356743546128["orchid"] = ( 0.855469, 0.4375, 0.855469 );
    _id_4202356743546128["quartz"] = ( 0.847656, 0.847656, 0.949219 );
    _id_4202356743546128["rich blue"] = ( 0.347656, 0.347656, 0.667969 );
    _id_4202356743546128["scarlet"] = ( 0.546875, 0.0898438, 0.0898438 );
    _id_4202356743546128["sea green"] = ( 0.136719, 0.554688, 0.40625 );
    _id_4202356743546128["chocolate"] = ( 0.417969, 0.257812, 0.148438 );
    _id_4202356743546128["sienna"] = ( 0.554688, 0.417969, 0.136719 );
    _id_4202356743546128["slate blue"] = ( 0, 0.496094, 0.996094 );
    _id_4202356743546128["spring green"] = ( 0, 0.996094, 0.496094 );
    _id_4202356743546128["steel blue"] = ( 0.136719, 0.417969, 0.554688 );
    _id_4202356743546128["summer sky"] = ( 0.21875, 0.6875, 0.867188 );
    _id_4202356743546128["tan"] = ( 0.855469, 0.574219, 0.4375 );
    _id_4202356743546128["turquoise"] = ( 0.675781, 0.914062, 0.914062 );
    _id_4202356743546128["very dark brown"] = ( 0.359375, 0.25, 0.199219 );
    _id_4202356743546128["violet"] = ( 0.308594, 0.183594, 0.308594 );
    _id_4202356743546128["violet red"] = ( 0.796875, 0.195312, 0.597656 );
    _id_4202356743546128["yellow "] = ( 0.597656, 0.796875, 0.195312 );
    return _id_4202356743546128;
}
