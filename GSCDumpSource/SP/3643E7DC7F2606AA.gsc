// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_helicopters()
{
    level.helicopter_firelinkfunk = ::heli_firelink;
    level.chopperturretonfunc = ::chopper_turret_on;
    level.chopperturretofffunc = ::chopper_turret_off;
}

chopper_turret_off()
{
    self notify( "mg_off" );
}

chopper_turret_on()
{
    self endon( "death" );
    self endon( "mg_off" );
    _id_7D1B1B765F5DB6E4 = cos( 55 );

    while ( self.health > 0 )
    {
        etarget = getenemytarget( 16000, _id_7D1B1B765F5DB6E4, 1, 1 );

        if ( isdefined( etarget ) )
            thread shootenemytarget_bullets( etarget );

        wait 2;
    }
}

heli_firelink( nextpoint )
{
    target = getent( nextpoint.script_linkto, "script_linkname" );
    _id_243154AAC115BC0A = !isdefined( target );

    if ( !isdefined( target ) )
        target = scripts\engine\utility::getstruct( nextpoint.script_linkto, "script_linkname" );

    _id_57DD3C07DDC98C1C = nextpoint.script_firelink;

    if ( _id_243154AAC115BC0A )
        target = target scripts\engine\utility::spawn_tag_origin();

    switch ( _id_57DD3C07DDC98C1C )
    {
        case "zippy_burst":
            wait 1;
            fire_missile( "hind_zippy", 1, target );
            wait 0.1;
            fire_missile( "hind_zippy", 1, target );
            wait 0.2;
            fire_missile( "hind_zippy", 1, target );
            wait 0.3;
            fire_missile( "hind_zippy", 1, target );
            wait 0.3;
            fire_missile( "hind_zippy", 1, target );
            break;
        case "apache_zippy":
            waits = [ 0.1, 0.2, 0.3 ];
            wait 1;
            target.origin = target.origin + ( 0, 0, -150 );
            target moveto( target.origin + ( 0, 0, 150 ), 0.6, 0, 0 );

            foreach ( waittime in waits )
            {
                if ( !isdefined( self ) )
                    continue;

                fire_missile( "apache_zippy", 1, target );
                wait( waittime );
            }

            break;
        case "hind_rpg":
            fire_missile( "hind_rpg", 5, target, 0.3 );
            break;
        default:
            if ( self.classname == "script_vehicle_littlebird_armed" || self.classname == "script_vehicle_littlebird_md500" )
                scripts\vehicle\attack_heli::heli_fire_missiles( target, 2, 0.25 );
            else
                fire_missile( "hind_zippy", 5, target, 0.3 );

            break;
    }

    if ( _id_243154AAC115BC0A )
        target delete();
}

globalthink()
{
    if ( !isdefined( self.vehicletype ) )
        return;

    ishelicopter = 0;

    if ( self.vehicletype == "hind" || self.vehicletype == "hind_blackice" || self.vehicletype == "ny_harbor_hind" )
        ishelicopter = 1;

    if ( self.vehicletype == "cobra" || self.vehicletype == "cobra_player" )
    {
        thread attachmissiles( "chopperpilot_hellfire", "cobra_Sidewinder" );

        if ( isdefined( self.fullmodel ) )
            self.fullmodel thread attachmissiles( "chopperpilot_hellfire", "cobra_Sidewinder" );

        ishelicopter = 1;
    }

    if ( !ishelicopter )
        return;

    level thread flares_think( self );
    level thread scripts\sp\helicopter_ai::evasive_think( self );

    if ( getdvar( "dvar_9F748E2B88D4F7E3" ) == "1" )
    {
        if ( isdefined( self.script_wingman ) )
        {
            level.wingman = self;
            level thread scripts\sp\helicopter_ai::wingman_think( self );
        }
    }
}

flares_think( vehicle )
{
    vehicle endon( "death" );
    _func_DEE20CAEB389BC0E( "flare_button", "+frag" );
    _func_DEE20CAEB389BC0E( "flare_button", "+usereload" );
    _func_DEE20CAEB389BC0E( "flare_button", "+activate" );

    while ( vehicle.health > 0 )
    {
        if ( isdefined( vehicle.playercontrolled ) )
            vehicle.pilot waittill( "flare_button" );
        else
        {
            vehicle waittill( "incomming_missile", _id_BCB3B419004A1724 );

            if ( !isdefined( _id_BCB3B419004A1724 ) )
                continue;

            if ( randomint( 3 ) == 0 )
                continue;

            wait( randomfloatrange( 0.5, 1.0 ) );
        }

        thread flares_fire( vehicle );
        wait 3.0;
    }
}

flares_fire_burst( vehicle, _id_51A72C1466B7B40E, _id_F7324548B947A802, _id_08E99A11A6EAFD1A )
{
    _id_7A203C9CB0BC1382 = 1;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_51A72C1466B7B40E; _id_AC0E594AC96AA3A8++ )
    {
        playfx( level.flare_fx[vehicle.vehicletype], vehicle gettagorigin( "tag_flare" ) );

        if ( isdefined( vehicle.playercontrolled ) )
        {
            level.stats["flares_used"]++;
            vehicle notify( "dropping_flares" );

            if ( _id_7A203C9CB0BC1382 )
                vehicle playsound( "cobra_flare_fire" );

            _id_7A203C9CB0BC1382 = !_id_7A203C9CB0BC1382;
        }

        if ( _id_AC0E594AC96AA3A8 <= _id_F7324548B947A802 - 1 )
            thread flares_redirect_missiles( vehicle, _id_08E99A11A6EAFD1A );

        wait 0.1;
    }
}

flares_fire( vehicle )
{
    vehicle endon( "death" );
    _id_08E99A11A6EAFD1A = 5.0;

    if ( isdefined( vehicle.flare_duration ) )
        _id_08E99A11A6EAFD1A = vehicle.flare_duration;

    flares_fire_burst( vehicle, 8, 1, _id_08E99A11A6EAFD1A );
}

create_missileattractor_on_player_chopper()
{
    if ( isdefined( self.missileattractor ) )
        missile_deleteattractor( self.missileattractor );

    self.missileattractor = missile_createattractorent( self.centeraimpoint, 10000, 10000 );
}

flares_redirect_missiles( vehicle, _id_08E99A11A6EAFD1A )
{
    vehicle notify( "flares_out" );
    vehicle endon( "death" );
    vehicle endon( "flares_out" );

    if ( !isdefined( _id_08E99A11A6EAFD1A ) )
        _id_08E99A11A6EAFD1A = 5.0;

    _id_06A3A1033FFC2699 = flares_get_vehicle_velocity( vehicle );
    flare = spawn( "script_origin", vehicle gettagorigin( "tag_flare" ) );
    flare movegravity( _id_06A3A1033FFC2699, _id_08E99A11A6EAFD1A );
    _id_E7F1C1501040BDE3 = undefined;

    if ( isdefined( vehicle.playercontrolled ) )
    {
        if ( isdefined( vehicle.missileattractor ) )
            missile_deleteattractor( vehicle.missileattractor );

        _id_E7F1C1501040BDE3 = missile_createattractorent( flare, 10000, 10000 );
    }

    if ( isdefined( vehicle.incomming_missiles ) )
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < vehicle.incomming_missiles.size; _id_AC0E594AC96AA3A8++ )
            vehicle.incomming_missiles[_id_AC0E594AC96AA3A8] missile_settargetent( flare );
    }

    wait( _id_08E99A11A6EAFD1A );

    if ( isdefined( vehicle.playercontrolled ) )
    {
        if ( isdefined( _id_E7F1C1501040BDE3 ) )
            missile_deleteattractor( _id_E7F1C1501040BDE3 );

        vehicle thread create_missileattractor_on_player_chopper();
    }

    if ( !isdefined( vehicle.script_targetoffset_z ) )
        vehicle.script_targetoffset_z = 0;

    offset = ( 0, 0, vehicle.script_targetoffset_z );

    if ( !isdefined( vehicle.incomming_missiles ) )
        return;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < vehicle.incomming_missiles.size; _id_AC0E594AC96AA3A8++ )
        vehicle.incomming_missiles[_id_AC0E594AC96AA3A8] missile_settargetent( vehicle, offset );
}

flares_get_vehicle_velocity( vehicle )
{
    _id_6C12713F33727294 = vehicle.origin;
    wait 0.05;
    _id_06A3A1033FFC2699 = vehicle.origin - _id_6C12713F33727294;
    return _id_06A3A1033FFC2699 * 20;
}

missile_deathwait( _id_BCB3B419004A1724, _id_458EA64F6F9A5014 )
{
    _id_458EA64F6F9A5014 endon( "death" );
    _id_BCB3B419004A1724 waittill( "death" );

    if ( !isdefined( _id_458EA64F6F9A5014.incomming_missiles ) )
        return;

    _id_458EA64F6F9A5014.incomming_missiles = scripts\engine\utility::array_remove( _id_458EA64F6F9A5014.incomming_missiles, _id_BCB3B419004A1724 );
}

getenemytarget( _id_420D6A8245324B63, _id_803FDE08D46AEF72, _id_070183020B339E69, _id_D5CF0E54165D319A, _id_390B6D8B1C31FB95, _id_1680CD837EFB560A, _id_A3658E5EE7A7DDA1 )
{
    if ( !isdefined( _id_070183020B339E69 ) )
        _id_070183020B339E69 = 0;

    if ( !isdefined( _id_D5CF0E54165D319A ) )
        _id_D5CF0E54165D319A = 0;

    if ( !isdefined( _id_390B6D8B1C31FB95 ) )
        _id_390B6D8B1C31FB95 = 1;

    if ( !isdefined( _id_1680CD837EFB560A ) )
        _id_1680CD837EFB560A = 0;

    _id_AD1E1D53E47E3B02 = [];
    _id_FC25F80BD447ED26 = undefined;
    enemyteam = scripts\engine\utility::get_enemy_team( self.script_team );
    _id_58929EA8D7EB7F44 = [];

    if ( _id_390B6D8B1C31FB95 )
    {
        foreach ( vehicle in vehicle_getarray() )
        {
            if ( !isdefined( vehicle.script_team ) )
                continue;

            if ( vehicle.script_team == enemyteam )
                _id_58929EA8D7EB7F44[_id_58929EA8D7EB7F44.size] = vehicle;
        }
    }

    if ( _id_070183020B339E69 )
    {
        _id_C5F4970069850479 = getaiarray( enemyteam );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_C5F4970069850479.size; _id_AC0E594AC96AA3A8++ )
        {
            if ( isdefined( _id_C5F4970069850479[_id_AC0E594AC96AA3A8].ignored_by_attack_heli ) )
                continue;

            _id_58929EA8D7EB7F44[_id_58929EA8D7EB7F44.size] = _id_C5F4970069850479[_id_AC0E594AC96AA3A8];
        }

        if ( enemyteam == "allies" )
        {
            for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.players.size; _id_AC0E594AC96AA3A8++ )
                _id_58929EA8D7EB7F44[_id_58929EA8D7EB7F44.size] = level.players[_id_AC0E594AC96AA3A8];
        }
    }

    if ( isdefined( _id_A3658E5EE7A7DDA1 ) )
        _id_58929EA8D7EB7F44 = scripts\engine\sp\utility::array_exclude( _id_58929EA8D7EB7F44, _id_A3658E5EE7A7DDA1 );

    if ( _id_1680CD837EFB560A )
        _id_58929EA8D7EB7F44 = scripts\engine\utility::array_randomize( _id_58929EA8D7EB7F44 );

    forwardvec = anglestoforward( self.angles );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_58929EA8D7EB7F44.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( issentient( _id_58929EA8D7EB7F44[_id_AC0E594AC96AA3A8] ) && issentient( self ) && self getthreatbiasgroup() != "" )
        {
            _id_8CEF9940EC2F62A0 = _func_39A5C3C92EEF58D2( _id_58929EA8D7EB7F44[_id_AC0E594AC96AA3A8] getthreatbiasgroup(), self getthreatbiasgroup() );

            if ( _id_8CEF9940EC2F62A0 <= -1000000 )
                continue;
        }

        if ( isdefined( _id_420D6A8245324B63 ) && _id_420D6A8245324B63 > 0 )
        {
            if ( distance( self.origin, _id_58929EA8D7EB7F44[_id_AC0E594AC96AA3A8].origin ) > _id_420D6A8245324B63 )
                continue;
        }

        if ( isdefined( _id_803FDE08D46AEF72 ) )
        {
            _id_62F4DA066051326C = vectornormalize( _id_58929EA8D7EB7F44[_id_AC0E594AC96AA3A8].origin - self.origin );
            _id_FC1D9E9E820AD804 = vectordot( forwardvec, _id_62F4DA066051326C );

            if ( _id_FC1D9E9E820AD804 <= _id_803FDE08D46AEF72 )
                continue;
        }

        if ( _id_D5CF0E54165D319A )
        {
            sighttracepassed = 0;

            if ( isai( _id_58929EA8D7EB7F44[_id_AC0E594AC96AA3A8] ) )
                _id_B882F8C78CA5813B = 48;
            else
                _id_B882F8C78CA5813B = 150;

            sighttracepassed = sighttracepassed( self.origin, _id_58929EA8D7EB7F44[_id_AC0E594AC96AA3A8].origin + ( 0, 0, _id_B882F8C78CA5813B ), 0, self );

            if ( !sighttracepassed )
                continue;
        }

        _id_AD1E1D53E47E3B02[_id_AD1E1D53E47E3B02.size] = _id_58929EA8D7EB7F44[_id_AC0E594AC96AA3A8];
    }

    if ( _id_AD1E1D53E47E3B02.size == 0 )
    {
        self notify( "gunner_new_target", _id_FC25F80BD447ED26 );
        return _id_FC25F80BD447ED26;
    }

    if ( _id_AD1E1D53E47E3B02.size == 1 )
    {
        self notify( "gunner_new_target", _id_AD1E1D53E47E3B02[0] );
        return _id_AD1E1D53E47E3B02[0];
    }

    _id_0A8F8E9A95733BD9 = scripts\engine\utility::getclosest( self.origin, _id_AD1E1D53E47E3B02 );
    self notify( "gunner_new_target", _id_0A8F8E9A95733BD9 );
    return _id_0A8F8E9A95733BD9;
}

shootenemytarget_bullets( etarget )
{
    self endon( "death" );
    self endon( "mg_off" );
    etarget endon( "death" );
    self endon( "gunner_new_target" );

    if ( isdefined( self.playercontrolled ) )
        self endon( "gunner_stop_firing" );

    _id_2DD2F3C5AF25B2AA = ( 0, 0, 0 );

    if ( isdefined( etarget.script_targetoffset_z ) )
        _id_2DD2F3C5AF25B2AA = _id_2DD2F3C5AF25B2AA + ( 0, 0, etarget.script_targetoffset_z );
    else if ( issentient( etarget ) )
        _id_2DD2F3C5AF25B2AA = ( 0, 0, 32 );

    self setturrettargetent( etarget, _id_2DD2F3C5AF25B2AA );

    while ( self.health > 0 )
    {
        _id_598A708C805940AF = randomintrange( 1, 25 );

        if ( getdvar( "dvar_C9AB8C9FC46C92CF" ) == "1" )
            iprintln( "randomShots = " + _id_598A708C805940AF );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_598A708C805940AF; _id_AC0E594AC96AA3A8++ )
        {
            if ( isdefined( self.playercontrolled ) )
            {
                if ( isdefined( level.cobraweapon ) && level.cobraweapon.size > 0 )
                    self setvehweapon( level.gunnerweapon );
            }

            thread shootenemytarget_bullets_debugline( self, "tag_turret", etarget, _id_2DD2F3C5AF25B2AA, ( 1, 1, 0 ), 0.05 );
            self fireweapon( "tag_flash" );

            if ( isdefined( self.playercontrolled ) )
                self setvehweapon( level.cobraweapon[self.pilot.currentweapon].v["weapon"] );

            wait 0.05;
        }

        wait( randomfloatrange( 0.25, 2.5 ) );
    }
}

shootenemytarget_bullets_debugline( _id_55A77F95F61C8B65, _id_1F0507F3189C1433, etarget, _id_2DD2F3C5AF25B2AA, color, timer )
{
    if ( getdvar( "dvar_C9AB8C9FC46C92CF" ) != "1" )
        return;

    if ( !isdefined( color ) )
        color = ( 0, 0, 0 );

    etarget endon( "death" );
    self endon( "gunner_new_target" );

    if ( !isdefined( _id_2DD2F3C5AF25B2AA ) )
        _id_2DD2F3C5AF25B2AA = ( 0, 0, 0 );

    if ( isdefined( timer ) )
    {
        timer = gettime() + timer * 1000;

        while ( gettime() < timer )
            wait 0.05;
    }
    else
    {
        for (;;)
            wait 0.05;
    }
}

attachmissiles( _id_A7756ABFED842C14, _id_A7756DBFED8432AD, _id_A7756CBFED84307A, _id_A77567BFED84257B )
{
    self.hasattachedweapons = 1;
    weapon = [];
    weapon[0] = _id_A7756ABFED842C14;

    if ( isdefined( _id_A7756DBFED8432AD ) )
        weapon[1] = _id_A7756DBFED8432AD;

    if ( isdefined( _id_A7756CBFED84307A ) )
        weapon[2] = _id_A7756CBFED84307A;

    if ( isdefined( _id_A77567BFED84257B ) )
        weapon[3] = _id_A77567BFED84257B;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < weapon.size; _id_AC0E594AC96AA3A8++ )
    {
        for ( _id_AC0E5B4AC96AA80E = 0; _id_AC0E5B4AC96AA80E < level.cobra_weapon_tags[weapon[_id_AC0E594AC96AA3A8]].size; _id_AC0E5B4AC96AA80E++ )
            self attach( level.cobra_missile_models[weapon[_id_AC0E594AC96AA3A8]], level.cobra_weapon_tags[weapon[_id_AC0E594AC96AA3A8]][_id_AC0E5B4AC96AA80E] );
    }
}

fire_missile( _id_52EF1C21DA5A8652, _id_E20C72DA9DE356C1, etarget, _id_3447DD0CDCD69308, _id_F3FF83980FAE80E1 )
{
    if ( !isdefined( _id_E20C72DA9DE356C1 ) )
        _id_E20C72DA9DE356C1 = 1;

    weaponname = undefined;
    _id_5B4FB986B8388491 = undefined;
    defaultweapon = "cobra_20mm";
    tags = [];

    switch ( _id_52EF1C21DA5A8652 )
    {
        case "f15_missile":
            weaponname = "cobra_Sidewinder";
            tags[0] = "le_side_wing_jnt";
            tags[1] = "ri_side_wing_jnt";
            break;
        case "mi28_seeker":
            weaponname = "cobra_seeker";
            tags[0] = "tag_store_L_1_a";
            tags[1] = "tag_store_R_1_a";
            tags[2] = "tag_store_L_2_a";
            tags[3] = "tag_store_R_2_a";
            break;
        case "ffar":
            weaponname = "cobra_FFAR";
            tags[0] = "tag_store_r_2";
            break;
        case "seeker":
            weaponname = "cobra_seeker";
            tags[0] = "tag_store_r_2";
            break;
        case "ffar_bog_a_lite":
            weaponname = "cobra_FFAR_bog_a_lite";
            tags[0] = "tag_store_r_2";
            break;
        case "ffar_airlift":
            weaponname = "cobra_FFAR_airlift";
            tags[0] = "tag_store_L_wing";
            tags[1] = "tag_store_R_wing";
            break;
        case "ffar_airlift_nofx":
            weaponname = "cobra_FFAR_airlift_nofx";
            tags[0] = "tag_store_L_wing";
            tags[1] = "tag_store_R_wing";
            break;
        case "cobra_zippy":
            weaponname = "zippy_rockets";
            tags[0] = "tag_store_L_wing";
            tags[1] = "tag_store_R_wing";
            break;
        case "apache_zippy":
            weaponname = "zippy_rockets_apache";
            tags[0] = "tag_flash_2";
            tags[1] = "tag_flash_3";
            break;
        case "apache_zippy_nd":
            weaponname = "zippy_rockets_apache_nodamage";
            tags[0] = "tag_flash_2";
            tags[1] = "tag_flash_3";
            break;
        case "mi28_zippy":
            weaponname = "zippy_rockets_apache";
            tags[0] = "tag_store_L_wing";
            tags[1] = "tag_store_R_wing";
            break;
        case "mi28_zippy_cheap":
            weaponname = "zippy_rockets_apache_cheap";
            tags[0] = "tag_store_L_wing";
            tags[1] = "tag_store_R_wing";
            break;
        case "cobra_turret":
            weaponname = "hind_turret_penetration";
            tags[0] = "tag_store_L_wing";
            tags[1] = "tag_store_R_wing";
            break;
        case "ffar_hind":
            defaultweapon = "hind_turret";
            weaponname = "hind_FFAR";
            tags[0] = "tag_missile_left";
            tags[1] = "tag_missile_right";
            break;
        case "hind_zippy":
            defaultweapon = "hind_turret";
            weaponname = "zippy_rockets";
            tags[0] = "tag_missile_left";
            tags[1] = "tag_missile_right";
            break;
        case "hind_rpg":
            defaultweapon = "hind_turret";
            weaponname = "rpg";
            tags[0] = "tag_missile_left";
            tags[1] = "tag_missile_right";
            break;
        case "hind_rpg_cheap":
            defaultweapon = "hind_turret";
            weaponname = "rpg_cheap";
            tags[0] = "tag_missile_left";
            tags[1] = "tag_missile_right";
            break;
        case "ffar_hind_nodamage":
            defaultweapon = "hind_turret";
            weaponname = "hind_FFAR_nodamage";
            tags[0] = "tag_missile_left";
            tags[1] = "tag_missile_right";
            break;
        case "ffar_mi28_village_assault":
            defaultweapon = "hind_turret";
            weaponname = "mi28_ffar_village_assault";
            tags[0] = "tag_store_L_2_a";
            tags[1] = "tag_store_R_2_a";
            tags[2] = "tag_store_L_2_b";
            tags[3] = "tag_store_R_2_b";
            tags[4] = "tag_store_L_2_c";
            tags[5] = "tag_store_R_2_c";
            tags[6] = "tag_store_L_2_d";
            tags[7] = "tag_store_R_2_d";
            break;
        case "ffar_co_rescue":
            weaponname = "cobra_FFAR_bog_a_lite";
            tags[0] = "tag_store_R_2_a";
            tags[1] = "tag_store_L_2_a";
            break;
        default:
            break;
    }

    _id_5B4FB986B8388491 = weaponfiretime( weaponname );

    if ( isdefined( self.nextmissiletag ) )
        nextmissiletag = self.nextmissiletag;
    else
        nextmissiletag = -1;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_E20C72DA9DE356C1; _id_AC0E594AC96AA3A8++ )
    {
        nextmissiletag++;
        nextmissiletag = nextmissiletag % tags.size;

        if ( _id_52EF1C21DA5A8652 == "ffar_mi28_village_assault" )
        {
            if ( isdefined( etarget ) && isdefined( etarget.origin ) )
            {
                magicbullet( weaponname, self gettagorigin( tags[nextmissiletag] ), etarget.origin );

                if ( isdefined( level._effect["ffar_mi28_muzzleflash"] ) )
                    playfxontag( scripts\engine\utility::getfx( "ffar_mi28_muzzleflash" ), self, tags[nextmissiletag] );

                thread delayed_earthquake( 0.1, 0.5, 0.2, etarget.origin, 1600 );
            }
        }
        else
        {
            self setvehweapon( weaponname );

            if ( isdefined( etarget ) )
            {
                _id_BCB3B419004A1724 = self fireweapon( tags[nextmissiletag], etarget );

                switch ( _id_52EF1C21DA5A8652 )
                {
                    case "ffar_airlift":
                    case "ffar_bog_a_lite":
                    case "ffar":
                        _id_BCB3B419004A1724 thread missilelosetarget( 0.1 );
                        break;
                    case "apache_zippy_wall":
                    case "mi28_zippy_cheap":
                    case "mi28_zippy":
                    case "apache_zippy_nd":
                    case "apache_zippy":
                        if ( !isdefined( _id_F3FF83980FAE80E1 ) )
                            _id_BCB3B419004A1724 thread missilelosetarget( 0.6 );
                        else
                            _id_BCB3B419004A1724 thread missilelosetarget( _id_F3FF83980FAE80E1 );

                        break;
                    default:
                        break;
                }
            }
            else
                _id_BCB3B419004A1724 = self fireweapon( tags[nextmissiletag] );

            self notify( "missile_fired", _id_BCB3B419004A1724 );
        }

        self.nextmissiletag = nextmissiletag;

        if ( _id_AC0E594AC96AA3A8 < _id_E20C72DA9DE356C1 - 1 )
            wait( _id_5B4FB986B8388491 );

        if ( isdefined( _id_3447DD0CDCD69308 ) )
            wait( _id_3447DD0CDCD69308 );
    }

    self setvehweapon( defaultweapon );
}

delayed_earthquake( _id_3447DD0CDCD69308, scale, duration, source, _id_420D6A8245324B63 )
{
    wait( _id_3447DD0CDCD69308 );
    earthquake( scale, duration, source, _id_420D6A8245324B63 );
}

missilelosetarget( _id_3447DD0CDCD69308 )
{
    self endon( "death" );
    wait( _id_3447DD0CDCD69308 );

    if ( isdefined( self ) )
        self missile_cleartarget();
}
