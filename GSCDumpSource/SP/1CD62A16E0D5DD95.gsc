// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

asm_init( _id_B5DA6777BFE1ACE8, _id_5E1AB61C2C7FE69B )
{
    if ( _id_5E1AB61C2C7FE69B == "hero_salter" || _id_5E1AB61C2C7FE69B == "farah" || _id_5E1AB61C2C7FE69B == "soldier_female" )
        scripts\asm\asm_bb::bb_setshort( 1 );

    self.asmname = _id_B5DA6777BFE1ACE8;

    if ( !isdefined( self.asm ) )
    {
        self.asm = spawnstruct();
        self.asm.animoverrides = [];
        self.fnasm_init = ::asm_init;
        self.fnasm_setupaim = ::asm_setupaim_sp;
        self.fnasm_playfacialanim = ::asm_playfacialanim_sp;
        self.fnasm_handlenotetrack = _id_55B3046625FB79B6::handlenotetrack;
        self.fnasm_playadditiveanimloopstate = ::asm_playadditiveanimloopstate_sp;
        self.fnasm_clearfingerposes = ::asm_clearfingerposes;
        self.fnplaceweaponon = _id_3433EE6B63C7E243::placeweaponon;
        self.fndooropen = ::open_door;
        self.fndoorclose = ::close_door;
        self.fndoorneedstoclose = ::door_needs_to_close;
        self.fngetdoorcenter = ::get_door_center;
        self.fndooralreadyopen = ::is_door_already_open;
        self _meth_0131F6FB305015D0( scripts\asm\shared\utility::_id_B6A072E9E59FB82E );
    }

    if ( isdefined( _id_5E1AB61C2C7FE69B ) )
    {
        self setanimset( _id_5E1AB61C2C7FE69B );
        self _meth_7ADFCC654DD371DA( self._id_AE3EA15396B65C1F );
    }

    scripts\asm\asm::_id_C051A94F99BD65F1( self.asmname );
}

_id_A2B8F8B0891EE7FE()
{
    level.fnanimatedprop_setup = ::animatedprop_setup;
    level.fnanimatedprop_startanim = ::animatedprop_startanim;
    level.fnanimatedprop_setanim = ::animatedprop_setanim;
}

updatepainvars( damagedsubpart )
{
    if ( self.damageshield && !isdefined( self.disabledamageshieldpain ) )
    {
        _id_3BC04A1586573435 = 1500;

        if ( !isdefined( self.a.lastpaintime ) )
            self.a.lastpaintime = 0;

        if ( !isdefined( self.damageshieldcounter ) || gettime() - self.a.lastpaintime > _id_3BC04A1586573435 )
            self.damageshieldcounter = randomintrange( 2, 3 );

        if ( isdefined( self.lastattacker ) && distancesquared( self.origin, self.lastattacker.origin ) < squared( 512 ) )
            self.damageshieldcounter = 0;

        if ( self.damageshieldcounter > 0 )
            self.damageshieldcounter--;
    }

    if ( isdefined( damagedsubpart ) )
        self.damagedsubpart = damagedsubpart;
    else
        self.damagedsubpart = undefined;
}

shouldplaypainanim()
{
    if ( isdefined( self.fnshouldplaypainanim ) )
        return self [[ self.fnshouldplaypainanim ]]();

    return shouldplaypainanimdefault();
}

shouldplaypainanimdefault()
{
    _id_AE76948F5BA13F88 = 4096;

    if ( self.a.disablepain )
        return 0;

    if ( isdefined( self.pathgoalpos ) && self pathdisttogoal() < _id_AE76948F5BA13F88 )
        return 0;

    return 1;
}

deletehandler()
{
    self endon( "terminate_ai_threads" );
    self waittill( "entitydeleted" );
    self notify( "terminate_ai_threads" );
}

paininternal()
{
    if ( 1 )
    {
        updatepainvars();

        if ( !shouldplaypainanim() )
        {
            if ( isdefined( self.script ) && self.script == "pain" )
                self notify( "killanimscript" );

            return;
        }

        _id_D3B1A8B52402D7E6 = 0;
        result = self asmevalpaintransition( self.asmname );

        if ( isdefined( result ) && result )
            _id_D3B1A8B52402D7E6 = 1;

        if ( !_id_D3B1A8B52402D7E6 && self.script == "pain" )
            self notify( "killanimscript" );
    }

    self endon( "killanimscript" );
    self waittill( "Hellfreezesover" );
}

subparthandler()
{
    self endon( "death" );
    self endon( "terminate_ai_threads" );
}

asm_animhasfacialoverride( _id_63DB3C9E26531938 )
{
    if ( !animisleaf( _id_63DB3C9E26531938 ) )
        return 0;

    return animhasnotetrack( _id_63DB3C9E26531938, "facial_override" );
}

asm_playfacialanim_sp( asmname, statename, animname )
{
    if ( asmname != self.asmname )
        return;

    facialstate = self _meth_7B23C5433206563D();

    if ( isdefined( facialstate ) )
        asm_playfacialaniminternal( animname, facialstate );
    else
    {
        scripts\asm\asm::asm_clearfacialanim();
        self.asm.facial_state = "";
    }
}

asm_playfacialaniminternal( _id_63DB3C9E26531938, _id_3A06FF8DE29AE6DE )
{
    if ( !scripts\asm\shared\utility::isfacialstateallowed( "asm" ) )
        return;

    if ( isdefined( _id_63DB3C9E26531938 ) && asm_animhasfacialoverride( _id_63DB3C9E26531938 ) )
        return;

    headknob = scripts\asm\asm::asm_lookupanimfromaliasifexists( "knobs", "head" );

    if ( !isdefined( headknob ) )
        return;

    if ( !isdefined( self.asm.facial_state ) )
        self.asm.facial_state = "";

    scripts\asm\shared\utility::setfacialstate( "asm" );

    if ( isai( self ) )
        self setfacialindex( _id_3A06FF8DE29AE6DE );
    else if ( istrue( self._id_5247D15DA29E8539 ) )
        scripts\asm\shared\utility::_id_EE3E5D584E317D35( _id_3A06FF8DE29AE6DE );
    else
        scripts\asm\shared\utility::setfacialindexfornonai( _id_3A06FF8DE29AE6DE );
}

asm_playfacialanimfromnotetrack( facial_state )
{
    archetype = scripts\asm\shared\utility::_id_2285421DFC79C4D5();

    if ( !scripts\asm\shared\utility::isfacialstateallowed( "asm" ) && facial_state != "death" )
        return;

    if ( archetype != "" )
    {
        scripts\asm\shared\utility::setfacialstate( "asm" );

        if ( isai( self ) )
            self setfacialindex( facial_state );
        else if ( isdefined( self._id_5247D15DA29E8539 ) )
            scripts\asm\shared\utility::_id_EE3E5D584E317D35( facial_state );
        else
            scripts\asm\shared\utility::setfacialindexfornonai( facial_state );
    }
}

asm_playfacialanimsingleframedeath( guy )
{
    if ( isai( self ) )
        self setfacialindex( "death" );
    else
        scripts\asm\shared\utility::setfacialindexfornonai( "death" );
}

asm_initfingerposes()
{
    self endon( "death" );
    _id_17F47483908FD20F = 0;
    _id_589C119009395654 = 0;
    _id_2C8936D08F85C5C1 = scripts\asm\asm::asm_lookupanimfromalias( "knobs", "inner_root" );
    _id_136BA550DAF68784 = scripts\asm\asm::asm_getxanim( "knobs", _id_2C8936D08F85C5C1 );
    _id_C163DCDCE0C81C63 = 0;
    _id_C163DADCE0C817FD = 0;

    for (;;)
    {
        weights = self _meth_4F980CE6758646B7( _id_136BA550DAF68784 );
        _id_60F4AE371C171719 = weights[0] - _id_17F47483908FD20F;
        _id_73CC4A3989EEFAAD = ( _id_60F4AE371C171719 > 0.001 ) - ( _id_60F4AE371C171719 < -0.001 );

        if ( _id_73CC4A3989EEFAAD != _id_C163DCDCE0C81C63 )
        {
            if ( _id_73CC4A3989EEFAAD > 0 )
            {
                _id_17F47483908FD20F = weights[0];
                _id_C163DCDCE0C81C63 = _id_73CC4A3989EEFAAD;
                wait 0.1;
                asm_ikfingeranim( "left" );
                continue;
            }

            if ( _id_73CC4A3989EEFAAD < 0 )
            {
                _id_17F47483908FD20F = weights[0];
                _id_C163DCDCE0C81C63 = _id_73CC4A3989EEFAAD;
                asm_clearikfingeranim( "left" );
                continue;
            }
        }

        _id_17F47483908FD20F = weights[0];
        _id_C163DCDCE0C81C63 = _id_73CC4A3989EEFAAD;
        _id_60F4C8371C175047 = weights[1] - _id_589C119009395654;
        _id_73CC2C3989EEB8B3 = ( _id_60F4C8371C175047 > 0.001 ) - ( _id_60F4C8371C175047 < -0.001 );

        if ( _id_73CC2C3989EEB8B3 != _id_C163DADCE0C817FD )
        {
            if ( _id_73CC2C3989EEB8B3 > 0 )
            {
                _id_589C119009395654 = weights[1];
                _id_C163DADCE0C817FD = _id_73CC2C3989EEB8B3;
                wait 0.1;
                asm_ikfingeranim( "right" );
                continue;
            }

            if ( _id_73CC2C3989EEB8B3 < 0 )
            {
                _id_589C119009395654 = weights[1];
                _id_C163DADCE0C817FD = _id_73CC2C3989EEB8B3;
                asm_clearikfingeranim( "right" );
                continue;
            }
        }

        _id_589C119009395654 = weights[1];
        _id_C163DADCE0C817FD = _id_73CC2C3989EEB8B3;
        wait 0.05;
    }
}

asm_clearfingerposes()
{
    asm_clearikfingeranim( "left" );
    asm_clearikfingeranim( "right" );
}

asm_ikfingeranim( _id_A66BA9B157533F5A )
{
    currentweapon = _id_7E4D332E911E1B90::getaicurrentweapon();

    if ( isnullweapon( currentweapon ) )
        asm_clearikfingeranim( _id_A66BA9B157533F5A );

    asm_playikfingeranim( _id_A66BA9B157533F5A );
}

asm_playikfingeranim( _id_A66BA9B157533F5A )
{
    currentweapon = _id_7E4D332E911E1B90::getaicurrentweapon();

    if ( isnullweapon( currentweapon ) )
        return;

    _id_DE98A8C7CCB5FC4D = "ik_finger_pose_r";
    _id_6BAE40552FCED7C0 = "ik_fingers_r";
    _id_F996E26B279379C4 = getweaponbasename( currentweapon );

    if ( _id_A66BA9B157533F5A == "left" )
    {
        _id_DE98A8C7CCB5FC4D = "ik_finger_pose_l";
        _id_6BAE40552FCED7C0 = "ik_fingers_l";
        weaponattachments = getweaponattachments( currentweapon );

        if ( isdefined( weaponattachments ) )
        {
            foreach ( _id_5D237AFD4686552F in weaponattachments )
            {
                _id_487D8BDC76ED420C = getsubstr( _id_5D237AFD4686552F, 0, 7 );

                if ( _id_487D8BDC76ED420C == "ub_mike" )
                    _id_F996E26B279379C4 = "iw9_ub_mike";

                if ( _id_487D8BDC76ED420C == "ub_golf" )
                    _id_F996E26B279379C4 = "iw9_ub_golf";

                if ( _id_487D8BDC76ED420C == "gripang" )
                    _id_F996E26B279379C4 = "iw9_gripang";

                if ( _id_487D8BDC76ED420C == "gripver" )
                    _id_F996E26B279379C4 = "iw9_gripver";
            }
        }
    }

    if ( !asm_hasstatesp( self._id_AE3EA15396B65C1F, _id_DE98A8C7CCB5FC4D ) )
        return;

    if ( !isdefined( _id_F996E26B279379C4 ) || !scripts\asm\asm::asm_hasalias( _id_DE98A8C7CCB5FC4D, _id_F996E26B279379C4 ) )
    {
        if ( !isdefined( _id_F996E26B279379C4 ) )
            _id_F996E26B279379C4 = "UNDEFINED";

        return;
    }

    _id_7E50B5DE752E42DD = scripts\asm\asm::asm_getxanim( _id_DE98A8C7CCB5FC4D, scripts\asm\asm::asm_lookupanimfromalias( _id_DE98A8C7CCB5FC4D, _id_F996E26B279379C4 ) );
    _id_B34ADE57980D6C64 = scripts\asm\asm::asm_getxanim( "knobs", scripts\asm\asm::asm_lookupanimfromalias( "knobs", _id_6BAE40552FCED7C0 ) );
    self setanim( _id_B34ADE57980D6C64, 1, 0.3, 1.0 );
    self setanim( _id_7E50B5DE752E42DD, 1, 0.3, 1.0 );
}

asm_clearikfingeranim( _id_A66BA9B157533F5A )
{
    _id_6BAE40552FCED7C0 = "ik_fingers_l";

    if ( _id_A66BA9B157533F5A == "right" )
        _id_6BAE40552FCED7C0 = "ik_fingers_r";

    if ( !scripts\asm\asm::asm_hasalias( "knobs", _id_6BAE40552FCED7C0 ) )
        return;

    _id_B34ADE57980D6C64 = scripts\asm\asm::asm_getxanim( "knobs", scripts\asm\asm::asm_lookupanimfromalias( "knobs", _id_6BAE40552FCED7C0 ) );
    self clearanim( _id_B34ADE57980D6C64, 0.3, 1.0 );
}

asm_playvisorraise( _id_0E4731409BD255E0 )
{
    if ( isdefined( _id_0E4731409BD255E0 ) )
        _id_E6335C1B8D7D3B86 = 1;
    else
    {
        _id_E6335C1B8D7D3B86 = 0;
        _id_0E4731409BD255E0 = "";
    }

    asm_trynvgmodelswap();
    asm_clearvisoranim();
    _id_511BB1509D434D3C = scripts\asm\asm::asm_getxanim( "visor", scripts\asm\asm::asm_lookupanimfromalias( "visor", "helmet_visor_up" + _id_0E4731409BD255E0 ) );

    if ( self.visor_down == 0 )
    {
        if ( _id_E6335C1B8D7D3B86 )
            return;
        else
            self setanim( _id_511BB1509D434D3C, 1, 0, 1.0 );
    }
    else
    {
        _id_00FB5EFC5C62F489 = scripts\asm\asm::asm_getxanim( "visor", scripts\asm\asm::asm_lookupanimfromalias( "visor", "helmet_visor_down" + _id_0E4731409BD255E0 ) );
        self setanim( _id_00FB5EFC5C62F489, 1, 0, 1.0 );

        if ( !_id_E6335C1B8D7D3B86 )
            wait( getanimlength( _id_00FB5EFC5C62F489 ) - 0.1 );
    }
}

asm_trynvgmodelswap()
{
    if ( !isdefined( self.nvgmodel_on ) )
        return;

    _id_E205F6EED8EB1B4E = self.headmodel;

    if ( isdefined( self.hatmodel ) )
        _id_E205F6EED8EB1B4E = self.hatmodel;

    if ( self.visor_down == 0 && _id_E205F6EED8EB1B4E == self.nvgmodel_on )
    {
        if ( isdefined( self.hatmodel ) )
        {
            self detach( self.hatmodel );
            self.hatmodel = self.nvgmodel_off;
            self attach( self.hatmodel );
        }
        else
        {
            self detach( self.headmodel );
            self.headmodel = self.nvgmodel_off;
            self attach( self.headmodel );
        }
    }
    else if ( _id_E205F6EED8EB1B4E == self.nvgmodel_off )
    {
        if ( isdefined( self.hatmodel ) )
        {
            self detach( self.hatmodel );
            self.hatmodel = self.nvgmodel_on;
            self attach( self.hatmodel );
        }
        else
        {
            self detach( self.headmodel );
            self.headmodel = self.nvgmodel_on;
            self attach( self.headmodel );
        }
    }
}

asm_clearvisoranim()
{
    asm_trynvgmodelswap();
    _id_7A6130A682E621C0 = undefined;
    _id_25B2D35AC71E1259 = scripts\asm\asm::asm_lookupanimfromaliasifexists( "knobs", "visor" );

    if ( isdefined( _id_25B2D35AC71E1259 ) )
        _id_7A6130A682E621C0 = scripts\asm\asm::asm_getxanim( "knobs", _id_25B2D35AC71E1259 );
    else
    {
        _id_25B2D35AC71E1259 = scripts\asm\asm::_id_0C1BF21C5E8625EA( "knobs", "visor" );

        if ( isdefined( _id_25B2D35AC71E1259 ) )
            _id_7A6130A682E621C0 = scripts\asm\asm::_id_6AA159FC2F693AF7( "knobs", _id_25B2D35AC71E1259 );
    }

    if ( isdefined( _id_7A6130A682E621C0 ) )
        self clearanim( _id_7A6130A682E621C0, 0 );
}

asm_hasstatesp( archetype, statename )
{
    if ( archetypeassetloaded( archetype ) )
        return archetypehasstate( archetype, statename );
    else
        return 0;
}

asm_playadditiveanimloopstate_sp( asmname, statename, params )
{
    self endon( statename + "_finished" );
    _id_F3716786BF084DD1 = scripts\asm\asm::asm_getbodyknob();
    _id_DA481EFBEAC5DE59 = 0;
    _id_D180B535A33B044D = 0.2;

    for (;;)
    {
        animname = scripts\asm\asm::asm_getxanim( statename, scripts\asm\asm::asm_getanim( asmname, statename ) );

        if ( _id_F3716786BF084DD1 != animname )
        {
            if ( _id_DA481EFBEAC5DE59 )
                self _meth_1EBF13E0D8270FB7( statename, animname, 1.0, _id_D180B535A33B044D, 1.0 );
            else
                self setflaggedanimknobrestart( statename, animname, 1.0, _id_D180B535A33B044D, 1.0 );

            _id_F3716786BF084DD1 = animname;
        }

        thread asm_playadditiveanimloopstate_helper( statename, animname, _id_DA481EFBEAC5DE59 );
        scripts\asm\asm::asm_playfacialanim( asmname, statename, animname );
        scripts\asm\asm::asm_donotetracks( asmname, statename, scripts\asm\asm::asm_getnotehandler( asmname, statename ) );
        self notify( statename + "additive_cancel" );
    }
}

asm_playadditiveanimloopstate_helper( statename, _id_A16EA1D3288BA534, _id_DA481EFBEAC5DE59 )
{
    self endon( statename + "_finished" );
    self endon( statename + "additive_cancel" );

    while ( isdefined( _id_A16EA1D3288BA534 ) )
    {
        wait 0.2;

        if ( _id_DA481EFBEAC5DE59 )
        {
            self _meth_592B654DA5474B48( statename, _id_A16EA1D3288BA534, 1.0, 0, 1.0 );
            continue;
        }

        self setflaggedanim( statename, _id_A16EA1D3288BA534, 1.0, 0, 1.0 );
    }
}

asm_setaimlimits( _id_6F1B13B1BCF342F9 )
{
    if ( isdefined( _id_6F1B13B1BCF342F9["left"] ) )
        self.leftaimlimit = _id_6F1B13B1BCF342F9["left"];
    else if ( scripts\engine\utility::actor_is3d() )
        self.leftaimlimit = 56;
    else
        self.leftaimlimit = 45;

    if ( isdefined( _id_6F1B13B1BCF342F9["right"] ) )
        self.rightaimlimit = _id_6F1B13B1BCF342F9["right"];
    else if ( scripts\engine\utility::actor_is3d() )
        self.rightaimlimit = -56;
    else
        self.rightaimlimit = -45;

    if ( isdefined( _id_6F1B13B1BCF342F9["up"] ) )
        self.upaimlimit = _id_6F1B13B1BCF342F9["up"];
    else if ( scripts\engine\utility::actor_is3d() )
        self.upaimlimit = -89;
    else
        self.upaimlimit = -89;

    if ( isdefined( _id_6F1B13B1BCF342F9["down"] ) )
        self.downaimlimit = _id_6F1B13B1BCF342F9["down"];
    else if ( scripts\engine\utility::actor_is3d() )
        self.downaimlimit = 65;
    else
        self.downaimlimit = 45;
}

asm_getaimlimitset( asmname, statename )
{
    if ( !isdefined( level.aimlimitstatemappings[asmname] ) )
        return "default";

    if ( !isdefined( level.aimlimitstatemappings[asmname][statename] ) )
        return "default";

    return level.aimlimitstatemappings[asmname][statename];
}

asm_setstateaimlimits( asmname, statename )
{
    if ( isdefined( self.ignoreaimsets ) && self.ignoreaimsets )
        return;

    _id_59F296E2D4F86127 = asm_getaimlimitset( asmname, statename );

    if ( !isdefined( level.combataimlimits[asmname] ) )
    {
        asm_setaimlimits( [] );
        return;
    }

    _id_CD756CAFF8F09A7A = scripts\asm\asm::asm_isfrantic();

    if ( _id_CD756CAFF8F09A7A && isdefined( level.franticaimlimits[asmname][_id_59F296E2D4F86127] ) )
    {
        asm_setaimlimits( level.franticaimlimits[asmname][_id_59F296E2D4F86127] );
        return;
    }
    else if ( isdefined( level.combataimlimits[asmname][_id_59F296E2D4F86127] ) )
    {
        asm_setaimlimits( level.combataimlimits[asmname][_id_59F296E2D4F86127] );
        return;
    }

    asm_setaimlimits( [] );
}

asm_setupaim_sp( asmname, statename, _id_D180B535A33B044D, _id_7D7E52A729D0B9B0 )
{
    if ( self asmcurrentstatehasaimset( asmname ) )
        return;

    if ( istrue( self.runngun ) )
        return;

    _id_0DD6BF5F9DBA888C = weaponclass( self.weapon );

    if ( _id_0DD6BF5F9DBA888C == "none" )
        return;

    if ( scripts\asm\asm::asm_hasalias( statename, "aim_1" ) )
        return;

    if ( !scripts\asm\asm::asm_hasalias( statename, _id_0DD6BF5F9DBA888C + "_aim_8" ) )
        _id_0DD6BF5F9DBA888C = "rifle";

    asm_setstateaimlimits( asmname, statename );
    _id_59C51D94CF774C12 = scripts\asm\asm::asm_isfrantic();
    _id_38548703EA2BDADC = self._id_AE3EA15396B65C1F;
    aim_5 = undefined;

    if ( !isdefined( _id_7D7E52A729D0B9B0 ) || _id_7D7E52A729D0B9B0 )
    {
        _id_8BCB3D9D7AAA7510 = _id_0DD6BF5F9DBA888C + "_aim_5";
        _id_340D6C7E85CE51A6 = scripts\asm\asm::asm_lookupanimfromaliasifexists( statename, _id_8BCB3D9D7AAA7510 );

        if ( isdefined( _id_340D6C7E85CE51A6 ) )
            aim_5 = scripts\asm\asm::asm_getxanim( statename, _id_340D6C7E85CE51A6 );
    }

    self _meth_204CEEA5C7FF9188( scripts\asm\asm::asm_getxanim( statename, archetypegetrandomalias( _id_38548703EA2BDADC, statename, _id_0DD6BF5F9DBA888C + "_aim_8", _id_59C51D94CF774C12 ) ), 1, _id_D180B535A33B044D );
    self _meth_204CEEA5C7FF9188( scripts\asm\asm::asm_getxanim( statename, archetypegetrandomalias( _id_38548703EA2BDADC, statename, _id_0DD6BF5F9DBA888C + "_aim_2", _id_59C51D94CF774C12 ) ), 1, _id_D180B535A33B044D );
    self _meth_204CEEA5C7FF9188( scripts\asm\asm::asm_getxanim( statename, archetypegetrandomalias( _id_38548703EA2BDADC, statename, _id_0DD6BF5F9DBA888C + "_aim_4", _id_59C51D94CF774C12 ) ), 1, _id_D180B535A33B044D );
    self _meth_204CEEA5C7FF9188( scripts\asm\asm::asm_getxanim( statename, archetypegetrandomalias( _id_38548703EA2BDADC, statename, _id_0DD6BF5F9DBA888C + "_aim_6", _id_59C51D94CF774C12 ) ), 1, _id_D180B535A33B044D );

    if ( isdefined( aim_5 ) )
        self setanimlimited( aim_5, 1, _id_D180B535A33B044D );

    _id_858AE09F0C65FD4B = scripts\asm\asm::asm_lookupanimfromaliasifexists( statename, "aim_root" );

    if ( isdefined( _id_858AE09F0C65FD4B ) )
        self setanim( scripts\asm\asm::asm_getxanim( statename, _id_858AE09F0C65FD4B ), 1, _id_D180B535A33B044D );
    else
    {
        _id_858AE09F0C65FD4B = scripts\asm\asm::asm_lookupanimfromaliasifexists( "knobs", "aim_root" );

        if ( isdefined( _id_858AE09F0C65FD4B ) )
            self setanim( scripts\asm\asm::asm_getxanim( "knobs", _id_858AE09F0C65FD4B ), 1, _id_D180B535A33B044D );
    }

    _id_C09A8195928CD961 = scripts\asm\asm::asm_hasalias( statename, "aim_knob_2" );

    if ( _id_C09A8195928CD961 )
    {
        self notify( "StopCleanupAimKnobs" );
        self.asm.track.aim_2 = scripts\asm\asm::asm_getxanim( statename, archetypegetrandomalias( _id_38548703EA2BDADC, statename, "aim_knob_2", _id_59C51D94CF774C12 ) );
        self.asm.track.aim_4 = scripts\asm\asm::asm_getxanim( statename, archetypegetrandomalias( _id_38548703EA2BDADC, statename, "aim_knob_4", _id_59C51D94CF774C12 ) );
        self.asm.track.aim_6 = scripts\asm\asm::asm_getxanim( statename, archetypegetrandomalias( _id_38548703EA2BDADC, statename, "aim_knob_6", _id_59C51D94CF774C12 ) );
        self.asm.track.aim_8 = scripts\asm\asm::asm_getxanim( statename, archetypegetrandomalias( _id_38548703EA2BDADC, statename, "aim_knob_8", _id_59C51D94CF774C12 ) );

        if ( isdefined( aim_5 ) )
            self.asm.track.aim_5 = scripts\asm\asm::asm_getxanim( statename, archetypegetrandomalias( _id_38548703EA2BDADC, statename, "aim_knob_5", _id_59C51D94CF774C12 ) );

        thread asm_cleanupaimknobsonterminate( statename );
    }

    scripts\asm\track::trackloop_restoreaim();
}

asm_setupgesture( asmname, statename )
{
    _id_F7EE87DC76B45E62 = scripts\asm\asm::asm_getdemeanor();
    _id_59C51D94CF774C12 = scripts\asm\asm::asm_isfrantic();
    gestures = self.asm.gestures;
    _id_8B461A03A1F82E9F = self._id_AE3EA15396B65C1F;
    gestures.gesture_moveup_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_move_up", _id_59C51D94CF774C12 ) );
    gestures.gesture_armup_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_armup", _id_59C51D94CF774C12 ) );
    gestures.gesture_onme_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_on_me", _id_59C51D94CF774C12 ) );
    gestures.gesture_hold_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_hold", _id_59C51D94CF774C12 ) );
    gestures.gesture_fallback_up_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_fallback_up", _id_59C51D94CF774C12 ) );
    gestures.gesture_fallback_down_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_fallback_down", _id_59C51D94CF774C12 ) );

    if ( _id_F7EE87DC76B45E62 == "casual" )
    {
        gestures.gesture_point_center = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_point_center", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_left = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_point_left", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_right = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_point_right", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_up = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_point_up", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_down = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_point_down", _id_59C51D94CF774C12 ) );
        gestures.gesture_shrug_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_shrug_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_cross_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_cross_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_nod_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_nod_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_shake_head_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_shake_head_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_salute_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_salute_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_wave_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_wave_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_wait_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_wait_anim", _id_59C51D94CF774C12 ) );
    }
    else if ( _id_F7EE87DC76B45E62 == "casual_gun" )
    {
        gestures.gesture_point_center = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_casual_gun_point_center", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_left = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_casual_gun_point_left", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_right = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_casual_gun_point_right", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_up = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_casual_gun_point_up", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_down = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_casual_gun_point_down", _id_59C51D94CF774C12 ) );
        gestures.gesture_shrug_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_shrug_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_cross_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_cross_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_nod_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_nod_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_shake_head_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_shake_head_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_salute_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_salute_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_wave_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_wave_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_wait_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_wait_anim", _id_59C51D94CF774C12 ) );
    }
    else
    {
        gestures.gesture_point_center = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_gun_point_center", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_left = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_gun_point_left", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_right = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_gun_point_right", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_up = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_gun_point_up", _id_59C51D94CF774C12 ) );
        gestures.gesture_point_down = scripts\asm\asm::asm_getxanim( "gesture_point", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_point", "gesture_gun_point_down", _id_59C51D94CF774C12 ) );
        gestures.gesture_shrug_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_shrug_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_cross_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_cross_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_nod_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_nod_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_shake_head_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_shake_head_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_salute_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_salute_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_wave_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_wave_anim", _id_59C51D94CF774C12 ) );
        gestures.gesture_wait_anim = scripts\asm\asm::asm_getxanim( "gesture_old", archetypegetrandomalias( _id_8B461A03A1F82E9F, "gesture_old", "gesture_gun_wait_anim", _id_59C51D94CF774C12 ) );
    }
}

asm_cleanupaimknobswithdelay( statename, _id_74B5B12BB6514385 )
{
    self endon( "death" );
    self endon( "StopCleanupAimKnobs" );
    scripts\engine\utility::waittill_any_timeout( _id_74B5B12BB6514385, statename + "_finished" );
    asm_cleanupaimknobs();
}

asm_cleanupaimknobsonterminate( statename )
{
    self endon( "death" );
    self endon( "StopCleanupAimKnobs" );
    self waittill( statename + "_finished" );
    asm_cleanupaimknobs();
}

asm_cleanupaimknobs()
{
    if ( !isdefined( self.asm.track ) )
        return;

    self.asm.track.aim_2 = undefined;
    self.asm.track.aim_4 = undefined;
    self.asm.track.aim_6 = undefined;
    self.asm.track.aim_8 = undefined;
    self.asm.track.aim_5 = undefined;
}

asm_animscripted( notifyname, startpos, startangles, anime, _id_5C6B9324AAE91890, _id_6A53D05628E94BC4, _id_D180B535A33B044D )
{
    asmname = self.asmname;
    self asmsetstate( asmname, "animscripted" );
}

asm_stopanimscripted()
{
    self stopanimscripted();
}

asm_animcustom( _id_C81CFDFD8D7BF631, _id_DC2856B91FF86109 )
{
    self _meth_EA63241A4D3092C4();
    scripts\asm\asm_bb::bb_setanimscripted();
    self.asm.animcustomender = _id_DC2856B91FF86109;
    self _meth_60C24A3E3E8B1747( _id_C81CFDFD8D7BF631, ::asm_animcustom_endanimscript );
    asmname = self.asmname;
    self asmsetstate( asmname, "animscripted" );
}

asm_animcustom_endanimscript()
{
    scripts\asm\asm_bb::bb_clearanimscripted();

    if ( !isdefined( self.asm.animcustomender ) )
        return;

    self [[ self.asm.animcustomender ]]();
    self.asm.animcustomender = undefined;
}

asm_stopanimcustom()
{
    self notify( "killanimscript" );
}

open_door( door, t )
{
    if ( istrue( door.bashed ) )
        return;

    door scripts\sp\utility::door_force_open_fully( self, t );
}

door_needs_to_close( door )
{
    if ( !istrue( door.ajar ) )
        return 0;

    _id_D9C3CA36E13ED26A = anglestoleft( door.true_start_angles );
    _id_306D8B5B030998E9 = door scripts\sp\door::get_door_angles();

    if ( angleclamp180( _id_306D8B5B030998E9[1] - door.true_start_angles[1] ) < 0 )
        _id_D9C3CA36E13ED26A = -1 * _id_D9C3CA36E13ED26A;

    doorcenter = door scripts\sp\door_internal::get_door_bottom_center();
    _id_9DFA31B22E1F2822 = self.origin - doorcenter;
    _id_DAD5E6255A5BF2AC = anglestoforward( _id_306D8B5B030998E9 );
    return vectordot( _id_D9C3CA36E13ED26A, _id_DAD5E6255A5BF2AC ) * vectordot( _id_D9C3CA36E13ED26A, _id_9DFA31B22E1F2822 ) > 0;
}

close_door( door )
{
    self endon( "opening_door" );
    door scripts\sp\door::door_close( self, 0.5, 0.1, 0.4 );
}

get_door_center( door )
{
    return door scripts\sp\door_internal::get_door_bottom_center();
}

is_door_already_open( door )
{
    if ( istrue( door.open_completely ) )
        return 1;

    if ( door scripts\sp\door_internal::door_is_open_at_least( 60 ) )
        return 1;

    return 0;
}

animatedprop_setup( _id_5CF354B67B7CE647, _id_06B5C8034010B9BA, origin, angles )
{
    self.animated_prop = scripts\engine\sp\utility::spawn_anim_model( _id_5CF354B67B7CE647, origin, angles );
    _id_5FFE798365B52207 = level.scr_anim[_id_5CF354B67B7CE647][_id_06B5C8034010B9BA];
    self.animated_prop _meth_D7FA6F5D9D0CA391( _id_5FFE798365B52207, 1, 0, 0 );
}

animatedprop_startanim( _id_5CF354B67B7CE647, params )
{
    _id_CCE0ECB52CC93601 = level.scr_anim[_id_5CF354B67B7CE647][params];
    self.animated_prop setanimrate( _id_CCE0ECB52CC93601, 1 );
}

animatedprop_setanim( _id_5CF354B67B7CE647, params )
{
    _id_CCE0ECB52CC93601 = level.scr_anim[_id_5CF354B67B7CE647][params];
    self.animated_prop setanimknob( _id_CCE0ECB52CC93601, 1, 0.2, 1 );
}
