// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( !scripts\engine\utility::add_init_script( "level_player", ::init ) )
        return;

    _id_3B64EB40368C1450::_id_7372010B17478CDC( "shotgun_overkill", 0, 1, "$self", ::_id_B2C2A8F72B5D9583, "$value" );
    initplayerdvars();
    initplayervfx();
    initplayerprecache();
    level.players = getentarray( "player", "classname" );
    level.player = level.players[0];
    level.player.lastenemykilltime = 0;
    level.player.lastenemydmgtime = 0;
    level.player.deathshieldfunc = ::deathshieldfunc;
    level.player.gs = spawnstruct();
    level.player.gs.scripteddamagemultiplier = 1;
    level.player.gs.scripteddeathshielddurationscale = 1;
    level.player.gs._id_F3CB481E3E3B2A24 = 1;
    level.player.gs._id_302587891497F2DB = 1;
    level.player.maxhealth = 100;
    level.player.health = 100;
    level.player.pers = [];
    level.player initplayerdefaultsettings();
    level.player initplayeromnvars();
    level.player initplayernotifies();
    level.player initplayerentflags();
    level.player initplayerdamage();
    level.player initplayerfocus();
    level.player _id_98CF805EF4B19459();
    level.player _id_601BF6BCDCE65B67();
    level.player thread hud_think();
    level.player thread ladderpistol();
    level.player thread _id_5FFE68292DC22949::_id_3D0283AC94CFF0E0();
    level.player thread _id_BE2F4B178DC1A453();
    setdvarifuninitialized( "dvar_92EDCD4E782939E5", 1 );
    level.player thread scripts\sp\player\gestures::_id_0160704EE50B41FA();
    level.player thread scripts\sp\player\gestures::_id_5231B0F285527A15();
    level.player thread _id_5E36C9821B4D5091::_id_F65D06CCA9DFED8E();
    scripts\engine\sp\utility::post_load_precache( ::_id_05C851C472C54656 );
}

_id_05C851C472C54656()
{
    level.player thread _id_70AE34F0E2BEF9C8::_id_9AC5625CAF26591E();
    level.player thread _id_2DB81C9F19D2F67E::_id_767EFE0110BFA73A();
}

deathshieldfunc( _id_E3108E412AFB3811 )
{
    if ( damageflag( 2 ) && !damageflag( 1 ) )
        self _meth_28FB77BD5F1B2F91( _id_E3108E412AFB3811 );
}

main()
{
    scripts\engine\sp\utility::add_hint_string( "focus_hint", &"GAME/FOCUS_HINT", ::focus_held_down );
    level.player playerdamagemain();
    level.player playeroffhandmain();
    level.player playeraltweapon();
    level.player playerfocusmain();
    level.player thread scripts\engine\sp\utility::playerwatch_unresolved_collision();
    level.player thread _id_4D0A3CBA9DE1DB93();
    level.player thread _id_E690098D84B2F10E();
    level.player thread _id_60662CB06A77B4F1();
}

_id_601BF6BCDCE65B67()
{
    self._id_02A9F3313825D58D = scripts\sp\utility::make_weapon( "iw9_me_climbfists" );
    scripts\sp\utility::give_weapon( self._id_02A9F3313825D58D );
}

initplayerdvars()
{
    setdvarifuninitialized( "dvar_BFA6BEDC37206C58", 1 );
    setdvarifuninitialized( "dvar_614D0737DA55CB97", 1 );
    setsaveddvar( "dvar_18E2DDA6AAF07DC3", 375 );
    setsaveddvar( "dvar_DE79E5C6B8A17221", 220 );
    setsaveddvar( "dvar_11A6AAF18B50047B", 150 );
    setsaveddvar( "dvar_ECD52993B5DAB130", 75 );
    setsaveddvar( "dvar_BDC5077E1271C6C9", 0.2 );
    setsaveddvar( "dvar_9F9FCC0E104D1CBF", 0.5 );
    setdvar( "dvar_C815D5683EEA5B67", 0 );
    setsaveddvar( "dvar_A1204B48847C4190", 0 );
}

initplayervfx()
{
    level.g_effect["player_onfire_ignite"] = loadfx( "vfx/iw8/core/player/vfx_player_onfire_ignite.vfx" );
    level.g_effect["player_offfire_extinguish"] = loadfx( "vfx/iw8/core/player/vfx_player_offfire_extinguish.vfx" );
    level.g_effect["player_onfire_small"] = loadfx( "vfx/iw8/core/player/vfx_player_onfire_small.vfx" );
    level.g_effect["player_onfire_med"] = loadfx( "vfx/iw8/core/player/vfx_player_onfire_med.vfx" );
    level.g_effect["player_onfire_large"] = loadfx( "vfx/iw8/core/player/vfx_player_onfire_large.vfx" );
    level.g_effect["player_offfire_small"] = loadfx( "vfx/iw8/core/player/vfx_player_offfire_small.vfx" );
    level.g_effect["player_offfire_med"] = loadfx( "vfx/iw8/core/player/vfx_player_offfire_med.vfx" );
    level.g_effect["player_offfire_large"] = loadfx( "vfx/iw8/core/player/vfx_player_offfire_large.vfx" );
}

initplayerprecache()
{
    precachestring( &"GAME/GET_TO_COVER" );
    precachestring( &"GAME/GET_TO_COVER_SWIM" );
    _id_8E4D6CA7020FE22F = [ "bottom", "left", "right" ];

    foreach ( direction in _id_8E4D6CA7020FE22F )
    {
        precacheshader( "fullscreen_blood_" + direction );
        precacheshader( "fullscreen_blood_" + direction + "_alt" );
        precacheshader( "fullscreen_blood_" + direction + "_splash" );
        precacheshader( "fullscreen_dirt_" + direction );
        precacheshader( "fullscreen_dirt_" + direction + "_splash" );

        if ( scripts\common\utility::playerarmorenabled() )
        {
            precacheshader( "fullscreen_armor_" + direction );
            precacheshader( "fullscreen_armor_" + direction + "_splash" );
        }
    }

    precacheshader( "ui_player_pain_damage_overlay" );
    precacheshader( "ui_player_pain_fire_overlay" );
    precacheshader( "ui_player_pain_impact_overlay" );
    precacheshader( "ui_player_pain_blood_overlay" );
    precacheshader( "ui_player_pain_deathsdoor_pulse_overlay" );
    _func_ DCF8797A7CAF749( "iw9_defaultsuit_sp" );
    _func_ DCF8797A7CAF749( "iw9_creep" );
    _func_ DCF8797A7CAF749( "iw9_cqb" );

    if ( scripts\common\utility::playerarmorenabled() )
    {
        precacheshader( "hud_icon_loot_armor" );
        precacheshader( "ui_player_pain_damage_overlay" );
        precacheshader( "ui_player_pain_armorbreak_overlay" );
    }
}

initplayeromnvars()
{
    self setclientomnvar( "ui_gettocover_state", 0 );

    if ( scripts\common\utility::playerarmorenabled() )
        self setclientomnvar( "ui_armor_red_flash", 0 );
}

initplayernotifies()
{
    self notifyonplayercommand( "reload_pressed", "+usereload" );
    self notifyonplayercommand( "reload_pressed", "+reload" );
    self notifyonplayercommand( "frag_pressed", "+frag" );
    self notifyonplayercommand( "frag_released", "-frag" );
    self notifyonplayercommand( "smoke_pressed", "+smoke" );
    self notifyonplayercommand( "smoke_released", "-smoke" );
    self notifyonplayercommand( "melee_pressed", "+melee" );
    self notifyonplayercommand( "melee_pressed", "+melee_zoom" );
    self notifyonplayercommand( "melee_pressed", "+melee_sprint" );
    self notifyonplayercommand( "sprint_pressed", "+sprint" );
    self notifyonplayercommand( "sprint_pressed", "+sprint_zoom" );
    self notifyonplayercommand( "sprint_pressed", "+breath_sprint" );
    self notifyonplayercommand( "attack_pressed", "+attack" );
    self notifyonplayercommand( "attack_released", "-attack" );
    self notifyonplayercommand( "attack_pressed", "+attack_akimbo_accessible" );
    self notifyonplayercommand( "attack_released", "-attack_akimbo_accessible" );
    self notifyonplayercommand( "ads_pressed", "+toggleads_throw" );
    self notifyonplayercommand( "ads_pressed", "+speed_throw" );
    self notifyonplayercommand( "ads_pressed", "+ads_akimbo_accessible" );
    self notifyonplayercommand( "ads_released", "-toggleads_throw" );
    self notifyonplayercommand( "ads_released", "-speed_throw" );
    self notifyonplayercommand( "ads_released", "-ads_akimbo_accessible" );
    self notifyonplayercommand( "focus_pressed", "+focus" );
    self notifyonplayercommand( "focus_released", "-focus" );
    self notifyonplayercommand( "reload_pressed", "+usereload" );
    self notifyonplayercommand( "reload_pressed", "+reload" );
    self notifyonplayercommand( "use_pressed", "+activate" );
    self notifyonplayercommand( "use_pressed", "+usereload" );
    self notifyonplayercommand( "stance_pressed", "+stance" );
    self notifyonplayercommand( "stance_pressed", "+togglecrouch" );
    self notifyonplayercommand( "stance_pressed", "+movedown" );
    self notifyonplayercommand( "jump_pressed", "+gostand" );
    self notifyonplayercommand( "jump_pressed", "+stanceup" );
    self notifyonplayercommand( "jump_pressed", "+mantle" );
    self notifyonplayercommand( "weapon_switch_pressed", "+weapnext" );
    self notifyonplayercommand( "weapon_switch_pressed", "+weapprev" );
    self notifyonplayercommand( "weapon_switch_pressed", "selectweapon1" );
    self notifyonplayercommand( "weapon_switch_pressed", "selectweapon2" );
    self notifyonplayercommand( "weapon_switch_pressed", "selectweapon3" );
    self notifyonplayercommand( "actionslot1", "+actionslot 1" );
    self notifyonplayercommand( "actionslot2", "+actionslot 2" );
    self notifyonplayercommand( "actionslot3", "+actionslot 3" );
    self notifyonplayercommand( "actionslot4", "+actionslot 4" );

    if ( scripts\common\utility::playerarmorenabled() )
        self notifyonplayercommand( "armor_pressed", "+armor" );
}

initplayerentflags()
{
    scripts\engine\utility::ent_flag_init( "global_hint_in_use" );
    scripts\engine\utility::ent_flag_init( "player_zero_attacker_accuracy" );
}

initplayerdamage()
{
    self.damage = spawnstruct();
    self.damage.impactsfx = scripts\engine\utility::spawn_script_origin();
    self.damage.impactsfx linkto( self );
    self.damage.pulsesfx = scripts\engine\utility::spawn_script_origin();
    self.damage.pulsesfx linkto( self );
    self.damage.activescreeneffectoverlays = [];
    self.damage.flags = 0;
    self.damage.fndispersedamage = ::dispersedamage;
    self.damage.fndamagefunctions = ::damagefunctions;
    self.damage.firedamage = 0;
    self.damage.firehealth = 100;
    self.damage.altdirectionalbloodoverlay = 0;
    self.damage.lastdiretionalbloodtime = -99999;
    initdamageoverlay();
    initdeathsdooroverlaypulse();
    initbloodoverlay();
    _func_AF2D9A459EBD113D( "damage_radial" );
    _func_347F34CAC350B5DD( "damage_severe" );
    _func_C838F02B25DA3712( "whizby" );
}

initdamageoverlay()
{
    self.damage.overlay = newclienthudelem( self );
    self.damage.overlay.sort = 12;
    self.damage.overlay.x = 0;
    self.damage.overlay.y = 0;
    self.damage.overlay.alignx = "left";
    self.damage.overlay.aligny = "top";
    self.damage.overlay.foreground = 0;
    self.damage.overlay.lowresbackground = 1;
    self.damage.overlay.horzalign = "fullscreen";
    self.damage.overlay.vertalign = "fullscreen";
    self.damage.overlay.alpha = 0;
    self.damage.overlay.enablehudlighting = 1;
    self.damage.overlay setshader( "ui_player_pain_damage_overlay", 640, 480 );
}

initfiredamageoverlay()
{
    self.damage.firedamageoverlay = newclienthudelem( self );
    self.damage.firedamageoverlay.sort = 9;
    self.damage.firedamageoverlay.x = 0;
    self.damage.firedamageoverlay.y = 0;
    self.damage.firedamageoverlay.alignx = "left";
    self.damage.firedamageoverlay.aligny = "top";
    self.damage.firedamageoverlay.foreground = 0;
    self.damage.firedamageoverlay.lowresbackground = 1;
    self.damage.firedamageoverlay.horzalign = "fullscreen";
    self.damage.firedamageoverlay.vertalign = "fullscreen";
    self.damage.firedamageoverlay.alpha = 0;
    self.damage.firedamageoverlay.enablehudlighting = 1;
    self.damage.firedamageoverlay setshader( "ui_player_pain_fire_overlay", 640, 480 );
}

initfirepainoverlay()
{
    self.damage.firepainoverlay = newclienthudelem( self );
    self.damage.firepainoverlay.sort = 8;
    self.damage.firepainoverlay.x = 0;
    self.damage.firepainoverlay.y = 0;
    self.damage.firepainoverlay.alignx = "left";
    self.damage.firepainoverlay.aligny = "top";
    self.damage.firepainoverlay.foreground = 0;
    self.damage.firepainoverlay.lowresbackground = 1;
    self.damage.firepainoverlay.horzalign = "fullscreen";
    self.damage.firepainoverlay.vertalign = "fullscreen";
    self.damage.firepainoverlay.alpha = 0;
    self.damage.firepainoverlay.enablehudlighting = 1;
    self.damage.firepainoverlay setshader( "ui_player_pain_impact_overlay", 640, 480 );
}

initdeathsdooroverlaypulse()
{
    self.damage.deathsdooroverlaypulse = newclienthudelem( self );
    self.damage.deathsdooroverlaypulse.sort = 10;
    self.damage.deathsdooroverlaypulse.x = 0;
    self.damage.deathsdooroverlaypulse.y = 0;
    self.damage.deathsdooroverlaypulse.alignx = "left";
    self.damage.deathsdooroverlaypulse.aligny = "top";
    self.damage.deathsdooroverlaypulse.foreground = 0;
    self.damage.deathsdooroverlaypulse.lowresbackground = 1;
    self.damage.deathsdooroverlaypulse.horzalign = "fullscreen";
    self.damage.deathsdooroverlaypulse.vertalign = "fullscreen";
    self.damage.deathsdooroverlaypulse.alpha = 0;
    self.damage.deathsdooroverlaypulse.enablehudlighting = 1;
    self.damage.deathsdooroverlaypulse setshader( "ui_player_pain_deathsdoor_pulse_overlay", 640, 480 );
}

initbloodoverlay()
{
    self.damage.bloodoverlay = newclienthudelem( self );
    self.damage.bloodoverlay.sort = 11;
    self.damage.bloodoverlay.x = 0;
    self.damage.bloodoverlay.y = 0;
    self.damage.bloodoverlay.alignx = "left";
    self.damage.bloodoverlay.aligny = "top";
    self.damage.bloodoverlay.foreground = 0;
    self.damage.bloodoverlay.lowresbackground = 1;
    self.damage.bloodoverlay.horzalign = "fullscreen";
    self.damage.bloodoverlay.vertalign = "fullscreen";
    self.damage.bloodoverlay.alpha = 0;
    self.damage.bloodoverlay.enablehudlighting = 0;
    self.damage.bloodoverlay setshader( "ui_player_pain_blood_overlay", 640, 480 );
}

initplayerfocus()
{
    self.focus = spawnstruct();
    self.focus.enemies = [];
    self.focus.additionalents = [];
    self.focus.buttonhelddown = 0;
    self.focus.usedonce = 0;
    self.focus.timeadjust = 0;
    self.focus.disabled = 0;
    forcesetamount( 0 );
    set_focus_objectives_update_display( 0 );
    set_focus_infinite_hold( 0 );
    setomnvar( "ui_show_objectives", 0 );
    setsaveddvar( "dvar_5C90C101C2275F10", 1 );
    setsaveddvar( "dvar_3232AD8975E7C06B", 0 );
}

_id_98CF805EF4B19459()
{
    self setclothtype( "vestlight" );
    self _meth_8ABE5A968CC3C220( "millghtgr" );
}

initplayerdefaultsettings()
{
    self allowdoublejump( 0 );
    self allowwallrun( 0 );
    self _meth_28FB77BD5F1B2F91( 1 );
    player_movement_state();
    setcoverwarningcount( 4 );
    scripts\sp\player_stats::init_stats();
    initarmor();
}

_id_BE2F4B178DC1A453()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "weapon_change" );
        updateviewkickscale();
    }
}

_id_4D0A3CBA9DE1DB93()
{
    _id_BBC24B1F18A9A23A = 3;
    _id_1A2ABCEA976D90AF = self _meth_2583E4BC5ABCA7B5( "achievementWallOfDuty" );

    if ( _id_1A2ABCEA976D90AF >= _id_BBC24B1F18A9A23A )
        return;

    while ( _id_1A2ABCEA976D90AF < _id_BBC24B1F18A9A23A )
    {
        level waittill( "ai_killed", ai, attacker );

        if ( isdefined( ai ) && isdefined( attacker ) && attacker == self )
        {
            _id_0D3B1E28744413C1 = ai.damageweapon;

            if ( isdefined( _id_0D3B1E28744413C1 ) && isdefined( _id_0D3B1E28744413C1.type ) && _id_0D3B1E28744413C1.type == "riotshield" )
            {
                _id_1A2ABCEA976D90AF++;
                self _meth_8E232755197D2A79( "achievementWallOfDuty", _id_1A2ABCEA976D90AF );
            }
        }
    }

    scripts\sp\utility::giveachievement_wrapper( "wallofduty" );
}

_id_E690098D84B2F10E()
{
    self endon( "kills_while_flashbanged_achievement_get" );
    _id_F7A99A74FE828D31 = 2;

    for (;;)
    {
        self waittill( "flashbang" );
        thread _id_0F1BEFEF39D01C44( _id_F7A99A74FE828D31 );

        while ( scripts\engine\utility::isflashed() )
            waitframe();

        self notify( "flashbang_effect_over" );
    }
}

_id_0F1BEFEF39D01C44( _id_F7A99A74FE828D31 )
{
    self endon( "flashbang_effect_over" );
    _id_74A4EC0D5A200638 = 0;

    while ( _id_74A4EC0D5A200638 < _id_F7A99A74FE828D31 )
    {
        level waittill( "ai_killed", ai, attacker );

        if ( isdefined( attacker ) && attacker == self )
            _id_74A4EC0D5A200638++;
    }

    scripts\sp\utility::giveachievement_wrapper( "daredevil" );
    self notify( "kills_while_flashbanged_achievement_get" );
}

_id_60662CB06A77B4F1()
{
    _id_A3D04A824D0AAFC4 = self _meth_2583E4BC5ABCA7B5( "achievementGentlemanThief" );
    _id_5FBA8DC5CB193D59 = strtok( _id_A3D04A824D0AAFC4, ", " );
    _id_4EE28D08B61D0389 = 3;
    _id_9565EB852BEEB45C = _id_5FBA8DC5CB193D59.size;

    if ( _id_9565EB852BEEB45C >= _id_4EE28D08B61D0389 )
        return;

    while ( _id_9565EB852BEEB45C < _id_4EE28D08B61D0389 )
    {
        self waittill( "safe_unlocked", _id_2C45EA1B40D58764 );
        _id_ECDCA7CC78D57B13 = _id_2ED63158B46A6D6F::_id_8345560E22FE3B10( _id_2C45EA1B40D58764 );
        _id_A0D7216725066CF9 = 0;

        foreach ( _id_750834E0F9FEAE30 in _id_5FBA8DC5CB193D59 )
        {
            if ( _id_750834E0F9FEAE30 == _id_ECDCA7CC78D57B13 )
            {
                _id_A0D7216725066CF9 = 1;
                break;
            }
        }

        if ( !_id_A0D7216725066CF9 )
        {
            _id_9565EB852BEEB45C++;

            if ( _id_9565EB852BEEB45C == 1 )
                _id_A3D04A824D0AAFC4 = _id_ECDCA7CC78D57B13;
            else
                _id_A3D04A824D0AAFC4 = _id_A3D04A824D0AAFC4 + ", " + _id_ECDCA7CC78D57B13;

            self _meth_8E232755197D2A79( "achievementGentlemanThief", _id_A3D04A824D0AAFC4 );
            _id_5FBA8DC5CB193D59 = strtok( _id_A3D04A824D0AAFC4, ", " );
        }
    }

    scripts\sp\utility::giveachievement_wrapper( "gentlemanthief" );
}

getammonameamount( _id_0B470FEE63AB86E8 )
{
    amount = 0;

    foreach ( weapon in self getweaponslistprimaries() )
    {
        if ( getammoname( weapon ) == _id_0B470FEE63AB86E8 )
        {
            amount = self getweaponammostock( weapon );
            break;
        }
    }

    return amount;
}

getammonamemaxamount( _id_0B470FEE63AB86E8 )
{
    amount = 0;

    foreach ( weapon in self getweaponslistprimaries() )
    {
        if ( getammoname( weapon ) == _id_0B470FEE63AB86E8 )
        {
            if ( weapon.maxammo > amount )
                amount = weapon.maxammo;
        }
    }

    return amount;
}

setammonameamount( _id_0B470FEE63AB86E8, amount )
{
    foreach ( weapon in self getweaponslistprimaries() )
    {
        if ( getammoname( weapon ) == _id_0B470FEE63AB86E8 )
            self setweaponammostock( weapon, amount );
    }
}

getammoname( weapon )
{
    if ( !isdefined( weapon ) )
        return undefined;

    if ( isnullweapon( weapon ) )
        return undefined;

    _id_0B470FEE63AB86E8 = getweaponammopoolname( weapon );
    _id_0B470FEE63AB86E8 = attachmentammonamehack( _id_0B470FEE63AB86E8 );
    _id_0B470FEE63AB86E8 = localizeammonamehack( _id_0B470FEE63AB86E8 );
    return _id_0B470FEE63AB86E8;
}

localizeammonamehack( _id_0B470FEE63AB86E8 )
{
    if ( _id_0B470FEE63AB86E8 == "enum_0189D8E611430527" )
        return "enum_0189D8E611430527";
    else if ( _id_0B470FEE63AB86E8 == "enum_4E443C05848ABF2A" )
        return "enum_4E443C05848ABF2A";
    else if ( _id_0B470FEE63AB86E8 == "enum_3426BE7B6246D83A" )
        return "enum_3426BE7B6246D83A";
    else if ( _id_0B470FEE63AB86E8 == "enum_1C4243C41B2E739B" )
        return "enum_1C4243C41B2E739B";
    else if ( _id_0B470FEE63AB86E8 == "enum_71E5EEB8B03626C2" )
        return "enum_71E5EEB8B03626C2";

    return _id_0B470FEE63AB86E8;
}

attachmentammonamehack( _id_0B470FEE63AB86E8 )
{
    if ( _id_0B470FEE63AB86E8 == "enum_705639760EB6675F" || _id_0B470FEE63AB86E8 == "enum_239BBB480ED2E266" || _id_0B470FEE63AB86E8 == "enum_511997E94DE2E757" )
        return "enum_71E5EEB8B03626C2";

    return _id_0B470FEE63AB86E8;
}

goprohelmetprecache( _id_4B3E046F0AD700C1, overlay, _id_66C1FA3CB97E511D )
{
    if ( isdefined( _id_4B3E046F0AD700C1 ) )
    {
        precachemodel( _id_4B3E046F0AD700C1 );
        level.player.goprohelmet = _id_4B3E046F0AD700C1;
    }

    if ( isdefined( overlay ) )
    {
        precacheshader( overlay );
        level.player.goprooverlay = newclienthudelem( level.player );
        level.player.goprooverlay.sort = 0;
        level.player.goprooverlay.foreground = 0;
        level.player.goprooverlay.horzalign = "fullscreen";
        level.player.goprooverlay.vertalign = "fullscreen";
        level.player.goprooverlay.alpha = 0;
        level.player.goprooverlay.enablehudlighting = 1;
        level.player.goprooverlay setshader( overlay, 640, 480 );
    }

    level.player.goprovision = _id_66C1FA3CB97E511D;
}

goprotest()
{
    level.player thread goproplayerthread();
}

goproplayerthread()
{
    self endon( "death" );
    _id_B403EA6DFEEF1DC5 = "dpad_right";

    for (;;)
    {
        buttondebounce( _id_B403EA6DFEEF1DC5 );
        thread goprohelmet();
        buttondebounce( _id_B403EA6DFEEF1DC5 );
        thread gopronone();
    }
}

goprohelmet()
{
    self notify( "new_Gopro" );
    helmet = undefined;
    goprocamerasettings( 1 );
    _id_E67F0EE2F2905FE4 = ( 0, 0, 0 );
    _id_FCF01B4AC5E877CF = ( -3, -1, 5 ) + _id_E67F0EE2F2905FE4;
    _id_17E4B67AF685B8B6 = ( 10, 5, -10 ) + _id_E67F0EE2F2905FE4;

    if ( isdefined( self.goprohelmet ) )
    {
        helmet = spawn( "script_model", self.origin );
        helmet setmodel( self.goprohelmet );
        helmet _meth_A783F8C0603B0844( self, "tag_origin", _id_17E4B67AF685B8B6, ( -90, 90, 0 ), 1, "view_jostle" );
    }

    self waittill( "new_Gopro" );

    if ( isdefined( helmet ) )
        helmet delete();
}

gopronone()
{
    goprocamerasettings( 0 );
    self notify( "new_Gopro" );
}

goprocamerasettings( state )
{
    if ( state )
    {
        level.player _meth_1D98630AA343510D( 85, 0.05 );
        setsaveddvar( "dvar_DF1DC712C4A91588", 85 );

        if ( isdefined( self.goprovision ) )
            visionsetfadetoblack( self.goprovision, 0.0 );

        if ( isdefined( self.goprooverlay ) )
            self.goprooverlay.alpha = 1;

        givegoproattachments();
        setsaveddvar( "dvar_ED28298C207316AE", 0.1585 );
        setsaveddvar( "dvar_979B5474BE3B9B47", -0.478 );
        setsaveddvar( "dvar_960EF00238357BBC", 0.014 );
        setsaveddvar( "dvar_83BBE73116F488D6", 1 );
        setsaveddvar( "dvar_C533867AC3FDC690", 6 );
        setsaveddvar( "dvar_94D94E451D01DA61", 8 );
        setsaveddvar( "dvar_D026A87A69C3281C", 2 );
        setsaveddvar( "dvar_D50A0278D87CA09D", 2.1 );
        setsaveddvar( "dvar_EA4C44A08CD23D5D", 2 );
        setomnvar( "ui_hide_hud", 1 );
        setsaveddvar( "dvar_5D474D39E096F8F1", 0 );
    }
    else
    {
        level.player _meth_1D98630AA343510D( 65, 0.05 );
        setsaveddvar( "dvar_DF1DC712C4A91588", 65 );

        if ( isdefined( self.goprovision ) )
            visionsetfadetoblack( "", 0.0 );

        if ( isdefined( self.goprooverlay ) )
            self.goprooverlay.alpha = 0;

        takegoproattachments();
        setsaveddvar( "dvar_ED28298C207316AE", 0 );
        setsaveddvar( "dvar_979B5474BE3B9B47", 0 );
        setsaveddvar( "dvar_960EF00238357BBC", 0 );
        setsaveddvar( "dvar_83BBE73116F488D6", 0 );
        setsaveddvar( "dvar_94D94E451D01DA61", 1 );
        setsaveddvar( "dvar_C533867AC3FDC690", 1 );
        setsaveddvar( "dvar_D026A87A69C3281C", 1 );
        setsaveddvar( "dvar_D50A0278D87CA09D", 1 );
        setsaveddvar( "dvar_EA4C44A08CD23D5D", 1 );
        setomnvar( "ui_hide_hud", 0 );
        setsaveddvar( "dvar_5D474D39E096F8F1", 1 );
    }
}

givegoproattachments()
{
    if ( isdefined( self.goprohasattachments ) )
        return;

    currentweapon = self.currentweapon;
    weapons = self.primaryinventory;

    foreach ( weapon in weapons )
    {
        attachments = weapon.attachments;
        attachments = scripts\engine\utility::array_add( attachments, "gopro_no_ads" );
        attachments = scripts\engine\utility::alphabetize( attachments );
        _id_DD515FCF025B2E79 = scripts\sp\utility::make_weapon( getweaponbasename( weapon ), attachments );
        self takeweapon( weapon );
        self giveweapon( _id_DD515FCF025B2E79 );
    }

    switchtoweaponwithbasename( currentweapon );
    self.goprohasattachments = 1;
}

takegoproattachments()
{
    if ( !isdefined( self.goprohasattachments ) )
        return;

    currentweapon = self.currentweapon;
    weapons = self.primaryinventory;

    foreach ( weapon in weapons )
    {
        attachments = weapon.attachments;
        attachments = scripts\engine\utility::array_remove( attachments, "gopro_no_ads" );
        attachments = scripts\engine\utility::alphabetize( attachments );
        _id_DD515FCF025B2E79 = scripts\sp\utility::make_weapon( getweaponbasename( weapon ), attachments );
        self takeweapon( weapon );
        self giveweapon( _id_DD515FCF025B2E79 );
    }

    switchtoweaponwithbasename( currentweapon );
    self.goprohasattachments = undefined;
}

switchtoweaponwithbasename( _id_A1C804FFA2416774 )
{
    weapons = self.primaryinventory;

    foreach ( weapon in weapons )
    {
        if ( getweaponbasename( weapon ) == getweaponbasename( _id_A1C804FFA2416774 ) )
        {
            self switchtoweaponimmediate( weapon );
            break;
        }
    }
}

buttondebounce( button )
{
    while ( !level.player buttonpressed( button ) )
        wait 0.05;

    while ( level.player buttonpressed( button ) )
        wait 0.05;
}

ladderpistol()
{
    setsaveddvar( "dvar_FFA1D49CDAF6B1D1", 1 );
    setsaveddvar( "dvar_CB9877BB7C7C0AA7", 1 );
}

managereloadammo( _id_D0BD91DD014DEBFC )
{
    _id_B56CA02611905136 = self getweaponammoclip( _id_D0BD91DD014DEBFC );
    _id_C89B9DBD286AFCAB = weaponclipsize( _id_D0BD91DD014DEBFC );
    _id_D1AD88BF84DAA67F = self getammocount( _id_D0BD91DD014DEBFC ) - _id_B56CA02611905136;
    _id_1EED17DDCD10F1A9 = _id_C89B9DBD286AFCAB - _id_B56CA02611905136;
    _id_D1AD88BF84DAA67F = _id_D1AD88BF84DAA67F - _id_1EED17DDCD10F1A9;
    self setweaponammostock( _id_D0BD91DD014DEBFC, _id_D1AD88BF84DAA67F );
    self setweaponammoclip( _id_D0BD91DD014DEBFC, _id_C89B9DBD286AFCAB );
}

playeraltweapon()
{
    _id_9972F570B44A771E();
    _id_3B64EB40368C1450::_id_7372010B17478CDC( "weapon_alt_mode", 1, 1, "$self", ::_id_9972F570B44A771E, "$value" );
}

_id_9972F570B44A771E( enabled )
{
    if ( !isdefined( enabled ) )
        enabled = 1;

    if ( enabled )
        self setactionslot( 3, "altMode" );
    else
        self setactionslot( 3, "" );
}

playerdamagemain()
{
    updatedamageindicatortype();
    thread ondamagecallbacks();
}

armorbroke()
{
    return scripts\engine\utility::ter_op( self.hadarmor && !hasarmor(), 1, 0 );
}

ondamagecallbacks()
{
    self.lasthealth = self.health;
    self.damage_functions = [];

    for (;;)
    {
        self.hadarmor = hasarmor();
        self waittill( "damage", damage, attacker, direction, point, type, _id_DDD80F5D1DA23C60, _id_DDD80F5D1DA23C60, partname, _id_DDD80F5D1DA23C60, objweapon, _id_DDD80F5D1DA23C60, _id_DDD80F5D1DA23C60, _id_DDD80F5D1DA23C60, inflictor );

        if ( !isalive( self ) )
        {
            thread ondeathfinalhit( attacker, type, damage );
            break;
        }

        self.dmgtoplayer = damage;
        self.dmgpoint = point;
        _id_7178D1AB6020C7C2 = self [[ self.damage.fndispersedamage ]]( damage, attacker, direction, point, type, objweapon, inflictor );
        ondamagecallbackthread( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 );
        thread scripts\sp\analytics::_id_9EB39CB364485A98( attacker, objweapon, damage, type, partname );
        _id_D01B876144E4E278();
    }
}

_id_D01B876144E4E278()
{
    if ( self.health > 0 && self.health < 2 )
        set_normalhealth( 2 / self.maxhealth );
}

ondamagecallbackthread( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 )
{
    self endon( "death" );

    foreach ( function in [[ self.damage.fndamagefunctions ]]( type ) )
        self childthread [[ function ]]( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 );

    foreach ( function in self.damage_functions )
        self childthread [[ function ]]( damage, attacker, direction, point, type, _id_7178D1AB6020C7C2, inflictor );
}

ondeathfinalhit( attacker, type, damage )
{
    if ( type != "MOD_FIRE" )
        thread damagebloodoverlaydirectional( attacker.origin, type, 60 );

    thread deathsdooroverlaypulsefinal();
}

damagefunctions( type )
{
    switch ( type )
    {
        case "MOD_FIRE":
            return [ ::damagefire, ::regeneratehealth ];
        default:
            return [ ::defaultdamagenotify, ::shouldkillimmediatly, ::damageinvulnerability, ::deathshieldinvulnerability, ::regeneratehealth, ::damageeffects, ::damageui ];
    }
}

defaultdamagenotify( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 )
{
    self notify( "defaultDamage" );
}

dispersedamage( damage, attacker, direction, point, type, objweapon, inflictor )
{
    damage = handleexplosivedamage( damage, type, objweapon );

    if ( hasarmor() && armorprotectsdamagetype( type, objweapon ) )
    {
        _id_A9CAE67860FD8114 = min( getarmoramount(), getarmormaxamount() );
        _id_28CF4EEF990E82F5 = 1 - getarmoramount() / getarmormaxamount();
        _id_A5A0FEEFF8C55B25 = scripts\engine\math::factor_value( self.gs.armordamagetohealthratiomin, self.gs.armordamagetohealthratiomax, _id_28CF4EEF990E82F5 );
        _id_1F64448B420572A4 = min( damage, _id_A9CAE67860FD8114 );
        _id_94DF9D4CF117C6DF = _id_1F64448B420572A4 * _id_A5A0FEEFF8C55B25;
        _id_80A8390CD1D9716F = damage - _id_A9CAE67860FD8114;

        if ( _id_80A8390CD1D9716F > 0 )
        {
            _id_DDF0CB2B266DA061 = self.gs.damagemultiplierhealth / self.gs.damagemultiplierarmor;
            _id_80A8390CD1D9716F = _id_80A8390CD1D9716F * _id_DDF0CB2B266DA061;
        }
        else
            _id_80A8390CD1D9716F = 0;

        _id_94DF9D4CF117C6DF = _id_94DF9D4CF117C6DF + _id_80A8390CD1D9716F;
        _id_E18EA3FD06B72642 = clamp( _id_A9CAE67860FD8114 - _id_1F64448B420572A4, 0, getarmormaxamount() );
        setarmoramount( _id_E18EA3FD06B72642 );
    }
    else if ( type == "MOD_FIRE" )
    {
        _id_5449479083A8D76C = 3.5;
        _id_94DF9D4CF117C6DF = 0;
        firedamage = damage * ( 1 / self.damagemultiplier );

        if ( firedamage < _id_5449479083A8D76C )
            firedamage = _id_5449479083A8D76C;

        self.damage.firedamage = self.damage.firedamage + firedamage * getfireengulfrate();
        self.damage.firedamage = min( self.damage.firedamage, 100 );
    }
    else if ( shouldflashinvul( type ) )
        _id_94DF9D4CF117C6DF = 0;
    else
        _id_94DF9D4CF117C6DF = damage;

    _id_7178D1AB6020C7C2 = max( _id_94DF9D4CF117C6DF - self.lasthealth, 0 );

    if ( !istrue( self._id_91921C3AE8981DE2 ) && isspreadweapon( objweapon ) && self.lasthealth > self.maxhealth * 0.8 )
        _id_7178D1AB6020C7C2 = 0;

    _id_83C87E7E2846EDD5 = clamp( self.lasthealth - _id_94DF9D4CF117C6DF, 1, self.maxhealth );

    if ( _id_83C87E7E2846EDD5 )
        set_normalhealth( _id_83C87E7E2846EDD5 / self.maxhealth );

    return _id_7178D1AB6020C7C2;
}

handleexplosivedamage( damage, type, objweapon )
{
    if ( !isexplosivedamage( type ) )
        return damage;

    if ( isdefined( objweapon ) && isdefined( objweapon.basename ) && objweapon.basename == "flash" )
        return 0;

    return damage * self.gs.damagemultiplierexplosive;
}

shouldflashinvul( type )
{
    _id_6782AF819BEEE3A6 = [ "MOD_RIFLE_BULLET", "MOD_PISTOL_BULLET" ];

    if ( isdefined( self.flashinvul ) && scripts\engine\utility::array_contains( _id_6782AF819BEEE3A6, type ) )
        return 1;

    return 0;
}

damagefire( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 )
{
    self notify( "damage_fire" );
    self endon( "damage_fire" );

    if ( !damageflag( 32 ) )
        thread setplayeronfire( attacker, inflictor );

    if ( !damageflag( 16 ) )
        thread setplayerinfire();

    wait 0.1;

    if ( damageflag( 16 ) )
        thread setplayeroutoffire();

    lerpoutfireintensity();

    if ( damageflag( 32 ) )
        thread setplayerofffire();
}

firehealth( attacker, inflictor )
{
    self endon( "death" );
    self endon( "damage_fire_off" );
    wait 0.05;
    timer = 0;
    _id_5326EEA0B75326AB = self.damage.firehealth;

    for (;;)
    {
        deathtime = getfireinvulseconds();

        if ( self.damage.firedamage >= 100 )
            timer = timer + 0.05;
        else
            timer = timer - 0.05;

        timer = clamp( timer, 0, deathtime );
        _id_5326EEA0B75326AB = ( 1 - timer / deathtime ) * 100;
        _id_5326EEA0B75326AB = clamp( _id_5326EEA0B75326AB, 0, 100 );
        self.damage.firehealth = scripts\engine\math::round_float( _id_5326EEA0B75326AB, 0 );

        if ( self.damage.firehealth == 0 )
            killplayer( attacker, "MOD_FIRE", inflictor, "fire" );

        waitframe();
    }
}

setplayeronfire( attacker, inflictor )
{
    setdamageflag( 32, 1 );
    thread firehealth( attacker, inflictor );
    thread firedamagefx();
}

setplayerofffire()
{
    self notify( "damage_fire_off" );
    setdamageflag( 32, 0 );
    firedamagefxoff();
}

setplayerinfire()
{
    setdamageflag( 16, 1 );
    thread firedamagegesture();
}

setplayeroutoffire()
{
    setdamageflag( 16, 0 );
    firedamagegesturesoff();
}

firedamagegesture()
{
    if ( !shouldplayfiregesture() )
        return;

    level.player forceplaygestureviewmodel( "ges_player_onfire", undefined, 0.75 );
    level.player _id_3B64EB40368C1450::set( "onfire", "ads", 0 );
    level.player _id_3B64EB40368C1450::set( "onfire", "reload", 0 );
    level.player _id_3B64EB40368C1450::set( "onfire", "autoreload", 0 );
    level.player.firegesture = 1;
}

firedamagegesturesoff()
{
    if ( !isdefined( level.player.firegesture ) )
        return;

    level.player stopgestureviewmodel( "ges_player_onfire", 0.5, 0 );
    level.player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "onfire" );
    level.player.firegesture = undefined;
}

shouldplayfiregesture()
{
    if ( level.player isthrowinggrenade() )
        return 0;

    if ( level.player islinked() )
        return 0;

    if ( !level.player _meth_612B2399AD736947() )
        return 0;

    if ( level.player isonladder() )
        return 0;

    if ( !level.player _id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "weapon" ) )
        return 0;

    return 1;
}

initfirevfxent()
{
    self.damage.firevfx = scripts\engine\utility::spawn_tag_origin();
    self.damage.firevfx _id_A0988F4B4D0099F5( ( 50, 0, 0 ) );
    thread firedamagevfxintensitythink( self.damage.firevfx );
}

initfirefxrumbleent()
{
    self.damage.firerumble = scripts\engine\sp\utility::get_rumble_ent();
}

initfiresfxfire()
{
    self.damage.firesfx = scripts\engine\utility::spawn_script_origin();
    self.damage.firesfx _id_A0988F4B4D0099F5();
    self.damage.firesfx playloopsound( "fire_damage" );
    self.damage.firesfx _meth_F4604329F388A96F( 0, 0 );
    self.damage.firesfx _meth_D467F33E1B8AEDD1( 0, 0 );
}

initfiresfxdrone()
{
    self.damage.firedronesfx = scripts\engine\utility::spawn_script_origin();
    self.damage.firedronesfx _id_A0988F4B4D0099F5();
    self.damage.firedronesfx playloopsound( "fire_damage_drone" );
    self.damage.firedronesfx _meth_F4604329F388A96F( 0, 0 );
    self.damage.firedronesfx _meth_D467F33E1B8AEDD1( 0, 0 );
}

initfiresfxsmolder()
{
    self.damage.firesmolsfx = scripts\engine\utility::spawn_script_origin();
    self.damage.firesmolsfx _id_A0988F4B4D0099F5();
    self.damage.firesmolsfx playloopsound( "fire_damage_smolder" );
    self.damage.firesmolsfx _meth_F4604329F388A96F( 0, 0 );
    self.damage.firesmolsfx _meth_D467F33E1B8AEDD1( 0, 0 );
}

_id_A0988F4B4D0099F5( _id_59325D95A0D5D0A7, _id_A8D22612EDC48539 )
{
    if ( level.player.model == "" )
    {
        _id_F4DB9D1619709BA7 = level.player getlinkedparent();

        if ( isdefined( _id_F4DB9D1619709BA7 ) )
        {
            if ( _id_F4DB9D1619709BA7 tagexists( "tag_origin" ) )
            {
                self linkto( _id_F4DB9D1619709BA7, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
                return;
            }

            return;
        }

        return;
    }
    else
    {
        origin_offset = scripts\engine\utility::ter_op( isdefined( _id_59325D95A0D5D0A7 ), _id_59325D95A0D5D0A7, ( 0, 0, 0 ) );
        angles_offset = scripts\engine\utility::ter_op( isdefined( _id_A8D22612EDC48539 ), _id_A8D22612EDC48539, ( 0, 0, 0 ) );
        self linkto( level.player, "tag_origin", origin_offset, angles_offset );
    }
}

firedamagefx()
{
    self endon( "damage_fire_off" );

    if ( !isdefined( self.damage.firevfx ) )
        initfirevfxent();

    if ( !isdefined( self.damage.firerumble ) )
        initfirefxrumbleent();

    if ( !isdefined( self.damage.firesfx ) )
        initfiresfxfire();

    if ( !isdefined( self.damage.firedronesfx ) )
        initfiresfxdrone();

    if ( !isdefined( self.damage.firesmolsfx ) )
        initfiresfxsmolder();

    if ( !isdefined( self.damage.firedamageoverlay ) )
        initfiredamageoverlay();

    if ( !isdefined( self.damage.firepainoverlay ) )
        initfirepainoverlay();

    _id_7F95907716AB9868 = 0;
    _id_E3128FC679E209DA = 0.1;
    _id_8835C8515B73D615 = 0;

    for (;;)
    {
        waittillframeend;
        _id_2B94D16E93114A0F = firedamageratio();
        self.damage.firepainoverlay.alpha = scripts\engine\math::factor_value( 0.45, 1.0, _id_2B94D16E93114A0F );

        if ( damageflag( 16 ) )
        {
            _id_7F95907716AB9868 = _id_2B94D16E93114A0F;

            if ( !_id_8835C8515B73D615 )
            {
                playfxontag( level.g_effect["player_onfire_ignite"], self.damage.firevfx, "tag_origin" );
                thread scripts\engine\utility::play_sound_in_space( "fire_damage_start", level.player.origin );
                earthquake( 0.2, 0.4, level.player.origin, 2000 );
                level.player playrumbleonentity( "damage_light" );
                _id_8835C8515B73D615 = 1;
            }
        }
        else
        {
            _id_7F95907716AB9868 = _id_7F95907716AB9868 - _id_E3128FC679E209DA;
            _id_7F95907716AB9868 = max( 0, _id_7F95907716AB9868 );

            if ( _id_8835C8515B73D615 )
            {
                playfxontag( level.g_effect["player_offfire_extinguish"], self.damage.firevfx, "tag_origin" );
                thread scripts\engine\utility::play_sound_in_space( "fire_damage_stop", level.player.origin );
                earthquake( 0.1, 0.4, level.player.origin, 2000 );
                level.player playrumbleonentity( "damage_light" );
                _id_8835C8515B73D615 = 0;
            }
        }

        self.damage.firedamageoverlay.alpha = scripts\engine\math::factor_value( 0.45, 1.0, _id_7F95907716AB9868 );
        self.damage.firerumble.intensity = scripts\engine\math::factor_value( 0.0, 0.8, _id_7F95907716AB9868 );
        _id_7AE8EAF92080FFC9 = scripts\engine\math::factor_value( 0.02, 0.15, _id_7F95907716AB9868 );
        earthquake( _id_7AE8EAF92080FFC9, 0.2, level.player.origin, 2000 );
        _id_F29342DC9A3C1C9D = scripts\engine\math::factor_value( 0.0, -0.01, _id_7F95907716AB9868 );
        _id_9CB09B5DA738E30B = scripts\engine\math::factor_value( 0.0, 0.02, _id_7F95907716AB9868 );
        setsaveddvar( "dvar_ED28298C207316AE", _id_F29342DC9A3C1C9D );
        setsaveddvar( "dvar_960EF00238357BBC", _id_9CB09B5DA738E30B );
        _id_E8969EFF0DCB80FD = scripts\engine\math::factor_value( 0.0, 1.1, _id_7F95907716AB9868 * _id_7F95907716AB9868 );
        _id_3CE42A7C66ACBA32 = scripts\engine\math::factor_value( 1.7, 2.0, _id_7F95907716AB9868 );
        self.damage.firedronesfx _meth_F4604329F388A96F( _id_E8969EFF0DCB80FD, 0.05 );
        self.damage.firedronesfx _meth_D467F33E1B8AEDD1( _id_3CE42A7C66ACBA32, 0.05 );
        _id_01CFA0BC4BD6EDCD = scripts\engine\math::factor_value( 0.0, 1.7, _id_7F95907716AB9868 );
        _id_1E74A1A90A92FC62 = scripts\engine\math::factor_value( 0.8, 1.2, _id_7F95907716AB9868 );
        self.damage.firesfx _meth_F4604329F388A96F( _id_01CFA0BC4BD6EDCD, 0.05 );
        self.damage.firesfx _meth_D467F33E1B8AEDD1( _id_1E74A1A90A92FC62, 0.05 );
        _id_778089FDAADA72DD = scripts\engine\math::factor_value( 0.2, 1.1, _id_2B94D16E93114A0F );
        _id_914418BF31FCA312 = scripts\engine\math::factor_value( 0.7, 1.3, _id_2B94D16E93114A0F );
        self.damage.firesmolsfx _meth_F4604329F388A96F( _id_778089FDAADA72DD, 0.05 );
        self.damage.firesmolsfx _meth_D467F33E1B8AEDD1( _id_914418BF31FCA312, 0.05 );
        waitframe();
    }
}

firedamagevfxintensitythink( fxent )
{
    fxent endon( "death" );
    currentfx = "";

    for (;;)
    {
        waittillframeend;

        if ( damageflag( 16 ) )
            _id_81BAB638C7E4118D = getonfirevfxnames();
        else
            _id_81BAB638C7E4118D = getofffirevfxnames();

        _id_C59C1D18B26C886E = _id_81BAB638C7E4118D.size;
        _id_00EAF207B6398239 = scripts\engine\math::round_float( firedamageratio() * _id_C59C1D18B26C886E, 0, 1 );
        _id_00EAF207B6398239 = min( _id_00EAF207B6398239, _id_C59C1D18B26C886E - 1 );
        _id_00EAF207B6398239 = int( _id_00EAF207B6398239 );
        _id_61E929FA0A9F22CF = _id_81BAB638C7E4118D[_id_00EAF207B6398239];

        if ( currentfx != _id_61E929FA0A9F22CF )
        {
            if ( currentfx != "" )
                stopfxontag( level.g_effect[currentfx], fxent, "tag_origin" );

            playfxontag( level.g_effect[_id_61E929FA0A9F22CF], fxent, "tag_origin" );
            currentfx = _id_61E929FA0A9F22CF;
        }

        waitframe();
    }
}

getonfirevfxnames()
{
    return [ "player_onfire_small", "player_onfire_med", "player_onfire_large" ];
}

getofffirevfxnames()
{
    return [ "player_offfire_small", "player_offfire_med", "player_offfire_large" ];
}

firedamagefxoff()
{
    self.damage.firevfx delete();
    self.damage.firerumble delete();
    thread fadeoverlayanddestroy( self.damage.firedamageoverlay, 1 );
    thread fadeoverlayanddestroy( self.damage.firepainoverlay, 1 );
    thread fadesoundanddelete( self.damage.firesfx, 1 );
    thread fadesoundanddelete( self.damage.firedronesfx, 1 );
    thread fadesoundanddelete( self.damage.firesmolsfx, 1 );
    thread removeradialdistortion( 0.5 );
}

fadesoundanddelete( soundent, _id_F69BA8D7B96E8326 )
{
    self endon( "damage_fire" );

    if ( !isdefined( soundent ) )
        return;

    soundent _meth_F4604329F388A96F( 0, _id_F69BA8D7B96E8326 );
    wait( _id_F69BA8D7B96E8326 );

    if ( !isdefined( soundent ) )
        return;

    soundent delete();
}

fadeoverlayanddestroy( overlay, _id_F69BA8D7B96E8326 )
{
    self endon( "damage_fire" );

    if ( !isdefined( overlay ) )
        return;

    overlay fadeovertime( _id_F69BA8D7B96E8326 );
    overlay.alpha = 0;
    wait( _id_F69BA8D7B96E8326 );

    if ( !isdefined( overlay ) )
        return;

    overlay destroy();
}

removefiredamageimmediate()
{
    if ( !damageflag( 32 ) )
        return;

    self notify( "damage_fire" );
    self.damage.firedamage = 0;

    if ( damageflag( 16 ) )
        setplayeroutoffire();

    setplayerofffire();
}

lerpoutfireintensity()
{
    self endon( "damage_fire" );
    _id_4D3F9F539B56BB0A = self.damage.firedamage;
    _id_79D78DD32C9EAA49 = level.player.origin;

    while ( self.damage.firedamage > 0 )
    {
        _id_0325C218EF7185F4 = length( _id_79D78DD32C9EAA49 - level.player.origin );
        _id_0FB7FBD10123A25D = scripts\engine\math::normalize_value( 0, 10, _id_0325C218EF7185F4 );
        _id_840530BC60C032EC = scripts\engine\math::factor_value( 3.5, 3.5, _id_0FB7FBD10123A25D );
        _id_24010786BCC872D5 = 0.05 * ( 100 / _id_840530BC60C032EC );
        _id_4D3F9F539B56BB0A = _id_4D3F9F539B56BB0A - _id_24010786BCC872D5;
        _id_4D3F9F539B56BB0A = clamp( _id_4D3F9F539B56BB0A, 0, 100 );
        self.damage.firedamage = scripts\engine\math::round_float( _id_4D3F9F539B56BB0A, 0 );
        _id_79D78DD32C9EAA49 = level.player.origin;
        wait 0.05;
    }
}

killplayer( attacker, type, inflictor, _id_401C3A2E68AAB0FD, amount, objweapon )
{
    if ( !_id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "death" ) )
        return;

    self _meth_28FB77BD5F1B2F91( 0 );
    self disableinvulnerability();

    if ( isdefined( objweapon ) )
        self._id_6BFFFD053A4AE383 = objweapon;

    if ( isdefined( inflictor ) && isdefined( type ) )
        self kill( self.origin, attacker, inflictor, type );
    else if ( isdefined( inflictor ) )
        self kill( self.origin, attacker, inflictor );
    else if ( isdefined( type ) )
        self kill( self.origin, attacker, attacker, type );
    else
        self kill( self.origin, attacker );
}

armorprotectsdamagetype( type, objweapon )
{
    if ( type == "MOD_MELEE" )
        return 0;

    if ( type == "MOD_FALLING" )
        return 0;

    if ( type == "MOD_TRIGGER_HURT" )
        return 0;

    if ( type == "MOD_FIRE" )
        return 0;

    return 1;
}

shouldkillimmediatly( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 )
{
    if ( shouldoverkill( _id_7178D1AB6020C7C2, type ) )
        killplayer( attacker, type, inflictor, "Excessive Damage", _id_7178D1AB6020C7C2, objweapon );

    if ( shouldkillmelee( attacker, type, inflictor ) )
        killplayer( attacker, type, inflictor, "Melee'd while Deathsheild" );

    if ( _id_2F4EBA16F43DE70D( attacker, type, inflictor ) )
        killplayer( attacker, type, inflictor, "Explosion damage while Deathsheild" );

    if ( shouldkillfalling( damage, type ) )
        killplayer( attacker, type, inflictor, "Fell too far", damage );
}

shouldoverkill( damage, type )
{
    if ( self.health != 1 )
        return 0;

    if ( isexplosivedamage( type ) )
        _id_DF98AA3C3ABBF0B2 = 1;
    else
        _id_DF98AA3C3ABBF0B2 = self.damagemultiplier;

    if ( damage < 100 * _id_DF98AA3C3ABBF0B2 )
        return 0;

    return 1;
}

shouldkillmelee( attacker, type, inflictor )
{
    if ( damageflag( 1 ) && type == "MOD_MELEE" )
        return 1;

    return 0;
}

_id_2F4EBA16F43DE70D( attacker, type, inflictor )
{
    _id_708E6B05C3EE97E1 = [ "MOD_PROJECTILE", "MOD_PROJECTILE_SPLASH", "MOD_EXPLOSIVE", "MOD_GRENADE", "MOD_GRENADE_SPLASH" ];

    if ( damageflag( 1 ) && scripts\engine\utility::array_contains( _id_708E6B05C3EE97E1, type ) )
        return 1;

    return 0;
}

shouldkillfalling( damage, type )
{
    if ( !isdefined( type ) )
        return 0;

    return type == "MOD_FALLING" && damage == 100;
}

damageinvulnerability( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 )
{
    if ( !shoulddodamageinvulnerabilty() )
        return;

    _id_22F1590673800ED7 = getinvultime();
    enabledamageinvulnerability();
    wait( _id_22F1590673800ED7 );
    disabledamageinvulnerability();
}

shoulddodamageinvulnerabilty()
{
    if ( scripts\engine\utility::ent_flag( "player_zero_attacker_accuracy" ) )
        return 0;

    if ( self.health == 1 )
        return 0;

    if ( damageflag( 1 ) )
        return 0;

    return 1;
}

getinvultime()
{
    return self.gs.invultime_ondamage;
}

deathshieldinvulnerability( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 )
{
    if ( !shouldactivatedeathshield() )
        return;

    _id_E6D2E0C60AC02585 = getdeathsshieldduration();
    _id_ACEAB7F4A1E5C8C3 = getdeathsdoorduration();
    setdamageflag( 1, 1 );
    enabledamageinvulnerability();
    enabledeathsdoor();
    wait( _id_E6D2E0C60AC02585 );
    _id_A40CCF7BB77CD395 = getdvar( "dvar_DE79E5C6B8A17221" );

    if ( _id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "death" ) )
    {
        self _meth_28FB77BD5F1B2F91( 0 );
        _id_07BBD079186A8290 = getdvarint( "dvar_18E2DDA6AAF07DC3", 375 );
        setsaveddvar( "dvar_DE79E5C6B8A17221", int( _id_07BBD079186A8290 - 1 ) );
    }

    setdamageflag( 1, 0 );
    disabledamageinvulnerability();
    wait( _id_ACEAB7F4A1E5C8C3 );
    disabledeathsdoor();
    self _meth_28FB77BD5F1B2F91( 1 );
    setsaveddvar( "dvar_DE79E5C6B8A17221", int( _id_A40CCF7BB77CD395 ) );
}

getdeathsdoorduration()
{
    return self.gs.deathsdoorduration;
}

getdeathsshieldduration()
{
    return self.gs.invultime_deathshieldduration * self.gs.scripteddeathshielddurationscale;
}

enabledeathsdoor()
{
    setdamageflag( 2, 1 );
    thread scripts\sp\audio::set_deathsdoor();
    _id_71582F98FDAAD45B = 0.5;
    _id_A29C5118C5608DB6 = getdeathsshieldduration() + getdeathsdoorduration() + gethealthregentime() - _id_71582F98FDAAD45B;
    thread deathsdooroverlaypulse( _id_A29C5118C5608DB6 );
    _id_F69BA8D7B96E8326 = 0.5;
    holdtime = _id_A29C5118C5608DB6 - _id_F69BA8D7B96E8326;
    thread bloodoverlay( 1, holdtime, _id_F69BA8D7B96E8326 );
    updatedeathsdoorvisionset();
    self painvisionon();
}

updatedeathsdoorvisionset()
{
    if ( !damageflag( 2 ) )
        return 0;

    if ( level.player isnightvisionon() )
    {
        if ( isdefined( self.damage._id_85B4A9B6802B3A0F ) )
            visionsetpain( self.damage._id_85B4A9B6802B3A0F );
        else
            visionsetpain( "damage_deathsdoor_nvg" );
    }
    else if ( isdefined( self.damage._id_94AFCF2EBC7B6F48 ) )
        visionsetpain( self.damage._id_94AFCF2EBC7B6F48 );
    else
        visionsetpain( "damage_deathsdoor" );
}

disabledeathsdoor( _id_5E0065A1DC2434B6 )
{
    self notify( "disableDeathsDoor" );
    self endon( "disableDeathsDoor" );

    if ( !isdefined( _id_5E0065A1DC2434B6 ) )
        _id_5E0065A1DC2434B6 = 0;

    if ( !_id_5E0065A1DC2434B6 )
    {
        _id_6A325AD88DFA8BA1 = gethealthregentime();
        thread scripts\sp\audio::restore_after_deathsdoor( _id_6A325AD88DFA8BA1 * 0.2 );
    }
    else
        _id_6A325AD88DFA8BA1 = 0.0;

    _id_3B0606A6C467A8AA = getvisionlerprate( _id_6A325AD88DFA8BA1 );
    setsaveddvar( "dvar_E42B132626B5992B", _id_3B0606A6C467A8AA );
    self painvisionoff();
    setdamageflag( 2, 0 );
}

lerpdeathsdoorpulsenorm( _id_D75DFE2C8B34F282 )
{
    self notify( "lerpDeathsDoorNorm" );
    self endon( "lerpDeathsDoorNorm" );
    self endon( "death" );
    timer = _id_D75DFE2C8B34F282;
    self.deathsdoorpulsenorm = 1;

    while ( timer > 0 )
    {
        self.deathsdoorpulsenorm = scripts\engine\math::normalize_value( 0, _id_D75DFE2C8B34F282, timer );
        self.deathsdoorpulsenorm = scripts\engine\math::normalized_float_smooth_out( self.deathsdoorpulsenorm );
        timer = timer - 0.05;
        waitframe();
    }

    self.deathsdoorpulsenorm = 0;
}

enabledamageinvulnerability()
{
    scripts\engine\utility::ent_flag_set( "player_zero_attacker_accuracy" );
    self.attackeraccuracy = 0;
    self.ignorerandombulletdamage = 1;
}

disabledamageinvulnerability()
{
    scripts\engine\utility::ent_flag_clear( "player_zero_attacker_accuracy" );
    scripts\sp\gameskill::update_player_attacker_accuracy();
}

shouldactivatedeathshield()
{
    if ( self.health != 1 )
        return 0;

    if ( damageflag( 1 ) )
        return 0;

    if ( damageflag( 2 ) )
        return 0;

    return 1;
}

regeneratehealth( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 )
{
    self endon( "damage" );
    self endon( "armorUseSuccess" );

    if ( !canregenhealth() )
        return;

    _id_C9D3262A60835C51 = gethealthregendelay();
    wait( _id_C9D3262A60835C51 );

    while ( damageflag( 2 ) || damageflag( 32 ) )
        waitframe();

    _id_83C87E7E2846EDD5 = self.health;

    while ( self.health < self.maxhealth )
    {
        _id_024493F7B31ECFBD = gethealthregenpersecond();
        _id_C2DC95DA0D5F4AEB = _id_024493F7B31ECFBD * 0.05;
        _id_83C87E7E2846EDD5 = clamp( _id_83C87E7E2846EDD5 + _id_C2DC95DA0D5F4AEB, 0, self.maxhealth );
        set_normalhealth( _id_83C87E7E2846EDD5 / self.maxhealth );
        waitframe();
    }
}

gethealthregenpersecond()
{
    return self.gs.healthregenrate * self.gs._id_F3CB481E3E3B2A24;
}

getfireinvulseconds()
{
    return self.gs.healthfireinvulseconds;
}

getfireengulfrate()
{
    return self.gs.healthfireengulfrate;
}

gethealthregentime()
{
    regenamount = self.maxhealth - self.health;
    _id_48C07CA96FBA732E = regenamount / gethealthregenpersecond();
    return _id_48C07CA96FBA732E;
}

gethealthregendelay()
{
    return self.gs.healthregendelay * self.gs._id_302587891497F2DB;
}

canregenhealth()
{
    if ( istrue( self.disable_health_regen ) )
        return 0;

    if ( isdefined( self.gs.armorratiohealthregenthreshold ) && armorratio() > self.gs.armorratiohealthregenthreshold )
        return 0;

    return 1;
}

damageeffects( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 )
{
    _id_C944E9A256D8F3F9 = [ ::damagesfx, ::damagerumble, ::damageradialdistortion, ::damagepainvision, ::damagescreenshake, ::updatedamageoverlay, ::damagebloodoverlay, ::damageshock ];
    _id_CCBBA16287668F0A = damageratio( damage );

    foreach ( function in _id_C944E9A256D8F3F9 )
        self childthread [[ function ]]( point, _id_CCBBA16287668F0A, type );
}

damagesfx( origin, _id_CCBBA16287668F0A, type )
{
    self endon( "damageDefault" );
    type = "MOD_MELEE";
    impactsfx = getimpactsfx( type );
    _id_D6EC8FCD96A58022 = getvocalpainsfx( type );

    if ( isdefined( impactsfx ) )
        self.damage.impactsfx playsound( impactsfx );

    if ( armorbroke() )
        self.armor.sfx playsound( "plr_armor_gone" );

    wait 0.25;

    if ( !damageflag( 4 ) )
    {
        volume = scripts\engine\math::factor_value( 0.75, 1.75, _id_CCBBA16287668F0A );
        self.damage.impactsfx _meth_F4604329F388A96F( volume );
        self.damage.impactsfx playsound( _id_D6EC8FCD96A58022 );
        setdamageflag( 4, 1 );
        scripts\engine\utility::delaythread( 3.0, ::setdamageflag, 4, 0 );
    }
}

getimpactsfx( type )
{
    if ( !hasarmor() )
    {
        if ( type == "MOD_MELEE" )
            return;

        return "plr_proto_bullet_impact";
    }
    else
        return "plr_proto_bullet_impact_armor";
}

getvocalpainsfx( type )
{
    if ( !hasarmor() )
        return "plr_breath_pain_init";
    else
        return "plr_proto_yell_armor";
}

stopimpactsfx()
{
    self.damage.impactsfx stopsounds();
}

damageshock( origin, _id_CCBBA16287668F0A, type )
{
    if ( isexplosivedamage( type ) && !istrue( self.disableexplosiveshellshock ) )
    {
        duration = scripts\engine\math::factor_value( 3, 3, _id_CCBBA16287668F0A );
        self shellshock( "explosion", 3 );
    }
}

damagerumble( origin, _id_CCBBA16287668F0A, type )
{
    if ( _id_CCBBA16287668F0A > 0.4 )
        self playrumbleonentity( "damage_heavy" );
    else
        self playrumbleonentity( "damage_light" );
}

damagescreenshake( origin, _id_CCBBA16287668F0A, type )
{
    pitch = scripts\engine\math::factor_value( 0.82, 1.2, _id_CCBBA16287668F0A );
    yaw = scripts\engine\math::factor_value( 0.65, 0.8, _id_CCBBA16287668F0A );
    roll = scripts\engine\math::factor_value( 0.68, 1.25, _id_CCBBA16287668F0A );
    duration = scripts\engine\math::factor_value( 1.12, 1.85, _id_CCBBA16287668F0A );
    _id_567C8D6E761EFAE4 = scripts\engine\math::factor_value( 0.1, 0.32, _id_CCBBA16287668F0A );
    _id_4D3B638BE4BABD71 = duration - _id_567C8D6E761EFAE4 - 0.05;

    if ( isexplosivedamage( type ) )
    {
        pitch = pitch * 5;
        yaw = yaw * 5;
        roll = roll * 5;
    }

    _func_8111D316E1958815( origin, pitch, yaw, roll, duration, _id_567C8D6E761EFAE4, _id_4D3B638BE4BABD71, 0, 1, 0.5, 1 );

    if ( armorbroke() )
        earthquake( 0.3, 0.65, self.origin, 5000 );
}

damageradialdistortion( origin, _id_CCBBA16287668F0A, type )
{
    self endon( "stopPainOverlays" );

    if ( damageflag( 32 ) )
        return;

    _id_EE2D3F6B47705676 = scripts\engine\math::factor_value( 0.045, 0.045, _id_CCBBA16287668F0A );
    _id_0C0AB0189903C9D4 = scripts\engine\math::factor_value( 0.09, 0.09, _id_CCBBA16287668F0A );
    _id_D75DFE2C8B34F282 = scripts\engine\math::factor_value( 0.2, 0.2, _id_CCBBA16287668F0A );
    radial_distortion( _id_EE2D3F6B47705676, _id_0C0AB0189903C9D4, _id_D75DFE2C8B34F282, origin );
}

removeradialdistortion( _id_D75DFE2C8B34F282 )
{
    childthread scripts\engine\sp\utility::lerp_saveddvar( "dvar_ED28298C207316AE", 0, _id_D75DFE2C8B34F282 );
    childthread scripts\engine\sp\utility::lerp_saveddvar( "dvar_979B5474BE3B9B47", 0, _id_D75DFE2C8B34F282 );
    childthread scripts\engine\sp\utility::lerp_saveddvar( "dvar_960EF00238357BBC", 0, _id_D75DFE2C8B34F282 );
    childthread scripts\engine\sp\utility::lerp_saveddvar( "dvar_BC02F8E41595C9A8", 0, _id_D75DFE2C8B34F282 );
}

damagepainvision( origin, _id_CCBBA16287668F0A, type )
{
    self endon( "damageDefault" );
    self endon( "death" );

    if ( !shoulddopainvision() )
        return 0;

    if ( !hasarmor() )
    {
        if ( level.player isnightvisionon() )
        {
            if ( isdefined( self.damage._id_3448F6D5527BFDD0 ) )
                visionsetpain( self.damage._id_3448F6D5527BFDD0 );
            else
                visionsetpain( "damage_nvg" );
        }
        else if ( isdefined( self.damage._id_697261AA70BBE9EF ) )
            visionsetpain( self.damage._id_697261AA70BBE9EF );
        else
            visionsetpain( "damage_severe" );

        _id_6C10A60C02C4C15B = scripts\engine\math::factor_value( 0.0, 0.0, _id_CCBBA16287668F0A );
        _id_4EFE0369FFF10028 = scripts\engine\math::factor_value( 1.9, 1.9, _id_CCBBA16287668F0A );
        holdtime = scripts\engine\math::factor_value( 0.05, 0.05, _id_CCBBA16287668F0A );
    }
    else
    {
        if ( isdefined( self.damage._id_4324A9D071EC7A6A ) )
            visionsetpain( self.damage._id_4324A9D071EC7A6A );
        else
            visionsetpain( "damage_armor" );

        _id_6C10A60C02C4C15B = scripts\engine\math::factor_value( 0.0, 0.0, _id_CCBBA16287668F0A );
        _id_4EFE0369FFF10028 = scripts\engine\math::factor_value( 1.9, 1.9, _id_CCBBA16287668F0A );
        holdtime = scripts\engine\math::factor_value( 0.05, 0.05, _id_CCBBA16287668F0A );
    }

    setsaveddvar( "dvar_B61C9C6A24B5671E", _id_6C10A60C02C4C15B );
    setsaveddvar( "dvar_E42B132626B5992B", _id_4EFE0369FFF10028 );
    self painvisionon();
    wait( holdtime );
    self painvisionoff();
}

shoulddopainvision()
{
    if ( damageflag( 2 ) )
        return 0;

    if ( self.health == 1 )
        return 0;

    return 1;
}

damagebloodoverlay( origin, _id_CCBBA16287668F0A, type )
{
    damagebloodoverlaydirectional( origin, type );
    damagebloodoverlayfullscreen( origin, _id_CCBBA16287668F0A, type );
}

damagebloodoverlaydirectional( origin, type, _id_D75DFE2C8B34F282 )
{
    if ( scripts\common\utility::iswegameplatform() )
        return;

    time = gettime();

    if ( time - self.damage.lastdiretionalbloodtime < 200 )
        return;
    else
        self.damage.lastdiretionalbloodtime = time;

    _id_708E6B05C3EE97E1 = [ "MOD_PROJECTILE", "MOD_PROJECTILE_SPLASH", "MOD_EXPLOSIVE", "MOD_GRENADE", "MOD_GRENADE_SPLASH" ];
    _id_52055A030C13E72B = getplayersidesfromposition( origin );
    _id_F34FFB5314F27B6D = "";

    if ( scripts\engine\utility::array_contains( _id_708E6B05C3EE97E1, type ) )
        _id_DEC9BCCE93873125 = "fullscreen_dirt_";
    else if ( !hasarmor() )
    {
        _id_DEC9BCCE93873125 = "fullscreen_blood_";

        if ( self.damage.altdirectionalbloodoverlay )
        {
            _id_F34FFB5314F27B6D = "_alt";
            self.damage.altdirectionalbloodoverlay = 0;
        }
        else
            self.damage.altdirectionalbloodoverlay = 1;
    }
    else
        _id_DEC9BCCE93873125 = "fullscreen_armor_";

    if ( !isdefined( _id_D75DFE2C8B34F282 ) )
        _id_D75DFE2C8B34F282 = 2.0;

    foreach ( _id_A66BA9B157533F5A, type in _id_52055A030C13E72B )
    {
        material = _id_DEC9BCCE93873125 + _id_A66BA9B157533F5A;
        _id_F75CE51BC49A2E0F = material + "_splash";
        material = material + _id_F34FFB5314F27B6D;
        _id_6A78028DC80D36FE = createscreeneffectoffsets( randomfloatrange( 0, 1 ), randomfloatrange( 0, 1 ), randomfloatrange( 0, 1 ) );
        createscreeneffectext( _id_A66BA9B157533F5A, material, 0.15, _id_D75DFE2C8B34F282, _id_6A78028DC80D36FE, 1, 1 );
        createscreeneffectext( _id_A66BA9B157533F5A, _id_F75CE51BC49A2E0F, 0.15, 0.15, _id_6A78028DC80D36FE, 0, 1 );
    }
}

damagebloodoverlayfullscreen( origin, _id_CCBBA16287668F0A, type )
{
    if ( damageflag( 2 ) )
        return;

    _id_C59A70B24D759BBD = scripts\engine\math::factor_value( 0.6, 0.3, healthratio() );
    holdtime = gethealthregendelay();
    _id_F69BA8D7B96E8326 = gethealthregentime();
    thread bloodoverlay( _id_C59A70B24D759BBD, holdtime, _id_F69BA8D7B96E8326 );
}

isexplosivedamage( type )
{
    _id_708E6B05C3EE97E1 = [ "MOD_GRENADE", "MOD_GRENADE_SPLASH", "MOD_PROJECTILE", "MOD_PROJECTILE_SPLASH", "MOD_EXPLOSIVE" ];
    return scripts\engine\utility::array_contains( _id_708E6B05C3EE97E1, type );
}

isspreadweapon( objweapon )
{
    return isdefined( objweapon ) && weaponclass( objweapon ) == "spread";
}

createscreeneffectoffsets( x, y, scale )
{
    offsets = [];
    offsets["x"] = x;
    offsets["y"] = y;
    offsets["scale"] = scale;
    return offsets;
}

createscreeneffect( _id_A66BA9B157533F5A, shader, _id_187EF7FAE5A4F6F3, _id_D75DFE2C8B34F282, _id_6A78028DC80D36FE, _id_F100EBBBD2F636FC )
{
    createscreeneffectext( _id_A66BA9B157533F5A, shader, _id_187EF7FAE5A4F6F3, _id_D75DFE2C8B34F282, _id_6A78028DC80D36FE, _id_F100EBBBD2F636FC, 0 );
}

createscreeneffectext( _id_A66BA9B157533F5A, shader, _id_187EF7FAE5A4F6F3, _id_D75DFE2C8B34F282, _id_6A78028DC80D36FE, _id_F100EBBBD2F636FC, _id_8983CFC1A0FF4EA1 )
{
    hud = newclienthudelem( self );
    hud.sort = 13;
    hud.foreground = 0;
    hud.lowresbackground = _id_8983CFC1A0FF4EA1;
    hud.horzalign = "fullscreen";
    hud.vertalign = "fullscreen";
    hud.alpha = 0;
    hud.enablehudlighting = 1;
    x = 0;
    y = 0;
    _id_BA8D59C006AB07C1 = 0;
    _id_BA8D58C006AB058E = 0;
    _id_91180BE623F6B59B = scripts\engine\math::factor_value( 0.9, 1.25, _id_6A78028DC80D36FE["scale"] );

    switch ( _id_A66BA9B157533F5A )
    {
        case "left":
            hud.aligny = "top";
            hud.alignx = "left";
            x = -640;
            y = scripts\engine\math::factor_value( -30, 30, _id_6A78028DC80D36FE["y"] );
            _id_BA8D58C006AB058E = y;
            _id_BA8D59C006AB07C1 = scripts\engine\math::factor_value( -55, 0, _id_6A78028DC80D36FE["x"] );
            break;
        case "right":
            hud.aligny = "top";
            hud.alignx = "right";
            x = 1280;
            y = scripts\engine\math::factor_value( -30, 30, _id_6A78028DC80D36FE["y"] );
            _id_BA8D58C006AB058E = y;
            _id_BA8D59C006AB07C1 = scripts\engine\math::factor_value( 0, 55, _id_6A78028DC80D36FE["x"] ) + 640;
            break;
        case "bottom":
            hud.aligny = "bottom";
            hud.alignx = "left";
            y = 960;
            x = scripts\engine\math::factor_value( -50, 50, _id_6A78028DC80D36FE["x"] );
            _id_BA8D58C006AB058E = scripts\engine\math::factor_value( 0, 50, _id_6A78028DC80D36FE["y"] );
            _id_BA8D58C006AB058E = _id_BA8D58C006AB058E + 480;
            _id_BA8D59C006AB07C1 = x;
            break;
    }

    hud.x = x;
    hud.y = y;
    hud setshader( shader, 640, 640 );
    thread screeneffectcleanup( hud );
    thread animatescreeneffect( hud, _id_187EF7FAE5A4F6F3, _id_D75DFE2C8B34F282, _id_BA8D59C006AB07C1, _id_BA8D58C006AB058E, _id_91180BE623F6B59B, _id_F100EBBBD2F636FC );
}

animatescreeneffect( hud, _id_187EF7FAE5A4F6F3, _id_D75DFE2C8B34F282, x, y, scale, _id_F100EBBBD2F636FC )
{
    hud endon( "destroySreenEffectOverlay" );

    if ( !_id_F100EBBBD2F636FC )
    {
        hud scaleovertime( _id_187EF7FAE5A4F6F3, int( 640 * scale ), int( 480 * scale ) );
        hud moveovertime( _id_187EF7FAE5A4F6F3 );
        hud.x = x;
        hud.y = y;
        _id_187EF7FAE5A4F6F3 = 0.05;
        hud.alpha = 1;
        wait 0.05;
    }
    else
    {
        hud scaleovertime( _id_187EF7FAE5A4F6F3, int( 640 * scale ), int( 480 * scale ) );
        hud.x = x;
        hud.y = y;
        wait 0.15;
        hud fadeovertime( _id_187EF7FAE5A4F6F3 );
        hud.alpha = 1;
        wait( _id_187EF7FAE5A4F6F3 );
    }

    hud fadeovertime( _id_D75DFE2C8B34F282 );
    hud.alpha = 0;
    wait( _id_D75DFE2C8B34F282 + 0.05 );
    hud notify( "destroySreenEffectOverlay" );
}

screeneffectcleanup( hud )
{
    self.damage.activescreeneffectoverlays = scripts\engine\utility::array_add( self.damage.activescreeneffectoverlays, hud );
    hud waittill( "destroySreenEffectOverlay" );
    self.damage.activescreeneffectoverlays = scripts\engine\utility::array_remove( self.damage.activescreeneffectoverlays, hud );
    hud destroy();
}

updatedamageoverlay( origin, _id_CCBBA16287668F0A, type )
{
    self endon( "damageDefault" );
    self endon( "stopPainOverlays" );
    _id_BDB6B8FA63AD8FEE = armorbroke();

    if ( _id_BDB6B8FA63AD8FEE )
    {
        self.damage.overlay setshader( "ui_player_pain_armorbreak_overlay", 640, 480 );
        _id_98EA5AFB293A76A2 = 1.0;
    }
    else if ( !hasarmor() )
    {
        self.damage.overlay setshader( "ui_player_pain_damage_overlay", 640, 480 );
        _id_98EA5AFB293A76A2 = 0.8;
    }
    else
    {
        self.damage.overlay setshader( "ui_player_pain_damage_overlay", 640, 480 );
        _id_98EA5AFB293A76A2 = 0.6;
    }

    self.damage.overlay fadeovertime( 0.05 );
    self.damage.overlay.alpha = max( self.damage.overlay.alpha, _id_98EA5AFB293A76A2 );
    wait 0.05;

    if ( _id_BDB6B8FA63AD8FEE )
        _id_C8FE6E3CA9715960 = 1.0;
    else
        _id_C8FE6E3CA9715960 = scripts\engine\math::factor_value( 0.2, 0.2, _id_CCBBA16287668F0A );

    self.damage.overlay fadeovertime( _id_C8FE6E3CA9715960 );
    self.damage.overlay.alpha = 0;
}

deathsdooroverlaypulse( _id_A29C5118C5608DB6 )
{
    self notify( "deathsDoorPulse" );
    self endon( "deathsDoorPulse" );
    self endon( "stopPainOverlays" );
    self endon( "death" );
    _id_9E6A60AB5457B772 = 1;
    thread lerpdeathsdoorpulsenorm( _id_A29C5118C5608DB6 );

    while ( _id_9E6A60AB5457B772 > 0 )
    {
        time = gettime();
        _id_CFC5BE6822858733 = time;
        _id_7AC5B3B3E8DF90D6 = scripts\engine\math::factor_value( 1000, 600, self.deathsdoorpulsenorm );
        childthread playpulsesfx( _id_7AC5B3B3E8DF90D6 );

        while ( time < _id_CFC5BE6822858733 + _id_7AC5B3B3E8DF90D6 )
        {
            time = gettime();
            _id_05DD15769B0C4106 = 0.1;
            _id_060027769B32B054 = 0.4;
            _id_22FD1081463A401F = ( time - _id_CFC5BE6822858733 ) / _id_7AC5B3B3E8DF90D6;
            _id_5C46646210255EF0 = scripts\engine\math::normalized_cos_wave( _id_22FD1081463A401F );
            _id_9E6A60AB5457B772 = scripts\engine\math::factor_value( _id_05DD15769B0C4106, _id_060027769B32B054, _id_5C46646210255EF0 );
            _id_9E6A60AB5457B772 = _id_9E6A60AB5457B772 * self.deathsdoorpulsenorm;
            self.damage.deathsdooroverlaypulse fadeovertime( 0.05 );
            self.damage.deathsdooroverlaypulse.alpha = _id_9E6A60AB5457B772;
            waitframe();
        }
    }
}

deathsdooroverlaypulsefinal()
{
    self.damage.deathsdooroverlaypulse fadeovertime( 0.05 );
    self.damage.deathsdooroverlaypulse.alpha = 0.7;
    waitframe();
    self.damage.deathsdooroverlaypulse fadeovertime( 0.5 );
    self.damage.deathsdooroverlaypulse.alpha = 0.4;
}

bloodoverlay( alpha, holdtime, _id_F69BA8D7B96E8326 )
{
    if ( scripts\common\utility::iswegameplatform() )
        return;

    _id_9547A9BC3A781774 = 0.5;

    if ( _id_F69BA8D7B96E8326 <= _id_9547A9BC3A781774 )
        _id_F69BA8D7B96E8326 = _id_9547A9BC3A781774;

    self notify( "deathsDoorOverlay" );
    self endon( "deathsDoorOverlay" );
    self endon( "stopPainOverlays" );
    self endon( "death" );
    self.damage.bloodoverlay fadeovertime( 0.05 );
    self.damage.bloodoverlay.alpha = alpha;
    wait( holdtime );
    self.damage.bloodoverlay fadeovertime( _id_F69BA8D7B96E8326 );
    self.damage.bloodoverlay.alpha = 0;
}

playpulsesfx( _id_7AC5B3B3E8DF90D6 )
{
    _id_F467719A502D1C1C = scripts\engine\math::normalized_to_growth_clamps( 0.0, 1.0, self.deathsdoorpulsenorm );
    _id_8E7D4F7DA72273AD = _id_7AC5B3B3E8DF90D6 * 0.8 / 1000;
    self.damage.pulsesfx _meth_F4604329F388A96F( _id_F467719A502D1C1C );
    wait( _id_8E7D4F7DA72273AD );
    self.damage.pulsesfx stopsounds();
    self.damage.pulsesfx playsound( "proto_heartbeat" );
}

shoulddohealthdamageeffects( type )
{
    if ( isdefined( type ) && !armorprotectsdamagetype( type ) )
        return 1;

    return 1;
}

getplayersidesfromposition( position )
{
    forwardvec = vectornormalize( anglestoforward( self.angles ) );
    _id_6F0E7A5743E7A561 = vectornormalize( anglestoright( self.angles ) );
    _id_44ADE5CF4179DE8F = vectornormalize( ( position[0], position[1], 0 ) - ( self.origin[0], self.origin[1], 0 ) );
    _id_C30A3F9960924930 = vectordot( _id_44ADE5CF4179DE8F, forwardvec );
    _id_4946DDC5DDED5B64 = vectordot( _id_44ADE5CF4179DE8F, _id_6F0E7A5743E7A561 );
    _id_52055A030C13E72B = [];

    if ( abs( _id_C30A3F9960924930 ) > 0.819152 )
        _id_52055A030C13E72B["bottom"] = 1;
    else if ( _id_4946DDC5DDED5B64 > 0 )
        _id_52055A030C13E72B["right"] = 1;
    else
        _id_52055A030C13E72B["left"] = 1;

    return _id_52055A030C13E72B;
}

damageui( damage, attacker, direction, point, type, objweapon, inflictor, _id_7178D1AB6020C7C2 )
{
    childthread takecoverwarning();
}

updatearmorui()
{
    self notify( "scr_armorAmountChange" );
    self setclientomnvar( "ui_armor_percent", armorratio() );
    self setclientomnvar( "ui_armor_progress", 0 );

    if ( !hasarmor() && _id_85E373BB15921966() && !_id_10E435C06D13AE7A() )
        self setclientomnvar( "ui_armor_hint", "use_armor" );
    else
        self setclientomnvar( "ui_armor_hint", "hide_armor" );

    if ( hasarmor() )
    {
        self setclientomnvar( "ui_armor_red_flash", 0 );

        if ( haslowarmor() )
            self setclientomnvar( "ui_armor_warning", "low_armor" );
        else
            self setclientomnvar( "ui_armor_warning", "hide_armor" );
    }
    else
    {
        self setclientomnvar( "ui_armor_red_flash", 0.75 );
        self setclientomnvar( "ui_armor_warning", "no_armor" );
    }
}

takecoverwarning( damage, attacker, dir, point, type )
{
    if ( shouldshowcoverwarning() )
    {
        if ( istrue( level.player _meth_E40102956C887F7C() ) )
            setomnvar( "ui_gettocover_text", "game/get_to_cover_swim" );
        else
            setomnvar( "ui_gettocover_text", "game/get_to_cover" );

        setdamageflag( 8, 1 );

        for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 <= 5; _id_AC0E594AC96AA3A8++ )
        {
            self setclientomnvar( "ui_gettocover_state", _id_AC0E594AC96AA3A8 );
            wait 1;
        }

        self setclientomnvar( "ui_gettocover_state", 0 );
        scripts\engine\utility::delaythread( 60, ::setdamageflag, 8, 0 );
        reducetakecoverwarnings();
    }
}

shouldshowcoverwarning()
{
    if ( self islinked() )
        return 0;

    if ( scripts\sp\utility::is_demo() )
        return 0;

    if ( level.gameskill >= 2 )
        return 0;

    if ( self.ignoreme )
        return 0;

    if ( level.missionfailed )
        return 0;

    if ( istrue( self._id_BD345E1CCE50BE96 ) )
        return 1;

    if ( isdefined( self.vehicle ) )
        return 0;

    if ( !self _meth_569AC32FF1837D7C( "takeCoverWarnings" ) )
        return 0;

    if ( getomnvar( "ui_gettocover_state" ) )
        return 0;

    if ( !damageflag( 1 ) )
        return 0;

    if ( damageflag( 8 ) )
        return 0;

    if ( istrue( self.disabletakecoverwarning ) )
        return 0;

    return 1;
}

setcoverwarningcount( count )
{
    if ( self _meth_569AC32FF1837D7C( "takeCoverWarnings" ) <= 0 )
        self _meth_98122FA7C7A078D8( "takeCoverWarnings", count );
}

reducetakecoverwarnings()
{
    _id_A33C1F866043ABE0 = self _meth_569AC32FF1837D7C( "takeCoverWarnings" );

    if ( _id_A33C1F866043ABE0 > 0 )
    {
        _id_A33C1F866043ABE0--;
        self _meth_98122FA7C7A078D8( "takeCoverWarnings", _id_A33C1F866043ABE0 );
    }
}

playeroffhandmain()
{
    self endon( "death" );
    childthread scripts\sp\equipment\offhands::offhandfiremanager();
}

_id_BEF412A36F8CF09F()
{
    self endon( "death" );
    self endon( "stop_armor_plate_input" );
    childthread _id_4E1FFFE2ED27A3E8();

    while ( scripts\common\utility::playerarmorenabled() )
    {
        self waittill( "armor_pressed" );
        _id_9F1608BD570DD94C();
    }

    self notify( "stop_armor_plate_input" );
}

_id_4E1FFFE2ED27A3E8()
{
    _id_E058B83F6DE4A59C = 0;
    _id_D460C2F184D1B3DE = 5;
    _id_78F441B541014EF2 = 0;

    for (;;)
    {
        waitframe();

        if ( !self usinggamepad() || !self weaponswitchbuttonpressed() )
        {
            _id_E058B83F6DE4A59C = 0;
            _id_78F441B541014EF2 = 0;
            continue;
        }

        _id_E058B83F6DE4A59C++;

        if ( _id_E058B83F6DE4A59C >= _id_D460C2F184D1B3DE && !_id_78F441B541014EF2 )
        {
            self notify( "armor_pressed" );
            _id_E058B83F6DE4A59C = 0;
            _id_78F441B541014EF2 = 1;
        }
    }
}

_id_9F1608BD570DD94C()
{
    if ( !istrue( scripts\common\utility::playerarmorenabled() ) )
        return;

    self endon( "death" );

    if ( !_id_5945E029C88CF9BC() )
        return;

    thread _id_F2A4A5AED60E552D();
}

_id_5945E029C88CF9BC()
{
    if ( _id_10E435C06D13AE7A() )
        return 0;

    if ( !_id_CF37789D18FBCC1B() )
        return 0;

    return 1;
}

_id_CF37789D18FBCC1B()
{
    if ( !isalive( self ) || self isparachuting() || self isskydiving() || self isonladder() )
        return 0;

    if ( self ismeleeing() )
        return 0;

    if ( !_id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "armor" ) )
        return 0;

    if ( !getdvarint( "dvar_BFA6BEDC37206C58" ) )
        return 0;

    if ( hasmaxarmor() )
        return 0;

    if ( !_id_85E373BB15921966() )
        return 0;

    if ( isdefined( self.veh ) && self.veh.driver == self )
        return 0;

    return 1;
}

_id_46CD39650BEB293F()
{
    if ( !isdefined( level._id_AE24A96D67A946A9 ) )
        level._id_AE24A96D67A946A9 = makeweapon( "iw9_armor_plate_deploy_sp" );

    return level._id_AE24A96D67A946A9;
}

_id_F2A4A5AED60E552D()
{
    self endon( "death" );

    if ( istrue( self.insertingarmorplate ) || self isswitchingweapon() )
        return;

    _id_D28EB7F4F8AFF36C( 1 );
    _id_451B277F45C6174F();
    _id_43D4382B6CEA4DF9( 1 );
    self.armor._id_E67F0CC08A262A07 = self getcurrentweapon();
    _id_013BF5DA567BEC51 = _id_46CD39650BEB293F();
    _id_1C8661E7315EBA10 = 0;
    _id_7AB9A8F132665D68 = getarmormaxamount();
    armoramount = getarmoramount();

    if ( getdvarint( "dvar_D8E69627073E0766" ) )
        iprintln( "Give armor weapon" );

    if ( !0 || !_id_3AB255CCD3BE6392() )
        self giveweapon( _id_013BF5DA567BEC51 );
    else
    {
        self giveweapon( _id_013BF5DA567BEC51, 0, 0, 0, 1 );
        _id_1C8661E7315EBA10 = 1;
    }

    self switchtoweapon( _id_013BF5DA567BEC51 );
    _id_7732BA6FCB486F93 = _id_C29986CFA0913DCE();

    if ( _id_7732BA6FCB486F93 )
    {
        thread _id_1240021A9C87BCDB();
        _id_0A86A98DE3E7986B( _id_1C8661E7315EBA10 );
    }
    else if ( getdvarint( "dvar_D8E69627073E0766" ) )
        iprintln( "Give Armor Weapon Canceled!" );

    _id_E624F59B3BC29353();
}

_id_C29986CFA0913DCE()
{
    outcome = scripts\engine\utility::waittill_any_return_4( "mantle_start", "scr_change_swim_state", "try_armor_cancel", "weapon_change" );
    return outcome == "weapon_change";
}

_id_E624F59B3BC29353()
{
    _id_FE9DD3A82B1A547E();

    if ( getdvarint( "dvar_D8E69627073E0766" ) )
        iprintln( "Restore values and cleanup - FINISHED!" );

    _id_25AAE4D93A36C291();
    _id_43D4382B6CEA4DF9( 0 );
    self.stoparmorinsert = 0;
    self notify( "insertArmorComplete" );
    _id_D28EB7F4F8AFF36C( 0 );
}

_id_FE9DD3A82B1A547E()
{
    if ( getdvarint( "dvar_D8E69627073E0766" ) )
        iprintln( "take armor weapon" );

    self takeweapon( _id_46CD39650BEB293F() );
    self switchtoweapon( self.armor._id_E67F0CC08A262A07 );
    self disableweaponswitch();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 5; _id_AC0E594AC96AA3A8++ )
    {
        if ( self getcurrentweapon() == self.armor._id_E67F0CC08A262A07 )
            break;

        waitframe();

        if ( getdvarint( "dvar_D8E69627073E0766" ) )
            iprintln( "Waiting for weapon switch" );
    }

    if ( self getcurrentweapon() != self.armor._id_E67F0CC08A262A07 )
    {
        if ( getdvarint( "dvar_D8E69627073E0766" ) )
            iprintln( "NUCLEAR OPTION FORCE WEAPON SWITCH" );

        self switchtoweaponimmediate( self.armor._id_E67F0CC08A262A07 );
        waitframe();
    }

    self enableweaponswitch();
}

_id_1240021A9C87BCDB()
{
    self endon( "insertArmorComplete" );
    self.stoparmorinsert = 0;
    outcome = scripts\engine\utility::waittill_any_return_5( "death", "mantle_start", "scr_change_swim_state", "try_armor_cancel", "armor_plate_done" );

    if ( outcome != "armor_plate_done" )
        self.stoparmorinsert = 1;
}

_id_0A86A98DE3E7986B( _id_45BB64AD6EA299E5 )
{
    if ( !_id_CF37789D18FBCC1B() || istrue( self.stoparmorinsert ) )
        return;

    _id_9B8771694B81127F = 1.86;

    if ( _id_45BB64AD6EA299E5 )
        _id_9B8771694B81127F = _id_9B8771694B81127F + 1;

    _id_9D7D7F9A7E534266( _id_9B8771694B81127F );
    waittillframeend;

    while ( !self.stoparmorinsert && _id_4E03F222ED8B54A1() )
    {
        _id_9D7D7F9A7E534266( _id_9B8771694B81127F );
        waittillframeend;
    }

    self notify( "armor_plate_done" );
}

_id_9D7D7F9A7E534266( _id_9B8771694B81127F )
{
    if ( getdvarint( "dvar_D8E69627073E0766" ) )
        iprintln( "Inserting Plate" );

    if ( istrue( _id_C6A8892DC659D692( _id_9B8771694B81127F ) ) )
    {
        if ( getdvarint( "dvar_D8E69627073E0766" ) )
            iprintln( "Armor Plate Inserted" );

        _id_70DBAC9E7B6D1E2D();
        wait 0.14;
        return;
    }

    if ( getdvarint( "dvar_D8E69627073E0766" ) )
        iprintln( "Armor Plate Canceled!" );
}

_id_C6A8892DC659D692( _id_9B8771694B81127F )
{
    self endon( "mantle_start" );
    self endon( "scr_change_swim_state" );
    self endon( "try_armor_cancel" );
    wait( _id_9B8771694B81127F );
    return 1;
}

_id_70DBAC9E7B6D1E2D()
{
    _id_2B803FCD4F17817A( _id_85E373BB15921966() - 1 );
    _id_4171EEB7B092920F();
    set_normalhealth( 1 );
    self.hadarmor = 1;
    self notify( "armor_plate_inserted" );
}

_id_43D4382B6CEA4DF9( _id_E12D78C11D85D9C2 )
{
    if ( _id_E12D78C11D85D9C2 )
    {
        _id_3B64EB40368C1450::set( "armor", "weapon_switch", 0 );
        _id_3B64EB40368C1450::set( "armor", "script_weapon_switch", 0 );
        _id_3B64EB40368C1450::set( "armor", "mantle", 0 );
        _id_3B64EB40368C1450::set( "armor", "melee", 0 );
        _id_3B64EB40368C1450::set( "armor", "offhand_weapons", 0 );
        _id_3B64EB40368C1450::set( "armor", "offhand_throwback", 0 );
        _id_3B64EB40368C1450::set( "armor", "offhand_weapons", 0 );
        _id_3B64EB40368C1450::set( "armor", "sprint", 0 );
        _id_3B64EB40368C1450::set( "armor", "supersprint", 0 );
    }
    else
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "armor" );

    self.insertingarmorplate = _id_E12D78C11D85D9C2;
}

_id_4E03F222ED8B54A1()
{
    if ( !_id_CF37789D18FBCC1B() )
        return 0;

    _id_A5EA2300EFAAA6A7 = scripts\engine\utility::is_player_gamepad_enabled() && self weaponswitchbuttonpressed();
    return _id_A5EA2300EFAAA6A7;
}

_id_451B277F45C6174F()
{
    self notifyonplayercommand( "try_armor_cancel", "+weapnext" );
    self notifyonplayercommand( "try_armor_cancel", "+weapprev" );
    self notifyonplayercommand( "try_armor_cancel", "selectweapon1" );
    self notifyonplayercommand( "try_armor_cancel", "selectweapon2" );
    self notifyonplayercommand( "try_armor_cancel", "selectweapon3" );
    self notifyonplayercommand( "try_armor_cancel", "+attack" );
    self notifyonplayercommand( "try_armor_cancel", "+smoke" );
    self notifyonplayercommand( "try_armor_cancel", "+frag" );
    self notifyonplayercommand( "try_armor_cancel", "+melee_zoom" );
}

_id_25AAE4D93A36C291()
{
    self notifyonplayercommandremove( "try_armor_cancel", "+weapnext" );
    self notifyonplayercommandremove( "try_armor_cancel", "+weapprev" );
    self notifyonplayercommandremove( "try_armor_cancel", "selectweapon1" );
    self notifyonplayercommandremove( "try_armor_cancel", "selectweapon2" );
    self notifyonplayercommandremove( "try_armor_cancel", "selectweapon3" );
    self notifyonplayercommandremove( "try_armor_cancel", "+attack" );
    self notifyonplayercommandremove( "try_armor_cancel", "+smoke" );
    self notifyonplayercommandremove( "try_armor_cancel", "+frag" );
    self notifyonplayercommandremove( "try_armor_cancel", "+melee_zoom" );
}

healthratio()
{
    return self.health / self.maxhealth;
}

firedamageratio()
{
    return self.damage.firedamage / 100;
}

healthratioinverse()
{
    return 1 - healthratio();
}

hasmaxhealth()
{
    return self.health == self.maxhealth;
}

damageratio( damage )
{
    return scripts\engine\math::normalize_value( 40, 160, damage / self.damagemultiplier );
}

belowcriticalhealththreshold()
{
    return self.health <= criticalhealththreshold();
}

criticalhealththreshold()
{
    return self.maxhealth * 0.7;
}

damageflag( flag )
{
    return self.damage.flags & flag;
}

setdamageflag( flag, _id_B96D126FC701024B )
{
    if ( _id_B96D126FC701024B )
        self.damage.flags = self.damage.flags | flag;
    else
        self.damage.flags = self.damage.flags & ~flag;
}

_id_693BE821D14EDE2F()
{
    return damageflag( 2 );
}

initarmor()
{
    if ( scripts\common\utility::playerarmorenabled() )
    {
        if ( _id_12F67117D9715486() )
            setsaveddvar( "dvar_CE882CA282C2F85E", 1 );

        setdvarifuninitialized( "dvar_D8E69627073E0766", 0 );
        self.armor = spawnstruct();
        self.armor.sfx = scripts\engine\utility::spawn_script_origin();
        self.armor.sfx linkto( self );
        self.armor._id_375504CA18B80BF4 = 0;
        self.armor._id_A81ADEB0E1F89320 = 5;
        self.armor.amount = 0;
        self.armor.maxamount = 100;
        self.armor.everhadarmor = 0;
        self.armor.toggleuifunc = ::armortoggleui;
        _id_D28EB7F4F8AFF36C( 0 );
        self setclientomnvar( "ui_equipment_id_health", 27 );
        self setclientomnvar( "ui_equipment_id_health_numCharges", self.armor._id_375504CA18B80BF4 );
        self setclientomnvar( "ui_equipment_id_health_maxCharges", self.armor._id_A81ADEB0E1F89320 );
        self setclientomnvar( "ui_armor_percent", armorratio() );
        thread _id_BEF412A36F8CF09F();
        armortoggleui();
    }
    else
        armornoui();
}

_id_12F67117D9715486()
{
    mapname = getdvar( "dvar_687FB8F9B7A23245" );
    return mapname == "shadowbase";
}

hasarmor()
{
    return getdvarint( "dvar_BFA6BEDC37206C58" ) && getarmoramount();
}

getarmoramount()
{
    return self.armor.amount;
}

getarmormaxamount()
{
    return self.armor.maxamount;
}

setarmormaxamount( amount )
{
    self.armor.maxamount = amount;
}

setarmoramount( amount )
{
    self.armor.amount = clamp( amount, 0, getarmormaxamount() );
    self setclientomnvar( "ui_armor_percent", armorratio() );
    sethadarmor();
    updatedamagemultiplier();
    updatearmorui();
    updatedamageindicatortype();
    updateviewkickscale();
}

_id_4171EEB7B092920F()
{
    _id_989DBBD449C282CA = getarmormaxamount();
    _id_902E9CB2FFDA1CF2 = getarmoramount();
    _id_7945128481E38B2C = _id_902E9CB2FFDA1CF2 + 5;

    if ( _id_7945128481E38B2C < _id_989DBBD449C282CA / 3 )
        setarmoramount( _id_989DBBD449C282CA / 3 );
    else if ( _id_7945128481E38B2C < _id_989DBBD449C282CA / 3 * 2 )
        setarmoramount( _id_989DBBD449C282CA / 3 * 2 );
    else
        setarmoramount( _id_989DBBD449C282CA );
}

_id_3AB255CCD3BE6392()
{
    _id_989DBBD449C282CA = getarmormaxamount();
    _id_902E9CB2FFDA1CF2 = getarmoramount();

    if ( _id_902E9CB2FFDA1CF2 == 0 || _id_902E9CB2FFDA1CF2 == _id_989DBBD449C282CA / 3 || _id_902E9CB2FFDA1CF2 == _id_989DBBD449C282CA / 3 * 2 || _id_902E9CB2FFDA1CF2 == _id_989DBBD449C282CA )
        return 0;

    return 1;
}

haslowarmor()
{
    return getarmoramount() <= lowarmorthreshold();
}

lowarmorthreshold()
{
    return self.armor.maxamount * 0.25;
}

hasmaxarmor()
{
    return getarmoramount() == getarmormaxamount();
}

armorratio()
{
    if ( getarmormaxamount() > 0 )
        return getarmoramount() / getarmormaxamount();
    else
        return 0;
}

armorratioinverse()
{
    return 1 - armorratio();
}

_id_85E373BB15921966()
{
    return int( self.armor._id_375504CA18B80BF4 );
}

_id_2B803FCD4F17817A( amount )
{
    self.armor._id_375504CA18B80BF4 = int( clamp( amount, 0, _id_C241AEEC324282F0() ) );
    self setclientomnvar( "ui_equipment_id_health_numCharges", self.armor._id_375504CA18B80BF4 );
    sethadarmor();
    updatearmorui();
}

sethadarmor()
{
    if ( self.armor.everhadarmor )
        return;

    if ( self.armor._id_375504CA18B80BF4 > 0 || self.armor.amount > 0 )
    {
        self.armor.everhadarmor = 1;
        armortoggleui();
    }
}

armortoggleui( _id_77C892C2CEC7A0EB )
{
    if ( !isdefined( _id_77C892C2CEC7A0EB ) )
        _id_77C892C2CEC7A0EB = 1;

    if ( _id_77C892C2CEC7A0EB && self.armor.everhadarmor && _id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "armor" ) && getdvarint( "dvar_BFA6BEDC37206C58" ) )
        setomnvar( "ui_armor_show", 1 );
    else
        setomnvar( "ui_armor_show", 0 );
}

armornoui()
{
    setomnvar( "ui_armor_show", 0 );
}

_id_C241AEEC324282F0()
{
    return int( self.armor._id_A81ADEB0E1F89320 );
}

_id_83151236CDB3CE27()
{
    return _id_85E373BB15921966() == _id_C241AEEC324282F0();
}

_id_053586C1CEC4A904( amount )
{
    self.armor._id_A81ADEB0E1F89320 = amount;
}

_id_10E435C06D13AE7A()
{
    return self.armor._id_375A3EEAD556EE8D;
}

_id_D28EB7F4F8AFF36C( _id_B96D126FC701024B )
{
    self.armor._id_375A3EEAD556EE8D = _id_B96D126FC701024B;
}

updatedamageindicatortype()
{
    if ( !hasarmor() )
        setsaveddvar( "dvar_F64594B71057FDAC", 0 );
    else
        setsaveddvar( "dvar_F64594B71057FDAC", 1 );
}

updatedamagemultiplier()
{
    if ( hasarmor() )
        self.damagemultiplier = self.gs.damagemultiplierarmor;
    else
        self.damagemultiplier = self.gs.damagemultiplierhealth * self.gs.scripteddamagemultiplier;
}

updateviewkickscale()
{
    scale = _id_97889C70F9BFF377( self.currentweapon );
    scale = scale * self.gs._id_D92AD7538613E0C0;

    if ( hasarmor() )
        self setviewkickscale( scale + 0.7 );
    else
        self setviewkickscale( scale );
}

_id_97889C70F9BFF377( weapon )
{
    scale = undefined;
    _id_6651DEF69449C4A3 = weapongetflinchtype( weapon );

    if ( _id_6651DEF69449C4A3 == 4 )
        scale = 0.2;
    else if ( _id_6651DEF69449C4A3 == 3 )
        scale = 0.08;
    else if ( _id_6651DEF69449C4A3 == 1 )
        scale = 0.1;
    else
        scale = 0.05;

    return scale;
}

weapongetflinchtype( weaponobj )
{
    class = "none";
    _id_6651DEF69449C4A3 = -1;

    if ( isdefined( weaponobj ) && !isnullweapon( weaponobj ) )
    {
        class = weaponclass( weaponobj.basename );

        switch ( class )
        {
            case "pistol":
                _id_6651DEF69449C4A3 = 1;
                break;
            case "sniper":
                if ( weaponobj.basename == "iw8_sn_mike14" || weaponobj.basename == "iw8_sn_sksierra" || weaponobj.basename == "iw8_sn_sbeta" || weaponobj.basename == "iw8_sn_romeo700" )
                    _id_6651DEF69449C4A3 = 3;
                else
                    _id_6651DEF69449C4A3 = 4;

                break;
            default:
                _id_6651DEF69449C4A3 = 0;
        }
    }

    return _id_6651DEF69449C4A3;
}

set_normalhealth( _id_47237B9240451982 )
{
    self setnormalhealth( _id_47237B9240451982 );
    self.lasthealth = self.health;
}

disable_player_weapon_info()
{
    setdvar( "dvar_C815D5683EEA5B67", 1 );
    setomnvar( "ui_hide_weapon_info", 1 );
}

allow_player_weapon_info( _id_43E5D2EE3D281D80 )
{
    setdvar( "dvar_C815D5683EEA5B67", 0 );

    if ( isdefined( _id_43E5D2EE3D281D80 ) && _id_43E5D2EE3D281D80 )
        show_hud_listener_logic();
}

hud_think()
{
    thread button_notifies();
    thread hide_hud_on_death();
    thread hud_visibility_timer();
    thread show_hud_listener();
    thread _id_BE78DBC6C861438F();
}

show_hud_listener()
{
    self endon( "death" );
    _id_997A68D0145B4469 = [ "weapon_fired", "aim", "reload_pressed", "weapon_change", "weapon_swap", "hide_hud_omnvar_changed", "frag_pressed", "smoke_pressed", "equipment_change", "current_primary_ammo", "offhand_ammo", "item_ammo", "item_loot", "show_hud_button_pressed", "ammo_pickup", "damage" ];

    for (;;)
    {
        waittill_hud_event_notify( _id_997A68D0145B4469 );

        if ( !scripts\engine\sp\utility::in_realism_mode() )
            show_hud_listener_logic();
    }
}

_id_BE78DBC6C861438F()
{
    self endon( "death" );
    _id_FE6CDB53C48AAB11 = [ "reload_start", "weapon_change", "frag_pressed", "smoke_pressed" ];

    for (;;)
    {
        waittill_hud_event_notify( _id_FE6CDB53C48AAB11 );

        if ( scripts\engine\sp\utility::in_realism_mode() )
            show_hud_listener_logic( 1 );
    }
}

waittill_hud_event_notify( _id_997A68D0145B4469 )
{
    foreach ( _id_A234A65C378F3289 in _id_997A68D0145B4469 )
        self endon( _id_A234A65C378F3289 );

    self waittill( "forever" );
}

show_hud_listener_logic( _id_1F0318CA2D6C648E )
{
    if ( scripts\engine\sp\utility::in_realism_mode() && !istrue( _id_1F0318CA2D6C648E ) )
        return;

    _id_816D67F94D716F7A = scripts\engine\sp\utility::get_player_demeanor();

    if ( _id_816D67F94D716F7A != "safe" && !getdvarint( "dvar_C815D5683EEA5B67" ) )
        setomnvar( "ui_hide_weapon_info", 0 );

    self notify( "cancel_hide_hud" );
    wait 1.0;
    thread hud_visibility_timer();
}

hud_visibility_timer()
{
    self endon( "death" );
    self endon( "cancel_hide_hud" );

    if ( scripts\engine\sp\utility::in_realism_mode() )
        wait 2.0;
    else
        wait 5.0;

    setomnvar( "ui_hide_weapon_info", 1 );
    childthread hud_omnvar_change_listener();
}

hud_omnvar_change_listener()
{
    _id_4E2AA722ACD7E66E = getomnvar( "ui_hide_hud" );
    _id_564E8340EECE203E = getomnvar( "ui_hide_weapon_info" );

    while ( getomnvar( "ui_hide_hud" ) == _id_4E2AA722ACD7E66E && getomnvar( "ui_hide_weapon_info" ) == _id_564E8340EECE203E )
        waitframe();

    self notify( "hide_hud_omnvar_changed" );
}

button_notifies()
{
    self endon( "death" );
    level.player notifyonplayercommand( "show_hud_button_pressed", "+actionslot 1" );
    level.player notifyonplayercommand( "show_hud_button_pressed", "+actionslot 2" );
    level.player notifyonplayercommand( "show_hud_button_pressed", "+actionslot 3" );
    level.player notifyonplayercommand( "show_hud_button_pressed", "+actionslot 4" );
    level.player notifyonplayercommand( "show_hud_button_pressed", "nightvision" );
    level.player notifyonplayercommand( "show_hud_button_pressed", "+weapnext" );

    for (;;)
    {
        if ( self adsbuttonpressed() )
            self notify( "aim" );

        if ( self meleebuttonpressed() )
            self notify( "melee" );

        waitframe();
    }
}

hide_hud_on_death()
{
    self waittill( "death" );
    setomnvar( "ui_hide_weapon_info", 1 );
}

_id_F339AF78BE052464( enabled )
{
    setomnvar( "ui_show_weapon_info_force", enabled );
}

_id_53663EBA19C92159( enabled )
{
    setomnvar( "ui_show_equipment_info_force", enabled );
}

_id_2A64EC3C9D4CE7A5( enabled )
{
    setomnvar( "ui_show_armor_health_force", enabled );
}

playerfocusmain()
{
    self endon( "death" );
    setsaveddvar( "dvar_9114F61DDDE3B6A5", 1 );
    childthread focusmonitor();
}

focusmonitor()
{
    for (;;)
    {
        _id_0889F3D7E1C1EA6B = scripts\engine\utility::waittill_any_ents_return( self, "focus_pressed", level, "objectives_updated" );

        if ( _id_0889F3D7E1C1EA6B == "focus_pressed" && !self.focus.disabled )
        {
            self.focus.buttonhelddown = 1;
            thread scripts\sp\analytics::update_focus_counter();

            if ( !self.focus.usedonce )
                self.focus.usedonce = 1;

            thread focusactivate();
            focusrelease_waittill();
            self.focus.buttonhelddown = 0;

            if ( !self.focus.disabled )
                wait 5.0;

            thread focusdeactivate();
            continue;
        }

        if ( _id_0889F3D7E1C1EA6B == "objectives_updated" )
        {
            if ( focus_objectives_update_display() )
            {
                setsaveddvar( "dvar_3232AD8975E7C06B", 0.6 );
                setomnvar( "ui_show_objectives", 1 );
                thread focustimeadjust();
                endtime = getfocusendtime();

                while ( gettime() < endtime )
                {
                    wait 0.1;

                    if ( self.focus.timeadjust )
                    {
                        self.focus.timeadjust = 0;
                        endtime = getfocusendtime();
                    }
                }

                self notify( "stop_focust_time_adjust" );

                while ( focus_infinite_hold() )
                    waitframe();

                thread focusdeactivate();
            }
        }
    }
}

focusenable()
{
    self.focus.disabled = 0;
    self notify( "focus_enabled" );
}

focusdisable()
{
    self.focus.disabled = 1;
    self notify( "focus_disabled" );
}

focusrelease_waittill()
{
    self endon( "focus_disabled" );
    self waittill( "focus_released" );
}

getfocusendtime()
{
    return gettime() + 5000.0;
}

focustimeadjust()
{
    self endon( "stop_focust_time_adjust" );

    for (;;)
    {
        level waittill( "objectives_updated_state", event );

        if ( event != "invisible" )
            self.focus.timeadjust = 1;
    }
}

forcesetamount( amount )
{
    self.focus.amount = amount;
}

forceamount()
{
    return self.focus.amount;
}

focusactivate()
{
    _id_3C89771E6B31AD56 = getdvarfloat( "dvar_3232AD8975E7C06B" );
    _id_61E4A82A839679F1 = 1 - scripts\engine\math::normalize_value( 0.0, 0.6, _id_3C89771E6B31AD56 );
    _id_187EF7FAE5A4F6F3 = _id_61E4A82A839679F1 * 0.5;
    endtime = gettime() + _id_187EF7FAE5A4F6F3 * 1000;
    _id_1AAD8F38CB38F703 = _id_187EF7FAE5A4F6F3 * 20;
    _id_A0576DA143262BD2 = scripts\engine\math::factor_value( 0.6, 0.0, _id_3C89771E6B31AD56 );
    _id_A8BD1A28C2DF8D67 = _id_A0576DA143262BD2 / _id_1AAD8F38CB38F703;
    focushighlightadditionalentsenable();
    setomnvar( "ui_show_objectives", 1 );

    if ( _id_EC0DE9419BD49F54() )
    {
        if ( istrue( self.focus._id_8AEB746EC8000106 ) && _id_7C4CC9D23819AB0A() )
            _id_075D9ABC6AEE4731( 0 );
        else
            self.focus._id_8AEB746EC8000106 = 1;
    }

    while ( gettime() < endtime )
    {
        _id_3C89771E6B31AD56 = getdvarfloat( "dvar_3232AD8975E7C06B" );
        _id_4629CA752F476940 = clamp( _id_3C89771E6B31AD56 + _id_A8BD1A28C2DF8D67, 0.0, 0.6 );
        setsaveddvar( "dvar_3232AD8975E7C06B", _id_4629CA752F476940 );
        forcesetamount( _id_4629CA752F476940 );
        forcesethudoutlinealpha( _id_4629CA752F476940 );
        waitframe();
    }

    setsaveddvar( "dvar_3232AD8975E7C06B", 0.6 );
}

focusdeactivate()
{
    self endon( "focus_pressed" );

    if ( focus_objectives_update_display() )
        level endon( "objectives_updated" );

    _id_3C89771E6B31AD56 = getdvarfloat( "dvar_3232AD8975E7C06B" );
    _id_E7538877552F790D = scripts\engine\math::normalize_value( 0.0, 0.6, _id_3C89771E6B31AD56 );
    _id_D75DFE2C8B34F282 = _id_E7538877552F790D * 2.5;
    endtime = gettime() + _id_D75DFE2C8B34F282 * 1000;
    _id_1AAD8F38CB38F703 = _id_D75DFE2C8B34F282 * 20;
    _id_620FF22DE9679D7A = scripts\engine\math::factor_value( 0.0, 0.6, _id_E7538877552F790D );
    _id_A8BD1A28C2DF8D67 = _id_620FF22DE9679D7A / _id_1AAD8F38CB38F703;
    setomnvar( "ui_show_objectives", 0 );

    while ( gettime() < endtime )
    {
        _id_3C89771E6B31AD56 = getdvarfloat( "dvar_3232AD8975E7C06B" );
        _id_4629CA752F476940 = clamp( _id_3C89771E6B31AD56 - _id_A8BD1A28C2DF8D67, 0.0, 0.6 );
        setsaveddvar( "dvar_3232AD8975E7C06B", _id_4629CA752F476940 );
        forcesetamount( _id_4629CA752F476940 );
        forcesethudoutlinealpha( _id_4629CA752F476940 );
        waitframe();
    }

    focushighlightadditionalentsdisable();
    setsaveddvar( "dvar_3232AD8975E7C06B", 0.0 );

    if ( _id_7C4CC9D23819AB0A() )
        _id_075D9ABC6AEE4731( 0 );
}

focushighlightadditionalentsenable()
{
    if ( !self.focus.additionalents.size )
        return;

    foreach ( ent in self.focus.additionalents )
        ent hudoutlineenable( "outline_nodepth_white" );
}

focushighlightadditionalentsdisable()
{
    if ( !self.focus.additionalents.size )
        return;

    foreach ( ent in self.focus.additionalents )
        ent hudoutlinedisable();
}

forcesethudoutlinealpha( alpha )
{
    setsaveddvar( _func_2EF675C13CA1C4AF( "dvar_1429C8E20321BBCD", 1 ), "1 1 1 " + alpha );
}

getvisionlerprate( _id_D75DFE2C8B34F282 )
{
    rate = 1 / max( 0.01, _id_D75DFE2C8B34F282 );
    return clamp( rate, 0, 30 );
}

offhandremove( equipment )
{
    _id_90D2CA84BA2F9B2E = 0;

    foreach ( offhand in self.offhandinventory )
    {
        if ( offhand.basename == equipment.basename )
        {
            self takeweapon( offhand );
            _id_90D2CA84BA2F9B2E = 1;
        }
    }

    if ( _id_90D2CA84BA2F9B2E )
    {
        if ( scripts\sp\equipment\offhands::getweaponoffhandtype( equipment ) == "primaryoffhand" )
            _id_621D2EEFF0DEA683 = ::setoffhandprimaryclassfunc;
        else
            _id_621D2EEFF0DEA683 = ::setoffhandsecondaryclassfunc;

        self [[ _id_621D2EEFF0DEA683 ]]( "none" );
        scripts\sp\loot::removeoffhandloot( equipment );
    }
}

offhandswap( equipment, _id_1C7780CBD65C3C09, _id_36A8844E4A3BA501 )
{
    weapon = undefined;
    attachments = [];

    if ( !isdefined( _id_36A8844E4A3BA501 ) )
        _id_36A8844E4A3BA501 = [];

    if ( isarray( equipment ) )
    {
        foreach ( _id_AC0E594AC96AA3A8, item in equipment )
        {
            if ( _id_AC0E594AC96AA3A8 == 0 )
            {
                weapon = item;
                attachments = scripts\engine\utility::array_combine( attachments, _func_6527364C1ECCA6C6( weapon ) );
                continue;
            }

            attachments[attachments.size] = item;
        }
    }
    else
    {
        weapon = equipment;
        attachments = _func_6527364C1ECCA6C6( weapon );
    }

    if ( weapon == "none" )
    {

    }

    if ( !scripts\sp\equipment\offhands::offhandisprecached( weapon ) )
    {

    }

    if ( scripts\sp\equipment\offhands::getweaponoffhandtype( weapon ) == "primaryoffhand" )
    {
        _id_6C85C3860AB378B3 = "secondaryoffhand";
        _id_621D2EEFF0DEA683 = ::setoffhandprimaryclassfunc;
    }
    else
    {
        _id_6C85C3860AB378B3 = "primaryoffhand";
        _id_621D2EEFF0DEA683 = ::setoffhandsecondaryclassfunc;
    }

    _id_E56A188D1825C45B = self _meth_51BB5F1539048C4C( _id_6C85C3860AB378B3 );

    foreach ( offhand in self.offhandinventory )
    {
        if ( offhand.basename != _id_E56A188D1825C45B.basename )
            self takeweapon( offhand );
    }

    class = scripts\sp\equipment\offhands::getweaponoffhandclass( weapon );
    self [[ _id_621D2EEFF0DEA683 ]]( class );

    if ( isstring( weapon ) )
        weapon = makeweapon( weapon );

    if ( istrue( attachments.size ) )
    {
        foreach ( attachment in attachments )
            weapon = weapon withattachment( attachment );
    }

    if ( istrue( _id_36A8844E4A3BA501.size ) )
    {
        foreach ( attachment in _id_36A8844E4A3BA501 )
            weapon = weapon withattachment( attachment );
    }

    self giveweapon( weapon );

    if ( isdefined( _id_1C7780CBD65C3C09 ) )
    {
        foreach ( offhand in self.offhandinventory )
        {
            if ( offhand.basename != _id_E56A188D1825C45B.basename )
                self setweaponammoclip( offhand, _id_1C7780CBD65C3C09 );
        }
    }

    scripts\sp\loot::setoffhandloot( weapon );
}

setoffhandsecondaryclassfunc( class )
{
    self _meth_507E316214070ABB( class );
}

setoffhandprimaryclassfunc( class )
{
    self _meth_3FA8DBD92EE49A03( class );
}

dodamagefilter( health, type )
{
    if ( isdefined( type ) && isexplosivedamage( type ) )
        health = int( health * ( 1 / self.damagemultiplier ) );

    return health;
}

player_cinematic_motion_override( cinematicmotionoverride )
{
    level.player.cinematicmotionoverride = cinematicmotionoverride;

    if ( level.player _id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "cinematic_motion" ) )
    {
        if ( isdefined( level.player.cinematicmotionoverride ) )
            level.player setcinematicmotionoverride( level.player.cinematicmotionoverride );
        else
            level.player clearcinematicmotionoverride();
    }
}

set_player_ignore_random_bullet_damage( _id_E3108E412AFB3811 )
{
    if ( !isdefined( _id_E3108E412AFB3811 ) )
        _id_E3108E412AFB3811 = 1;

    level.player.scriptedignorerandombulletdamage = _id_E3108E412AFB3811;
    level.player scripts\sp\gameskill::update_player_attacker_accuracy();
}

player_movement_state( state )
{
    if ( !isdefined( state ) )
        state = "default";

    switch ( state )
    {
        case "creep":
            suit = "iw9_creep";
            movespeed = 90;
            _id_4CE09D4FD0ABF98C = 0;
            break;
        case "cqb":
            suit = "iw9_cqb";
            movespeed = 120;
            _id_4CE09D4FD0ABF98C = 0;
            break;
        case "default":
            suit = _id_DA3AEAAC893BC11F();
            movespeed = 150;
            _id_4CE09D4FD0ABF98C = 1;
            break;
        default:
            suit = _id_DA3AEAAC893BC11F();
            movespeed = 150;
            _id_4CE09D4FD0ABF98C = 1;
    }

    level.player.movementstate = state;
    level.player setsuit( suit );

    if ( level.player _id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "jog" ) && !_id_4CE09D4FD0ABF98C || !level.player _id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "jog" ) && _id_4CE09D4FD0ABF98C )
    {
        if ( !_id_4CE09D4FD0ABF98C )
            level.player _id_3B64EB40368C1450::set( "player_movement_state", "jog", 0 );
        else
            level.player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "player_movement_state" );
    }

    scripts\engine\sp\utility::player_speed_set( movespeed, 0.5 );
}

_id_DA3AEAAC893BC11F()
{
    if ( isdefined( level._id_1A2B600A06EC21F4 ) && isdefined( level._id_1A2B600A06EC21F4._id_576FC201A1D5B6DC ) )
        return level._id_1A2B600A06EC21F4._id_576FC201A1D5B6DC;

    return "iw9_defaultsuit_sp";
}

_id_E9E42CFFEDAA98D5( amount )
{
    if ( !scripts\common\utility::playerarmorenabled() )
        return;

    _id_2B803FCD4F17817A( amount );
}

give_player_max_armor()
{
    if ( !scripts\common\utility::playerarmorenabled() )
        return;

    setarmoramount( int( 100 ) );
    self.hadarmor = 1;
}

remove_all_armor()
{
    if ( !scripts\common\utility::playerarmorenabled() )
        return;

    _id_2B803FCD4F17817A( 0 );
    setarmoramount( 0 );
}

_id_B8FE4107049FC35F( _id_FC0043E95242D5CB )
{
    self.damage._id_4324A9D071EC7A6A = _id_FC0043E95242D5CB;
}

_id_61E425BF9C03BB99( _id_FC0043E95242D5CB )
{
    self.damage._id_3448F6D5527BFDD0 = _id_FC0043E95242D5CB;
}

_id_022373FF2C7BF69B( _id_FC0043E95242D5CB )
{
    self.damage._id_697261AA70BBE9EF = _id_FC0043E95242D5CB;
}

_id_A134D43A2FB54F72( _id_FC0043E95242D5CB )
{
    self.damage._id_94AFCF2EBC7B6F48 = _id_FC0043E95242D5CB;
}

_id_4A82B4C07F9A8934( _id_FC0043E95242D5CB )
{
    self.damage._id_85B4A9B6802B3A0F = _id_FC0043E95242D5CB;
}

set_player_max_health( _id_EDF34A99C4635317 )
{
    self.gs.scripteddamagemultiplier = self.maxhealth / _id_EDF34A99C4635317;
    updatedamagemultiplier();
}

_id_E443C62448CFDA13()
{
    return self.maxhealth / self.gs.scripteddamagemultiplier;
}

scale_player_death_shield_duration( scale )
{
    if ( !isdefined( scale ) )
        scale = 1;

    self.gs.scripteddeathshielddurationscale = scale;
}

_id_308D3AD6F4CA4C08( scale )
{
    if ( !isdefined( scale ) )
        scale = 1;

    self.gs._id_F3CB481E3E3B2A24 = scale;
}

_id_7C5D4FB9EDE97EBD( scale )
{
    if ( !isdefined( scale ) )
        scale = 1;

    self.gs._id_302587891497F2DB = scale;
}

remove_damage_effects_instantly( _id_2625C6F710D4E980 )
{
    self notify( "stopPainOverlays" );

    if ( !isdefined( _id_2625C6F710D4E980 ) )
        _id_2625C6F710D4E980 = 0;

    self painvisionoff();

    if ( damageflag( 2 ) )
        disabledeathsdoor( 1 );

    removefiredamageimmediate();
    removeradialdistortion( 0.0 );
    stopimpactsfx();

    if ( !_id_2625C6F710D4E980 )
    {
        foreach ( overlay in self.damage.activescreeneffectoverlays )
            overlay notify( "destroySreenEffectOverlay" );
    }

    self.damage.overlay destroy();
    self.damage.bloodoverlay destroy();
    self.damage.deathsdooroverlaypulse destroy();
    initdamageoverlay();
    initbloodoverlay();
    initdeathsdooroverlaypulse();
}

radial_distortion( _id_EE2D3F6B47705676, _id_0C0AB0189903C9D4, _id_D75DFE2C8B34F282, origin )
{
    self notify( "radialDistortion" );
    self endon( "radialDistortion" );
    setsaveddvar( "dvar_ED28298C207316AE", _id_EE2D3F6B47705676 );
    setsaveddvar( "dvar_979B5474BE3B9B47", -1 );
    setsaveddvar( "dvar_960EF00238357BBC", _id_0C0AB0189903C9D4 );

    if ( isdefined( origin ) )
    {
        setsaveddvar( "dvar_BC02F8E41595C9A8", 1 );
        setsaveddvar( "dvar_841B904AB274BECE", origin );
    }

    if ( isdefined( _id_D75DFE2C8B34F282 ) )
        removeradialdistortion( _id_D75DFE2C8B34F282 );
}

set_focus_objectives_update_display( _id_B96D126FC701024B )
{
    self.focus.objectivesupdatedisplay = _id_B96D126FC701024B;
    level.player setclientomnvar( "ui_disable_objective_reveal_fanfare", !_id_B96D126FC701024B );
}

focus_objectives_update_display()
{
    return self.focus.objectivesupdatedisplay;
}

_id_075D9ABC6AEE4731( _id_DC49FF55A311B7A7, _id_D7E35DB6665412BA )
{
    self.focus._id_3CC696610D6446E2 = _id_DC49FF55A311B7A7;
    self.focus._id_AF8764067FF2AB84 = _id_D7E35DB6665412BA;
    self.focus._id_8AEB746EC8000106 = 0;
    self setclientomnvar( "ui_show_only_marked_objectives", _id_DC49FF55A311B7A7 );
}

_id_EC0DE9419BD49F54()
{
    return istrue( self.focus._id_3CC696610D6446E2 );
}

_id_7C4CC9D23819AB0A()
{
    return istrue( self.focus._id_AF8764067FF2AB84 );
}

set_focus_infinite_hold( _id_B96D126FC701024B )
{
    self.focus.infinitehold = _id_B96D126FC701024B;
}

focus_infinite_hold()
{
    return self.focus.infinitehold;
}

focus_display_hint( delay, timeout, _id_E9260EABECA89658, _id_7A410E817719294E )
{
    scripts\engine\sp\utility::display_hint( "focus_hint", timeout, delay, _id_E9260EABECA89658, _id_7A410E817719294E );
}

focus_held_down()
{
    return level.player.focus.buttonhelddown;
}

set_player_ladder_weapon( _id_DE88CD14114C1E24 )
{
    if ( !isweapon( _id_DE88CD14114C1E24 ) )
        _id_DE88CD14114C1E24 = scripts\sp\utility::make_weapon( _id_DE88CD14114C1E24 );

    self.ladderweapon = _id_DE88CD14114C1E24;
}

_id_62439E99895FBFEC( _id_2771377B7EADA859 )
{
    thread _id_41EE246015FA055D( _id_2771377B7EADA859 );
}

_id_41EE246015FA055D( _id_2771377B7EADA859 )
{
    self notify( "start_wind_effect" );
    self endon( "stop_wind_effect" );
    self endon( "death" );
    self.wind = spawnstruct();

    if ( !isdefined( self.wind._id_C936A3F99B3A4E61 ) )
        self.wind._id_C936A3F99B3A4E61 = scripts\engine\utility::spawn_tag_origin();

    if ( !isdefined( self.wind._id_75C2CF7522A55EF2 ) )
        self.wind._id_75C2CF7522A55EF2 = scripts\engine\utility::spawn_tag_origin();

    if ( !isdefined( self.wind._id_0728F8CE7513A8F4 ) )
        self.wind._id_0728F8CE7513A8F4 = scripts\engine\utility::spawn_tag_origin();

    self.wind._id_75C2CF7522A55EF2 linkto( self.wind._id_C936A3F99B3A4E61, "tag_origin", ( 500, 0, 0 ), ( 0, 0, 0 ) );
    self.wind._id_0728F8CE7513A8F4 linkto( self.wind._id_C936A3F99B3A4E61, "tag_origin", ( -500, 0, 0 ), ( 0, 0, 0 ) );

    if ( !isdefined( _id_2771377B7EADA859 ) )
    {

    }

    thread _id_530D5648CB42A961();
    self setclientomnvar( "ui_whizby_side_loop", 1 );
    self setclientomnvar( "ui_whizby_front_loop", 1 );
    thread _id_0E06D1C267455290();
    self.nowhizby = 1;
    level.player setcinematicmotionoverride( "iw9_on_vehicle" );

    for (;;)
    {
        if ( !isdefined( _id_2771377B7EADA859 ) )
            break;

        _id_10D38F4DC0D37164 = self getplayerangles();
        _id_52241BCC3A205EF4 = self geteye();

        if ( self.wind._id_C936A3F99B3A4E61 islinked() )
            self.wind._id_C936A3F99B3A4E61 unlink();

        self.wind._id_C936A3F99B3A4E61.origin = level.player.origin;

        if ( isdefined( _id_2771377B7EADA859 ) )
        {
            self.wind._id_C936A3F99B3A4E61.angles = _id_2771377B7EADA859.angles;
            self.wind._id_C936A3F99B3A4E61 linkto( _id_2771377B7EADA859 );
        }

        _id_14D9D4FFFC09A76D = anglestoaxis( _id_10D38F4DC0D37164 );
        _id_B9CE53DAD043E9E4 = self.wind._id_75C2CF7522A55EF2.origin;
        _id_1D399CC6E1D4352D = vectornormalize( _id_B9CE53DAD043E9E4 - _id_52241BCC3A205EF4 );
        _id_EA63C3C778F99D58 = vectordot( _id_1D399CC6E1D4352D, _id_14D9D4FFFC09A76D["forward"] );
        _id_6B2FC87B148F7C99 = vectordot( _id_1D399CC6E1D4352D, _id_14D9D4FFFC09A76D["right"] );
        _id_DCBCB6CB27EA1FB8 = vectordot( _id_1D399CC6E1D4352D, _id_14D9D4FFFC09A76D["up"] );

        if ( _id_EA63C3C778F99D58 > 0 )
        {
            _id_86ADD6FB36F28012 = 1;
            _id_3CA1B715AC9AD24E = self.wind._id_75C2CF7522A55EF2 getentitynumber();
        }
        else
        {
            _id_86ADD6FB36F28012 = 2;
            _id_3CA1B715AC9AD24E = self.wind._id_0728F8CE7513A8F4 getentitynumber();
        }

        _id_DD9BB8522CC9E666 = abs( _id_EA63C3C778F99D58 );
        _id_B4B4994E3604CE34 = 1.0 - abs( _id_EA63C3C778F99D58 );
        _id_F3DAE9EEECBC6A28 = clamp( -1 * _id_EA63C3C778F99D58, 0, 1 );
        _id_3783A488B009BC61 = _id_44A4AD8C0D35F203::_id_DBABF852A35102E4( _id_6B2FC87B148F7C99, _id_DCBCB6CB27EA1FB8 );
        _id_DD9BB8522CC9E666 = scripts\engine\math::normalized_float_smooth_out( _id_DD9BB8522CC9E666 );
        _id_B4B4994E3604CE34 = scripts\engine\math::normalized_float_smooth_out( _id_B4B4994E3604CE34 );
        _id_DD9BB8522CC9E666 = scripts\engine\math::factor_value( 0, self.wind._id_07625E3F4CA38BFF * 0.65, _id_DD9BB8522CC9E666 );
        _id_B4B4994E3604CE34 = scripts\engine\math::factor_value( 0, self.wind._id_07625E3F4CA38BFF * 0.45, _id_B4B4994E3604CE34 );
        self setclientomnvar( "ui_whizby_alpha_front", _id_DD9BB8522CC9E666 );
        self setclientomnvar( "ui_whizby_alpha_side", _id_B4B4994E3604CE34 );
        self setclientomnvar( "ui_whizby_side_angle", int( _id_3783A488B009BC61 ) );

        if ( self getclientomnvar( "ui_whizby_ent" ) != _id_3CA1B715AC9AD24E )
        {
            self setclientomnvar( "ui_whizby_ent", _id_3CA1B715AC9AD24E );
            self setclientomnvar( "ui_whizby_front_loop", _id_86ADD6FB36F28012 );
        }

        wait 0.05;
    }

    _id_F2ADD024B4CC6DF7();
}

_id_0E06D1C267455290()
{
    self endon( "stop_wind_effect" );
    self endon( "death" );

    for (;;)
    {
        self setclientomnvar( "ui_whizby_notify", gettime() );
        wait( randomfloatrange( 0.15, 0.25 ) );
    }
}

_id_D0E471A5F505C82D()
{
    self endon( "stop_wind_effect" );
    self endon( "death" );

    for (;;)
    {
        if ( self.wind._id_07625E3F4CA38BFF > 0 )
            earthquake( 0.1 * self.wind._id_07625E3F4CA38BFF, 0.13, self.origin, 2000 );

        wait( randomfloatrange( 0.05, 0.12 ) );
    }
}

_id_F2ADD024B4CC6DF7()
{
    thread _id_EBC4929CAFF73078();
}

_id_EBC4929CAFF73078()
{
    self endon( "start_wind_effect" );
    self endon( "stop_wind_effect" );
    self endon( "death" );
    self.wind.intensity = 0;
    level.player clearcinematicmotionoverride();

    while ( self.wind._id_07625E3F4CA38BFF > 0.01 )
        waitframe();

    if ( !isdefined( self.wind._id_C936A3F99B3A4E61 ) )
        self.wind._id_C936A3F99B3A4E61 delete();

    if ( !isdefined( self.wind._id_75C2CF7522A55EF2 ) )
        self.wind._id_75C2CF7522A55EF2 delete();

    if ( !isdefined( self.wind._id_75C2CF7522A55EF2 ) )
        self.wind._id_0728F8CE7513A8F4 delete();

    self setclientomnvar( "ui_whizby_front_loop", 0 );
    self setclientomnvar( "ui_whizby_side_loop", 0 );
    self setclientomnvar( "ui_whizby_ent", -1 );
    self.nowhizby = 0;
    self notify( "stop_wind_effect" );
}

_id_B2C2A8F72B5D9583( _id_77C892C2CEC7A0EB )
{
    if ( !isdefined( _id_77C892C2CEC7A0EB ) )
        _id_77C892C2CEC7A0EB = 1;

    self._id_91921C3AE8981DE2 = _id_77C892C2CEC7A0EB;
}

_id_530D5648CB42A961()
{
    self endon( "stop_wind_effect" );
    self endon( "death" );

    if ( !isdefined( self.wind.intensity ) )
        self.wind.intensity = 1;

    if ( !isdefined( self.wind._id_07625E3F4CA38BFF ) )
        self.wind._id_07625E3F4CA38BFF = 0;

    for (;;)
    {
        waitframe();
        self.wind._id_07625E3F4CA38BFF = self.wind._id_07625E3F4CA38BFF + ( self.wind.intensity - self.wind._id_07625E3F4CA38BFF ) * 0.15;
    }
}
