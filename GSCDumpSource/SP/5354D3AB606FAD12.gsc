// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( istrue( level.context_melee_enabled ) )
        return;

    level.context_melee_enabled = 1;

    if ( !isdefined( level.context_melee_has_been_enabled ) )
        level.context_melee_has_been_enabled = 0;

    setdvarifuninitialized( "dvar_AC0F71BC1FF1DC42", 0 );
    setdvarifuninitialized( "dvar_C5ED5374BA752078", 0 );
    setdvarifuninitialized( "dvar_5ECEB684EA4BCA83", 0 );
    setdvarifuninitialized( "dvar_FEB24C2563C88407", 0 );
    setdvarifuninitialized( "dvar_57C7E30C0DBBA2FE", 20 );
    setdvarifuninitialized( "dvar_A6F4F39D206BD33E", 1 );
    setsaveddvar( "dvar_3B07E69E1CD8B041", 100 );

    if ( !level.context_melee_has_been_enabled )
        precache();

    level.player thread enable_dynamic_takedowns();
    level.context_melee_has_been_enabled = 1;
    print_debug( "context_melee enabled: " + gettime() );
}

precache()
{
    level.context_melee_lastframe_bone = "tag_player";
    level.context_melee_player_link_bone = "tag_player";
    level.context_melee_lastframe_type = "player_capsule";
    level.context_melee_sight_disabled = 0;
    level._effect["vfx_contextmelee_stab"] = loadfx( "vfx/iw8/weap/_knife/vfx_contextmele_neckstab_med_ch2.vfx " );

    if ( !getdvarint( "dvar_5ECEB684EA4BCA83" ) )
    {
        scripts\engine\sp\utility::add_hint_string( "context_melee_silent", &"CONTEXT_MELEE/SILENT_KILL", ::context_melee_hint_break, 2 );
        scripts\engine\sp\utility::add_hint_string( "context_melee_stealth", &"CONTEXT_MELEE/STEALTH_KILL", ::context_melee_hint_break, 2 );
        scripts\engine\sp\utility::add_hint_string( "context_melee_blocked", &"CONTEXT_MELEE/BLOCKED", ::context_melee_hint_fail, 2 );
        scripts\engine\sp\utility::add_hint_string( "context_melee_scripted_fail", &"CONTEXT_MELEE/SCRIPTED_FAIL", ::context_melee_hint_scripted_fail, 2 );
        scripts\engine\sp\utility::add_hint_string( "context_melee_scripted_noweap", &"CONTEXT_MELEE/SCRIPTED_NOWEAP", ::context_melee_hint_scripted_noweap, 2 );
    }

    precachemodel( "weapon_vm_me_soscar_knife" );
    precachemodel( "axis_guide_simple" );
    dynamic_knife_anims();
}

play_sound_safe( alias )
{
    if ( !soundexists( alias ) )
        return;

    self playsound( alias );
    return;
}

dynamic_knife_anims()
{
    scripts\engine\utility::flag_init( "hold_context_melee" );
    dynamic_knife_kill_anims();
    dynamic_knife_kill_anims_player();
}

#using_animtree("generic_human");

dynamic_knife_kill_anims()
{
    anims = [];
    anims["context_melee_kill_01_back"] = %vm_sp_context_melee_stand_1_rear_enemy;
    anims["context_melee_kill_01_left"] = %vm_sp_context_melee_stand_1_left_enemy;
    anims["context_melee_kill_01_right"] = %vm_sp_context_melee_stand_1_right_enemy;
    anims["context_melee_kill_01_front"] = %vm_sp_context_melee_stand_1_front_enemy;
    anims["context_melee_kill_02_back"] = %vm_sp_context_melee_stand_2_rear_enemy;
    anims["context_melee_kill_02_left"] = %vm_sp_context_melee_stand_2_left_enemy;
    anims["context_melee_kill_02_right"] = %vm_sp_context_melee_stand_2_right_enemy;
    anims["context_melee_kill_02_front"] = %vm_sp_context_melee_stand_2_front_enemy;

    foreach ( key, _id_4F3089070D8B1E24 in anims )
    {
        level.scr_anim["generic"][key] = _id_4F3089070D8B1E24;
        scripts\common\anim::addnotetrack_customfunction( "generic", "cm_death", ::context_melee_death, key );
        scripts\common\anim::addnotetrack_customfunction( "generic", "cm_ragdoll", ::context_melee_ragdoll, key );
        scripts\common\anim::addnotetrack_customfunction( "generic", "cm_fx", ::context_melee_fx, key );
        scripts\common\anim::addnotetrack_customfunction( "generic", "cm_sfx", ::context_melee_sfx, key );
        scripts\common\anim::addnotetrack_customfunction( "generic", "cm_rumble_light", ::context_melee_rumble_light, key );
        scripts\common\anim::addnotetrack_customfunction( "generic", "cm_rumble_heavy", ::context_melee_rumble_heavy, key );
    }
}

#using_animtree("player");

dynamic_knife_kill_anims_player()
{
    level.scr_animtree["context_melee_player_rig"] = #animtree;

    if ( !isdefined( level.scr_model ) || !isdefined( level.scr_model["context_melee_player_rig"] ) )
        level.scr_model["context_melee_player_rig"] = "viewhands_base_iw8";

    level.scr_anim["context_melee_player_rig"]["context_melee_kill_01_back"] = %vm_sp_context_melee_stand_1_rear_player;
    level.scr_anim["context_melee_player_rig"]["context_melee_kill_01_left"] = %vm_sp_context_melee_stand_1_left_player;
    level.scr_anim["context_melee_player_rig"]["context_melee_kill_01_right"] = %vm_sp_context_melee_stand_1_right_player;
    level.scr_anim["context_melee_player_rig"]["context_melee_kill_01_front"] = %vm_sp_context_melee_stand_1_front_player;
    scripts\common\anim::addnotetrack_customfunction( "context_melee_player_rig", "cm_sfx_player", ::context_melee_sfx_player, "context_melee_kill_01_back" );
    scripts\common\anim::addnotetrack_customfunction( "context_melee_player_rig", "cm_sfx_player", ::context_melee_sfx_player, "context_melee_kill_01_left" );
    scripts\common\anim::addnotetrack_customfunction( "context_melee_player_rig", "cm_sfx_player", ::context_melee_sfx_player, "context_melee_kill_01_right" );
    scripts\common\anim::addnotetrack_customfunction( "context_melee_player_rig", "cm_sfx_player", ::context_melee_sfx_player, "context_melee_kill_01_front" );
    level.scr_anim["context_melee_player_rig"]["context_melee_kill_02_back"] = %vm_sp_context_melee_stand_2_rear_player;
    level.scr_anim["context_melee_player_rig"]["context_melee_kill_02_left"] = %vm_sp_context_melee_stand_2_left_player;
    level.scr_anim["context_melee_player_rig"]["context_melee_kill_02_right"] = %vm_sp_context_melee_stand_2_right_player;
    level.scr_anim["context_melee_player_rig"]["context_melee_kill_02_front"] = %vm_sp_context_melee_stand_2_front_player;
    scripts\common\anim::addnotetrack_customfunction( "context_melee_player_rig", "cm_sfx_player", ::context_melee_sfx_player, "context_melee_kill_02_back" );
    scripts\common\anim::addnotetrack_customfunction( "context_melee_player_rig", "cm_sfx_player", ::context_melee_sfx_player, "context_melee_kill_02_left" );
    scripts\common\anim::addnotetrack_customfunction( "context_melee_player_rig", "cm_sfx_player", ::context_melee_sfx_player, "context_melee_kill_02_right" );
    scripts\common\anim::addnotetrack_customfunction( "context_melee_player_rig", "cm_sfx_player", ::context_melee_sfx_player, "context_melee_kill_02_front" );
}

context_melee_hint_break()
{
    if ( !getdvarint( "dvar_FEB24C2563C88407" ) )
        return 1;

    if ( !isdefined( level.player.context_melee_victim ) )
        return 1;

    if ( !isdefined( level.player.context_melee_hint ) )
        return 1;

    if ( isdefined( level.player.context_melee_allow_directions ) && isdefined( level.player.context_melee_direction ) )
    {
        if ( !scripts\engine\utility::array_contains( level.player.context_melee_allow_directions, level.player.context_melee_direction ) )
            return 1;
    }

    return istrue( level.player.context_melee_victim.in_melee_death );
}

context_melee_hint_fail()
{
    if ( !getdvarint( "dvar_C5ED5374BA752078" ) )
        return 1;

    if ( context_melee_hint_not_allowed() )
        return 1;

    if ( !isdefined( level.player.context_melee_has_enemy ) )
        return 1;

    return 0;
}

context_melee_hint_scripted_fail()
{
    if ( !getdvarint( "dvar_C5ED5374BA752078" ) )
        return 1;

    if ( context_melee_hint_not_allowed() )
        return 1;

    if ( !isdefined( level.player.context_melee_scripted_enemy_guess ) )
        return 1;

    if ( !is_enemy_onscreen( level.player.context_melee_scripted_enemy_guess ) )
        return 1;

    return 0;
}

context_melee_hint_scripted_noweap()
{
    if ( !getdvarint( "dvar_C5ED5374BA752078" ) )
        return 1;

    if ( context_melee_hint_not_allowed() )
        return 1;

    if ( !isdefined( level.player.context_melee_scripted_enemy_guess ) )
        return 1;

    if ( !is_enemy_onscreen( level.player.context_melee_scripted_enemy_guess ) )
        return 1;

    return 0;
}

context_melee_hint_not_allowed()
{
    if ( !isdefined( level.player.context_melee_hint ) )
        return 1;

    if ( level.player getstance() == "prone" )
        return 1;

    if ( isdefined( level.player.context_melee_allow_directions ) && isdefined( level.player.context_melee_direction ) )
    {
        if ( !scripts\engine\utility::array_contains( level.player.context_melee_allow_directions, level.player.context_melee_direction ) )
        {
            level.player.context_melee_hinted = 0;
            return 1;
        }
    }

    return 0;
}

scripted_melee_active( _id_E3108E412AFB3811 )
{
    if ( _id_E3108E412AFB3811 && !level.player isscriptedmeleeactive() )
    {
        print_debug( "scripted melee active " + gettime() );
        level.player.context_melee_last_active_time = gettime();
        level.player setscriptedmeleeactive( _id_E3108E412AFB3811 );
    }
    else if ( !_id_E3108E412AFB3811 && level.player isscriptedmeleeactive() )
    {
        print_debug( "scripted melee INactive " + gettime() );
        level.player.context_melee_last_inactive_time = gettime();
        level.player setscriptedmeleeactive( _id_E3108E412AFB3811 );
    }
}

context_melee_cursor_hint_create()
{
    if ( isdefined( level.player.context_melee_allow_directions ) && isdefined( level.player.context_melee_direction ) )
    {
        if ( !scripts\engine\utility::array_contains( level.player.context_melee_allow_directions, level.player.context_melee_direction ) )
            return;
    }

    if ( getdvarint( "dvar_5ECEB684EA4BCA83" ) == 1 )
    {
        if ( !isdefined( level.context_melee_hint_ent_set ) )
        {
            level.context_melee_hint_ent_set = 1;
            level.context_melee_hint_ent thread scripts\sp\player\cursor_hint::create_cursor_hint( "tag_origin", undefined, level.player.context_melee_hint, 360, 5000, 2000, undefined, undefined, undefined, undefined, "duration_none", "+melee", 0, 360 );
            level.context_melee_hint_ent setuseprioritymax();
        }
        else
        {
            level.context_melee_hint_ent sethintstring( level.player.context_melee_hint );
            level.context_melee_hint_ent sethinticon( "blank" );
            level.context_melee_hint_ent setusecommand( "+melee" );
        }
    }
    else if ( getdvarint( "dvar_5ECEB684EA4BCA83" ) == 2 )
    {
        setomnvar( "ui_in_world_text_index", 2 );
        setomnvar( "ui_in_world_text_entnum", level.context_melee_hint_ent getentitynumber() );
    }
}

context_melee_cursor_hint_remove()
{
    if ( getdvarint( "dvar_5ECEB684EA4BCA83" ) && isdefined( level.context_melee_hint_ent ) )
    {
        level.context_melee_hint_ent_set = undefined;

        if ( getdvarint( "dvar_5ECEB684EA4BCA83" ) == 1 )
            level.context_melee_hint_ent thread scripts\sp\player\cursor_hint::remove_cursor_hint();

        level.context_melee_hint_ent delete();
    }
}

context_melee_cursor_hint_blocked()
{
    if ( isdefined( level.context_melee_hint_ent ) )
    {
        if ( getdvarint( "dvar_5ECEB684EA4BCA83" ) == 1 )
        {
            level.player.context_melee_hint_blocked = scripts\engine\utility::ter_op( isdefined( level.player.context_melee_hint_blocked_custom ), level.player.context_melee_hint_blocked_custom, &"CONTEXT_MELEE/BLOCKED" );
            level.context_melee_hint_ent sethintstring( level.player.context_melee_hint_blocked );
            level.context_melee_hint_ent sethinticon( "hud_ability_disabled_x" );
        }

        if ( getdvarint( "dvar_5ECEB684EA4BCA83" ) == 2 )
            return;
    }
}

dynamic_takedowns_monitor()
{
    level endon( "stop_context_melee" );

    for (;;)
    {
        if ( istrue( self.in_melee_death ) )
        {
            scripted_melee_active( 0 );
            level thread context_melee_cursor_hint_remove();
            waitframe();
            continue;
        }

        self.context_melee_victim = undefined;
        self.context_melee_direction = undefined;
        self.context_melee_animation = undefined;

        if ( scripts\engine\utility::flag( "hold_context_melee" ) )
            scripts\engine\utility::flag_waitopen( "hold_context_melee" );

        context_melee_victim = check_for_close_victim();

        if ( isdefined( context_melee_victim ) && istrue( context_melee_victim.in_melee_death ) )
        {
            scripted_melee_active( 0 );
            level thread context_melee_cursor_hint_remove();
            self.context_melee_victim = undefined;
            waitframe();
            continue;
        }

        if ( isdefined( context_melee_victim ) )
        {
            context_melee_direction = context_melee_victim player_stealth_kill_direction();
            context_melee_animation = context_melee_victim get_anim_from_direction( context_melee_direction );

            if ( context_melee_victim check_player_can_stealth_kill_me( context_melee_animation, context_melee_direction ) )
            {
                self.context_melee_victim = context_melee_victim;
                self.context_melee_direction = context_melee_direction;
                self.context_melee_animation = context_melee_animation;
                scripted_melee_active( 1 );

                if ( !istrue( level._id_F27CEEAD977ABAB6 ) )
                {
                    if ( getdvarint( "dvar_5ECEB684EA4BCA83" ) )
                    {
                        if ( level.player getstance() == "stand" )
                            _id_0362B543B4E2B503 = context_melee_victim.origin + anglestoforward( vectortoangles( level.player.origin - context_melee_victim.origin ) ) * 16 + ( 0, 0, level.context_melee_eye_height_stand );
                        else
                            _id_0362B543B4E2B503 = context_melee_victim.origin + anglestoforward( vectortoangles( level.player.origin - context_melee_victim.origin ) ) * 16 + ( 0, 0, level.context_melee_eye_height_crouch );

                        if ( !isdefined( level.context_melee_hint_ent ) )
                            level.context_melee_hint_ent = scripts\engine\utility::spawn_tag_origin( _id_0362B543B4E2B503 );
                        else
                            level.context_melee_hint_ent.origin = _id_0362B543B4E2B503;

                        self.context_melee_hint = scripts\engine\utility::ter_op( isdefined( self.context_melee_hint_custom ), self.context_melee_hint_custom, &"CONTEXT_MELEE/STEALTH_KILL_HINT" );
                        level thread context_melee_cursor_hint_create();
                    }
                    else
                    {
                        self.context_melee_hint = scripts\engine\utility::ter_op( isdefined( self.context_melee_hint_custom ), self.context_melee_hint_custom, "context_melee_stealth" );
                        thread scripts\engine\sp\utility::display_hint_forced( self.context_melee_hint );
                    }
                }
            }
            else
            {
                print3d_debug( self.origin, "^1no animation", ( 0, 1, 0 ), 1, 0.1, 1, "line5" );
                self.context_melee_victim = undefined;
                scripted_melee_active( 0 );
            }
        }
        else
            scripted_melee_active( 0 );

        waitframe();
    }
}

enable_dynamic_takedowns()
{
    level notify( "stop_context_melee" );

    if ( !isdefined( self.melee_arms ) )
        self.melee_arms = scripts\engine\sp\utility::spawn_anim_model( "context_melee_player_rig", self.origin, self.angles );

    self.melee_arms notsolid();
    self.melee_arms hide();
    level endon( "stop_context_melee" );
    thread dynamic_takedowns_monitor();

    for (;;)
    {
        self waittill( "player_scripted_melee" );

        if ( level.script == "estate" && self isuseinprogress() )
            continue;

        if ( isalive( self.context_melee_victim ) )
        {
            victim = self.context_melee_victim;
            direction = self.context_melee_direction;
            animation = self.context_melee_animation;

            if ( isdefined( animation ) )
            {
                if ( isdefined( self.skip_context_melee_anim ) )
                    self notify( "skipped_melee_anim" );
                else
                {
                    victim thread do_context_melee( animation, direction );
                    level scripts\sp\utility::context_melee_waittill_player_finished();
                }
            }
        }
    }
}

disable_dynamic_takedowns()
{
    level notify( "stop_context_melee" );
    level.context_melee_enabled = 0;
    scripted_melee_active( 0 );
    level thread context_melee_cursor_hint_remove();
    self.context_melee_victim = undefined;
    print_debug( "context_melee disabled: " + gettime() );
}

check_for_close_victim()
{
    level endon( "stop_context_melee" );

    if ( getdvarint( "dvar_579C12AD813FA4A8" ) != 640 )
        setsaveddvar( "dvar_579C12AD813FA4A8", 640 );

    if ( getdvarint( "dvar_5E6C29A5C2DE1ADF" ) != 384 )
        setsaveddvar( "dvar_5E6C29A5C2DE1ADF", 384 );

    team3 = scripts\engine\sp\utility::get_all_closest_living( level.player.origin, getaiarray( "team3" ), 512, 0 );
    _id_7435B7CED3D68768 = scripts\engine\sp\utility::get_all_closest_living( level.player.origin, getaiarray( "axis" ), 512, 0 );
    _id_7435B7CED3D68768 = scripts\engine\utility::array_combine( team3, _id_7435B7CED3D68768 );
    scripts\engine\utility::array_call( _id_7435B7CED3D68768, ::_meth_F23F106F8976771D );

    foreach ( enemy in _id_7435B7CED3D68768 )
    {
        if ( !isdefined( enemy.context_melee_combatsight_buffer ) )
            enemy.context_melee_combatsight_buffer = 0;

        if ( !isdefined( enemy.context_melee_combatsight_lastime ) )
            enemy.context_melee_combatsight_lastime = gettime();

        if ( !isdefined( enemy.context_melee_combat_buffer ) || enemy.context_melee_combat_buffer == 0 )
        {
            if ( enemy scripts\stealth\utility::bcisincombat() && isdefined( enemy.enemy ) && enemy.enemy == level.player )
            {
                if ( enemy context_melee_cansee() )
                {
                    enemy.context_melee_combatsight_buffer = enemy.context_melee_combatsight_buffer + 1;
                    enemy.context_melee_combatsight_lastime = gettime();
                    print3d_debug( enemy.origin, "cm sight buffer " + enemy.context_melee_combatsight_buffer, ( 1, 0, 0 ), 1, 0.1, 1, "line1" );
                }
                else if ( gettime() - enemy.context_melee_combatsight_lastime > 2000 )
                {
                    enemy.context_melee_combatsight_buffer = 0;
                    print3d_debug( enemy.origin, "cm sight buffer " + enemy.context_melee_combatsight_buffer, ( 0, 1, 0 ), 1, 0.1, 1, "line1" );
                }
            }
            else
            {
                enemy.context_melee_combatsight_buffer = 0;
                print3d_debug( enemy.origin, "cm sight buffer " + enemy.context_melee_combatsight_buffer, ( 0, 1, 0 ), 1, 0.1, 1, "line1" );
            }

            continue;
        }

        enemy.context_melee_combatsight_buffer = 0;
        print3d_debug( enemy.origin, "cm sight buffer " + enemy.context_melee_combatsight_buffer, ( 0, 1, 0 ), 1, 0.1, 1, "line1" );
    }

    enemy = level.player getscriptedmeleetarget();

    if ( !isdefined( enemy ) )
    {
        enemy = scripts\engine\sp\utility::get_closest_living( level.player.origin, _id_7435B7CED3D68768 );

        if ( isdefined( enemy ) && distance( level.player.origin, enemy.origin ) < getdvarint( "dvar_3B07E69E1CD8B041" ) - 8 )
        {
            print_debug( "scripted melee not returning an enemy but you're close enough to one." );
            level.player.context_melee_scripted_enemy_guess = enemy;

            if ( !getdvarint( "dvar_5ECEB684EA4BCA83" ) )
                level.player thread scripts\engine\sp\utility::display_hint( "context_melee_scripted_fail" );
            else
                context_melee_cursor_hint_blocked();
        }
        else
        {
            level thread context_melee_cursor_hint_remove();
            level.player.context_melee_scripted_enemy_guess = undefined;
        }

        level.player.context_melee_has_enemy = undefined;
        return undefined;
    }

    level.player.context_melee_has_enemy = enemy;
    level.player.context_melee_scripted_enemy_guess = undefined;

    if ( isplayer( enemy ) )
        return undefined;

    if ( level.player ismeleeing() )
        return undefined;

    if ( !isalive( enemy ) )
        return undefined;

    if ( enemy scripts\sp\fakeactor::is_fakeactor() || !isai( enemy ) )
        return undefined;

    if ( isdefined( enemy.context_melee_allowed ) && !enemy.context_melee_allowed )
        return undefined;

    if ( !isdefined( enemy.animtree ) || enemy.animtree != "generic_human" )
        return undefined;

    if ( isdefined( enemy.unittype ) )
    {
        switch ( enemy.unittype )
        {
            case "juggernaut":
            case "suicidebomber":
            case "dog":
                return undefined;
        }
    }

    if ( enemy scripts\engine\utility::doinglongdeath() )
        return undefined;

    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
    {
        _id_A2825DE7E3791A80 = enemy gettagorigin( "j_head" );
        _id_BCD3907D1BEE5B81 = enemy gettagorigin( "tag_origin" );
        dir = vectornormalize( _id_A2825DE7E3791A80 - level.player.origin );
        dot = vectordot( dir, anglestoright( enemy gettagangles( "j_head" ) ) );
        print3d_debug( _id_A2825DE7E3791A80, "dot: " + abs( dot ), ( 1, 1, 1 ), 1, 0.05, 1 );
        line_debug( _id_A2825DE7E3791A80, _id_A2825DE7E3791A80 + anglestoright( enemy gettagangles( "j_head" ) ) * 60, ( 1, 1, 1 ), 1, 0, 1 );
        line_debug( _id_BCD3907D1BEE5B81, _id_BCD3907D1BEE5B81 + anglestoforward( enemy gettagangles( "tag_origin" ) ) * 60, ( 1, 1, 1 ), 1, 0, 1 );
    }

    if ( !isdefined( enemy.context_melee_combat_buffer ) )
        enemy.context_melee_combat_buffer = 0;

    if ( !isdefined( enemy.context_melee_sight_buffer ) )
        enemy.context_melee_sight_buffer = 0;

    if ( isdefined( enemy.context_melee_last_melee_finish_time ) && gettime() - enemy.context_melee_last_melee_finish_time < 600 )
    {
        print3d_debug( enemy.origin, "waiting for previous melee buffer: " + gettime(), ( 1, 0, 0 ), 1, 0.1, 1, "line3" );
        enemy.context_melee_sight_buffer = 12;
        enemy.context_melee_combat_buffer = 12;
        enemy thread combat_counter_reset();
        return undefined;
    }

    if ( !istrue( enemy._id_97A4FCA26EE7D0CF ) && enemy scripts\stealth\utility::bcisincombat() && isdefined( enemy.enemy ) && enemy.enemy == level.player )
    {
        if ( enemy.context_melee_combatsight_buffer > 15 )
        {
            print3d_debug( enemy.origin, " no buffer bc I've been looking at you!", ( 0, 1, 0 ), 1, 0.1, 1, "line2" );
            return undefined;
        }

        enemy.context_melee_combat_buffer = enemy.context_melee_combat_buffer + 1;

        if ( enemy.context_melee_combat_buffer > 12 && enemy _id_B310B0376DBA9FB0() )
            return undefined;
        else
        {
            print3d_debug( enemy.origin, "combat buffer", ( 1, 0, 1 ), 1, 0.1, 1, "line3" );
            enemy thread combat_counter_reset();
        }
    }
    else
        enemy.context_melee_combat_buffer = 0;

    if ( enemy isinscriptedstate() && enemy context_melee_cansee() )
    {
        enemy.context_melee_sight_buffer = enemy.context_melee_sight_buffer + 1;

        if ( enemy.context_melee_sight_buffer > 12 )
            return undefined;
        else
        {
            print3d_debug( enemy.origin, "I SEE YOU!", ( 1, 0, 0 ), 1, 0.1, 1, "line3" );
            enemy thread combat_counter_reset();
        }
    }
    else
        enemy.context_melee_sight_buffer = 0;

    return enemy;
}

combat_counter_reset()
{
    self notify( "counter_reset_stop" );
    self endon( "death" );
    self endon( "counter_reset_stop" );
    _id_C2494340A9DD480D = gettime();

    for (;;)
    {
        if ( gettime() - _id_C2494340A9DD480D > 2000 && !context_melee_cansee() )
            break;
        else if ( context_melee_cansee() )
            _id_C2494340A9DD480D = gettime();

        waitframe();
    }

    print_debug( "combat counter reset: " + gettime() );
    self.context_melee_sight_buffer = 0;
    self.context_melee_combat_buffer = 0;
}

is_enemy_onscreen( enemy )
{
    if ( isdefined( level.player worldpointtoscreenpos( enemy gettagorigin( "j_head" ), getdvarint( "dvar_B38FCF293D1E91A8" ) ) ) )
        return 1;
    else if ( isdefined( level.player worldpointtoscreenpos( enemy gettagorigin( "j_spinelower" ), getdvarint( "dvar_B38FCF293D1E91A8" ) ) ) )
        return 1;
    else if ( isdefined( level.player worldpointtoscreenpos( enemy gettagorigin( "tag_origin" ), getdvarint( "dvar_B38FCF293D1E91A8" ) ) ) )
        return 1;

    return 0;
}

physics_test( type, start, end, enemy, _id_CD5BF981BB955E4B, _id_2067FC2D9114EB90, _id_7935B319829B6B1B, _id_E18E6346CCFBB5A3 )
{
    if ( !getdvarint( "dvar_A6F4F39D206BD33E" ) )
        return 1;

    if ( !isdefined( _id_CD5BF981BB955E4B ) )
        _id_CD5BF981BB955E4B = "collision failed";

    result = undefined;

    if ( isdefined( _id_2067FC2D9114EB90 ) && isdefined( _id_2067FC2D9114EB90.capsule_radius ) && _id_2067FC2D9114EB90.capsule_radius == 15 )
        _id_63C330E431643C75 = 1;
    else
        _id_63C330E431643C75 = 0.8;

    switch ( type )
    {
        case "ray":
            result = physics_raycast( start, end, get_melee_contents(), [ level.player, enemy ], 0, "physicsquery_closest", 1 );
            break;
        case "player_eye_cast":
            result = physics_spherecast( start, end, 2, get_melee_contents(), [ level.player, enemy ], "physicsquery_closest" );
            sphere_debug( start, 2, ( 1, 0, 1 ), 0, 1 );
            sphere_debug( end, 2, ( 1, 0, 1 ), 0, 1 );
            break;
        case "player_capsule_cast":
            result = physics_capsulecast( start, end, _id_2067FC2D9114EB90.capsule_radius * _id_63C330E431643C75, _id_2067FC2D9114EB90.capsule_halfheight * _id_63C330E431643C75, level.player getplayerangles( 1 ), get_melee_contents(), [ level.player, enemy ], "physicsquery_closest" );
            capsule_debug( start - ( 0, 0, _id_2067FC2D9114EB90.capsule_midpoint_height * 0.5 ), _id_2067FC2D9114EB90.capsule_radius * _id_63C330E431643C75, _id_2067FC2D9114EB90.capsule_halfheight * _id_63C330E431643C75 * 2, level.player getplayerangles( 1 ), ( 1, 0, 1 ), 0, 1 );
            capsule_debug( end - ( 0, 0, _id_7935B319829B6B1B.capsule_midpoint_height * 0.5 ), _id_7935B319829B6B1B.capsule_radius * _id_63C330E431643C75, _id_7935B319829B6B1B.capsule_halfheight * _id_63C330E431643C75 * 2, level.player getplayerangles( 1 ), ( 1, 0, 1 ), 0, 1 );
            break;
        case "capsule":
            result = physics_capsulecast( start, end, _id_2067FC2D9114EB90.capsule_radius, _id_2067FC2D9114EB90.capsule_halfheight, level.player getplayerangles( 1 ), get_melee_contents(), [ level.player, enemy ], "physicsquery_closest" );
            break;
        case "player_eye":
            result = physics_getclosestpointtosphere( start + ( 0, 0, 2 ), 2, 0, get_melee_contents(), [ level.player, enemy ], "physicsquery_closest" );
            sphere_debug( start + ( 0, 0, 2 ), 2, ( 1, 1, 1 ), 0, 1 );
            break;
        case "enemy_eye":
            result = physics_getclosestpointtosphere( start + ( 0, 0, 2 ), 2, 0, get_melee_sight_contents(), [ level.player, enemy, self ], "physicsquery_closest" );
            sphere_debug( start + ( 0, 0, 2 ), 2, ( 1, 1, 1 ), 0, 1 );
            break;
        case "player_capsule":
            result = physics_getclosestpointtocapsule( start, _id_7935B319829B6B1B.capsule_radius * _id_63C330E431643C75, _id_7935B319829B6B1B.capsule_halfheight * _id_63C330E431643C75, level.player getplayerangles( 1 ), 0, get_melee_contents(), [ level.player, enemy ], "physicsquery_closest" );
            capsule_debug( start - ( 0, 0, _id_7935B319829B6B1B.capsule_midpoint_height * 0.5 ), _id_7935B319829B6B1B.capsule_radius * _id_63C330E431643C75, _id_7935B319829B6B1B.capsule_halfheight * _id_63C330E431643C75 * 2, level.player getplayerangles( 1 ), ( 1, 1, 0 ), 0, 1 );
            break;
    }

    if ( istrue( result.size ) )
    {
        print3d_debug( result[0]["position"], _id_CD5BF981BB955E4B, ( 1, 0, 0 ), 1, 0.1, 1 );
        line_debug( start, result[0]["position"], ( 1, 0, 0 ), 1, 0, 1 );
        sphere_debug( result[0]["position"], 2, ( 1, 0, 0 ), 0, 1 );
        return 0;
    }

    return 1;
}

anim_collision_check( anime, direction, offset )
{
    level notify( "tag_view_debug_end" );

    if ( level.player getstance() == "prone" )
        return 0;

    if ( istrue( level._id_E851B39F9F329735 ) )
        return 1;

    _id_2067FC2D9114EB90 = level.player _meth_8469F795A6FA3DC5( level.player getstance() );
    _id_7935B319829B6B1B = level.player _meth_8469F795A6FA3DC5( "stand" );
    _id_E18E6346CCFBB5A3 = level.player _meth_8469F795A6FA3DC5( "crouch" );

    if ( _id_2067FC2D9114EB90.capsule_halfheight < _id_2067FC2D9114EB90.capsule_radius )
        _id_2067FC2D9114EB90.capsule_halfheight = _id_2067FC2D9114EB90.capsule_radius;

    _id_ECBD2406C725CB8F = [ 0 ];
    _id_3E73EC41BA9920CB = scripts\engine\sp\utility::spawn_anim_model( "context_melee_player_rig", level.player.origin, level.player.angles );
    _id_3E73EC41BA9920CB notsolid();
    _id_3E73EC41BA9920CB hide();
    _id_4B5EBA8746581DEB = scripts\engine\sp\utility::spawn_anim_model( "context_melee_player_rig", level.player.origin, level.player.angles );
    _id_4B5EBA8746581DEB notsolid();
    _id_4B5EBA8746581DEB hide();
    _id_A30FF6D320CC665E = scripts\engine\utility::spawn_tag_origin();
    set_scripted_node_angles( _id_A30FF6D320CC665E, direction, offset );
    _id_A30FF6D320CC665E scripts\common\anim::anim_first_frame_solo( _id_3E73EC41BA9920CB, anime );
    _id_A30FF6D320CC665E scripts\common\anim::anim_last_frame_solo( _id_4B5EBA8746581DEB, anime );
    _id_3E73EC41BA9920CB linkto( _id_A30FF6D320CC665E );
    _id_4B5EBA8746581DEB linkto( _id_A30FF6D320CC665E );
    level.context_melee_eye_height_stand = _id_7935B319829B6B1B.capsule_halfheight + _id_7935B319829B6B1B.capsule_midpoint_height;
    level.context_melee_eye_height_crouch = _id_E18E6346CCFBB5A3.capsule_halfheight + _id_E18E6346CCFBB5A3.capsule_midpoint_height;
    end_pos = _id_4B5EBA8746581DEB gettagorigin( level.context_melee_lastframe_bone ) + anglestoup( _id_4B5EBA8746581DEB gettagangles( level.context_melee_lastframe_bone ) ) * level.context_melee_eye_height_stand;

    foreach ( _id_AC0E594AC96AA3A8, angle in _id_ECBD2406C725CB8F )
    {
        if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        {
            line_debug( level.player geteye() + ( 0, 0, -0.1 ), _id_3E73EC41BA9920CB gettagorigin( "tag_view" ), ( 1, 1, 1 ), 1, 0, 1 );
            circle_debug( _id_3E73EC41BA9920CB gettagorigin( level.context_melee_player_link_bone ), _id_2067FC2D9114EB90.capsule_radius, ( 1, 0, 0 ), 1, 1, 1 );
            circle_debug( _id_4B5EBA8746581DEB gettagorigin( level.context_melee_lastframe_bone ), _id_2067FC2D9114EB90.capsule_radius, ( 1, 1, 0 ), 1, 1, 1 );
            line_debug( _id_4B5EBA8746581DEB gettagorigin( level.context_melee_lastframe_bone ), _id_4B5EBA8746581DEB gettagorigin( level.context_melee_lastframe_bone ) + anglestoup( _id_4B5EBA8746581DEB gettagangles( level.context_melee_lastframe_bone ) ) * level.context_melee_eye_height_stand, ( 0, 0, 1 ), 1, 0, 1 );
            line_debug( _id_4B5EBA8746581DEB gettagorigin( level.context_melee_lastframe_bone ) + anglestoup( _id_4B5EBA8746581DEB gettagangles( level.context_melee_lastframe_bone ) ) * level.context_melee_eye_height_stand, _id_4B5EBA8746581DEB gettagorigin( level.context_melee_lastframe_bone ) + anglestoup( _id_4B5EBA8746581DEB gettagangles( level.context_melee_lastframe_bone ) ) * level.context_melee_eye_height_stand + ( 0, 0, -60 ), ( 0, 0, 1 ), 1, 1, 1 );
            circle_debug( end_pos, _id_2067FC2D9114EB90.capsule_radius, ( 0, 0, 1 ), 1, 1, 1 );

            if ( isdefined( self._id_2A3D62043C219DC4 ) )
                circle_debug( self.origin, sqrt( self._id_2A3D62043C219DC4 ), ( 1, 1, 0 ), 1, 1, 1 );
            else
                circle_debug( self.origin, 16, ( 0, 1, 0 ), 1, 1, 1 );

            if ( getdvarint( "dvar_017968E4611011CB" ) )
            {
                _id_3E73EC41BA9920CB show();
                _id_4B5EBA8746581DEB show();
            }
        }

        _id_F17C1ADD186E75C0 = anglestoup( level.player getplayerangles( 1 ) ) * ( _id_2067FC2D9114EB90.capsule_midpoint_height + _id_2067FC2D9114EB90.capsule_radius );
        _id_A9F1CF48B968DBEB = anglestoup( level.player getplayerangles( 1 ) ) * ( _id_7935B319829B6B1B.capsule_midpoint_height + _id_7935B319829B6B1B.capsule_radius );

        if ( !physics_test( "player_capsule_cast", level.player.origin + _id_F17C1ADD186E75C0, _id_3E73EC41BA9920CB gettagorigin( level.context_melee_player_link_bone ) + _id_A9F1CF48B968DBEB, self, "player capsule cast failed", _id_2067FC2D9114EB90, _id_7935B319829B6B1B ) )
            return !collision_check_failed( _id_A30FF6D320CC665E, _id_3E73EC41BA9920CB, _id_4B5EBA8746581DEB );

        switch ( level.context_melee_lastframe_type )
        {
            case "player_eye":
                if ( !physics_test( "player_eye", _id_4B5EBA8746581DEB gettagorigin( level.context_melee_lastframe_bone ), undefined, self, "end pos eye failed", _id_2067FC2D9114EB90 ) )
                    return !collision_check_failed( _id_A30FF6D320CC665E, _id_3E73EC41BA9920CB, _id_4B5EBA8746581DEB );

                break;
            case "player_capsule":
                break;
        }
    }

    _id_A30FF6D320CC665E delete();
    _id_3E73EC41BA9920CB scripts\engine\utility::delaycall( 0.05, ::delete );
    _id_4B5EBA8746581DEB scripts\engine\utility::delaycall( 0.05, ::delete );
    return 1;
}

collision_check_failed( _id_A30FF6D320CC665E, _id_3E73EC41BA9920CB, _id_4B5EBA8746581DEB )
{
    _id_A30FF6D320CC665E delete();
    _id_3E73EC41BA9920CB scripts\engine\utility::delaycall( 0.05, ::delete );
    _id_4B5EBA8746581DEB scripts\engine\utility::delaycall( 0.05, ::delete );

    if ( !isdefined( level.player.context_melee_blocked_hint_allowed ) || level.player.context_melee_blocked_hint_allowed )
    {
        if ( !getdvarint( "dvar_5ECEB684EA4BCA83" ) )
        {
            level.player.context_melee_hint_blocked = scripts\engine\utility::ter_op( isdefined( level.player.context_melee_hint_blocked_custom ), level.player.context_melee_hint_blocked_custom, "context_melee_blocked" );
            level.player thread scripts\engine\sp\utility::display_hint_forced( level.player.context_melee_hint_blocked );
        }
        else
            context_melee_cursor_hint_blocked();
    }

    return 1;
}

get_melee_contents()
{
    contents = [ "physicscontents_clipshot", "physicscontents_itemclip", "physicscontents_characterproxy", "physicscontents_playernosight", "physicscontents_vehicle", "physicscontents_glass" ];
    return physics_createcontents( contents );
}

get_melee_sight_contents()
{
    contents = [ "physicscontents_foliage", "physicscontents_clipshot", "physicscontents_itemclip", "physicscontents_characterproxy", "physicscontents_playernosight", "physicscontents_vehicle" ];
    return physics_createcontents( contents );
}

_id_01445E54B6C662C7()
{
    contents = [ "physicscontents_solid", "physicscontents_playerclip", "physicscontents_characterproxy", "physicscontents_glass" ];
    return physics_createcontents( contents );
}

check_stealth_kill_visible( enemies )
{
    self endon( "death" );
    level.player endon( "death" );
    level endon( "stop_context_melee" );

    if ( !getdvarint( "dvar_AC0F71BC1FF1DC42" ) )
        return 0;

    damage_sight_range = 600;

    if ( isdefined( level.stealth ) && isdefined( level.stealth.damage_sight_range ) )
        damage_sight_range = level.stealth.damage_sight_range;

    proximity_combat_radius_bump = _func_10F8498E5AC721AD();

    if ( !isdefined( proximity_combat_radius_bump ) )
        proximity_combat_radius_bump = 100;

    _id_169E6322D96D0BCF = squared( damage_sight_range + 36 );
    axis = getaiarrayinradius( level.player.origin, 2048, "axis" );
    team3 = getaiarrayinradius( level.player.origin, 2048, "team3" );
    enemies = scripts\engine\utility::array_combine( axis, team3 );
    enemies = scripts\engine\utility::array_remove( enemies, self );
    enemies = scripts\engine\utility::array_removedead_or_dying( enemies );

    if ( enemies.size < 1 )
    {
        print3d_debug( self.origin, "only enemy alive, no silent check", ( 0, 1, 0 ), 1, 0.1, 1, "line2" );
        return 0;
    }

    enemies = sortbydistance( enemies, self.origin );

    foreach ( enemy in enemies )
    {
        if ( istrue( enemy.ignoreall ) )
            continue;

        if ( enemy context_melee_cansee() )
            return 1;
        else if ( enemy context_melee_cansee( self ) && distancesquared( enemy.origin, self.origin ) < _id_169E6322D96D0BCF )
            return 1;
        else if ( distancesquared( enemy.origin, self.origin ) < squared( 100 ) )
        {
            if ( physics_test( "enemy_eye", self geteye(), enemy geteye(), enemy, "silent sight check failed!", undefined ) )
            {

            }

            return 1;
        }
    }

    return 0;
}

do_context_melee( _id_13365C1D4C5CD5F5, direction )
{
    self notify( "start_context_melee" );
    originalorigin = level.player.origin;
    _id_C97575F9BE02F7F2 = level.player getstance();

    if ( !isdefined( self ) )
        return;

    if ( !isalive( self ) )
        return;

    if ( isdefined( self.stealth ) && !istrue( self.keepstealthoncontextmelee ) )
        scripts\engine\utility::ent_flag_clear( "stealth_enabled" );

    self notify( "end_patrol" );
    _id_A30FF6D320CC665E = scripts\engine\utility::spawn_tag_origin();
    _id_A30FF6D320CC665E scripts\common\anim::_id_5CFFE82F5E70231B( 1 );
    level._id_9665E8B8736FF0B7 = _id_A30FF6D320CC665E;
    parent = self getlinkedparent();

    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        _id_A30FF6D320CC665E thread anim_ent_debug();

    scripts\engine\sp\utility::anim_stopanimscripted();

    if ( isdefined( self.context_melee_origin ) )
        _id_A30FF6D320CC665E.origin = self.context_melee_origin;
    else
        _id_A30FF6D320CC665E.origin = self.origin;

    if ( isdefined( self.context_melee_angles ) )
        _id_A30FF6D320CC665E.angles = self.context_melee_angles;
    else
    {
        set_scripted_node_angles( _id_A30FF6D320CC665E, direction, level.context_melee_collision_offset );
        print_debug( "^1Context Melee Kill from direction: " + direction );
    }

    _id_A30FF6D320CC665E axis_debug( ( 0, 1, 1 ), 1000, 10 );
    print3d_debug( self.origin, "enemy melee pos: " + direction, ( 0, 1, 1 ), 1, 0.1, 1000 );
    line_debug( level.player.origin, self.origin, ( 0, 1, 1 ), 1, 0, 1000 );
    circle_debug( self.origin, 16, ( 0, 1, 1 ), 1, 1, 1000 );
    level.player.in_melee_death = 1;
    self.context_melee_og_maxsightdistsqrd = self.maxsightdistsqrd;
    self.context_melee_og_newenemyreactiondistsq = self.newenemyreactiondistsq;
    self.context_melee_og_battlechatter = self.battlechatterallowed;
    self.context_melee_og_allowdeath = self.allowdeath;
    self.context_melee_og_animname = self.animname;
    self.in_melee_death = 1;
    self.allowantigrav = 0;
    self.dontmelee = 1;
    self.maxsightdistsqrd = 1;
    self.fixednode = 0;
    self.ignoreme = 1;
    self.ignoreall = 1;
    self.newenemyreactiondistsq = 0;
    self.allowdeath = 0;
    self.a.disablepain = 1;
    self.allowpain = 0;
    self.battlechatterallowed = 0;
    self.animname = "generic";
    self.context_melee_anim = _id_13365C1D4C5CD5F5;
    self.remove_from_animloop = 1;

    if ( isdefined( self.script_stealthgroup ) && !isdefined( self.context_melee_victim_lives ) )
        scripts\stealth\group::group_removefrompod( self );

    if ( !isdefined( self.context_melee_victim_lives ) )
    {
        self setgoalpos( _id_A30FF6D320CC665E.origin );
        self clearpath();
    }

    if ( isdefined( self ) && isalive( self ) && !isdefined( self.delayeddeath ) && !self._id_A97AC004F00C5DF9 )
        thread scripts\common\ai::magic_bullet_shield();

    if ( isdefined( self ) || isalive( self ) )
    {
        level.player enableinvulnerability();
        level.player enablequickweaponswitch( 1 );
        _id_A30FF6D320CC665E scripts\common\anim::anim_first_frame_solo( level.player.melee_arms, _id_13365C1D4C5CD5F5 );
        waitframe();

        if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        {
            _id_2067FC2D9114EB90 = level.player _meth_8469F795A6FA3DC5( "stand" );
            level.player.melee_arms thread tag_view_debug();
            print3d_debug( level.player.melee_arms gettagorigin( level.context_melee_player_link_bone ), "melee anim start", ( 1, 0, 0 ), 1, 0.1, 1000 );
            line_debug( level.player.melee_arms gettagorigin( level.context_melee_player_link_bone ), level.player.melee_arms.origin + anglestoforward( level.player.melee_arms.angles ) * 100, ( 1, 0, 0 ), 1, 0, 1000 );
            circle_debug( level.player.melee_arms gettagorigin( level.context_melee_player_link_bone ), _id_2067FC2D9114EB90.capsule_radius, ( 1, 0, 0 ), 1, 1, 1000 );

            if ( isdefined( self.context_melee_combat_buffer ) && self.context_melee_combat_buffer > 0 )
                print_debug( "combat counter was at: " + self.context_melee_combat_buffer + " of " + 12 );
        }

        knife = spawn( "script_model", level.player.origin );

        if ( isdefined( level.player.context_melee_knife ) )
            knife setmodel( level.player.context_melee_knife );
        else
            knife setmodel( "weapon_vm_me_soscar_knife" );

        knife notsolid();
        knife linkto( level.player.melee_arms, "tag_accessory_right", ( 0, 0, 0 ), ( 0, 0, 0 ) );

        if ( !isdefined( self.context_melee_victim_lives ) )
            scripts\engine\utility::delaythread( 5, ::death_safety, self );

        level.player notify( "context_melee_anim_started" );
        level.player prep_player_and_enemy( self, _id_A30FF6D320CC665E, _id_13365C1D4C5CD5F5 );

        if ( isdefined( parent ) )
        {
            print_debug( "linking" );
            _id_A30FF6D320CC665E linkto( parent );
        }

        self linkto( _id_A30FF6D320CC665E );
        level.player.melee_arms linkto( _id_A30FF6D320CC665E );
        level.player lerpfovscalefactor( 0, 0.25 );
        _id_337E38412A58641A = getanimlength( scripts\engine\utility::getanim( _id_13365C1D4C5CD5F5 ) );
        _id_4120F65E56B5E799 = getanimlength( level.player.melee_arms scripts\engine\utility::getanim( _id_13365C1D4C5CD5F5 ) );

        if ( _id_337E38412A58641A > _id_4120F65E56B5E799 )
        {
            level.player thread scripts\engine\sp\utility::notify_delay( "context_melee_longest_anim_ended", _id_337E38412A58641A );
            level scripts\engine\utility::delaythread( _id_337E38412A58641A, ::_id_63F4A98A99979090, _id_A30FF6D320CC665E );
        }
        else
        {
            level.player thread scripts\engine\sp\utility::notify_delay( "context_melee_longest_anim_ended", _id_4120F65E56B5E799 );
            level scripts\engine\utility::delaythread( _id_4120F65E56B5E799, ::_id_63F4A98A99979090, _id_A30FF6D320CC665E );
        }

        thread scripts\engine\sp\utility::notify_delay( "context_melee_anim_ended_internal", _id_337E38412A58641A );
        level.player thread scripts\engine\sp\utility::notify_delay( "context_melee_anim_ended", _id_4120F65E56B5E799 );
        _id_AC6D99D19393F2D3 = 0.5;
        level.player scripts\engine\utility::delaycall( _id_4120F65E56B5E799 - _id_AC6D99D19393F2D3, ::lerpfovscalefactor, 1, _id_AC6D99D19393F2D3 );
        self notify( "damage", 0, level.player, undefined, undefined, "MOD_MELEE" );
        thread enemy_end_death_logic( _id_13365C1D4C5CD5F5, parent );
        level.player thread player_end_death_logic( knife, _id_A30FF6D320CC665E, originalorigin, _id_C97575F9BE02F7F2, direction );
        _id_A30FF6D320CC665E thread scripts\common\anim::anim_single( [ self, level.player.melee_arms ], _id_13365C1D4C5CD5F5 );
        scripts\engine\utility::delaycall( 0.05, ::_meth_5E69FA9CFA2546EC, 15, 18, 37, _id_01445E54B6C662C7(), [ level.player, level.player.melee_arms ], 1 );
        level.player.melee_arms scripts\engine\utility::delaycall( 0.05, ::_meth_5E69FA9CFA2546EC, 15, 18, 37, _id_01445E54B6C662C7(), [ level.player, self ], 1 );
    }

    level.player waittill( "context_melee_longest_anim_ended" );
    print_debug( "longest melee anim finished" );
}

anim_ent_debug()
{
    self endon( "death" );

    for (;;)
    {
        sphere_debug( self.origin, 4, ( 1, 1, 1 ), 0, 1 );
        waitframe();
    }
}

context_melee_launch( direction, _id_A30FF6D320CC665E )
{
    level.player endon( "death" );
    print_debug( "launching!" );
    level.player.context_melee_launching = 1;
    level.player enableweapons();

    if ( !level.player hasweapon( "iw8_gunless_farrah" ) )
        level.player giveweapon( "iw8_gunless_farrah" );

    level.player switchtoweaponimmediate( "iw8_gunless_farrah" );
    earthquake( 1, 0.3, level.player.origin, 75 );
    level.player playrumbleonentity( "heavy_1s" );
    level.player thread scripts\sp\player::radial_distortion( 0.05, 0.2, 0.25 );
    visionsetpain( "damage_severe" );
    setsaveddvar( "dvar_B61C9C6A24B5671E", 0 );
    setsaveddvar( "dvar_E42B132626B5992B", 1.9 );
    level.player painvisionon();
    level.player scripts\engine\utility::delaycall( 0.2, ::painvisionoff );
    waitframe();
    level.player unlink();
    level.player thread launch_push_player2();
    og_zplanes = getdvar( "dvar_5025653B60878A96" );
    setsaveddvar( "dvar_5025653B60878A96", "0.1 400 2 1000" );
    level.player scripts\engine\sp\utility::player_gesture_force( "ges_htf_stab_a" );
    wait( level.player getgestureanimlength( "ges_htf_stab_a" ) );
    setsaveddvar( "dvar_5025653B60878A96", og_zplanes );
    level.player.context_melee_launching = undefined;
}

launch_push_player()
{
    fwd = vectornormalize( anglestoforward( level.player.angles ) );
    reverse = fwd * -1;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 6; _id_AC0E594AC96AA3A8++ )
    {
        level.player _meth_96B1C716E98711DB( reverse );
        waitframe();
        reverse = reverse * 1.7;
    }

    wait 0.8;
    reverse = reverse * -0.6;

    for (;;)
    {
        reverse = reverse * 0.75;

        if ( vectordot( reverse, fwd ) < 0.5 )
        {
            level.player _meth_96B1C716E98711DB( ( 0, 0, 0 ) );
            waitframe();
            break;
        }
        else
            level.player _meth_96B1C716E98711DB( reverse );

        waitframe();
    }

    print_debug( "launching finished t:" + gettime() );

    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
    {
        _id_2067FC2D9114EB90 = level.player _meth_8469F795A6FA3DC5( "stand" );
        print3d_debug( level.player.origin + ( 0, 0, -2 ), "slide end", ( 1, 1, 0 ), 1, 0.1, 1000 );
        circle_debug( level.player.origin, _id_2067FC2D9114EB90.capsule_radius, ( 1, 1, 0 ), 1, 1, 1000 );
    }
}

launch_push_player2()
{
    reverse = vectornormalize( anglestoforward( level.player.angles ) ) * -500;
    level.player setvelocity( reverse );
}

set_scripted_node_angles( _id_A165F8AFFEA867AC, direction, offset )
{
    if ( !isdefined( offset ) )
        offset = ( 0, 0, 0 );

    switch ( direction )
    {
        case "front":
            _id_A165F8AFFEA867AC.angles = vectortoangles( level.player.origin - self.origin ) + offset;
            break;
        case "left":
            _id_A165F8AFFEA867AC.angles = vectortoangles( level.player.origin - self.origin ) + ( 0, -90, 0 ) + offset;
            break;
        case "right":
            _id_A165F8AFFEA867AC.angles = vectortoangles( level.player.origin - self.origin ) + ( 0, 90, 0 ) + offset;
            break;
        case "back":
            _id_A165F8AFFEA867AC.angles = vectortoangles( self.origin - level.player.origin ) + offset;
            break;
        default:
    }
}

enemy_end_death_logic( _id_13365C1D4C5CD5F5, parent )
{
    self endon( "death" );
    level endon( "stop_context_melee" );
    self waittill( "context_melee_anim_ended_internal" );

    if ( !isdefined( self.context_melee_victim_lives ) )
    {
        context_melee_death( self );
        context_melee_ragdoll( self );
    }
    else
    {
        self.in_melee_death = 0;
        self.allowantigrav = 1;
        self.dontmelee = 0;
        self.maxsightdistsqrd = self.context_melee_og_maxsightdistsqrd;
        self.fixednode = 0;
        self.ignoreme = 0;
        self.ignoreall = 0;
        self.newenemyreactiondistsq = self.context_melee_og_newenemyreactiondistsq;
        self.a.disablepain = 0;
        self.battlechatterallowed = self.context_melee_og_battlechatter;
        self.context_melee_anim = _id_13365C1D4C5CD5F5;
        self.remove_from_animloop = undefined;
        self.allowdeath = self.context_melee_og_allowdeath;
        self.animname = self.context_melee_og_animname;
        self.context_melee_last_melee_finish_time = gettime();

        if ( isdefined( parent ) )
            self linkto( parent );
    }

    self notify( "context_melee_anim_ended" );
}

player_end_death_logic( knife, _id_A30FF6D320CC665E, originalorigin, _id_C97575F9BE02F7F2, direction )
{
    level.player endon( "death" );
    level.player waittill( "context_melee_anim_ended" );
    knife delete();
    level.player.melee_arms hide();

    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
    {
        _id_2067FC2D9114EB90 = level.player _meth_8469F795A6FA3DC5( "stand" );
        print3d_debug( level.player.origin + ( 0, 0, -2 ), "melee anim end", ( 1, 1, 0 ), 1, 0.1, 1000 );
        circle_debug( level.player.origin, _id_2067FC2D9114EB90.capsule_radius, ( 1, 1, 0 ), 1, 1, 1000 );
    }

    level.player release_player_from_viewmodel_anim( originalorigin, _id_C97575F9BE02F7F2, direction, _id_A30FF6D320CC665E );
    level.player disableinvulnerability();
    level.player enablequickweaponswitch( 0 );
    level.player.melee_arms hide();
    level.player.context_melee_next = get_next_anim( level.player.context_melee_next );
    level.player.in_melee_death = 0;
}

_id_63F4A98A99979090( _id_A30FF6D320CC665E )
{
    _id_A30FF6D320CC665E delete();
}

tag_view_debug()
{
    self endon( "death" );
    level endon( "tag_view_debug_end" );

    if ( getdvarint( "dvar_017968E4611011CB" ) )
    {
        for (;;)
        {
            arrow_debug( self gettagorigin( "tag_view" ), self gettagorigin( "tag_view" ) + anglestoforward( self gettagangles( "tag_view" ) ) * 10, ( 0.25, 0.25, 1 ), 1000 );
            wait 0.1;
        }
    }
}

prep_player_and_enemy( enemy, _id_A165F8AFFEA867AC, anime )
{
    prepare_player_for_viewmodel_anim();
    _id_DD1EA1CF5E2054B1 = getstartangles( _id_A165F8AFFEA867AC.origin, _id_A165F8AFFEA867AC.angles, enemy scripts\engine\utility::getanim( anime ) );
    line_debug( enemy.origin, enemy.origin + anglestoforward( enemy.angles ) * 36, ( 0, 1, 0 ), 1, 0, 1000 );
    line_debug( enemy.origin, enemy.origin + anglestoforward( _id_DD1EA1CF5E2054B1 ) * 36, ( 1, 0, 1 ), 1, 0, 1000 );
    thread axis_debug( ( 0, 1, 0 ), 1000, 10 );
    print3d_debug( self.origin, "pre melee pos", ( 0, 1, 0 ), 1, 0.1, 1000 );
    line_debug( self.origin, self.origin + anglestoforward( self getplayerangles( 1 ) ) * 100, ( 0, 1, 0 ), 1, 0, 1000 );
    _id_D775E14980E96400 = 0.2;
    self playerlinktoblend( self.melee_arms, level.context_melee_player_link_bone, _id_D775E14980E96400, 0.05, 0.1 );
    _id_710129AC48BC62C4 = enemy scripts\engine\utility::spawn_tag_origin();
    enemy linktoblendtotag( _id_710129AC48BC62C4, "tag_origin" );
    _id_710129AC48BC62C4 rotateto( _id_DD1EA1CF5E2054B1, _id_D775E14980E96400, 0.1 );
    wait( _id_D775E14980E96400 );
    self playerlinktoabsolute( self.melee_arms, level.context_melee_player_link_bone );
    _id_710129AC48BC62C4 delete();
    self.melee_arms show();
}

context_melee_death( guy )
{
    if ( !isdefined( guy ) )
        return;

    if ( !isalive( guy ) )
        return;

    guy.skipdeathanim = 1;
    guy.noragdoll = 1;
    guy pushplayer( 0 );
    guy _id_3433EE6B63C7E243::dropallaiweapons();

    if ( isdefined( self._id_1BAB8712529EB3C2 ) && isdefined( self.fnstealthflashlightdetach ) && self._id_1BAB8712529EB3C2 )
        self [[ self.fnstealthflashlightdetach ]]();

    guy.allowdeath = 1;
    guy.diequietly = 1;

    if ( isdefined( guy.magic_bullet_shield ) )
        guy scripts\common\ai::stop_magic_bullet_shield();

    if ( isdefined( guy.damageshield ) )
        guy.damageshield = 0;

    if ( isdefined( guy.stealth ) && !istrue( level.stealth._id_8D8A17B5C4438254 ) )
        guy.stealth.override_damage_auto_range = 60;

    guy kill( ( 0, 0, 0 ), level.player, level.player, "MOD_MELEE" );

    if ( !istrue( guy.context_melee_ragdoll ) )
        level.player.context_melee_kill_origin = guy.origin;
}

context_melee_fx( guy )
{
    if ( isdefined( guy ) && isdefined( guy.context_melee_anim ) )
    {
        switch ( guy.context_melee_anim )
        {
            case "context_melee_kill_01_back":
                playfxontag( scripts\engine\utility::getfx( "vfx_contextmelee_stab" ), guy, "j_neck" );
                break;
            default:
                playfxontag( scripts\engine\utility::getfx( "vfx_contextmelee_stab" ), guy, "j_neck" );
        }
    }
}

context_melee_sfx( guy )
{

}

context_melee_ragdoll( guy )
{
    if ( !isdefined( guy ) && isdefined( level.player.context_melee_kill_origin ) )
    {
        foreach ( corpse in getcorpsearray() )
        {
            if ( istrue( corpse.context_melee_ragdoll ) )
                continue;

            if ( corpse isragdoll() )
                continue;

            _id_A4F5FB62BA3A113B = corpse.origin;

            if ( getdvarint( "dvar_32196FA75434C856" ) )
                _id_A4F5FB62BA3A113B = corpse getcorpsephysicsorigin();

            if ( isdefined( _id_A4F5FB62BA3A113B ) && distancesquared( _id_A4F5FB62BA3A113B, level.player.context_melee_kill_origin ) < squared( 60 ) )
            {
                corpse startragdoll();
                corpse.context_melee_ragdoll = 1;
            }
        }
    }
    else if ( isdefined( guy ) && !istrue( guy.context_melee_ragdoll ) )
    {
        guy thread _id_3433EE6B63C7E243::dropallaiweapons();
        guy startragdoll();
        guy.context_melee_ragdoll = 1;
    }

    level.player.context_melee_kill_origin = undefined;
}

context_melee_rumble_light( guy )
{
    level.player playrumbleonentity( "damage_light" );
}

context_melee_rumble_heavy( guy )
{
    level.player playrumbleonentity( "heavy_1s" );
}

death_safety( guy )
{
    if ( isdefined( guy ) )
    {
        if ( isalive( guy ) )
        {
            if ( isdefined( guy.magic_bullet_shield ) )
                guy scripts\common\ai::stop_magic_bullet_shield();
        }
    }
}

check_player_can_stealth_kill_me( animation, direction )
{
    level endon( "stop_context_melee" );

    if ( isdefined( self.context_melee_allow_directions ) )
    {
        if ( !scripts\engine\utility::array_contains( self.context_melee_allow_directions, direction ) )
        {
            print3d_debug( self.origin, "no melee!, direction " + direction + " not allowed!", ( 1, 0, 0 ), 1, 0.1, 1, "line5" );
            return 0;
        }
    }

    if ( !isdefined( animation ) )
    {
        print3d_debug( self.origin, "no melee!, target but no animation", ( 1, 0, 0 ), 1, 0.1, 1, "line5" );
        return 0;
    }

    if ( !isdefined( level.scr_anim["generic"][animation] ) )
    {
        print3d_debug( self.origin, "no melee!, target but no generic animation", ( 1, 0, 0 ), 1, 0.1, 1, "line5" );
        return 0;
    }

    if ( self.currentpose != "stand" && self.currentpose != "crouch" )
    {
        print3d_debug( self.origin, "no melee!, AI is crouching or moving", ( 1, 0, 0 ), 1, 0.1, 1, "line5" );
        return 0;
    }

    if ( self._id_A97AC004F00C5DF9 )
    {
        if ( self._id_8DA037CBE81E4F8F )
        {
            print3d_debug( self.origin, "no melee!, target is already meleeing player!", ( 1, 0, 0 ), 1, 0.1, 1, "line5" );
            return 0;
        }
    }

    _id_4573A8725DD3748E = abs( self.origin[2] - level.player.origin[2] );

    if ( _id_4573A8725DD3748E >= getdvarint( "dvar_57C7E30C0DBBA2FE" ) )
    {
        print3d_debug( self.origin, "no melee! height difference is " + _id_4573A8725DD3748E + " units", ( 1, 0, 0 ), 1, 0.1, 1, "line5" );
        return 0;
    }

    if ( level.player isjumping() )
    {
        print3d_debug( self.origin, "no melee!, player is jumping", ( 1, 0, 0 ), 1, 0.1, 1, "line5" );
        return 0;
    }

    if ( !anim_collision_check( animation, direction ) )
    {
        if ( !isdefined( level.context_melee_fail_attempts ) )
            level.context_melee_fail_attempts = 0;

        offsets = [ 5, -5, 15, -15, 30, -30, 45, -45 ];

        if ( level.context_melee_fail_attempts < offsets.size )
        {
            level.context_melee_collision_offset = ( 0, offsets[level.context_melee_fail_attempts], 0 );

            if ( !anim_collision_check( animation, direction, level.context_melee_collision_offset ) )
            {
                level.context_melee_fail_attempts = level.context_melee_fail_attempts + 1;
                print3d_debug( self.origin, "collision extra fail attempts: " + level.context_melee_fail_attempts, ( 1, 0, 0 ), 1, 0.1, 1, "line3" );
                return 0;
            }
            else
                print3d_debug( self.origin, "collision extra success offset: " + level.context_melee_collision_offset, ( 0, 1, 1 ), 1, 0.1, 1, "line3" );
        }
        else
        {
            level.context_melee_fail_attempts = undefined;
            level.context_melee_collision_offset = undefined;
            return 0;
        }
    }
    else
    {
        level.context_melee_fail_attempts = undefined;
        level.context_melee_collision_offset = undefined;
    }

    if ( getdvarint( "dvar_AC0F71BC1FF1DC42" ) )
    {
        if ( check_stealth_kill_visible() )
            return 0;
    }

    print3d_debug( self.origin, "IS stealth melee target with anime: " + animation, ( 0, 1, 0 ), 1, 0.1, 1, "line5" );
    return 1;
}

player_stealth_kill_direction()
{
    _id_A43B0202C06E0907 = self gettagangles( "tag_origin" );
    _id_F58A124E0F0556E7 = self gettagorigin( "tag_origin" );
    _id_2A49AD1CAE501CE3 = anglestoright( _id_A43B0202C06E0907 );
    _id_B4E1754D236C2278 = anglestoforward( _id_A43B0202C06E0907 );
    _id_2353CA8656F77E04 = level.player.origin - _id_F58A124E0F0556E7;
    _id_2353CA8656F77E04 = ( _id_2353CA8656F77E04[0], _id_2353CA8656F77E04[1], 0 );
    _id_2353CA8656F77E04 = vectornormalize( _id_2353CA8656F77E04 );
    _id_EFC688FB667EF281 = abs( vectordot( _id_B4E1754D236C2278, ( 0, 0, 1 ) ) );

    if ( _id_EFC688FB667EF281 > 0.7 )
        _id_B4E1754D236C2278 = vectornormalize( ( _id_2A49AD1CAE501CE3[0], _id_2A49AD1CAE501CE3[1], 0 ) );
    else
        _id_B4E1754D236C2278 = vectornormalize( ( _id_B4E1754D236C2278[0], _id_B4E1754D236C2278[1], 0 ) );

    _id_9780F353E61A7BA3 = anglestoforward( self.angles );

    if ( vectordot( _id_2353CA8656F77E04, _id_9780F353E61A7BA3 ) > vectordot( _id_B4E1754D236C2278, _id_9780F353E61A7BA3 ) )
        _id_B4E1754D236C2278 = _id_9780F353E61A7BA3;

    _id_2A49AD1CAE501CE3 = vectorcross( _id_B4E1754D236C2278, ( 0, 0, 1 ) );
    dot = vectordot( _id_B4E1754D236C2278, _id_2353CA8656F77E04 );
    _id_ED451F0EA36C48C6 = vectordot( _id_2A49AD1CAE501CE3, _id_2353CA8656F77E04 );

    if ( isdefined( self.context_melee_back_dot_override ) )
        _id_E5228E274C9DB3CE = self.context_melee_back_dot_override;
    else
        _id_E5228E274C9DB3CE = -0.5;

    if ( dot < _id_E5228E274C9DB3CE )
    {
        print3d_debug( self.origin, "direction: back dot: " + dot + " threat: " + self getthreatsight( level.player ), ( 0, 1, 0 ), 1, 0.1, 1, "line4" );
        return "back";
    }
    else if ( dot > 0.6 )
    {
        print3d_debug( self.origin, "direction: front dot: " + dot + " threat: " + self getthreatsight( level.player ), ( 0, 1, 0 ), 1, 0.1, 1, "line4" );
        return "front";
    }
    else if ( _id_ED451F0EA36C48C6 > 0 )
    {
        print3d_debug( self.origin, "direction: right dot: " + dot + " threat: " + self getthreatsight( level.player ), ( 0, 1, 0 ), 1, 0.1, 1, "line4" );
        return "right";
    }
    else
    {
        print3d_debug( self.origin, "direction: left dot: " + dot + " threat: " + self getthreatsight( level.player ), ( 0, 1, 0 ), 1, 0.1, 1, "line4" );
        return "left";
    }

    return undefined;
}

get_next_anim( _id_2F55781AF96F22F9, _id_72B3BDA55829E13C )
{
    animindex = _id_2F55781AF96F22F9;

    for (;;)
    {
        _id_B85C143EC43ECD14 = "context_melee_kill_0" + animindex + "_";

        if ( isdefined( _id_72B3BDA55829E13C ) )
        {
            if ( isdefined( level.scr_anim["generic"][_id_B85C143EC43ECD14 + _id_72B3BDA55829E13C] ) )
                return _id_B85C143EC43ECD14 + _id_72B3BDA55829E13C;
        }

        animindex++;
        _id_B85C143EC43ECD14 = "context_melee_kill_0" + animindex + "_";

        if ( !isdefined( level.scr_anim["generic"][_id_B85C143EC43ECD14 + "back"] ) && !isdefined( level.scr_anim["generic"][_id_B85C143EC43ECD14 + "front"] ) && !isdefined( level.scr_anim["generic"][_id_B85C143EC43ECD14 + "left"] ) && !isdefined( level.scr_anim["generic"][_id_B85C143EC43ECD14 + "right"] ) )
            animindex = 1;

        if ( !isdefined( _id_72B3BDA55829E13C ) )
            return animindex;

        if ( animindex == _id_2F55781AF96F22F9 )
            break;
    }

    return undefined;
}

get_anim_from_direction( direction )
{
    if ( !isdefined( level.player.context_melee_next ) )
        level.player.context_melee_next = 1;

    _id_13365C1D4C5CD5F5 = undefined;

    if ( isdefined( self.context_melee_anim_name ) )
    {
        if ( isdefined( self.context_melee_anim_name[direction] ) )
            _id_13365C1D4C5CD5F5 = self.context_melee_anim_name[direction];
        else if ( isdefined( self.context_melee_anim_name["all"] ) )
            _id_13365C1D4C5CD5F5 = self.context_melee_anim_name["all"];
    }

    if ( !isdefined( _id_13365C1D4C5CD5F5 ) )
        _id_13365C1D4C5CD5F5 = get_next_anim( level.player.context_melee_next, direction );

    return _id_13365C1D4C5CD5F5;
}

prepare_player_for_viewmodel_anim()
{
    scripts\sp\utility::nvidiaansel_scriptdisable( 1 );
    level.player setstance( "stand", 0, 1, 1 );
    level.player thread freeze_controls_when_standing();
    level.player freezelookcontrols( 1 );
    level.player _id_3B64EB40368C1450::set( "viewmodel_anim", "weapon", 0, "context_melee" );
    level.player _id_3B64EB40368C1450::set( "viewmodel_anim", "melee", 0, "context_melee" );
    level.player _id_3B64EB40368C1450::set( "viewmodel_anim", "prone", 0, "context_melee" );
    level.player _id_3B64EB40368C1450::set( "viewmodel_anim", "crouch", 0, "context_melee" );
}

freeze_controls_when_standing()
{
    self endon( "death" );
    level endon( "stop_context_melee" );

    while ( self getstance() != "stand" )
        waitframe();

    self freezecontrols( 1 );
}

release_player_from_viewmodel_anim( originalorigin, _id_C97575F9BE02F7F2, direction, _id_A30FF6D320CC665E )
{
    if ( istrue( level.context_melee_do_launch ) )
        level.player context_melee_launch( direction, _id_A30FF6D320CC665E );

    level.player unlink();
    level.player freezecontrols( 0 );
    level.player freezelookcontrols( 0 );
    level.player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "viewmodel_anim" );
    level.player setstance( _id_C97575F9BE02F7F2 );
    scripts\sp\utility::nvidiaansel_scriptdisable( 0 );
}

context_melee_sfx_player( player )
{
    player play_sound_safe( "context_melee_kill_02_back" );
}

_id_B310B0376DBA9FB0()
{
    if ( istrue( self._id_74BF697864C23EF8 ) )
        return 0;

    return 1;
}

context_melee_cansee( _id_A0DDCCC8DA0CA6AB )
{
    if ( level.context_melee_sight_disabled )
        return 0;

    if ( !isdefined( _id_A0DDCCC8DA0CA6AB ) )
        _id_A0DDCCC8DA0CA6AB = level.player;

    print_debug( "CanSee: " + self cansee( _id_A0DDCCC8DA0CA6AB ) );
    print_debug( "AIPointInFOV: " + self aipointinfov( _id_A0DDCCC8DA0CA6AB geteye() ) );

    if ( self aipointinfov( _id_A0DDCCC8DA0CA6AB geteye() ) && self cansee( _id_A0DDCCC8DA0CA6AB ) )
        return 1;

    return 0;
}

print_debug( text )
{
    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        iprintln( text );
}

print3d_debug( origin, text, color, alpha, scale, duration, offset )
{
    if ( !isdefined( offset ) )
        offset = "nothing";

    _id_2067FC2D9114EB90 = level.player _meth_8469F795A6FA3DC5( level.player getstance() );

    switch ( offset )
    {
        case "nothing":
            offset = ( 0, 0, 0 );
            break;
        case "line1":
            offset = ( 0, 0, 8 ) + ( 0, 0, _id_2067FC2D9114EB90.capsule_midpoint_height );
            break;
        case "line2":
            offset = ( 0, 0, 6 ) + ( 0, 0, _id_2067FC2D9114EB90.capsule_midpoint_height );
            break;
        case "line3":
            offset = ( 0, 0, 4 ) + ( 0, 0, _id_2067FC2D9114EB90.capsule_midpoint_height );
            break;
        case "line4":
            offset = ( 0, 0, 2 ) + ( 0, 0, _id_2067FC2D9114EB90.capsule_midpoint_height );
            break;
        case "line5":
            offset = ( 0, 0, 0 ) + ( 0, 0, _id_2067FC2D9114EB90.capsule_midpoint_height );
            break;
    }

    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        return;
}

line_debug( start, end, color, alpha, _id_FFB74DFE2FDAD3BE, duration )
{
    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        return;
}

sphere_debug( origin, radius, color, _id_FFB74DFE2FDAD3BE, duration )
{
    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        return;
}

axis_debug( color, duration, _id_A61C75B156FC1EE0 )
{
    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        scripts\engine\utility::draw_ent_axis( color, duration, _id_A61C75B156FC1EE0 );
}

circle_debug( center, radius, color, alpha, _id_FFB74DFE2FDAD3BE, duration )
{
    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        scripts\engine\utility::draw_circle( center, radius, color, alpha, _id_FFB74DFE2FDAD3BE, duration );
}

capsule_debug( pos, radius, height, angles, color, _id_FFB74DFE2FDAD3BE, duration )
{
    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        scripts\engine\utility::draw_capsule( pos, radius, height, angles, color, _id_FFB74DFE2FDAD3BE, duration );
}

angles_debug( angles, origin, _id_E0B935B0C281315B, duration, scale )
{
    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        scripts\engine\utility::draw_angles( angles, origin, _id_E0B935B0C281315B, duration, scale );
}

box_debug( angles, origin, _id_E0B935B0C281315B, duration, scale )
{
    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
        scripts\engine\utility::draw_angles( angles, origin, _id_E0B935B0C281315B, duration, scale );
}

arrow_debug( start, end, color, duration )
{
    if ( getdvarint( "dvar_3844D738B76E11E2" ) )
    {
        angles = vectortoangles( start - end );
        forward = anglestoforward( angles );
        line_debug( start, end, color, 1, 0, duration );
        line_debug( start, start + forward * 1, ( 1, 0, 0 ), 1, 0, duration );
    }
}
