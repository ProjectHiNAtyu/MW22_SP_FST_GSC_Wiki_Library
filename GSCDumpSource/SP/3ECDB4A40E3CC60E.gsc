// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

forwardpushevent( asmname, statename, _id_F2B19B25D457C2A6, params )
{
    _id_F449E4F8397F13E7 = scripts\asm\asm::asm_geteventdata( asmname, "player_pushed" );
    scripts\asm\asm::asm_fireephemeralevent( "player_pushed", "player_pushed", _id_F449E4F8397F13E7 );
}

playanim_pushed( asmname, statename, params )
{
    _id_93A2C35BC9547955 = scripts\asm\asm::asm_getanim( asmname, statename );
    _id_F449E4F8397F13E7 = scripts\asm\asm::asm_getephemeraleventdata( "player_pushed", "player_pushed" );

    if ( isdefined( _id_F449E4F8397F13E7 ) )
    {
        _id_D4C3D11EC9988C73 = vectortoyaw( -1 * _id_F449E4F8397F13E7 );
        self orientmode( "face angle", _id_D4C3D11EC9988C73 );
    }

    scripts\asm\shared\utility::playanim( asmname, statename, params );
}

playanim_opendoor( asmname, statename, params )
{
    self endon( statename + "_finished" );
    _id_36EFFA6A4B76959F = 1;
    _id_E3897A292B9511DD = 24;
    _id_7F980E69DEF745B8 = scripts\asm\asm::asm_getanim( asmname, statename );
    _id_9605CBCCA5366F66 = scripts\asm\asm::asm_getxanim( statename, _id_7F980E69DEF745B8 );
    self aisetanim( statename, _id_7F980E69DEF745B8 );
    door = self._blackboard.doortoopen;
    _id_6128A95975EB9730 = getnotetracktimes( _id_9605CBCCA5366F66, "arrival" );
    movedelta = getmovedelta( _id_9605CBCCA5366F66, 0, _id_6128A95975EB9730[0] );
    _id_7C64480FEDE224F7 = ( _id_36EFFA6A4B76959F + _id_E3897A292B9511DD, 0, 0 ) + movedelta;
    _id_2B58E9F9E67DE0A5 = anglestoleft( door.true_start_angles );

    if ( door scripts\sp\door::should_open_left() )
        _id_2B58E9F9E67DE0A5 = _id_2B58E9F9E67DE0A5 * -1;

    doorcenter = getdoorcenter( door );
    _id_279A4854B51C5AF2 = vectortoangles( _id_2B58E9F9E67DE0A5 );
    _id_BCF9684C0529009A = doorcenter + rotatevector( _id_7C64480FEDE224F7, _id_279A4854B51C5AF2 );
    _id_F20BC08C9FC211A0 = ( 0, angleclamp180( _id_279A4854B51C5AF2[1] - 180 ), 0 );
    _id_6040E7EBA5E09557 = 300;
    self startcoverarrival();
    self motionwarp( _id_BCF9684C0529009A, _id_F20BC08C9FC211A0, _id_6040E7EBA5E09557 );
    self notify( "opening_door" );
    scripts\asm\asm::asm_donotetracks( asmname, statename, ::opendoor_notehandler );
}

opendoor_notehandler( _id_A234A65C378F3289 )
{
    if ( _id_A234A65C378F3289 == "open" )
    {
        if ( isdefined( self._blackboard.dooropenfunc ) && isdefined( self._blackboard.doortoopen ) )
            self._blackboard.doortoopen thread [[ self._blackboard.dooropenfunc ]]( self, scripts\asm\shared\utility::calcdooropenspeed() );
    }
}

getdoorcenter( door )
{
    return door.origin + rotatevector( ( door.length * 0.5, 0, 0 ), door.true_start_angles );
}

shouldopendoor( asmname, statename, _id_F2B19B25D457C2A6, params )
{
    return 0;
}

getstrafeanimweights( yaw )
{
    _id_37EE045145512FBD = [];

    for ( index = 0; index < 9; index++ )
        _id_37EE045145512FBD[index] = 0;

    _id_2D702DDB2A9C3231 = [ -180, -135, -90, -45, 0, 45, 90, 135, 180 ];

    for ( index = 0; yaw >= _id_2D702DDB2A9C3231[index]; index++ )
    {

    }

    _id_D1EEA60321B43092 = index - 1;
    next_index = index;
    _id_E0C8607002F43670 = ( yaw - _id_2D702DDB2A9C3231[_id_D1EEA60321B43092] ) / ( _id_2D702DDB2A9C3231[next_index] - _id_2D702DDB2A9C3231[_id_D1EEA60321B43092] );
    _id_538BF88F24008653 = 1 - _id_E0C8607002F43670;
    _id_37EE045145512FBD[_id_D1EEA60321B43092] = _id_538BF88F24008653;
    _id_37EE045145512FBD[next_index] = _id_E0C8607002F43670;

    if ( _id_37EE045145512FBD[0] > _id_37EE045145512FBD[8] )
        _id_37EE045145512FBD[8] = _id_37EE045145512FBD[0];
    else
        _id_37EE045145512FBD[0] = _id_37EE045145512FBD[8];

    return _id_37EE045145512FBD;
}

initmovestrafeloopnew( asmname, statename, params )
{
    rate = 1.0;

    if ( isdefined( params ) )
        rate = params;
}

movestrafeloopnew( asmname, statename, params )
{
    self endon( statename + "_finished" );
    _id_D180B535A33B044D = 0.2;
    rate = 1.0;

    if ( isdefined( params ) )
        rate = params;

    anims = scripts\asm\asm::asm_getanim( asmname, statename );
    self.strafeangle = 0;
    _id_E847B60001171E89 = self getmotionangle();
    _id_23C5FF8693C053DF = 0;

    for (;;)
    {
        if ( length( self.velocity ) > 1.0 )
            _id_E847B60001171E89 = self getmotionangle();

        wait 0.05;
        self.strafeangle = _id_E847B60001171E89;
        wait 0.02;
        _id_37EE045145512FBD = getstrafeanimweights( self.strafeangle );

        if ( !_id_23C5FF8693C053DF )
        {
            _id_0C8AAF5BC74C22BB = scripts\asm\asm::asm_lookupanimfromalias( statename, "blank" );
            self aisetanim( statename, _id_0C8AAF5BC74C22BB );
            _id_6FEAE5AF1CBF5306 = scripts\asm\asm::asm_lookupanimfromalias( statename, "f_knob" );
            self setanim( scripts\asm\asm::asm_getxanim( statename, _id_6FEAE5AF1CBF5306 ), 1, _id_D180B535A33B044D, 1 );
            _id_23C5FF8693C053DF = 1;
        }

        for ( index = 0; index < _id_37EE045145512FBD.size; index++ )
        {
            if ( isdefined( anims[index] ) )
                self setanimlimited( scripts\asm\asm::asm_getxanim( statename, anims[index] ), _id_37EE045145512FBD[index], 0.1, rate, 1 );
        }

        wait 0.1;
    }
}

playmovestrafeloopnew( asmname, statename, params )
{
    initmovestrafeloopnew( asmname, statename, params );
    thread movestrafeloopnew( asmname, statename, params );
}

playmovestrafeloop( asmname, statename, params )
{
    initmovestrafeloop( asmname, statename, params );
    thread movestrafeloop( asmname, statename, params );
}

initmovestrafeloop( asmname, statename, params )
{
    rate = 1.0;

    if ( isdefined( params ) && scripts\asm\asm::asm_getdemeanor() != "frantic" )
        rate = params;

    _id_7CEED13CE59ACACB = scripts\asm\asm::asm_getxanim( statename, scripts\asm\asm::asm_lookupanimfromalias( statename, "f" ) );
    _id_728CA68E96565BF5 = scripts\asm\asm::asm_getxanim( statename, scripts\asm\asm::asm_lookupanimfromalias( statename, "l" ) );
    _id_41EDCE5571E4F387 = scripts\asm\asm::asm_getxanim( statename, scripts\asm\asm::asm_lookupanimfromalias( statename, "r" ) );
    _id_862DE7BDFFD3F877 = scripts\asm\asm::asm_getxanim( statename, scripts\asm\asm::asm_lookupanimfromalias( statename, "b" ) );
    self _meth_C9B81263AF9CD002( _id_7CEED13CE59ACACB, 1, 0.1, rate, 1 );
    self _meth_C9B81263AF9CD002( _id_862DE7BDFFD3F877, 1, 0.1, rate, 1 );
    self _meth_C9B81263AF9CD002( _id_41EDCE5571E4F387, 1, 0.1, rate, 1 );
    self _meth_C9B81263AF9CD002( _id_728CA68E96565BF5, 1, 0.1, rate, 1 );
}

movestrafeloop( asmname, statename, params )
{
    self endon( statename + "_finished" );
    rate = 1.0;

    if ( isdefined( params ) )
        rate = params;

    self codemoveanimrate( rate );
    _id_7CEED13CE59ACACB = scripts\asm\asm::asm_getxanim( statename, scripts\asm\asm::asm_lookupanimfromalias( statename, "f_knob" ) );
    _id_728CA68E96565BF5 = scripts\asm\asm::asm_getxanim( statename, scripts\asm\asm::asm_lookupanimfromalias( statename, "l_knob" ) );
    _id_41EDCE5571E4F387 = scripts\asm\asm::asm_getxanim( statename, scripts\asm\asm::asm_lookupanimfromalias( statename, "r_knob" ) );
    _id_862DE7BDFFD3F877 = scripts\asm\asm::asm_getxanim( statename, scripts\asm\asm::asm_lookupanimfromalias( statename, "b_knob" ) );

    for (;;)
    {
        _id_37EE045145512FBD = _id_2B79931B08683E0A::quadrantanimweights( self getmotionangle() );
        self setanim( _id_7CEED13CE59ACACB, _id_37EE045145512FBD["front"], 0.2, 1.0, 1 );
        self setanim( _id_862DE7BDFFD3F877, _id_37EE045145512FBD["back"], 0.2, 1.0, 1 );
        self setanim( _id_728CA68E96565BF5, _id_37EE045145512FBD["left"], 0.2, 1.0, 1 );
        self setanim( _id_41EDCE5571E4F387, _id_37EE045145512FBD["right"], 0.2, 1.0, 1 );
        wait 0.05;
        waittillframeend;
    }
}
