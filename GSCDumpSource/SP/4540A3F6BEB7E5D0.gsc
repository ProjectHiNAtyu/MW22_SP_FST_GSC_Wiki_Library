// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_player_death()
{
    precacheshader( "hud_icon_grenade_incoming_frag_sp" );
    precacheshader( "hud_burningcaricon" );
    precacheshader( "hud_icon_exploding_car_red" );
    precacheshader( "hud_destructibledeathicon" );
    precacheshader( "hud_burningbarrelicon" );
    precacheshader( "ui_player_death_overlay" );
    precacheshader( "ui_player_death_tunnel_overlay" );
    precacheshader( "ui_player_death_black_overlay" );
    precachestring( &"SCRIPT/GRENADE_DEATH" );
    precachestring( &"SCRIPT/GRENADE_SUICIDE" );
    precachestring( &"SCRIPT/EXPLODING_VEHICLE_DEATH" );
    precachestring( &"SCRIPT/EXPLODING_DESTRUCTIBLE_DEATH" );
    precachestring( &"SCRIPT/EXPLODING_BARREL_DEATH" );
    precachestring( &"SCRIPT/JUGGDEATH_1" );
    precachestring( &"SCRIPT/JUGGDEATH_2" );
    precachestring( &"SCRIPT/JUGGDEATH_3" );
    initdeathvfx();
    init_player_animated_death();
    thread main();
}

initdeathvfx()
{
    level.g_effect["player_death_fire"] = loadfx( "vfx/iw8/core/player/vfx_player_death_fire.vfx" );
}

init_player_animated_death()
{
    level.player.death = spawnstruct();
    level.player.death.deaths = [];
    register_deaths();
    setdvar( "dvar_72B7A039560BA3D2", 1 );
}

register_deaths()
{
    if ( !isdefined( level.player_death_override ) )
    {
        register_player_death( "fire", "stand", "vm_death_fire_01", [ "player_death_fall_left", "plr_death_flop" ], "origin", 0 );
        register_player_death( "default", "stand", "vm_death_b_01", [ "player_death_fall_left", "plr_death_flop" ], "forward", 100 );
        register_player_death( "default", "stand", "vm_death_b_02", [ "player_death_fall_back", "plr_death_flop" ], "forward", 70 );
        register_player_death( "default", "stand", "vm_death_f_01", [ "player_death_stand_left", "plr_death_flop" ], "back", 45 );
        register_player_death( "default", "stand", "vm_death_f_02", [ "player_death_stand_left", "plr_death_flop" ], "back", 100 );
        register_player_death( "default", "stand", "vm_death_f_03", [ "player_death_stand_left", "plr_death_flop" ], "forward", 70 );
        register_player_death( "default", "stand", "vm_death_l_01", [ "player_death_stand_left", "plr_death_flop" ], "left", 74 );
        register_player_death( "default", "stand", "vm_death_r_01", [ "player_death_stand_left", "plr_death_flop" ], "right", 64 );
        register_player_death( "default", "stand", "vm_death_generic_01", [ "player_death_fall_back", "plr_death_flop" ], "origin", 0 );
    }

    setdvar( "dvar_C8DA45DE891DC5CB", 0 );
    setdvar( "dvar_C8DA46DE891DC7FE", 0 );
    setdvar( "dvar_C8DA47DE891DCA31", 0 );
}

register_player_death( type, stance, gesture, soundalias, direction, falldist, deathfunc )
{
    if ( stance != "stand" && stance != "crouch" && stance != "prone" )
    {

    }

    death = spawnstruct();
    death.gesture = gesture;
    death.soundalias = soundalias;
    death.type = type;
    death.stance = stance;
    death.falldir = direction;
    death.falldist = falldist;

    if ( isdefined( deathfunc ) )
        death.function = deathfunc;

    level.player.death.deaths = scripts\engine\utility::array_add_safe( level.player.death.deaths, death );
    return death;
}

main()
{
    level.player thread player_throwgrenade_timer();
    level.player waittill( "death", attacker, cause, objweapon, _id_A2731E6D9AF15254, inflictor, _id_976E211753307EE8, _id_976E241753308581, _id_976E23175330834E, _id_976E2617533089E7 );

    if ( isdefined( attacker ) && scripts\engine\utility::is_equal( attacker.asmname, "suicidebomber" ) && !istrue( level.player.suicide_bomber_death_quote_skip ) )
    {
        if ( !isdefined( level.custom_death_quote ) )
            set_custom_death_quote( 57 );
    }

    scripts\sp\gameskill::auto_adjust_playerdied();
    scripts\sp\analytics::_id_29AD13C8B56BC475( attacker, objweapon, undefined, cause, undefined );
    weaponname = undefined;

    if ( isdefined( objweapon ) )
        weaponname = getcompleteweaponname( objweapon );

    level.player _meth_E829EDF790B05521( "deathsdoor", "deathsdoor", "reverb" );
    level.player setsoundsubmix( "deaths_door_sp" );
    level.player shellshock( "default_nosound", 3 );
    level.player playsound( "deaths_door_death" );
    level.player thread scripts\sp\audio::stop_deaths_door_audio();
    level.player allowmelee( 0 );
    level.player _meth_D7D5EF1BA6D19E25();
    _func_537904608904BAFE();
    setomnvar( "ui_death_hint", 0 );
    setomnvar( "ui_armor_warning", "hide_armor" );
    setomnvar( "ui_hide_weapon_info", 1 );
    setomnvar( "ui_player_dead", 1 );
    setomnvar( "ui_gettocover_state", 0 );
    setsaveddvar( "dvar_4E8225C28298A6AD", 0 );
    setsaveddvar( "dvar_9D7A2FA032E463D5", 1 );
    setsaveddvar( "dvar_5D474D39E096F8F1", 0 );

    if ( isdefined( level.player._id_5D845F5108D98419 ) )
    {
        level.player [[ level.player._id_5D845F5108D98419 ]]();
        _id_202CB21796EAB2C0();
        return;
    }

    stance = get_stance();
    running = playerwasrunning();
    _id_6E8C69407628C3B7 = get_animated_player_death( stance, running, cause, _id_A2731E6D9AF15254, attacker );
    level.player thread setdeathangles( attacker, stance, _id_6E8C69407628C3B7, _id_A2731E6D9AF15254 );

    if ( isdefined( _id_6E8C69407628C3B7 ) )
        thread gesture_death_anim( _id_6E8C69407628C3B7 );
    else
        thread non_gesture_death_anim();

    level.player thread deathfx( cause );

    if ( isdefined( level._id_428685EB57081750 ) )
        wait( level._id_428685EB57081750 );
    else
        wait 1.4;

    thread set_death_hint( attacker, cause, weaponname, inflictor );
    wait 1.0;
    wait_remaining_time_or_player_input( 3.2 );
    _id_202CB21796EAB2C0();
}

_id_202CB21796EAB2C0()
{
    setomnvar( "ui_player_dead", 0 );
    setdvar( "dvar_72B7A039560BA3D2", 1 );
    scripts\sp\analytics::playerdeath();
    setsaveddvar( "dvar_59FB27388A746DA5", 0 );
    _func_67455C208EFB430B( scripts\sp\utility::in_yolo_mode() );
}

get_stance()
{
    if ( level.player scripts\engine\sp\utility::issliding() )
        return "crouch";

    if ( level.player _meth_E5BF22923D0004BC() )
        return "prone";

    return level.player getstance();
}

wait_remaining_time_or_player_input( waittime )
{
    level.player endon( "use_pressed" );
    level.player endon( "weapon_switch_pressed" );
    level.player endon( "jump_pressed" );
    level.player endon( "stance_pressed" );
    wait( waittime );
}

timerwait( time )
{
    waittime = time - self.waitedtime;

    if ( waittime <= 0 )
        return;

    wait( time - self.waitedtime );
    self.waitedtime = self.waitedtime + time;
}

non_gesture_death_anim()
{
    tossgun();
    level.player takeallweapons();
}

playerwasrunning()
{
    stance = level.player getstance();
    _id_B82744BB978BD055 = level.player scripts\engine\sp\utility::issliding();

    if ( level.player getnormalizedmovement()[0] > 0.7 && isdefined( stance ) && stance == "stand" && !_id_B82744BB978BD055 )
        running = 1;
    else
        running = 0;
}

get_animated_player_death( stance, running, cause, _id_A2731E6D9AF15254, attacker )
{
    if ( !player_death_animation_enabled() )
        return;

    if ( isdefined( _id_A2731E6D9AF15254 ) )
        return;

    if ( !level.player isonground() )
        return;

    _id_F136BF8D18978572 = pick_death( stance, running, cause, attacker );

    if ( isdefined( _id_F136BF8D18978572 ) )
        return _id_F136BF8D18978572;
    else
        return;
}

pick_death( stance, running, cause, attacker )
{
    death = undefined;

    if ( deathisanimexempt( cause ) )
        return undefined;

    type = getdeathtypefromcause( cause );
    deaths = getdeathsfortypeandstance( type, stance );
    death = try_deaths( deaths, cause, attacker );

    if ( getdvarint( "dvar_D20570703776A47E", 0 ) == 1 )
    {
        if ( deaths.size == 0 )
        {

        }
        else if ( !isdefined( death ) )
        {

        }
    }

    return death;
}

getdeathsfortypeandstance( type, stance )
{
    deaths = level.player.death.deaths;

    foreach ( death in deaths )
    {
        if ( death.type != type || death.stance != stance )
            deaths = scripts\engine\utility::array_remove( deaths, death );
    }

    _id_EE04FC82FA87166F = level.player isonground();

    foreach ( death in deaths )
    {
        if ( !_id_EE04FC82FA87166F && death.falldir != "origin" )
            deaths = scripts\engine\utility::array_remove( deaths, death );
    }

    return deaths;
}

getdeathtypefromcause( cause )
{
    if ( isdefined( cause ) && damage_is_fire( cause ) )
        return "fire";

    if ( isdefined( cause ) && damage_is_explosive( cause ) )
        return "explo";

    return "default";
}

deathisanimexempt( cause )
{
    if ( !isdefined( cause ) )
        return 1;

    if ( cause == "MOD_SUICIDE" || cause == "MOD_TRIGGER_HURT" )
        return 1;

    if ( isnullweapon( level.player getcurrentweapon() ) )
        return 1;

    return 0;
}

try_deaths( deaths, cause, attacker )
{
    deaths = scripts\engine\utility::array_randomize( deaths );

    foreach ( _id_AC0E594AC96AA3A8, death in deaths )
    {
        if ( death validatefalldirection( cause, attacker ) )
            return death;
    }

    return undefined;
}

tossgun( model )
{
    if ( !isdefined( model ) )
        model = getweaponmodel( level.player getcurrentprimaryweapon() );

    gun_model = spawn( "script_model", level.player.origin + ( 0, -7, 20 ) );
    gun_model setmodel( model );

    if ( !gun_model physics_getnumbodies() )
    {
        gun_model delete();
        return;
    }

    gun_model.angles = level.player.angles + ( randomintrange( -20, 20 ), randomintrange( -20, 20 ), randomintrange( -20, 20 ) );
    _id_363CD698CE6C69C1 = anglestoforward( level.player.angles );
    _id_363CD698CE6C69C1 = _id_363CD698CE6C69C1 * randomfloatrange( 600, 750 );
    _id_D43803BE5B18DDD8 = _id_363CD698CE6C69C1[0];
    _id_D43804BE5B18E00B = _id_363CD698CE6C69C1[1];
    _id_D43805BE5B18E23E = randomfloatrange( 400, 600 );
    gun_model physicslaunchserver( gun_model.origin, ( _id_D43803BE5B18DDD8, _id_D43804BE5B18E00B, _id_D43805BE5B18E23E ) );
}

validatefalldirection( cause, attacker )
{
    _id_22C4300CE1D248E8 = level.player.origin + ( 0, 0, 2 );
    _id_98C6610C2907BA2B = undefined;

    if ( cause == "MOD_GRENADE" || cause == "MOD_GRENADE_SPLASH" )
        _id_85E28F54B572F39F = angleclamp( vectortoyaw( level.player.dmgpoint - level.player.origin ) - level.player.angles[1] );
    else
        _id_85E28F54B572F39F = angleclamp( vectortoyaw( attacker.origin - level.player.origin ) - level.player.angles[1] );

    if ( cause == "MOD_FIRE" || self.falldir == "origin" )
        _id_98C6610C2907BA2B = _id_22C4300CE1D248E8;
    else if ( _id_85E28F54B572F39F > 135 && _id_85E28F54B572F39F <= 225 && self.falldir == "forward" )
        _id_98C6610C2907BA2B = _id_22C4300CE1D248E8 + anglestoforward( level.player.angles ) * self.falldist;
    else if ( _id_85E28F54B572F39F > 45 && _id_85E28F54B572F39F <= 135 && self.falldir == "right" )
        _id_98C6610C2907BA2B = _id_22C4300CE1D248E8 + anglestoright( level.player.angles ) * self.falldist;
    else if ( ( _id_85E28F54B572F39F <= 45 || _id_85E28F54B572F39F >= 315 ) && self.falldir == "back" )
        _id_98C6610C2907BA2B = _id_22C4300CE1D248E8 + anglestoforward( level.player.angles ) * ( -1 * self.falldist );
    else if ( _id_85E28F54B572F39F > 225 && _id_85E28F54B572F39F < 315 && self.falldir == "left" )
        _id_98C6610C2907BA2B = _id_22C4300CE1D248E8 + anglestoleft( level.player.angles ) * self.falldist;
    else
    {
        if ( getdvarint( "dvar_D20570703776A47E", 0 ) == 1 )
        {

        }

        return 0;
    }

    if ( capsule_check( _id_22C4300CE1D248E8, _id_98C6610C2907BA2B ) )
    {
        debug_player_death( self.falldir, _id_98C6610C2907BA2B, "passed" );
        return 1;
    }
    else
    {
        debug_player_death( self.falldir, _id_98C6610C2907BA2B, "failed" );
        return 0;
    }
}

capsule_check( start, end )
{
    if ( scripts\engine\trace::capsule_trace_passed( start, end, 15, 72, ( 0, 0, 0 ), level.player ) )
        return 1;

    return 0;
}

debug_player_death( falldir, _id_98C6610C2907BA2B, outcome )
{
    color = ( 1, 0, 0 );

    if ( getdvarint( "dvar_D20570703776A47E", 0 ) == 1 )
    {
        if ( outcome == "passed" )
        {
            color = ( 0, 1, 0 );
            scripts\engine\utility::draw_capsule( level.player.origin, 15, 72, color, ( 0, 0, 0 ), 0, 200 );
            scripts\engine\utility::draw_arrow_time( level.player.origin, _id_98C6610C2907BA2B, ( 0, 1, 0 ), 200 );
        }
        else
        {

        }

        if ( falldir != "origin" )
            scripts\engine\utility::draw_capsule( _id_98C6610C2907BA2B, 15, 72, color, ( 0, 0, 0 ), 0, 200 );
    }
}

gesture_death_anim( death )
{
    takeweaponsexceptcurrent();
    level.player.ignoreme = 1;
    anim_time = level.player getgestureanimlength( death.gesture );

    if ( getdvarint( "dvar_D20570703776A47E", 0 ) == 1 )
    {

    }

    if ( isdefined( death.function ) )
        level thread [[ death.function ]]();

    if ( isarray( death.soundalias ) )
    {
        foreach ( alias in death.soundalias )
            level.player thread scripts\engine\utility::play_sound_in_space( alias, level.player.origin );
    }
    else
        level.player playsound( death.soundalias );

    _id_E3108E412AFB3811 = level.player forceplaygestureviewmodel( death.gesture, undefined, 0.15, undefined, 1, 1 );
}

setdeathangles( attacker, stance, _id_71384D778A20D5C2, _id_A2731E6D9AF15254 )
{
    freeze_player_controls( stance );
    _id_65593BC02A8E8177 = 0;

    if ( isdefined( _id_A2731E6D9AF15254 ) )
    {
        _id_6DB2D5A220EEAB39 = scripts\engine\trace::create_playerclip_contents();
        trace = scripts\engine\trace::ray_trace( self.origin, self.origin - ( 0, 0, 1000 ), self, _id_6DB2D5A220EEAB39 );
        _id_1D9FB21B4F3023F3 = undefined;

        if ( isdefined( trace ) )
            _id_1D9FB21B4F3023F3 = trace["entity"];

        if ( isdefined( _id_1D9FB21B4F3023F3 ) && _id_1D9FB21B4F3023F3 == _id_A2731E6D9AF15254 )
            _id_65593BC02A8E8177 = 1;
        else
            _id_65593BC02A8E8177 = 0;
    }

    if ( !isdefined( _id_A2731E6D9AF15254 ) || !_id_65593BC02A8E8177 )
    {
        while ( !self isonground() )
            wait 0.05;
    }

    if ( attacker == self )
        _id_E2064085EF59A3A9 = ( 0, 0, 0 );
    else
        _id_E2064085EF59A3A9 = get_angles_to_attacker( attacker );

    _id_3C70A7175FBFA3FC = level.player getplayerangles();

    if ( isdefined( _id_71384D778A20D5C2 ) )
    {
        _id_F99415E5C0A810A9 = 0.75;
        _id_CA59F0C3B6B71635 = 0;
        _id_A1DF579167CC52A6 = 0;
    }
    else
    {
        _id_52A4AFA1649778EE = anglestoforward( _id_3C70A7175FBFA3FC );
        _id_1E400A127D66208C = anglestoforward( _id_E2064085EF59A3A9 );
        dot = vectordot( _id_1E400A127D66208C, _id_52A4AFA1649778EE );
        _id_367D22DA51F1C477 = scripts\engine\math::normalize_value( -1, 1, dot );
        _id_F99415E5C0A810A9 = scripts\engine\math::factor_value( 0.4, 0.2, _id_367D22DA51F1C477 );
        _id_F1FD8E00747372E5 = geteyeheightfromstance( stance );
        _id_CA59F0C3B6B71635 = 13 - _id_F1FD8E00747372E5;

        if ( scripts\engine\utility::cointoss() )
            _id_A1DF579167CC52A6 = 30;
        else
            _id_A1DF579167CC52A6 = -30;
    }

    anchor = level.player scripts\engine\utility::spawn_tag_origin();
    _id_8003B0D4F9FBEE0E = ( _id_E2064085EF59A3A9[0] + -1 * _id_3C70A7175FBFA3FC[0], _id_E2064085EF59A3A9[1], _id_E2064085EF59A3A9[2] + _id_A1DF579167CC52A6 );
    _id_FD12F85561BE6354 = anglestoup( _id_8003B0D4F9FBEE0E ) * _id_CA59F0C3B6B71635;
    goalpos = self.origin + _id_FD12F85561BE6354;
    self playerlinktoabsolute( anchor, "tag_origin" );

    if ( getdvarint( "dvar_D20570703776A47E" ) )
    {
        _id_99382C1DB896CD83 = 30;
        _id_FE48D2BF2A03FBB0 = self.origin + anglestoforward( _id_8003B0D4F9FBEE0E ) * _id_99382C1DB896CD83;
        _id_EF19226E6D4DE8FC = self.origin + anglestoright( _id_8003B0D4F9FBEE0E ) * _id_99382C1DB896CD83;
        _id_B29EBE00F415A2F1 = self.origin + anglestoup( _id_8003B0D4F9FBEE0E ) * _id_99382C1DB896CD83;
        _id_4F0797146C5BF0AF = ( 0, 0, 45 );
    }

    if ( isdefined( _id_A2731E6D9AF15254 ) && _id_65593BC02A8E8177 )
    {
        anchor linkto( _id_A2731E6D9AF15254 );
        anchor thread updatelinkedoriginandangles( goalpos, _id_8003B0D4F9FBEE0E, _id_F99415E5C0A810A9, _id_A2731E6D9AF15254 );
    }
    else
    {
        anchor rotateto( _id_8003B0D4F9FBEE0E, _id_F99415E5C0A810A9, _id_F99415E5C0A810A9 * 0.25, _id_F99415E5C0A810A9 * 0.75 );
        anchor moveto( goalpos, _id_F99415E5C0A810A9, _id_F99415E5C0A810A9 * 0.9, _id_F99415E5C0A810A9 * 0.1 );
    }
}

updatelinkedoriginandangles( targetorigin, targetangles, _id_F99415E5C0A810A9, parent )
{
    timer = _id_F99415E5C0A810A9;
    _id_6C14E8FCCA4ED486 = rotatevectorinverted( targetorigin - parent.origin, parent.angles );
    _id_1E3897C5722A530F = rotatevectorinverted( self.origin - parent.origin, parent.angles );
    _id_D5FC9B0F7EEF775E = rotatevectorinverted( anglestoforward( targetangles ), parent.angles );
    _id_6D67FDCDA3E54A92 = rotatevectorinverted( anglestoright( targetangles ), parent.angles );
    _id_BA70F257ADA1104B = rotatevectorinverted( anglestoup( targetangles ), parent.angles );
    _id_CE8789AAA1120289 = rotatevectorinverted( anglestoforward( self.angles ), parent.angles );
    _id_541017EF3A16B43D = rotatevectorinverted( anglestoright( self.angles ), parent.angles );
    _id_7C1B63EE932CDC68 = rotatevectorinverted( anglestoup( self.angles ), parent.angles );
    safeorigin = parent.origin;
    _id_F7E895F013BFE634 = parent.angles;

    for (;;)
    {
        if ( timer <= 0 )
            break;

        if ( isdefined( parent ) )
        {
            safeorigin = parent.origin;
            _id_F7E895F013BFE634 = parent.angles;
        }

        _id_805136F88545A0DB = scripts\engine\math::normalize_value( 0, _id_F99415E5C0A810A9, timer );

        if ( self islinked() )
            self unlink();

        targetorigin = rotatevector( _id_6C14E8FCCA4ED486, _id_F7E895F013BFE634 ) + safeorigin;
        startingorigin = rotatevector( _id_1E3897C5722A530F, _id_F7E895F013BFE634 ) + safeorigin;
        _id_00EB6CD0D8F1F346 = rotatevector( _id_D5FC9B0F7EEF775E, _id_F7E895F013BFE634 );
        _id_00EB80D0D8F21F42 = rotatevector( _id_6D67FDCDA3E54A92, _id_F7E895F013BFE634 );
        _id_00EB7BD0D8F21443 = rotatevector( _id_BA70F257ADA1104B, _id_F7E895F013BFE634 );
        _id_DA00E7C892E9CA49 = rotatevector( _id_CE8789AAA1120289, _id_F7E895F013BFE634 );
        _id_DA00DBC892E9AFE5 = rotatevector( _id_541017EF3A16B43D, _id_F7E895F013BFE634 );
        _id_DA00D4C892E9A080 = rotatevector( _id_7C1B63EE932CDC68, _id_F7E895F013BFE634 );
        f = vectornormalize( scripts\engine\math::factor_value( _id_00EB6CD0D8F1F346, _id_DA00E7C892E9CA49, _id_805136F88545A0DB ) );
        r = vectornormalize( scripts\engine\math::factor_value( _id_00EB80D0D8F21F42, _id_DA00DBC892E9AFE5, _id_805136F88545A0DB ) );
        _id_AC0E454AC96A77AC = vectornormalize( scripts\engine\math::factor_value( _id_00EB7BD0D8F21443, _id_DA00D4C892E9A080, _id_805136F88545A0DB ) );
        self.origin = scripts\engine\math::factor_value( targetorigin, startingorigin, _id_805136F88545A0DB );
        self.angles = axistoangles( f, r, _id_AC0E454AC96A77AC );

        if ( isdefined( parent ) )
            self linkto( parent );

        timer = timer - 0.05;
        wait 0.05;
    }

    if ( self islinked() )
        self unlink();

    if ( isdefined( parent ) )
    {
        safeorigin = parent.origin;
        _id_F7E895F013BFE634 = parent.angles;
    }

    f = rotatevector( _id_D5FC9B0F7EEF775E, _id_F7E895F013BFE634 );
    r = rotatevector( _id_6D67FDCDA3E54A92, _id_F7E895F013BFE634 );
    _id_AC0E454AC96A77AC = rotatevector( _id_BA70F257ADA1104B, _id_F7E895F013BFE634 );
    self.origin = rotatevector( _id_6C14E8FCCA4ED486, _id_F7E895F013BFE634 ) + safeorigin;
    self.angles = axistoangles( f, r, _id_AC0E454AC96A77AC );

    if ( isdefined( parent ) )
        self linkto( parent );
}

geteyeheightfromstance( stance )
{
    height = level.player getplayerviewheight( stance );
    return height;
}

get_ground_slope_angles( direction )
{
    direction = vectornormalize( direction );
    up = ( 0, 0, 60 );
    _id_54427304348423AB = 15 * direction;
    _id_A9B92A5C0A1516D3 = scripts\engine\trace::ray_trace( self.origin + _id_54427304348423AB + up, self.origin + _id_54427304348423AB - up, [ self ] );
    _id_A9B92B5C0A151906 = scripts\engine\trace::ray_trace( self.origin - _id_54427304348423AB + up, self.origin - _id_54427304348423AB - up, [ self ] );

    if ( _id_A9B92A5C0A1516D3["hittype"] == "hittype_none" )
        _id_BF6A083C5A5402A4 = self.origin;
    else
        _id_BF6A083C5A5402A4 = _id_A9B92A5C0A1516D3["position"];

    if ( _id_A9B92B5C0A151906["hittype"] == "hittype_none" )
        _id_BF6A0B3C5A54093D = self.origin;
    else
        _id_BF6A0B3C5A54093D = _id_A9B92B5C0A151906["position"];

    dist = distance2d( _id_BF6A083C5A5402A4, _id_BF6A0B3C5A54093D );

    if ( dist > 0 )
    {
        _id_13F52C8DB665C5A4 = atan( ( _id_BF6A0B3C5A54093D[2] - _id_BF6A083C5A5402A4[2] ) / dist );

        if ( abs( _id_13F52C8DB665C5A4 ) > 45 )
            return 0;

        return _id_13F52C8DB665C5A4;
    }

    return 0;
}

get_angles_to_attacker( attacker )
{
    if ( !isdefined( attacker ) )
        return self.angles;

    _id_A5337F8300110201 = 35;
    _id_06A3A1033FFC2699 = attacker.origin - self.origin;
    _id_8BC14603A27FA3E7 = vectortoangles( _id_06A3A1033FFC2699 );
    _id_8BC14603A27FA3E7 = ( angleclamp180( _id_8BC14603A27FA3E7[0] ), _id_8BC14603A27FA3E7[1], _id_8BC14603A27FA3E7[2] );
    _id_8BC14603A27FA3E7 = ( clamp( _id_8BC14603A27FA3E7[0], -1 * _id_A5337F8300110201, _id_A5337F8300110201 ), _id_8BC14603A27FA3E7[1], _id_8BC14603A27FA3E7[2] );
    return _id_8BC14603A27FA3E7;
}

debug_draw_slope_angles()
{

}

freeze_player_controls( stance )
{
    level.gameskill_breath_func = ::empty_breathing_func;
    level.player freezecontrols( 1 );

    if ( stance == "prone" )
    {
        level.player allowprone( 1 );
        level.player allowstand( 0 );
        level.player allowcrouch( 0 );
    }
    else if ( stance == "crouch" )
    {
        level.player allowcrouch( 1 );
        level.player allowstand( 0 );
        level.player allowprone( 0 );
    }
    else
    {
        level.player allowstand( 1 );
        level.player allowprone( 0 );
        level.player allowcrouch( 0 );
    }

    level.player disableweaponswitch();
    level.player disableoffhandsecondaryweapons();
    level.player allowoffhandshieldweapons( 0 );
    level.player disableoffhandweapons();
    level.player allowjump( 0 );
    level.player allowfire( 0 );
    level.player freezecontrols( 0 );
}

deathfx( cause )
{
    _id_00CA20019EE673FF = 3.0;
    _id_411F1D6833233BC3 = 2;
    level.player.death.huds = [];

    if ( isdefined( level.player.death.skip_screen_fx ) )
        return;

    if ( scripts\common\utility::iswegameplatform() )
        return;

    scripts\sp\player::remove_damage_effects_instantly( 1 );
    visionsetpain( "damage_dead", 0.2 );
    scripts\sp\audio::set_slowmo_dialogue_start();
    setslowmotion( 1, 0.8, 4.5 );
    setsaveddvar( "dvar_B61C9C6A24B5671E", 100.0 );
    self painvisionon();

    if ( cause == "MOD_FIRE" )
        thread deathfxfire();
    else
        thread deathfxoverlay( "death_overlay", "ui_player_death_overlay", 0, 0, 18 );

    thread deathfxoverlay( "death_tunnel", "ui_player_death_tunnel_overlay", 1, 3, 19 );
    thread deathfxoverlay( "death_black", "ui_player_death_black_overlay", 1, _id_00CA20019EE673FF, 20 );
    wait 4;
    _func_96E4C180E15F5EE2( 6, _id_411F1D6833233BC3 );
}

deathfxoverlay( name, shader, delay, _id_F69BA8D7B96E8326, sort )
{
    wait( delay );
    level.player.death.huds[name] = create_death_hudelem();
    level.player.death.huds[name] setshader( shader, 640, 480 );

    if ( _id_F69BA8D7B96E8326 > 0 )
        level.player.death.huds[name] fadeovertime( _id_F69BA8D7B96E8326 );

    level.player.death.huds[name].alpha = 1;
    level.player.death.huds[name].sort = sort;
}

deathfxfire()
{
    playfx( level.g_effect["player_death_fire"], level.player.origin, anglestoforward( level.player.angles ), anglestoup( level.player.angles ) );
}

player_can_see_an_enemy()
{
    enemies = getaiarray( "axis" );

    foreach ( enemy in enemies )
    {
        if ( !scripts\engine\utility::within_fov( level.player.origin, level.player.angles, enemy.origin, 0.173648 ) )
            continue;

        if ( scripts\engine\utility::can_trace_to_ai( level.player geteye(), enemy, [ level.player ] ) )
            return 1;
    }

    return 0;
}

create_death_hudelem()
{
    overlay = newclienthudelem( self );
    overlay.x = 0;
    overlay.y = 0;
    overlay.splatter = 1;
    overlay.alignx = "left";
    overlay.aligny = "top";
    overlay.sort = 1;
    overlay.foreground = 0;
    overlay.lowresbackground = 1;
    overlay.horzalign = "fullscreen";
    overlay.vertalign = "fullscreen";
    overlay.alpha = 0;
    overlay.enablehudlighting = 1;
    return overlay;
}

takeweaponsexceptcurrent()
{
    _id_AD37F5B48751E260 = [];
    _id_7FF4E8DD09D5E1CF = level.player getcurrentweapon();
    _id_AD37F5B48751E260[_id_AD37F5B48751E260.size] = _id_7FF4E8DD09D5E1CF;

    if ( _id_7FF4E8DD09D5E1CF.isalternate )
        _id_AD37F5B48751E260[_id_AD37F5B48751E260.size] = _id_7FF4E8DD09D5E1CF getnoaltweapon();
    else if ( _id_7FF4E8DD09D5E1CF.hasalternate )
        _id_AD37F5B48751E260[_id_AD37F5B48751E260.size] = _id_7FF4E8DD09D5E1CF getaltweapon();

    foreach ( weapon in level.player getweaponslistall() )
    {
        if ( !scripts\engine\utility::array_contains( _id_AD37F5B48751E260, weapon ) )
            level.player takeweapon( weapon );
    }
}

player_throwgrenade_timer()
{
    self endon( "death" );
    self.lastgrenadetime = 0;

    for (;;)
    {
        while ( !self isthrowinggrenade() )
            wait 0.05;

        self.lastgrenadetime = gettime();

        while ( self isthrowinggrenade() )
            wait 0.05;
    }
}

vehicle_death( inflictor )
{
    if ( !isdefined( inflictor ) )
        return 0;

    if ( inflictor.code_classname != "scriptable" )
        return 0;

    if ( !isdefined( inflictor.destructible_type ) || inflictor.destructible_type != "vehicle" )
        return 0;

    level notify( "new_quote_string4" );
    setomnvar( "ui_death_hint", 3 );
    return 1;
}

destructible_death( attacker )
{
    if ( !isdefined( attacker ) || !isdefined( attacker.destructible_type ) )
        return 0;

    level notify( "new_quote_string" );

    if ( isdefined( attacker.destructible_type ) && issubstr( attacker.destructible_type, "vehicle" ) )
        setomnvar( "ui_death_hint", 3 );
    else
        setomnvar( "ui_death_hint", 4 );

    return 1;
}

exploding_barrel_death( inflictor, weaponname )
{
    if ( !isdefined( inflictor ) )
        return 0;

    if ( inflictor is_red_barrel() )
    {
        level notify( "new_quote_string" );
        setomnvar( "ui_death_hint", 5 );
        return 1;
    }

    return 0;
}

is_red_barrel()
{
    if ( isdefined( self.targetname ) && self.targetname == "phys_barrel_destructible" )
        return 1;

    if ( isdefined( self.model ) && issubstr( self.model, "barrel" ) && issubstr( self.model, "red" ) )
        return 1;

    return 0;
}

set_custom_death_quote( _id_54A746638868BABE, _id_9A2D6FD311C8922A )
{
    level.custom_death_quote = _id_54A746638868BABE;
    level._id_6F691DD8B1000EA5 = _id_9A2D6FD311C8922A;
}

clear_custom_death_quote()
{
    level.custom_death_quote = undefined;
}

set_death_hint_standard()
{
    index = 100;
    _id_52069547004FBEDB = undefined;

    for ( _id_FA6E42ECC66A5FB5 = tablelookup( "sp/death_hints.csv", 0, index, 1 ); isdefined( _id_FA6E42ECC66A5FB5 ) && _id_FA6E42ECC66A5FB5 != "__END_OF_DEADQUOTE__"; index++ )
    {
        _id_52069547004FBEDB = index;
        _id_FA6E42ECC66A5FB5 = tablelookup( "sp/death_hints.csv", 0, index, 1 );
    }

    for (;;)
    {
        _id_C343E32C88E60DD3 = randomintrange( 100, _id_52069547004FBEDB );

        if ( !_id_46F8B8C2648B7356( _id_C343E32C88E60DD3 ) )
            break;

        waitframe();
    }

    _id_E3FC2E2CF55641CD( _id_C343E32C88E60DD3 );
    setomnvar( "ui_death_hint", _id_C343E32C88E60DD3 );
}

set_death_hint( attacker, cause, weaponname, inflictor )
{
    _id_C5950A5E5A6F62AD = undefined;
    _id_1532DCB8B7DC97CC = istrue( level._id_6F691DD8B1000EA5 );

    if ( isdefined( level.custom_death_quote ) && ( !_id_1532DCB8B7DC97CC || !_id_46F8B8C2648B7356( level.custom_death_quote ) ) )
        _id_C5950A5E5A6F62AD = level.custom_death_quote;

    if ( isdefined( _id_C5950A5E5A6F62AD ) )
    {
        if ( _id_C5950A5E5A6F62AD > 0 )
        {
            setomnvar( "ui_death_hint", _id_C5950A5E5A6F62AD );

            if ( _id_1532DCB8B7DC97CC )
                _id_E3FC2E2CF55641CD( _id_C5950A5E5A6F62AD );
        }
        else
            set_death_hint_standard();
    }
    else if ( isdefined( cause ) )
    {
        if ( cause == "MOD_GRENADE" || cause == "MOD_GRENADE_SPLASH" || cause == "MOD_SUICIDE" || cause == "MOD_EXPLOSIVE" )
        {
            if ( level.gameskill >= 2 )
            {
                if ( !scripts\common\gameskill::map_is_early_in_the_game() )
                {
                    set_death_hint_standard();
                    return;
                }
            }
        }

        switch ( cause )
        {
            case "MOD_SUICIDE":
                if ( level.player.lastgrenadetime - gettime() > 3500.0 )
                    return;

                setomnvar( "ui_death_hint", 2 );
                break;
            case "MOD_EXPLOSIVE":
                if ( level.player exploding_barrel_death( inflictor, weaponname ) )
                    return;

                if ( level.player destructible_death( attacker ) )
                    return;

                if ( level.player vehicle_death( inflictor ) )
                    return;

                set_death_hint_standard();
                break;
            case "MOD_GRENADE":
            case "MOD_GRENADE_SPLASH":
                if ( !_id_6E7AB751D65F6321() && isdefined( weaponname ) && !_func_BD8EE3F75E1F106F( weaponname ) )
                {
                    set_death_hint_standard();
                    return;
                }

                setomnvar( "ui_death_hint", 1 );
                break;
            default:
                set_death_hint_standard();
                break;
        }
    }
    else if ( isdefined( attacker ) && isdefined( attacker.subclass ) && attacker.subclass == "juggernaut" )
        setomnvar( "ui_death_hint", randomintrange( 73, 75 ) );
    else
        set_death_hint_standard();
}

_id_6E7AB751D65F6321()
{
    if ( !isdefined( level.player._id_6BFFFD053A4AE383 ) )
        return 0;

    return _func_BD8EE3F75E1F106F( level.player._id_6BFFFD053A4AE383 );
}

_id_E3FC2E2CF55641CD( _id_17FC9F1BD5B7597E )
{
    setdvar( "dvar_C8DA47DE891DCA31", getdvarint( "dvar_C8DA46DE891DC7FE" ) );
    setdvar( "dvar_C8DA46DE891DC7FE", getdvarint( "dvar_C8DA45DE891DC5CB" ) );
    setdvar( "dvar_C8DA45DE891DC5CB", _id_17FC9F1BD5B7597E );
}

_id_46F8B8C2648B7356( _id_17FC9F1BD5B7597E )
{
    if ( _id_17FC9F1BD5B7597E == getdvarint( "dvar_C8DA45DE891DC5CB" ) )
        return 1;

    if ( _id_17FC9F1BD5B7597E == getdvarint( "dvar_C8DA46DE891DC7FE" ) )
        return 1;

    if ( _id_17FC9F1BD5B7597E == getdvarint( "dvar_C8DA47DE891DCA31" ) )
        return 1;

    return 0;
}

lookupdeathquote( index )
{
    _id_80B69F611222045B = tablelookup( "sp/deathQuoteTable.csv", 0, index, 1 );

    if ( tolower( _id_80B69F611222045B[0] ) != tolower( "@" ) )
        _id_80B69F611222045B = "@" + _id_80B69F611222045B;

    return _id_80B69F611222045B;
}

set_death_icon( shader, _id_540F315D165FCC64, _id_1C919181FEFF4233, _id_3447DD0CDCD69308 )
{
    if ( !isdefined( _id_3447DD0CDCD69308 ) )
        _id_3447DD0CDCD69308 = 1.5;

    wait( _id_3447DD0CDCD69308 );
    overlay = newhudelem();
    overlay.x = 0;
    overlay.y = 40;
    overlay setshader( shader, _id_540F315D165FCC64, _id_1C919181FEFF4233 );
    overlay.alignx = "center";
    overlay.aligny = "middle";
    overlay.horzalign = "center";
    overlay.vertalign = "middle";
    overlay.foreground = 1;
    overlay.alpha = 0;
    overlay fadeovertime( 1 );
    overlay.alpha = 1;
}

damage_is_explosive( type )
{
    if ( issubstr( type, "SPLASH" ) )
        return 1;

    if ( issubstr( type, "GRENADE" ) )
        return 1;

    return 0;
}

damage_is_fire( type )
{
    if ( type == "MOD_FIRE" )
        return 1;

    return 0;
}

empty_breathing_func( alias )
{

}

player_death_animation_enabled()
{
    return getdvarint( "dvar_72B7A039560BA3D2" );
}

explosive_up_func()
{
    wait 1;
    tossgun();
}

fall_back_func()
{
    tossgun();
}
