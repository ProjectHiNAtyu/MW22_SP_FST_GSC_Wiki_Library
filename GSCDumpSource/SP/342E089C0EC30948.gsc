// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

precache( offhand )
{
    scripts\sp\equipment\offhands::registeroffhandfirefunc( offhand, ::_id_237449011CA6E78E );
}

_id_237449011CA6E78E( grenade, weapon )
{
    if ( !isdefined( grenade ) )
        return;

    grenade endon( "death" );
    grenade.owner = self;
    grenade.throwtime = gettime();
    _id_C4DBDC841F7C123B( self, grenade );
    thread _id_53E290100107A75F();
    thread _id_31DF139E0EA631CC();
    grenade thread _id_A569821D2750E2E4();
    grenade thread _id_E8998826905426FD();
    grenade waittill( "missile_stuck" );
    trigger = getent( "decoy_grenade_return", "script_noteworthy" );

    if ( isdefined( trigger ) && grenade istouching( trigger ) )
    {
        level.player scripts\engine\sp\utility::give_offhand( "decoy_canals", 1 );
        grenade thread decoy_delete();
    }
    else
    {
        childthread _id_5578D38AC19D8BC6( grenade );
        grenade setotherent( self );
        grenade setnodeploy( 0 );
        grenade setscriptablepartstate( "beacon", "active", 0 );
        level notify( "decoy_grenade_set", grenade );
    }
}

_id_53E290100107A75F()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "decoy_unset" );
    level endon( "game_ended" );
    self notify( "watchForDetonation" );
    self endon( "watchForDetonation" );

    for (;;)
    {
        self waittill( "detonate" );
        thread _id_B0C960A09A66707F();
    }
}

_id_31DF139E0EA631CC()
{
    self endon( "death" );
    self endon( "decoy_unset" );
    level endon( "game_ended" );
    self notify( "watchForAltDetonation" );
    self endon( "watchForAltDetonation" );

    while ( self usebuttonpressed() )
        waitframe();

    _id_8B07FA3892A3A8A4 = 0;

    for (;;)
    {
        if ( self usebuttonpressed() )
        {
            _id_8B07FA3892A3A8A4 = 0;

            while ( self usebuttonpressed() )
            {
                _id_8B07FA3892A3A8A4 = _id_8B07FA3892A3A8A4 + 0.05;
                waitframe();
            }

            if ( _id_8B07FA3892A3A8A4 >= 0.5 )
                continue;

            _id_8B07FA3892A3A8A4 = 0;

            while ( !self usebuttonpressed() && _id_8B07FA3892A3A8A4 < 0.25 )
            {
                _id_8B07FA3892A3A8A4 = _id_8B07FA3892A3A8A4 + 0.05;
                waitframe();
            }

            if ( _id_8B07FA3892A3A8A4 >= 0.25 )
                continue;

            if ( _id_2D568EC9506FBC84() )
                thread _id_B0C960A09A66707F();
        }

        waitframe();
    }
}

_id_5578D38AC19D8BC6( grenade )
{
    if ( !isdefined( grenade ) )
        return;

    grenade scripts\sp\player\cursor_hint::create_cursor_hint( "tag_origin", ( 0, 0, 0 ), "Pickup", 360, 300, 80, 1, 0, undefined, undefined, "duration_none" );
    grenade waittill( "trigger" );
    level.player scripts\engine\sp\utility::give_offhand( "decoy_canals", 1 );
    grenade thread decoy_delete( 0.2 );
}

_id_2D568EC9506FBC84()
{
    if ( !isalive( self ) )
        return 0;

    if ( !isdefined( self._id_27412DF95BE7991B ) || self._id_27412DF95BE7991B.size <= 0 )
        return 0;

    return 1;
}

_id_DC8EFC008C7E5F66()
{
    return ( gettime() - self.throwtime ) / 1000 > 0.3;
}

_id_B0C960A09A66707F()
{
    if ( isdefined( self._id_27412DF95BE7991B ) )
    {
        foreach ( _id_D53CBBE71A3A5853 in self._id_27412DF95BE7991B )
        {
            if ( _id_D53CBBE71A3A5853 _id_DC8EFC008C7E5F66() )
                _id_D53CBBE71A3A5853 thread _id_855837FE7F239E04();
        }
    }
}

_id_855837FE7F239E04()
{
    self endon( "death" );
    wait 0.1;
    thread _id_4FE9D8DB53148399( self.owner );
}

_id_4FE9D8DB53148399( attacker )
{
    self setentityowner( attacker );
    self setscriptablepartstate( "weaponFire", "arFire", 0 );
    self setscriptablepartstate( "weaponSounds", "arFire", 0 );
    position = self.origin;
    level notify( "decoy_activated", attacker, position );
}

decoy_delete( _id_CBF7BE4F62A0DDB2 )
{
    self notify( "death" );
    self setcandamage( 0 );
    self makeunusable();
    self.exploding = 1;
    owner = self.owner;

    if ( isdefined( owner ) )
    {
        _id_0DC0E7C2B63D1791( owner, self, self getentitynumber() );
        owner notify( "decoy_update", 0 );
    }

    if ( isdefined( self.useobj ) )
        self.useobj delete();

    if ( isdefined( _id_CBF7BE4F62A0DDB2 ) )
        wait( _id_CBF7BE4F62A0DDB2 );

    self delete();
}

_id_E8998826905426FD()
{
    self endon( "death" );
    level endon( "game_ended" );
    owner = self.owner;
    self waittill( "detonateExplosive", attacker );

    if ( isdefined( attacker ) )
        thread _id_4FE9D8DB53148399( attacker );
    else
        thread _id_4FE9D8DB53148399( owner );
}

_id_C4DBDC841F7C123B( owner, grenade )
{
    if ( !isdefined( owner._id_27412DF95BE7991B ) )
        owner._id_27412DF95BE7991B = [];

    entnum = grenade getentitynumber();
    owner._id_27412DF95BE7991B[entnum] = grenade;
    thread _id_C533B827DEE2589E( owner, grenade, entnum );
}

_id_0DC0E7C2B63D1791( owner, grenade, entnum )
{
    if ( isdefined( grenade ) )
        grenade notify( "decoy_removeFromArray" );

    if ( isdefined( owner ) && isdefined( owner._id_27412DF95BE7991B ) )
        owner._id_27412DF95BE7991B[entnum] = undefined;
}

_id_C533B827DEE2589E( owner, grenade, entnum )
{
    grenade endon( "decoy_removeFromArray" );
    owner endon( "disconnect" );
    grenade waittill( "death" );
    thread _id_0DC0E7C2B63D1791( owner, grenade, entnum );
}

_id_A569821D2750E2E4()
{
    self endon( "mine_selfdestruct" );
    self endon( "death" );
    self setcandamage( 1 );
    self.maxhealth = 100000;
    self.health = self.maxhealth;
    attacker = undefined;
    hits = 1;

    for (;;)
    {
        self waittill( "damage", damage, attacker, direction_vec, point, type, modelname, tagname, partname, idflags, objweapon, origin, angles, normal, inflictor );

        if ( !isplayer( attacker ) && !isagent( attacker ) )
            continue;

        _id_8C97D5D29E3F5523 = 1;
        hits = hits - _id_8C97D5D29E3F5523;

        if ( hits <= 0 )
            break;
    }

    self notify( "mine_destroyed" );

    if ( isdefined( type ) && ( issubstr( type, "MOD_GRENADE" ) || issubstr( type, "MOD_EXPLOSIVE" ) ) )
        self.waschained = 1;

    if ( isdefined( idflags ) && idflags & level.idflags_penetration )
        self.wasdamagedfrombulletpenetration = 1;

    if ( isdefined( idflags ) && idflags & level.idflags_ricochet )
        self.wasdamagedfrombulletricochet = 1;

    self.wasdamaged = 1;

    if ( isdefined( attacker ) )
        self.damagedby = attacker;

    self notify( "detonateExplosive", attacker );
}
