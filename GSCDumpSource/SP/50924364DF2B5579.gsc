// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_DAB947FFA4023B87()
{
    scripts\engine\utility::flag_init( "stop_tutorials" );
}

_id_351AC55B98EE1BF2()
{
    level._id_EC698D2343DA1981 = scripts\engine\utility::_id_53C4C53197386572( level._id_EC698D2343DA1981, [] );
    scripts\engine\sp\utility::add_hint_string( "walk_forward", &"STRIKE/TUTORIAL_WALK_FORWARD", ::_id_72202C87361D9126 );
    scripts\engine\sp\utility::add_hint_string( "mantle_up", &"STRIKE/TUTORIAL_MANTLE_UP" );
    scripts\engine\sp\utility::add_hint_string( "crouch_under", &"STRIKE/TUTORIAL_CROUCH_UNDER", ::_id_F02D023AD9D899DE );
    scripts\engine\sp\utility::add_hint_string( "sprint_forward", &"STRIKE/TUTORIAL_SPRINT", ::sprint );
    scripts\engine\sp\utility::add_hint_string( "sprint_forward_hold", &"STRIKE/TUTORIAL_SPRINT_HOLD", ::sprint );
    scripts\engine\sp\utility::add_hint_string( "use_spotter_scope", &"EQUIPMENT/OFFHAND_SPOTTER_SIMPLE" );
    scripts\engine\sp\utility::add_hint_string( "use_spotter_scope_press", &"EQUIPMENT/OFFHAND_SPOTTER_SIMPLE_PRESS" );
    scripts\engine\sp\utility::add_hint_string( "zoom_spotter_scope", &"STRIKE/TUTORIAL_SCOPE_ZOOM" );
}

_id_FF25B005C94A7512()
{
    thread _id_A2E2D327575702AC();
}

_id_A2E2D327575702AC()
{
    level endon( "stop_tutorials" );
}

_id_98818AC4F53DFED7( _id_97C2A06E6F067E8A, timeout )
{
    level endon( "stop_tutorials" );
    level._id_EC698D2343DA1981 = scripts\engine\utility::array_add( level._id_EC698D2343DA1981, self );
    _id_28CB0AB288B3EA28 = 0;
    _id_C1D4C5DB5C21148F = _id_97C2A06E6F067E8A + "_endon";

    for (;;)
    {
        if ( level.player istouching( self ) )
        {
            if ( !_id_28CB0AB288B3EA28 )
                scripts\engine\sp\utility::display_hint( _id_97C2A06E6F067E8A, timeout, 1.7, level.player, _id_C1D4C5DB5C21148F );

            _id_28CB0AB288B3EA28 = 1;
        }
        else
        {
            if ( _id_28CB0AB288B3EA28 )
                level.player notify( _id_C1D4C5DB5C21148F );

            _id_28CB0AB288B3EA28 = 0;
        }

        waitframe();
    }
}

_id_7AFAF9313A4E0528()
{
    level endon( "stop_tutorials" );
    childthread _id_96C1A610F13691F5();

    for (;;)
    {
        if ( !_id_79FB381FD77D2642::_id_4DD4FF86EDC8A7CB() )
            scripts\engine\sp\utility::display_hint( "walk_forward", undefined, 15, level.player, "walk_forward_endon" );

        waitframe();
    }
}

_id_96C1A610F13691F5()
{
    for (;;)
    {
        if ( level.player _id_6DB43C8478F742DF() )
            _id_883521CD779AB9ED();

        waitframe();
    }
}

_id_883521CD779AB9ED()
{
    level.player notify( "walk_forward_endon" );
}

_id_126ED3267F17C223()
{
    if ( scripts\engine\utility::flag( "stop_tutorials" ) )
        return;

    thread _id_1A2D2144AA35B8A6();

    if ( level.player usinggamepad() )
    {
        if ( level.player _meth_569AC32FF1837D7C( "holdSprintGamepad" ) == 0 )
            scripts\engine\sp\utility::display_hint( "sprint_forward", undefined, 0, level, "cancel_sprint_hint" );
        else
            scripts\engine\sp\utility::display_hint( "sprint_forward_hold", undefined, 0, level, "cancel_sprint_hint" );
    }
    else if ( level.player _meth_569AC32FF1837D7C( "holdSprintKeyboard" ) == 0 )
        scripts\engine\sp\utility::display_hint( "sprint_forward", undefined, 0, level, "cancel_sprint_hint" );
    else
        scripts\engine\sp\utility::display_hint( "sprint_forward_hold", undefined, 0, level, "cancel_sprint_hint" );
}

_id_1A2D2144AA35B8A6()
{
    level endon( "cancel_sprint_hint" );
    level endon( "stop_tutorials" );
    scripts\engine\sp\utility::trigger_wait_targetname( "peak_mantle_start" );
    level notify( "cancel_sprint_hint" );
}

_id_C74E8E2DE8C8FC54()
{
    scripts\engine\utility::flag_set( "stop_tutorials" );
    level notify( "cancel_sprint_hint" );
}

_id_6DB43C8478F742DF()
{
    foreach ( trigger in level._id_EC698D2343DA1981 )
    {
        if ( self istouching( trigger ) )
            return 1;
    }

    return 0;
}

_id_72202C87361D9126()
{
    return _id_79FB381FD77D2642::_id_4DD4FF86EDC8A7CB();
}

_id_68C6CC89C360C295()
{
    return level.player jumpbuttonpressed();
}

_id_F02D023AD9D899DE()
{
    return level.player getstance() == "crouch";
}

sprint()
{
    return level.player issprinting();
}

_id_BC6748FA0CABAFE7()
{
    if ( !isdefined( level.player._id_96F0BA76CB831413 ) )
        level.player._id_96F0BA76CB831413 = _id_79FB381FD77D2642::_id_FFC7A1716E646BFF();

    _id_EE5179D87358E6CD = acos( vectordot( level.player._id_96F0BA76CB831413, _id_79FB381FD77D2642::_id_FFC7A1716E646BFF() ) );
    return _id_EE5179D87358E6CD > 5;
}
