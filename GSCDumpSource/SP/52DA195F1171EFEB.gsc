// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

#using_animtree("scriptables");

init_vehicle_interact()
{
    precacheshader( "hud_icon_mantle" );
    scripts\engine\utility::flag_init( "player_interacting_vehicle" );
    level.scr_animtree["interact_vehicle"] = #animtree;
    level.scr_anim["interact_vehicle"]["lf_open"] = %vehicle_interact_door_open_lf;
    level.scr_anim["interact_vehicle"]["lr_open"] = %vehicle_interact_door_open_lr;
    level.scr_anim["interact_vehicle"]["rf_open"] = %vehicle_interact_door_open_rf;
    level.scr_anim["interact_vehicle"]["rr_open"] = %vehicle_interact_door_open_rr;
    level.scr_anim["interact_vehicle"]["hatch_open"] = %vehicle_interact_door_open_hatch;
    _id_9E4E1482CB40C9C5 = scripts\engine\utility::getstructarray( "interact_vehicle", "targetname" );

    if ( _id_9E4E1482CB40C9C5.size )
        thread main_vehicle_interact( _id_9E4E1482CB40C9C5 );
}

main_vehicle_interact( _id_9E4E1482CB40C9C5 )
{
    level.interact_vehicle = spawnstruct();
    level.interact_vehicle.entries = [];
    level.interact_vehicle.g_inuse = 0;
    waitframe();

    foreach ( struct in _id_9E4E1482CB40C9C5 )
    {
        level.interact_vehicle.entries[level.interact_vehicle.entries.size] = struct;

        if ( isdefined( struct.target ) )
        {
            ent = getent( struct.target, "targetname" );

            if ( isdefined( ent ) )
            {
                struct.vehicle = ent;
                struct.vehicle useanimtree( #animtree );
            }

            scriptables = getscriptablearray( struct.target, "targetname" );

            if ( scriptables.size > 0 )
                struct.vehicle = scriptables[0];
        }
        else
        {
            ents = getentarray( "interact_vehicle", "targetname" );
            struct.vehicle = scripts\engine\utility::getclosest( struct.origin, ents, 0.01 );

            if ( isdefined( struct.vehicle ) )
                struct.vehicle useanimtree( #animtree );
            else
            {
                scriptables = getscriptablearray( "interact_vehicle", "targetname" );
                struct.vehicle = scripts\engine\utility::getclosest( struct.origin, scriptables, 0.01 );
            }
        }

        struct.cover_nodes = [];
        _id_9B966DD8A1AC987A = scripts\engine\utility::getstructarray( struct.script_linkto, "script_linkname" );

        foreach ( door in _id_9B966DD8A1AC987A )
        {
            if ( strtok( door.script_namenumber, " " )[0] == "cover" )
            {
                struct.cover_nodes = scripts\engine\utility::array_add( struct.cover_nodes, door );
                continue;
            }

            struct.doors[strtok( door.script_namenumber, "_" )[1]] = door;
            struct thread interact_door_setup( door );
        }

        foreach ( node in struct.cover_nodes )
        {

        }

        if ( isdefined( struct.script_animname ) )
            struct.vehicle.animname = struct.script_animname;
        else
            struct.vehicle.animname = "interact_vehicle";

        struct.dont_lerp_player = 0;
    }
}

interact_door_setup( door )
{
    self endon( "death" );
    level.player endon( "death" );

    if ( !isdefined( self.hint_bones ) )
    {
        self.hint_bones = [];
        _id_74AC8F1BFAD7368B = getnumparts( self.vehicle.model );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_74AC8F1BFAD7368B; _id_AC0E594AC96AA3A8++ )
        {
            _id_1080D6BB12D6A0D6 = getpartname( self.vehicle.model, _id_AC0E594AC96AA3A8 );

            if ( issubstr( _id_1080D6BB12D6A0D6, "hint" ) )
            {
                switch ( _id_1080D6BB12D6A0D6 )
                {
                    case "tag_door_lf_hint_outside":
                        self.hint_bones["outside_lf"] = "tag_door_lf_hint_outside";
                        break;
                    case "tag_door_lr_hint_outside":
                        self.hint_bones["outside_lr"] = "tag_door_lr_hint_outside";
                        break;
                    case "tag_door_rf_hint_outside":
                        self.hint_bones["outside_rf"] = "tag_door_rf_hint_outside";
                        break;
                    case "tag_door_rr_hint_outside":
                        self.hint_bones["outside_rr"] = "tag_door_rr_hint_outside";
                        break;
                    case "tag_trunk_hint_outside":
                        self.hint_bones["outside_hatch"] = "tag_trunk_hint_outside";
                        break;
                    case "tag_door_lr_hint_inside":
                        self.hint_bones["inside_lr"] = "tag_door_lr_hint_inside";
                        break;
                    case "tag_door_rr_hint_inside":
                        self.hint_bones["inside_rr"] = "tag_door_rr_hint_inside";
                        break;
                    case "tag_sunroof_hint_outside":
                        self.hint_bones["outside_sunroof"] = "tag_sunroof_hint_outside";
                        break;
                }
            }
        }
    }

    _id_E88C9FD4344FC3E0 = undefined;

    if ( isdefined( door.script_linkto ) )
    {
        _id_C987AEB8C98C5177 = scripts\engine\utility::getstruct( door.script_linkto, "script_linkname" );
        _id_E88C9FD4344FC3E0 = strtok( _id_C987AEB8C98C5177.script_namenumber, "_" )[1];
        self.getin_hints[_id_E88C9FD4344FC3E0] = _id_C987AEB8C98C5177;
        self.door_open[_id_E88C9FD4344FC3E0] = 0;
        door_col = getent( door.script_linkto, "script_linkname" );

        if ( isdefined( door_col ) )
        {
            if ( !isdefined( self.door_col ) )
                self.door_col = [];

            door_col linkto( self.vehicle, self.hint_bones[door.script_namenumber] );
            self.door_col[_id_E88C9FD4344FC3E0] = door_col;
        }
    }

    if ( isdefined( self.hint_bones[door.script_namenumber] ) )
    {
        hint_ent = scripts\engine\utility::spawn_tag_origin( self.vehicle gettagorigin( self.hint_bones[door.script_namenumber] ) );
        hint_ent linkto( self.vehicle, self.hint_bones[door.script_namenumber] );
    }
    else
        hint_ent = door scripts\engine\utility::spawn_tag_origin();

    hint_ent.door_name = door.script_namenumber;
    self.getin_hints[_id_E88C9FD4344FC3E0].hint_ent = hint_ent;
    hint_ent endon( "death" );
    hint_ent scripts\sp\player\cursor_hint::create_cursor_hint( "tag_origin", undefined, undefined, 180, 100, 60, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 180 );
    hint_ent waittill( "trigger" );

    if ( !self.dont_lerp_player )
    {
        level.player thread scripts\engine\sp\utility::player_gesture_force( "ges_pickup" );
        wait 0.25;
    }

    _id_DA1ADAF6AE7AEFAC = door;

    switch ( hint_ent.door_name )
    {
        case "outside_lf":
            thread interact_vehicle_animate_door( "lf" );
            break;
        case "outside_lr":
            thread interact_vehicle_animate_door( "lr" );
            break;
        case "outside_rf":
            thread interact_vehicle_animate_door( "rf" );
            break;
        case "outside_rr":
            thread interact_vehicle_animate_door( "rr" );
            break;
        case "outside_hatch":
            thread interact_vehicle_animate_door( "hatch" );
            break;
        case "outside_sunroof":
            _id_DA1ADAF6AE7AEFAC = scripts\engine\utility::getstruct( door.target, "targetname" );
            thread interact_vehicle_animate_door( "rr" );
            break;
    }

    if ( !self.dont_lerp_player )
    {

    }

    hint_ent scripts\sp\player\cursor_hint::remove_cursor_hint();
    hint_ent delete();
}

interact_interior_door_open( _id_C7D1B7AA659D4FE3 )
{
    hint_ent = undefined;

    switch ( _id_C7D1B7AA659D4FE3 )
    {
        case "lr":
            block_for_mantle( self.getin_hints["lr"] );
            thread interact_vehicle_animate_door( "lr" );
            self.getin_hints[_id_C7D1B7AA659D4FE3].hint_ent delete();
            break;
        case "rr":
            block_for_mantle( self.getin_hints["rr"] );
            thread interact_vehicle_animate_door( "rr" );
            self.getin_hints[_id_C7D1B7AA659D4FE3].hint_ent delete();
            break;
    }
}

interact_interior_door_open_remove( hint_ent )
{
    level.player endon( "death" );
    hint_ent endon( "death" );
    scripts\engine\utility::flag_waitopen( "player_interacting_vehicle" );
    hint_ent scripts\sp\player\cursor_hint::remove_cursor_hint();
    hint_ent delete();
}

interact_vehicle_inside( door )
{
    _id_9B255ABFDC4DF054 = strtok( door.script_namenumber, "_" )[1];

    if ( !isdefined( self.getin_hints[_id_9B255ABFDC4DF054] ) )
        return;

    self endon( "death" );
    door endon( "stop_logic" );
    pathstart = get_next_struct( door );

    if ( !isdefined( pathstart ) )
        return;

    _id_8B79D0E3AD3FB617 = get_next_struct( pathstart );
    block_for_mantle( self.getin_hints[_id_9B255ABFDC4DF054] );

    foreach ( _id_4546F22B5CDBDDB3 in self.doors )
    {
        if ( _id_4546F22B5CDBDDB3 != door )
            _id_4546F22B5CDBDDB3 notify( "stop_logic" );
    }

    level.player notify( "interacted_vehicle" );
    level.interact_vehicle.g_inuse = 1;
    scripts\engine\utility::flag_set( "player_interacting_vehicle" );
    _id_14E8E377B8EA5023 = level.player getstance() == "prone";

    if ( _id_14E8E377B8EA5023 )
    {
        level.player _id_3B64EB40368C1450::set( "interact_vehicle_inside", "stand", 0 );
        level.player _id_3B64EB40368C1450::set( "interact_vehicle_inside", "prone", 0 );
        wait 0.5;
    }

    _id_20C83FEF065D76F8 = "dvar_2BC9A79B27C6B5AF";
    _id_CC57468A5AC4277C = 1;

    if ( getdvar( _id_20C83FEF065D76F8 ) != "" )
    {
        _id_CC57468A5AC4277C = getdvarint( _id_20C83FEF065D76F8 );
        setsaveddvar( _id_20C83FEF065D76F8, 0 );
    }

    _id_58D00367A5CBBED8 = level.player getstance() == "crouch";

    if ( _id_58D00367A5CBBED8 && !_id_14E8E377B8EA5023 )
        level.player _id_3B64EB40368C1450::set( "interact_vehicle_inside", "stand", 0 );

    if ( !_id_14E8E377B8EA5023 )
        level.player _id_3B64EB40368C1450::set( "interact_vehicle_inside", "prone", 0 );

    if ( isdefined( self.script_animation ) )
        interact_entry_anim();

    _id_4438B1EB9D728FAF = level.player getplayerviewheight() + -4;
    _id_8540F0DDF16D59A2 = scripts\engine\utility::spawn_tag_origin( pathstart.origin, level.player.angles );
    p_mover = scripts\engine\utility::spawn_tag_origin( pathstart.origin + ( 0, 0, _id_4438B1EB9D728FAF * -1 ), _id_8540F0DDF16D59A2.angles );
    level.interact_vehicle.p_mover = p_mover;
    p_mover linkto( _id_8540F0DDF16D59A2 );
    time = 0.4;
    level.player playerlinktoblend( p_mover, "tag_player", time, 0, 0.2 );
    thread interact_give_control_back( time, p_mover );
    _id_8540F0DDF16D59A2 moveto( pathstart.origin, 0.5, 0.1, 0.1 );
    _id_8540F0DDF16D59A2 waittill( "movedone" );
    _id_8540F0DDF16D59A2.angles = pathstart.angles;
    _id_FE16E33D66144FA0 = _id_8540F0DDF16D59A2 interact_vehicle_movement( self, door, pathstart, _id_8B79D0E3AD3FB617 );

    if ( isdefined( level.player.ground_ref_ent ) )
        level interact_vehicle_delete_ground_ref_ent();

    _id_5938EA7D5977BD0F = undefined;

    if ( _id_FE16E33D66144FA0 == pathstart )
        _id_5938EA7D5977BD0F = door;
    else if ( door.script_namenumber == "outside_lr" || door.script_namenumber == "outside_rr" )
        _id_5938EA7D5977BD0F = get_opposite_door( door.script_namenumber );

    if ( !isdefined( _id_5938EA7D5977BD0F ) )
        _id_5938EA7D5977BD0F = door;

    _id_8540F0DDF16D59A2 moveto( _id_5938EA7D5977BD0F.origin, 0.5, 0.1, 0.1 );
    _id_8540F0DDF16D59A2 waittill( "movedone" );

    if ( getdvar( _id_20C83FEF065D76F8 ) != "" )
        setsaveddvar( _id_20C83FEF065D76F8, _id_CC57468A5AC4277C );

    level.player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "interact_vehicle_inside" );
    level.player unlink();
    _id_8540F0DDF16D59A2 delete();
    p_mover delete();
    level.interact_vehicle.g_inuse = 0;
    scripts\engine\utility::flag_clear( "player_interacting_vehicle" );
    keys = getarraykeys( self.doors );

    foreach ( key in keys )
    {
        if ( isdefined( self.door_open[key] ) && self.door_open[key] )
            thread interact_vehicle_inside( self.doors[key] );
    }
}

block_for_mantle( _id_B136B75A34464DC1 )
{
    level endon( "stop mantle block" );
    level thread create_mantle_hint();

    if ( !isdefined( level.interact_vehicle_mantle_hint_active ) )
        level.interact_vehicle_mantle_hint_active = 0;

    for (;;)
    {
        if ( !isdefined( self ) )
        {
            level.player allowjump( 1 );
            return;
        }

        dist = distance2dsquared( level.player.origin, _id_B136B75A34464DC1.origin );

        if ( dist < 800 )
        {
            if ( !level.interact_vehicle_mantle_hint_active )
            {
                level.interact_vehicle_mantle_hint.alpha = 1;
                level.player allowjump( 0 );
            }

            level.interact_vehicle_mantle_hint_active = 1;

            if ( level.player jumpbuttonpressed() )
            {
                level.interact_vehicle_mantle_hint.alpha = 0;
                return;
            }
        }
        else if ( dist > 20000 )
            wait 1;
        else if ( dist > 500000 )
            wait 5;
        else
        {
            level.interact_vehicle_mantle_hint_active = 0;
            waittillframeend;
            waitframe();

            if ( !level.interact_vehicle_mantle_hint_active )
            {
                level.interact_vehicle_mantle_hint_active = 0;
                level.interact_vehicle_mantle_hint.alpha = 0;
                level.player allowjump( 1 );
            }
        }

        waitframe();
    }
}

wait_for_mantle_inside( _id_B136B75A34464DC1 )
{
    level notify( "stop mantle wait" );
    level endon( "stop mantle wait" );
    level thread create_mantle_hint();
    dist = distance2dsquared( level.player.origin, _id_B136B75A34464DC1.origin );

    if ( dist < 4 )
    {
        level.interact_vehicle_mantle_hint.alpha = 1;

        if ( level.player jumpbuttonpressed() )
        {
            level.interact_vehicle_mantle_hint.alpha = 0;
            return 1;
        }
        else
            return 0;
    }
    else
    {
        if ( dist > 4 )
            level.interact_vehicle_mantle_hint.alpha = 0;

        return 0;
    }
}

create_mantle_hint()
{
    if ( isdefined( level.interact_vehicle_mantle_hint ) )
        return;

    level.interact_vehicle_mantle_hint = newhudelem();
    level.interact_vehicle_mantle_hint.x = 320;
    level.interact_vehicle_mantle_hint.y = 350;
    level.interact_vehicle_mantle_hint.alignx = "center";
    level.interact_vehicle_mantle_hint.aligny = "middle";
    level.interact_vehicle_mantle_hint.sort = 1;
    level.interact_vehicle_mantle_hint.foreground = 1;
    level.interact_vehicle_mantle_hint.hidewheninmenu = 1;
    level.interact_vehicle_mantle_hint.alpha = 1;
    level.interact_vehicle_mantle_hint.fontscale = 2;
    level.interact_vehicle_mantle_hint.font = "objective";
    level.interact_vehicle_mantle_hint.text = "enter";
    level.interact_vehicle_mantle_hint setshader( "hud_icon_mantle", 24, 24 );
}

block_for_push( _id_9B255ABFDC4DF054, duration )
{
    self endon( "death" );

    if ( isdefined( duration ) )
        duration = duration;
    else
        duration = 6;

    count = 0;

    for (;;)
    {
        dist = distance2dsquared( level.player.origin, self.getin_hints[_id_9B255ABFDC4DF054].origin );
        input = level.player getnormalizedmovement();
        dot = scripts\engine\math::get_dot( self.getin_hints[_id_9B255ABFDC4DF054].origin, self.getin_hints[_id_9B255ABFDC4DF054].angles, level.player.origin );

        if ( dist < 900 && abs( input[1] ) > 0.2 )
        {
            count = count + 1;

            if ( count > duration )
                break;
        }
        else if ( dist > 10000 )
        {
            count = 0;
            wait 1;
        }
        else if ( dist > 500000 )
        {
            count = 0;
            wait 5;
        }
        else
            count = 0;

        waitframe();
    }
}

interact_entry_anim()
{
    rig = scripts\sp\player_rig::get_player_rig( 1 );
    rig hide();
    _id_B2A3F9ABCEE9D071 = undefined;

    if ( isdefined( self.ent ) )
        _id_B2A3F9ABCEE9D071 = self.ent;
    else if ( isdefined( self.vehicle ) )
        _id_B2A3F9ABCEE9D071 = self.vehicle;

    level.player disableweapons();
    time = 0.4;
    level.player playerlinktoblend( rig, "tag_player", time, 0, 0.2 );
    thread interact_give_control_back( time, rig );
    rig scripts\engine\utility::delaycall( time, ::show );
    _id_B2A3F9ABCEE9D071.animname = _id_B2A3F9ABCEE9D071.script_noteworthy;
    animation = _id_B2A3F9ABCEE9D071 scripts\engine\utility::getanim( self.script_animation );
    wait 0.1;
    _id_EB5B1F36E255152D = getanimlength( animation );
    _id_EB5B1F36E255152D = 1 - ( _id_EB5B1F36E255152D - 2 ) / _id_EB5B1F36E255152D;
    wait( _id_EB5B1F36E255152D );
    rig delete();
    level.player enableweapons();
}

interact_vehicle_delete_ground_ref_ent()
{
    ent = level.player.ground_ref_ent;
    ent.vehicleinteract = undefined;
    ent rotateto( ( 0, 0, 0 ), 0.3, 0.1, 0.1 );
}

get_next_struct( struct )
{
    if ( isdefined( struct.target ) )
        return scripts\engine\utility::getstruct( struct.target, "targetname" );
    else
        return undefined;
}

get_prev_struct( struct )
{
    if ( isdefined( struct.targetname ) )
        return scripts\engine\utility::getstruct( struct.targetname, "target" );
    else
        return undefined;
}

get_opposite_door( _id_2D90BE230C1D4DE0 )
{
    _id_23FF9149209744CA = undefined;

    if ( _id_2D90BE230C1D4DE0 == "outside_lr" )
        _id_23FF9149209744CA = "outside_rr";
    else if ( _id_2D90BE230C1D4DE0 == "outside_rr" )
        _id_23FF9149209744CA = "outside_lr";

    _id_9B966DD8A1AC987A = scripts\engine\utility::getstructarray( self.script_linkto, "script_linkname" );

    foreach ( door in _id_9B966DD8A1AC987A )
    {
        if ( isdefined( door.script_namenumber ) && door.script_namenumber == _id_23FF9149209744CA )
            return door;
    }
}

interact_vehicle_movement( struct, door, pathstart, _id_8B79D0E3AD3FB617 )
{
    self endon( "death" );
    range = 100;
    self.pathdir = vectornormalize( _id_8B79D0E3AD3FB617.origin - pathstart.origin );
    dist = length( _id_8B79D0E3AD3FB617.origin - pathstart.origin );
    _id_7DCA7B54862A5286 = pathstart.origin;

    if ( !isdefined( pathstart.midpoint ) )
    {
        pathstart.midpoint = spawnstruct();
        pathstart.midpoint.origin = pathstart.origin + self.pathdir * ( dist * 0.5 );
        pathstart.midpoint.angles = pathstart.angles;
        pathstart.midpoint.right = anglestoright( pathstart.angles );
    }

    self.pathstart = pathstart;
    self.movedist = 0;
    self.velocity = 0;
    self.trajectory = 0;
    self.isducking = 0;
    self.prevmoveright = 0;
    childthread interact_vehicle_duck_toggle();
    z = 0;

    for (;;)
    {
        set_moverate_along_dir();
        set_viewangles();
        _id_8B79D0E3AD3FB617.open = struct get_end_door_state( door );

        if ( !isdefined( _id_8B79D0E3AD3FB617.open ) )
            _id_8B79D0E3AD3FB617.open = 0;

        if ( isdefined( self.forceexit ) )
            break;

        if ( self.movelength > 0 )
        {
            _id_FE3C611CDAD7110E = _id_7DCA7B54862A5286 + self.velocity;
            _id_FE3C611CDAD7110E = ( _id_FE3C611CDAD7110E[0], _id_FE3C611CDAD7110E[1], 0 );
            _id_27BB2A56EEE65FEC = ( pathstart.origin[0], pathstart.origin[1], 0 );
            _id_A9D61648DA0ACAC1 = ( _id_8B79D0E3AD3FB617.origin[0], _id_8B79D0E3AD3FB617.origin[1], 0 );

            if ( vectordot( self.pathdir, vectornormalize( _id_27BB2A56EEE65FEC - _id_FE3C611CDAD7110E ) ) > 0 )
            {
                _id_9F925F5509626DF1 = struct wait_for_mantle_inside( pathstart );

                if ( _id_9F925F5509626DF1 )
                    return pathstart;
                else
                    self.velocity = ( 0, 0, 0 );
            }
            else if ( vectordot( self.pathdir, vectornormalize( _id_A9D61648DA0ACAC1 - _id_FE3C611CDAD7110E ) ) < 0 )
            {
                _id_9F925F5509626DF1 = struct wait_for_mantle_inside( _id_8B79D0E3AD3FB617 );

                if ( _id_9F925F5509626DF1 )
                {
                    if ( !_id_8B79D0E3AD3FB617.open )
                    {
                        switch ( door.script_namenumber )
                        {
                            case "outside_lr":
                                struct thread interact_vehicle_animate_door( "rr" );
                                struct.getin_hints["rr"].hint_ent delete();
                                break;
                            case "outside_rr":
                                struct thread interact_vehicle_animate_door( "lr" );
                                struct.getin_hints["lr"].hint_ent delete();
                                break;
                        }
                    }

                    return _id_8B79D0E3AD3FB617;
                }
                else
                    self.velocity = ( 0, 0, 0 );
            }
        }
        else
        {
            _id_9F925F5509626DF1 = struct wait_for_mantle_inside( pathstart );

            if ( _id_9F925F5509626DF1 )
                return pathstart;

            _id_9F925F5509626DF1 = struct wait_for_mantle_inside( _id_8B79D0E3AD3FB617 );

            if ( _id_9F925F5509626DF1 )
            {
                if ( !_id_8B79D0E3AD3FB617.open )
                {
                    switch ( door.script_namenumber )
                    {
                        case "outside_lr":
                            struct thread interact_vehicle_animate_door( "rr" );
                            struct.getin_hints["rr"].hint_ent delete();
                            break;
                        case "outside_rr":
                            struct thread interact_vehicle_animate_door( "lr" );
                            struct.getin_hints["lr"].hint_ent delete();
                            break;
                    }
                }

                return _id_8B79D0E3AD3FB617;
            }
        }

        _id_7DCA7B54862A5286 = _id_7DCA7B54862A5286 + self.velocity;

        if ( self.isducking )
        {
            if ( z > -16 )
                z = z - 3;
        }
        else if ( z < 0 )
            z = z + 3;

        z = clamp( z, -16, 0 );
        _id_7E3EFD5A296CB7F3 = _id_7DCA7B54862A5286 + ( 0, 0, z );
        self.origin = _id_7E3EFD5A296CB7F3;
        wait 0.05;
    }

    return _id_8B79D0E3AD3FB617;
}

get_end_door_state( door )
{
    switch ( door.script_namenumber )
    {
        case "outside_lf":
            return 0;
        case "outside_lr":
            return self.door_open["rr"];
        case "outside_rf":
            return 0;
        case "outside_rr":
            return self.door_open["lr"];
    }
}

interact_vehicle_duck_toggle()
{
    level.player notifyonplayercommand( "duck", "+movedown" );
    level.player notifyonplayercommand( "duck", "+togglecrouch" );
    level.player notifyonplayercommand( "duck", "+stance" );

    for (;;)
    {
        level.player waittill( "duck" );
        self.isducking = !self.isducking;
        wait 0.2;
    }
}

set_moverate_along_dir()
{
    range = 3.0;
    input = level.player getnormalizedmovement();
    forward = anglestoforward( level.player.angles );
    right = anglestoright( level.player.angles );
    _id_EDBBF325A08E3C56 = forward * input[0] + right * input[1];
    trajectory = vectordot( _id_EDBBF325A08E3C56, self.pathdir ) * range;

    if ( abs( trajectory ) > 0 )
        self.trajectory = trajectory * 0.5;
    else if ( self.trajectory > 0.01 )
        self.trajectory = self.trajectory - self.trajectory * 0.5;
    else if ( self.trajectory < -0.01 )
        self.trajectory = self.trajectory - self.trajectory * 0.5;
    else
        self.trajectory = 0;

    _id_1E7771FF7F60E92A = 1;

    if ( self.isducking )
        _id_1E7771FF7F60E92A = 0.6;

    self.velocity = self.pathdir * self.trajectory * _id_1E7771FF7F60E92A;
    self.ismoveright = is_pos_in_front( self.origin, self.origin + self.velocity, self.pathstart.midpoint.right );

    if ( self.prevmoveright != self.ismoveright )
        self.velocity = self.velocity * 0.2;

    self.prevmoveright = self.ismoveright;
    self.movelength = length( self.velocity );

    if ( self.movelength == 0 )
        self.movedist = 0;
    else
    {
        self.movedist = self.movedist + self.movelength;

        if ( self.movedist > 10 )
            self.movedist = 2.0;
    }

    _id_266051ABDF333968 = self.movedist / 10;
    _id_84EC4B2873F0FAC2 = get_scoot_velocity( _id_266051ABDF333968 );
    self.velocity_bump = get_scoot_velocity_bump( _id_266051ABDF333968 );
    self.moveviewmult = _id_84EC4B2873F0FAC2;
    self.velocity = self.velocity * ( _id_84EC4B2873F0FAC2 + self.velocity_bump );
}

get_scoot_velocity( x )
{
    _id_CDCD4478F5178F4E = 3.14159;
    temp = 2 * pow( x, 1.5 ) * _id_CDCD4478F5178F4E + _id_CDCD4478F5178F4E;
    _id_E6666F4D33922585 = temp * 180 / _id_CDCD4478F5178F4E;
    y = ( cos( _id_E6666F4D33922585 ) + 1 ) / 2;
    return y;
}

get_scoot_velocity_bump( x )
{
    _id_2346284216153D11 = 0.2;
    _id_2346284216153D11 = _id_2346284216153D11 + ( _id_2346284216153D11 - 0 ) * x * 2;

    if ( _id_2346284216153D11 < 0 )
        _id_2346284216153D11 = 0;

    return _id_2346284216153D11;
}

qlerp( from, to, frac )
{
    return from + ( to - from ) * frac;
}

set_viewangles()
{
    level.player endon( "death" );

    if ( !isdefined( level.player.ground_ref_ent ) )
        level.player.ground_ref_ent = spawn( "script_origin", ( 0, 0, 0 ) );

    if ( !isdefined( level.player.ground_ref_ent.vehicleinteract ) )
    {
        level.player.ground_ref_ent.vehicleinteract = 1;
        level.player playersetgroundreferenceent( level.player.ground_ref_ent );
    }

    groundent = level.player.ground_ref_ent;
    pitch = 2;
    yaw = 1.5;
    roll = -1;

    if ( self.ismoveright )
    {
        yaw = yaw * -1;
        roll = roll * -1;
    }

    _id_DD3F39726D4223E5 = is_pos_in_front( self.pathstart.midpoint.origin, self.origin, self.pathstart.midpoint.right );

    if ( _id_DD3F39726D4223E5 )
        _id_C7A69CD71108DDF5 = ( 0, 0, -5 );
    else
        _id_C7A69CD71108DDF5 = ( 0, 0, 5 );

    _id_AC0E564AC96A9D0F = distance2d( self.pathstart.midpoint.origin, self.origin );
    _id_C7A69CD71108DDF5 = anglelerpquatfrac( ( 0, 0, 0 ), _id_C7A69CD71108DDF5, _id_AC0E564AC96A9D0F / 5 );
    _id_CB49446122965CB4 = ( 0, 0, 0 );

    if ( self.isducking )
    {
        if ( !isdefined( self.duckingtime ) )
            self.duckingtime = gettime();

        time = ( gettime() - self.duckingtime ) * 0.001;
        _id_FC5BB0E7B680B75D = time / 0.2 * 1.5;
        _id_FC5BB0E7B680B75D = _id_FC5BB0E7B680B75D * ( _id_AC0E564AC96A9D0F / 5 );
        _id_FC5BB0E7B680B75D = clamp( _id_FC5BB0E7B680B75D, 0, 1 );

        if ( !isdefined( self.prevduckangles ) )
            self.prevduckangles = ( 0, 0, 0 );

        _id_2F1A4662430316F2 = ( 0, 2, -10 );

        if ( _id_DD3F39726D4223E5 )
            _id_CB49446122965CB4 = anglelerpquatfrac( ( 0, 0, 0 ), _id_2F1A4662430316F2, _id_FC5BB0E7B680B75D );
        else
            _id_CB49446122965CB4 = anglelerpquatfrac( ( 0, 0, 0 ), _id_2F1A4662430316F2 * -1, _id_FC5BB0E7B680B75D );

        _id_CB49446122965CB4 = anglelerpquatfrac( self.prevduckangles, _id_CB49446122965CB4, 0.0001 );
        self.prevduckangles = _id_CB49446122965CB4;
    }
    else
    {
        self.duckingtime = undefined;
        self.prevduckangles = ( 0, 0, 0 );
    }

    _id_8C57EF0D95A6EE0C = ( pitch, yaw, roll ) * self.moveviewmult;
    _id_8C57EF0D95A6EE0C = _id_8C57EF0D95A6EE0C + ( _id_CB49446122965CB4 + _id_C7A69CD71108DDF5 );

    if ( !isdefined( self.prevviewangles ) )
        self.prevviewangles = ( 0, 0, 0 );

    if ( self.moveviewmult < 0.05 )
        _id_8C57EF0D95A6EE0C = anglelerpquatfrac( self.prevviewangles, _id_8C57EF0D95A6EE0C, 0.1 );

    self.prevviewangles = _id_8C57EF0D95A6EE0C;

    if ( groundent.angles == _id_8C57EF0D95A6EE0C )
        return;

    _id_F1A4D9D10FD4B365 = combineangles( self.pathstart.angles, _id_8C57EF0D95A6EE0C );
    up = anglestoup( _id_F1A4D9D10FD4B365 );
    right = vectorcross( ( 1, 0, 0 ), up );
    forward = vectorcross( up, right );
    _id_F1A4D9D10FD4B365 = axistoangles( forward, right, up );
    groundent.angles = anglelerpquatfrac( groundent.angles, _id_F1A4D9D10FD4B365, 0.5 );
}

is_pos_in_front( _id_EAD1F6100B5D5CC5, _id_51141F4BD8E66534, dir )
{
    _id_ABEA560FE9718122 = ( _id_51141F4BD8E66534[0], _id_51141F4BD8E66534[1], 0 );
    _id_9E78858751869B23 = ( _id_EAD1F6100B5D5CC5[0], _id_EAD1F6100B5D5CC5[1], 0 );
    _id_3C6560027930BC25 = vectordot( dir, vectornormalize( _id_ABEA560FE9718122 - _id_9E78858751869B23 ) );
    return _id_3C6560027930BC25 > 0;
}

interact_give_control_back( time, ent )
{
    wait( time );
    level.player playerlinktodelta( ent, "tag_player", 0, 110, 110, 20, 30 );
}

hide_interact_vehicle( noteworthy )
{
    vehicle = getscriptablearray( noteworthy, "script_noteworthy" )[0];
    vehicle hide();
    return vehicle;
}

show_interact_vehicle( noteworthy )
{
    vehicle = getscriptablearray( noteworthy, "script_noteworthy" )[0];
    vehicle show();
    return vehicle;
}

get_interact_vehicle( noteworthy )
{
    foreach ( vehicle in level.interact_vehicle.entries )
    {
        if ( isdefined( vehicle.script_noteworthy ) && vehicle.script_noteworthy == noteworthy )
            return vehicle;
    }
}

get_interact_vehicle_array( noteworthy )
{
    vehicles = [];

    foreach ( vehicle in level.interact_vehicle.entries )
    {
        if ( isdefined( vehicle.script_noteworthy ) && vehicle.script_noteworthy == noteworthy )
            vehicles = scripts\engine\utility::array_add( vehicles, vehicle );
    }

    return vehicles;
}

interact_vehicle_doors_state( doors, state )
{
    self endon( "death" );

    foreach ( door in doors )
    {
        if ( self.door_open[door] )
            continue;

        switch ( door )
        {
            case "hatch":
            case "rr":
            case "rf":
            case "lr":
            case "lf":
                self.dont_lerp_player = 1;
                self.getin_hints[door].hint_ent notify( "trigger" );
                waittillframeend;
                self.dont_lerp_player = 0;
                break;
            default:
        }
    }
}

interact_vehicle_doors_inactive( doors )
{
    self endon( "death" );

    foreach ( door in doors )
    {
        switch ( door )
        {
            case "hatch":
            case "rr":
            case "rf":
            case "lr":
            case "lf":
                self.getin_hints[door].hint_ent delete();
                break;
            default:
        }
    }
}

interact_interior_door_hack( _id_C7D1B7AA659D4FE3 )
{
    hint_ent = undefined;

    switch ( _id_C7D1B7AA659D4FE3 )
    {
        case "lr":
            hint_ent = scripts\engine\utility::spawn_tag_origin( self.vehicle gettagorigin( self.hint_bones["inside_lr"] ) );
            hint_ent scripts\sp\player\cursor_hint::create_cursor_hint( "tag_origin", undefined, undefined, 270, 250, 55, 0 );
            self.getin_hints["lr_inside"] = spawnstruct();
            self.getin_hints["lr_inside"].hint_ent = hint_ent;
            hint_ent waittill( "trigger" );
            hint_ent delete();
            thread interact_vehicle_animate_door( "lr" );
            break;
        case "rr":
            hint_ent = scripts\engine\utility::spawn_tag_origin( self.vehicle gettagorigin( self.hint_bones["inside_rr"] ) );
            hint_ent scripts\sp\player\cursor_hint::create_cursor_hint( "tag_origin", undefined, undefined, 270, 250, 55, 0 );
            self.getin_hints["rr_inside"] = spawnstruct();
            self.getin_hints["rr_inside"].hint_ent = hint_ent;
            hint_ent waittill( "trigger" );
            hint_ent delete();
            thread interact_vehicle_animate_door( "rr" );
            break;
    }
}

interact_getanim( anime )
{
    if ( isdefined( level.scr_anim[self.animname] ) && isdefined( level.scr_anim[self.animname][anime] ) )
        return scripts\engine\utility::getanim( anime );
    else
        return level.scr_anim["interact_vehicle"][anime];
}

interact_vehicle_animate_door( door )
{
    self.door_open[door] = 1;
    door_anim = self.vehicle interact_getanim( door + "_open" );

    if ( isdefined( self.door_col ) && isdefined( self.door_col[door] ) )
        scripts\engine\utility::noself_delaycall( getanimlength( door_anim ), ::createnavobstaclebyent, self.door_col[door], "axis", "allies" );

    self.vehicle setanim( door_anim, 1, 0.2, 2 );
    _id_C101EC8E66101871 = undefined;
    _id_694636DE2A4FBA55 = undefined;
    _id_6088E0BB8DC693C6 = undefined;

    switch ( door )
    {
        case "lf":
            _id_6088E0BB8DC693C6 = "lr";
            _id_C101EC8E66101871 = "Conceal Crouch";
            _id_694636DE2A4FBA55 = "Conceal Crouch";
            break;
        case "lr":
            _id_6088E0BB8DC693C6 = "lf";
            _id_C101EC8E66101871 = "Conceal Crouch";
            _id_694636DE2A4FBA55 = "Conceal Crouch";
            break;
        case "rf":
            _id_6088E0BB8DC693C6 = "rr";
            _id_C101EC8E66101871 = "Conceal Crouch";
            _id_694636DE2A4FBA55 = "Conceal Crouch";
            break;
        case "rr":
            _id_6088E0BB8DC693C6 = "rf";
            _id_C101EC8E66101871 = "Conceal Crouch";
            _id_694636DE2A4FBA55 = "Conceal Crouch";
            break;
    }

    if ( is_van() && ( door == "rf" || door == "lr" || door == "rr" ) )
        return;

    if ( isdefined( _id_C101EC8E66101871 ) )
    {
        self.cover_nodes[door] = interact_vehicle_spawn_cover_node( self, door, _id_C101EC8E66101871, "door_back" );

        if ( door == "lr" || door == "rr" )
        {
            if ( !istrue( self.door_open[_id_6088E0BB8DC693C6] ) )
                self.cover_nodes[door + "_front"] = interact_vehicle_spawn_cover_node( self, door, _id_C101EC8E66101871, "door_front" );
        }
        else if ( door == "lf" || door == "rf" )
        {
            self.cover_nodes[door + "_front"] = interact_vehicle_spawn_cover_node( self, door, _id_C101EC8E66101871, "door_front" );

            if ( istrue( self.door_open[_id_6088E0BB8DC693C6] ) && isdefined( self.cover_nodes[_id_6088E0BB8DC693C6 + "_front"] ) )
                despawncovernode( self.cover_nodes[_id_6088E0BB8DC693C6 + "_front"] );
        }
    }
    else
    {

    }
}

interact_vehicle_spawn_cover_node( parent, door, _id_2A046A0527C89C61, type )
{
    _id_0386C209C4BE9E91 = undefined;

    switch ( type )
    {
        case "door_back":
            _id_0386C209C4BE9E91 = spawncovernode( parent.doors[door].origin + anglestoup( parent.doors[door].angles ) * -50, parent.doors[door].angles, _id_2A046A0527C89C61 );
            break;
        case "door_front":
            _id_0386C209C4BE9E91 = spawncovernode( parent.doors[door].origin + anglestoup( parent.doors[door].angles ) * -50 + anglestoforward( parent.doors[door].angles ) * 48, parent.doors[door].angles + ( 0, 180, 0 ), _id_2A046A0527C89C61 );
            break;
        default:
            _id_0386C209C4BE9E91 = spawncovernode( door.origin + anglestoup( door.angles ) * -50, door.angles, _id_2A046A0527C89C61 );
            break;
    }

    if ( isdefined( parent.script_color_allies ) && isdefined( _id_0386C209C4BE9E91 ) )
    {
        _id_0386C209C4BE9E91.script_color_allies = parent.script_color_allies;
        update_color_nodes( _id_0386C209C4BE9E91 );
    }

    return _id_0386C209C4BE9E91;
}

update_color_nodes( node )
{
    if ( isdefined( node.script_color_allies ) )
        node add_node_to_global_arrays( node.script_color_allies, "allies" );

    if ( isdefined( node.script_color_axis ) )
        node add_node_to_global_arrays( node.script_color_axis, "axis" );
}

add_node_to_global_arrays( _id_15B3A3397A62E5F3, team )
{
    self.color_user = undefined;
    _id_E659CE0031ADF776 = strtok( _id_15B3A3397A62E5F3, " " );
    _id_E659CE0031ADF776 = scripts\sp\colors::array_remove_dupes( _id_E659CE0031ADF776 );

    foreach ( _id_9AC0213E4B91D0C1 in _id_E659CE0031ADF776 )
    {
        if ( isdefined( level.arrays_of_colorcoded_nodes[team] ) && isdefined( level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1] ) )
        {
            if ( !scripts\engine\utility::array_contains( level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1], self ) )
            {
                level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1] = scripts\engine\utility::array_add( level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1], self );
                continue;
            }
        }

        level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1][0] = self;
        level.arrays_of_colorcoded_ai[team][_id_9AC0213E4B91D0C1] = [];
        level.arrays_of_colorcoded_spawners[team][_id_9AC0213E4B91D0C1] = [];
    }
}

is_van()
{
    if ( isdefined( self.script_animname ) && self.script_animname == "sprinter" )
        return 1;

    return 0;
}
