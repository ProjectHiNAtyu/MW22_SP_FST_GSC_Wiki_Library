// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( isdefined( level.player.stinger ) )
        return;

    level.player clearirtarget();
    level.player thread stingerfirednotify();
    level.player thread stringemissilefired();
    level.player thread stingertoggleloop();
    level.player thread stingerdeathcleanup();
}

clearirtarget()
{
    if ( !isdefined( self.stinger ) )
        self.stinger = spawnstruct();

    self.stinger.stingerlockstarttime = 0;
    self.stinger.stingerlockstarted = 0;
    self.stinger.stingerlockfinalized = 0;

    if ( isdefined( self.stinger.stingertarget ) )
        cleartarget( gettarget( self.stinger.stingertarget ) );

    self.stinger.stingertarget = undefined;
    self notify( "stinger_irt_cleartarget" );
    self notify( "stop_lockon_sound" );
    self notify( "stop_locked_sound" );
    self.stinger.stingerlocksound = undefined;
    self weaponlockfree();
    self _meth_435160E752E043A1( 0 );
    self _meth_EE46354C0DAF1411( 0 );
    self stoplocalsound( "clu_lock" );
    self stoplocalsound( "clu_aquiring_lock" );
}

stingerfirednotify()
{
    for (;;)
    {
        self waittill( "weapon_fired" );

        if ( !weaponhaslockon() )
            continue;

        self.stinger.lastfiredtime = gettime();
        self notify( "stinger_fired" );
    }
}

stringemissilefired()
{
    for (;;)
    {
        self waittill( "missile_fire", missile );

        if ( isdefined( missile ) )
        {
            self.stinger.missile = missile;
            target = self.stinger.stingertarget;

            if ( isstillvalidtarget( target ) )
            {
                offset = getdesiredoffset( target );
                missile missile_settargetent( self.stinger.stingertarget, offset );
            }
        }
    }
}

getdesiredoffset( target )
{
    if ( isdefined( target.vehicletype ) && target scripts\common\vehicle::ishelicopter() )
        return ( 0, 0, -100 );
    else if ( scripts\engine\utility::is_equal( target.unittype, "soldier" ) || scripts\engine\utility::is_equal( target.unittype, "juggernaut" ) || scripts\engine\utility::is_equal( target.unittype, "suicidebomber" ) )
        return ( 0, 0, 38 );

    return ( 0, 0, 0 );
}

stingertoggleloop()
{
    self endon( "death" );

    for (;;)
    {
        while ( !playerstingerads() )
            wait 0.05;

        self.stinger.lockontargets = [];
        self.stinger.targetids = [ "0", "1", "2", "3" ];
        thread stingerirtloop();

        while ( playerstingerads() )
            wait 0.05;

        self notify( "stinger_IRT_off" );
        clearirtarget();

        foreach ( target in self.stinger.lockontargets )
            cleartarget( target );

        self.stinger.lockontargets = undefined;
        self.stinger.targetids = undefined;
    }
}

stingerdeathcleanup()
{
    self waittill( "death" );

    if ( isdefined( self.stinger.lockontargets ) )
    {
        foreach ( target in self.stinger.lockontargets )
            cleartarget( target );
    }
}

stingerirtloop()
{
    self endon( "death" );
    self endon( "stinger_IRT_off" );

    for (;;)
    {
        wait 0.05;

        if ( self.stinger.stingerlockfinalized )
        {
            if ( !isstillvalidtarget( self.stinger.stingertarget ) )
            {
                clearirtarget();
                continue;
            }

            target = gettarget( self.stinger.stingertarget );
            thread looplocallocksound( "clu_lock", 0.75 );
            settargettooclose( self.stinger.stingertarget );
            continue;
        }

        if ( self.stinger.stingerlockstarted )
        {
            if ( !isstillvalidtarget( self.stinger.stingertarget ) )
            {
                clearirtarget();
                continue;
            }

            target = gettarget( self.stinger.stingertarget );
            _id_3B5803E733581858 = gettime() - self.stinger.stingerlockstarttime;

            if ( isdefined( self.stinger.lockonoverrideduration ) )
                maxtime = self.stinger.lockonoverrideduration;
            else
                maxtime = scripts\engine\utility::ter_op( self.stinger.stingertarget scripts\common\vehicle::isvehicle(), 1300, 500 );

            if ( _id_3B5803E733581858 < maxtime )
                continue;

            self notify( "stop_lockon_sound" );
            self notify( "stinger_locked_on" );
            self.stinger.stingerlockfinalized = 1;
            self weaponlockfinalize( self.stinger.stingertarget );
            settargettooclose( self.stinger.stingertarget );
            continue;
        }

        besttarget = getbeststingertarget();

        if ( !isdefined( besttarget ) )
            continue;

        if ( isdefined( self.stinger.lockontargetmarkergroup ) )
            targetmarkergroupsetentitystate( self.stinger.lockontargetmarkergroup, besttarget.ent, 1 );

        self.stinger.stingertarget = besttarget.ent;
        self.stinger.stingerlockstarttime = gettime();
        self.stinger.stingerlockstarted = 1;
        self notify( "stinger_lock_begin" );
        thread looplocalseeksound( "clu_aquiring_lock", 0.6 );
    }
}

stinger_get_closest_to_player_view( array, player, _id_C603E9FF12D40A5A, _id_8461F3DA37A8BF63 )
{
    if ( !array.size )
        return;

    if ( !isdefined( player ) )
        player = level.player;

    if ( !isdefined( _id_8461F3DA37A8BF63 ) )
        _id_8461F3DA37A8BF63 = -1;

    _id_A00884ED3A6D8B4B = player.origin;

    if ( isdefined( _id_C603E9FF12D40A5A ) && _id_C603E9FF12D40A5A )
        _id_A00884ED3A6D8B4B = player geteye();

    ent = undefined;
    _id_DEE6508B0BA437C5 = player getplayerangles();
    _id_70222FBC47330166 = anglestoforward( _id_DEE6508B0BA437C5 );
    dot = -1;

    foreach ( _id_2AA56193B94A18F8 in array )
    {
        angles = vectortoangles( _id_2AA56193B94A18F8.origin - _id_A00884ED3A6D8B4B );
        forward = anglestoforward( angles );
        _id_1B67C55A5634F958 = vectordot( _id_70222FBC47330166, forward );
        dist = distancesquared( _id_A00884ED3A6D8B4B, _id_2AA56193B94A18F8.origin );
        _id_DFE1652810C9759C = 1 - scripts\engine\math::normalize_value( squared( 250 ), squared( 5000 ), dist );
        _id_1B67C55A5634F958 = _id_1B67C55A5634F958 * _id_DFE1652810C9759C;

        if ( _id_1B67C55A5634F958 < dot )
            continue;

        if ( _id_1B67C55A5634F958 < _id_8461F3DA37A8BF63 )
            continue;

        dot = _id_1B67C55A5634F958;
        ent = _id_2AA56193B94A18F8;
    }

    return ent;
}

getbeststingertarget()
{
    _id_A2FCE1A0DAA1830A = getcurrentents();
    lockontargets = self.stinger.lockontargets;

    if ( isdefined( self.stinger.stingertarget ) )
    {
        _id_A2FCE1A0DAA1830A = scripts\engine\utility::array_remove( _id_A2FCE1A0DAA1830A, self.stinger.stingertarget );
        lockontargets = scripts\engine\utility::array_remove( lockontargets, gettarget( self.stinger.stingertarget ) );
    }

    _id_F06C1DFAC83F0753 = [];

    for ( _id_FE8F7703F6313ED4 = 0; _id_FE8F7703F6313ED4 < _id_A2FCE1A0DAA1830A.size; _id_FE8F7703F6313ED4++ )
    {
        ent = _id_A2FCE1A0DAA1830A[_id_FE8F7703F6313ED4];

        if ( haslos( ent ) )
        {
            _id_F06C1DFAC83F0753[_id_F06C1DFAC83F0753.size] = ent;
            continue;
        }

        target = gettarget( ent );

        if ( isdefined( target ) )
            cleartarget( target );
    }

    if ( _id_F06C1DFAC83F0753.size == 0 )
        return undefined;

    _id_A7C5FFE4437069C2 = [];
    _id_DB0D5BF7EAFE4A31 = 4;

    if ( isdefined( self.stinger.stingertarget ) )
        _id_DB0D5BF7EAFE4A31--;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_DB0D5BF7EAFE4A31; _id_AC0E594AC96AA3A8++ )
    {
        ent = stinger_get_closest_to_player_view( _id_F06C1DFAC83F0753, level.player, 1 );
        _id_A7C5FFE4437069C2[_id_AC0E594AC96AA3A8] = ent;
        _id_F06C1DFAC83F0753 = scripts\engine\utility::array_remove( _id_F06C1DFAC83F0753, ent );

        if ( _id_F06C1DFAC83F0753.size == 0 )
            break;
    }

    _id_980B846A443B1F2B = _id_A7C5FFE4437069C2;

    foreach ( target in lockontargets )
    {
        if ( !scripts\engine\utility::array_contains( _id_980B846A443B1F2B, target.ent ) )
        {
            cleartarget( target );
            continue;
        }

        _id_980B846A443B1F2B = scripts\engine\utility::array_remove( _id_980B846A443B1F2B, target.ent );
    }

    foreach ( ent in _id_980B846A443B1F2B )
        addtarget( ent );

    foreach ( _id_7BAFD28BF7587914 in _id_A7C5FFE4437069C2 )
    {
        if ( insidestingerreticlenolock( _id_7BAFD28BF7587914 ) )
            return gettarget( _id_7BAFD28BF7587914 );
    }

    return undefined;
}

getcurrentents()
{
    ents = getaiarray( "axis" );
    vehicles = vehicle_getarray();

    foreach ( v in vehicles )
    {
        if ( scripts\engine\utility::is_equal( v.script_team, "axis" ) )
            ents[ents.size] = v;
    }

    return ents;
}

gettarget( ent )
{
    foreach ( target in self.stinger.lockontargets )
    {
        if ( target.ent == ent )
            return target;
    }

    return undefined;
}

addtarget( ent )
{
    target = spawnstruct();
    target.ent = ent;
    target.id = self.stinger.targetids[0];

    if ( !isdefined( self.stinger.lockontargetmarkergroup ) )
    {
        self.stinger.lockontargetmarkergroup = createtargetmarkergroup( "lockontarget" );
        addclienttotargetmarkergroupmask( self.stinger.lockontargetmarkergroup, level.player );
    }

    targetmarkergroupaddentity( self.stinger.lockontargetmarkergroup, target.ent );
    self.stinger.targetids = scripts\engine\utility::array_remove( self.stinger.targetids, target.id );
    self.stinger.lockontargets[self.stinger.lockontargets.size] = target;
}

cleartarget( target )
{
    if ( isdefined( self.stinger.lockontargetmarkergroup ) )
        targetmarkergroupremoveentity( self.stinger.lockontargetmarkergroup, target.ent );

    self.stinger.lockontargets = scripts\engine\utility::array_remove( self.stinger.lockontargets, target );
    self.stinger.targetids[self.stinger.targetids.size] = target.id;

    if ( self.stinger.lockontargets.size == 0 && isdefined( self.stinger.lockontargetmarkergroup ) )
    {
        deletetargetmarkergroup( self.stinger.lockontargetmarkergroup );
        self.stinger.lockontargetmarkergroup = undefined;
    }
}

insidestingerreticlenolock( ent )
{
    return level.player worldpointinreticle_circle( getenthitpos( ent ), 65, 105 );
}

insidestingerreticlelocked( ent )
{
    return level.player worldpointinreticle_circle( getenthitpos( ent ), 65, 105 );
}

insidestingerreticlelockoverride( ent )
{
    return level.player worldpointinreticle_circle( getenthitpos( ent ), 65, 105 );
}

haslos( ent )
{
    _id_52241BCC3A205EF4 = self geteye();
    ignoreents = [ self, ent ];
    endpos = getenthitpos( ent );
    contents = scripts\engine\trace::create_contents( 1, 1, 0, 1, 0, 1, 0, 1 );
    _id_1F0571D36D0DF95B = scripts\engine\trace::ray_trace( _id_52241BCC3A205EF4, endpos, ignoreents, contents );
    return distancesquared( _id_1F0571D36D0DF95B["position"], endpos ) <= 1;
}

getenthitpos( ent )
{
    pos = ent.origin;
    offset = 38;
    pos = pos + offset * anglestoup( ent.angles );
    return pos;
}

isstillvalidtarget( ent )
{
    if ( !isdefined( ent ) )
        return 0;

    if ( !isalive( ent ) )
        return 0;

    if ( !insidestingerreticlelocked( ent ) )
        return 0;

    if ( !haslos( ent ) )
        return 0;

    if ( insidestingerreticlelockoverride( self.stinger.stingertarget ) || self.stinger.stingerlockstarted && !self.stinger.stingerlockfinalized )
        return 1;

    besttarget = getbeststingertarget();

    if ( isdefined( besttarget ) && insidestingerreticlelockoverride( besttarget.ent ) )
        return 0;

    return 1;
}

playerstingerads()
{
    if ( !weaponhaslockon() )
        return 0;

    if ( self playerads() == 1.0 )
        return 1;

    return 0;
}

weaponhaslockon()
{
    currentweapon = self getcurrentweapon();

    if ( currentweapon hasattachment( "lalphascope" ) )
        return 1;

    if ( currentweapon hasattachment( "lnchrscope_lalpha" ) )
        return 1;

    return 0;
}

settargettooclose( ent )
{
    _id_14F87FBCCD62729C = 250;

    if ( !isdefined( ent ) )
        return 0;

    dist = distance2d( self.origin, ent.origin );

    if ( dist < _id_14F87FBCCD62729C )
    {
        self.stinger.targettoclose = 1;
        self _meth_435160E752E043A1( 1 );
    }
    else
    {
        self.stinger.targettoclose = 0;
        self _meth_435160E752E043A1( 0 );
    }
}

looplocalseeksound( alias, interval )
{
    self endon( "stop_lockon_sound" );
    self endon( "death" );

    for (;;)
    {
        self playlocalsound( alias );
        wait( interval );
    }
}

looplocallocksound( alias, interval )
{
    self endon( "stop_locked_sound" );
    self endon( "death" );

    if ( isdefined( self.stinger.stingerlocksound ) )
        return;

    self.stinger.stingerlocksound = 1;

    for (;;)
    {
        self playlocalsound( alias );
        self playrumbleonentity( "slide_start" );
        wait( interval / 3 );
        self playrumbleonentity( "slide_start" );
        wait( interval / 3 );
        self playrumbleonentity( "slide_start" );
        wait( interval / 3 );
        self stoprumble( "slide_start" );
    }

    self.stinger.stingerlocksound = undefined;
}
