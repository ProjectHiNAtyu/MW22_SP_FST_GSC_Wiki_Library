// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_308AEA4AA4BFF28B( _id_2BED055D535B7521 )
{
    _id_261D73DEE9F7F35C = _id_89B1EE87A65F27C0();

    if ( !_id_261D73DEE9F7F35C.size )
        return undefined;

    temp = [];
    _id_E778AE7300340DF9 = undefined;

    foreach ( trig in _id_261D73DEE9F7F35C )
    {
        _id_E778AE7300340DF9 = trig scripts\engine\sp\utility::get_trigger_flag();

        if ( _id_E778AE7300340DF9 == _id_2BED055D535B7521 )
            temp[temp.size] = trig;
    }

    return temp[0];
}

_id_AA23D38C721355C0( _id_2BED055D535B7521 )
{
    _id_261D73DEE9F7F35C = _id_89B1EE87A65F27C0();

    if ( !_id_261D73DEE9F7F35C.size )
        return undefined;

    temp = [];
    _id_E778AE7300340DF9 = undefined;

    foreach ( trig in _id_261D73DEE9F7F35C )
    {
        _id_E778AE7300340DF9 = trig scripts\engine\sp\utility::get_trigger_flag();

        if ( _id_E778AE7300340DF9 == _id_2BED055D535B7521 )
            temp[temp.size] = trig;
    }

    return temp;
}

_id_89B1EE87A65F27C0()
{
    _id_261D73DEE9F7F35C = getentarray( "trigger_multiple_flag_set", "classname" );
    _id_6529015D2C5C6627 = getentarray( "trigger_multiple_flag_set_touching", "classname" );
    _id_261D73DEE9F7F35C = scripts\engine\utility::array_combine( _id_261D73DEE9F7F35C, _id_6529015D2C5C6627 );
    _id_6529015D2C5C6627 = getentarray( "trigger_multiple_flag_looking", "classname" );
    _id_261D73DEE9F7F35C = scripts\engine\utility::array_combine( _id_261D73DEE9F7F35C, _id_6529015D2C5C6627 );
    _id_6529015D2C5C6627 = getentarray( "trigger_multiple_flag_lookat", "classname" );
    _id_261D73DEE9F7F35C = scripts\engine\utility::array_combine( _id_261D73DEE9F7F35C, _id_6529015D2C5C6627 );
    return _id_261D73DEE9F7F35C;
}

delete_live_grenades()
{
    _id_0EBA0CB3C0C7437F = getentarray( "grenade", "classname" );

    foreach ( _id_33071C5CA19FBB3F in _id_0EBA0CB3C0C7437F )
    {
        if ( !isdefined( _id_33071C5CA19FBB3F.targetname ) && _id_33071C5CA19FBB3F.model != "projectile_molotov_v0" )
            _id_33071C5CA19FBB3F delete();
    }

    if ( scripts\sp\equipment\offhands::offhandisprecached( "molotov" ) )
        thread scripts\sp\equipment\molotov::delete_all_molotovs();

    if ( level.player isthrowinggrenade() )
        level.player childthread delete_grenade_when_thrown();
}

delete_grenade_when_thrown()
{
    level.player waittill( "grenade_fire", grenade, weapon );

    if ( isdefined( grenade ) )
        grenade delete();
}

assign_animtree_based_on_subclass()
{
    subclass = tolower( self.subclass );

    switch ( subclass )
    {
        case "regular":
        case "crew":
        case "no_boost":
        case "elite":
        case "riotshield":
        case "juggernaut":
            assign_human_animtree();
            break;
        default:
            break;
    }
}

assign_animtree_based_on_unittype()
{
    unittype = tolower( self.unittype );

    switch ( unittype )
    {
        case "soldier":
        case "civilian":
            assign_human_animtree();
            break;
        default:
            break;
    }
}

#using_animtree("generic_human");

assign_human_animtree()
{
    self useanimtree( #animtree );
}

enable_procedural_bones()
{
    self setanim( %proc_node, 1, 0 );
}

disable_procedural_bones()
{
    self setanim( %proc_node, 0, 0 );
}

change_player_health_packets( num )
{
    self.player_health_packets = self.player_health_packets + num;
    self notify( "update_health_packets" );

    if ( self.player_health_packets >= 3 )
        self.player_health_packets = 3;
}

player_in_zerog()
{
    if ( isplayer( self ) )
        player = self;
    else
        player = level.player;

    return isdefined( player.space ) && player.space.floating;
}

do_damage( health, position, attacker, inflictor, mod, weapon, location )
{
    if ( self == level.player )
        health = scripts\sp\player::dodamagefilter( health, mod );

    return self dodamage( health, position, attacker, inflictor, mod, weapon, location );
}

set_player_attacker_accuracy( val )
{
    player = scripts\engine\sp\utility::get_player_from_self();
    player.scriptedattackeraccuracy = val;
    player scripts\sp\gameskill::update_player_attacker_accuracy();
}

player_has_unlocked_stored_equipment_slots()
{
    if ( !isdefined( level.player.storedslotsunlocked ) || !level.player.storedslotsunlocked )
        return 0;
    else
        return 1;
}

player_seek_enable()
{
    level.player endon( "death" );
    level.player endon( "stop_player_seek" );
    level.player endon( "entitydeleted" );
    self notify( "stop_player_seek" );
    self endon( "death" );
    self endon( "stop_player_seek" );
    self endon( "entitydeleted" );
    _id_7E1EC739AE6C0015 = 1200;

    if ( has_shotgun() )
        _id_7E1EC739AE6C0015 = 250;

    _id_016D0BB7FD27FCFC = distance( self.origin, level.player.origin );

    for (;;)
    {
        wait 2;
        self.goalradius = _id_016D0BB7FD27FCFC;
        self setgoalentity( level.player );
        _id_016D0BB7FD27FCFC = _id_016D0BB7FD27FCFC - 175;

        if ( _id_016D0BB7FD27FCFC < _id_7E1EC739AE6C0015 )
        {
            _id_016D0BB7FD27FCFC = _id_7E1EC739AE6C0015;
            return;
        }
    }
}

player_seek_disable()
{
    self notify( "stop_player_seek" );
}

riotshield_lock_orientation( _id_96CC1618573AD3CC )
{
    self orientmode( "face angle", _id_96CC1618573AD3CC );
    self.lockorientation = 1;
}

riotshield_unlock_orientation()
{
    self.lockorientation = 0;
}

cqb_walk( _id_41E0C82E9F7AEB42 )
{
    if ( _id_41E0C82E9F7AEB42 == "on" )
        scripts\common\utility::enable_cqbwalk();
    else
        scripts\common\utility::disable_cqbwalk();
}

enable_flashlight( enable, _id_32605DB102447D94 )
{
    if ( !isdefined( enable ) )
        enable = 1;

    if ( !isdefined( _id_32605DB102447D94 ) )
        _id_32605DB102447D94 = 1;

    if ( enable )
        scripts\sp\nvg\nvg_ai::flashlight_on( _id_32605DB102447D94 );
    else
        scripts\sp\nvg\nvg_ai::flashlight_off( _id_32605DB102447D94 );
}

throwgrenadeatplayerasap()
{
    _id_13D1C402F1421C35::throwgrenadeatplayerasap_combat_utility();
}

use_turret( turret, _id_5CAA9F9F456B4040 )
{
    scripts\asm\asm_bb::bb_requestturret( turret );
    scripts\asm\asm_bb::bb_requestturretpose( _id_5CAA9F9F456B4040 );
    origin = turret gettagorigin( "tag_gunner" );
    angles = turret gettagangles( "tag_gunner" );

    if ( self islinked() )
        self unlink();

    self forceteleport( origin, angles );
    self linktoblendtotag( turret, "tag_gunner", 0 );
    self._id_2C1A52B48212191B = 1;
}

waterfx( _id_8A6EAB26D0FF8858, soundalias )
{
    self endon( "death" );
    _id_1C4F2CDC9ABC7E07 = 0;

    if ( isdefined( soundalias ) )
        _id_1C4F2CDC9ABC7E07 = 1;

    if ( isdefined( _id_8A6EAB26D0FF8858 ) )
    {
        scripts\engine\utility::flag_assert( _id_8A6EAB26D0FF8858 );
        level endon( _id_8A6EAB26D0FF8858 );
    }

    for (;;)
    {
        wait( randomfloatrange( 0.15, 0.3 ) );
        start = self.origin + ( 0, 0, 150 );
        end = self.origin - ( 0, 0, 150 );
        trace = scripts\engine\trace::ray_trace_detail( start, end, undefined, scripts\engine\trace::create_default_contents( 1 ) );

        if ( trace["surfacetype"] != "water" )
            continue;

        fx = "water_movement";

        if ( isplayer( self ) )
        {
            if ( distance( self getvelocity(), ( 0, 0, 0 ) ) < 5 )
                fx = "water_stop";
        }
        else if ( isdefined( level._effect["water_" + self.a.movement] ) )
            fx = "water_" + self.a.movement;

        _id_D8ED6850DE1C878F = scripts\engine\utility::getfx( fx );
        start = trace["position"];
        angles = ( 0, self.angles[1], 0 );
        forward = anglestoforward( angles );
        up = anglestoup( angles );
        playfx( _id_D8ED6850DE1C878F, start, up, forward );

        if ( fx != "water_stop" && _id_1C4F2CDC9ABC7E07 )
            thread scripts\engine\utility::play_sound_in_space( soundalias, start );
    }
}

player_is_near_live_offhand( _id_9CF2A042BFFB7637 )
{
    grenades = getentarray( "grenade", "classname" );

    foreach ( grenade in grenades )
    {
        if ( !offhand_is_dangerous( grenade ) )
            continue;

        for ( _id_EF50426720E1DBB8 = 0; _id_EF50426720E1DBB8 < level.players.size; _id_EF50426720E1DBB8++ )
        {
            player = level.players[_id_EF50426720E1DBB8];

            if ( distancesquared( grenade.origin, player.origin ) < 75625 )
            {
                if ( istrue( _id_9CF2A042BFFB7637 ) )
                    scripts\sp\autosave::autosaveprint( "live grenade is near the player", 0 );

                return 1;
            }
        }
    }

    return 0;
}

offhand_is_dangerous( grenade )
{
    if ( !isdefined( grenade.targetname ) )
        return 1;

    if ( grenade.targetname == "offhand_claymore" )
        return 0;

    if ( grenade.targetname == "offhand_c4_no_detonator" )
        return 0;

    if ( grenade.targetname == "offhand_noisemaker" )
        return 0;

    if ( grenade.targetname == "offhand_throwingknife" )
        return 0;

    if ( grenade.targetname == "offhand_car_grenade" )
        return 0;

    if ( grenade.targetname == "offhand_ied" )
        return 0;

    return 1;
}

has_shotgun()
{
    self endon( "death" );

    if ( !isdefined( self.weapon ) )
        return 0;

    if ( weaponclass( self.weapon ) == "spread" )
        return 1;

    return 0;
}

isprimaryweapon( weapon )
{
    if ( isweapon( weapon ) && isnullweapon( weapon ) )
        return 0;

    if ( isstring( weapon ) && weapon == "none" )
        return 0;

    if ( weaponinventorytype( weapon ) != "primary" )
        return 0;

    switch ( weaponclass( weapon ) )
    {
        case "mg":
        case "rocketlauncher":
        case "sniper":
        case "rifle":
        case "pistol":
        case "spread":
        case "smg":
            return 1;
        default:
            return 0;
    }
}

enable_heat_behavior( _id_FBEBB3DEC0554929 )
{

}

interactivekeypairs()
{
    interactivekeypairs = [];
    interactivekeypairs[0] = [ "interactive_birds", "targetname" ];
    interactivekeypairs[1] = [ "interactive_vulture", "targetname" ];
    interactivekeypairs[2] = [ "interactive_fish", "script_noteworthy" ];
    return interactivekeypairs;
}

mask_interactives_in_volumes( volumes )
{
    interactivekeypairs = interactivekeypairs();
    _id_BE2A0CE5C21257CF = [];

    foreach ( _id_84B361C164FE3ED6 in interactivekeypairs )
    {
        _id_F1BE64C809EDA461 = getentarray( _id_84B361C164FE3ED6[0], _id_84B361C164FE3ED6[1] );
        _id_BE2A0CE5C21257CF = scripts\engine\utility::array_combine( _id_BE2A0CE5C21257CF, _id_F1BE64C809EDA461 );
    }

    foreach ( ent in _id_BE2A0CE5C21257CF )
    {
        if ( !isdefined( level._interactive[ent.interactive_type].savetostructfn ) )
            continue;

        foreach ( volume in volumes )
        {
            if ( !volume istouching( ent ) )
                continue;

            if ( !isdefined( volume.interactives ) )
                volume.interactives = [];

            volume.interactives[volume.interactives.size] = ent [[ level._interactive[ent.interactive_type].savetostructfn ]]();
        }
    }
}

activate_interactives_in_volume()
{
    if ( !isdefined( self.interactives ) )
        return;

    foreach ( _id_28AFBA755C99FCE0 in self.interactives )
        _id_28AFBA755C99FCE0 [[ level._interactive[_id_28AFBA755C99FCE0.interactive_type].loadfromstructfn ]]();

    self.interactives = undefined;
}

delete_interactives_in_volumes( volumes )
{
    mask_interactives_in_volumes( volumes );

    foreach ( volume in volumes )
        volume.interactives = undefined;
}

is_in_antigrav_grenade()
{
    if ( self == level.player )
    {
        if ( !isdefined( self.inantigrav ) || self.inantigrav == 0 )
            return 0;
        else
            return 1;
    }
    else if ( !isdefined( self.antigravgrenstate ) )
        return 0;
    else
        return 1;
}

hud_intel_message( _id_7A49C194700D0B2C, _id_B19A96B5C0A299D3, _id_05BAA186D177B643, _id_2BE6A7F58DA8F2D4 )
{
    _id_81662484A343C985 = 20;

    if ( !isdefined( _id_05BAA186D177B643 ) )
        _id_05BAA186D177B643 = "default";

    switch ( _id_05BAA186D177B643 )
    {
        case "intel_acepilot0":
            _id_81662484A343C985 = 0;
            break;
        case "intel_acepilot1":
            _id_81662484A343C985 = 1;
            break;
        case "intel_acepilot2":
            _id_81662484A343C985 = 2;
            break;
        case "intel_acepilot3":
            _id_81662484A343C985 = 3;
            break;
        case "intel_acepilot4":
            _id_81662484A343C985 = 4;
            break;
        case "intel_acepilot5":
            _id_81662484A343C985 = 5;
            break;
        case "intel_acepilot6":
            _id_81662484A343C985 = 6;
            break;
        case "intel_acepilot7":
            _id_81662484A343C985 = 7;
            break;
        case "intel_acepilot8":
            _id_81662484A343C985 = 8;
            break;
        case "intel_acepilot9":
            _id_81662484A343C985 = 9;
            break;
        case "intel_acepilot10":
            _id_81662484A343C985 = 10;
            break;
        case "intel_acepilot11":
            _id_81662484A343C985 = 11;
            break;
        case "intel_acepilot12":
            _id_81662484A343C985 = 12;
            break;
        case "intel_acepilot13":
            _id_81662484A343C985 = 13;
            break;
        case "intel_acepilot14":
            _id_81662484A343C985 = 14;
            break;
        case "intel_acepilot15":
            _id_81662484A343C985 = 15;
            break;
        case "intel_acepilot16":
            _id_81662484A343C985 = 16;
            break;
        case "intel_acepilot17":
            _id_81662484A343C985 = 17;
            break;
        case "intel_acepilot18":
            _id_81662484A343C985 = 18;
            break;
        case "intel_acepilot19":
            _id_81662484A343C985 = 19;
            break;
        case "default":
            _id_81662484A343C985 = 20;
            break;
        case "capops_intel":
            _id_81662484A343C985 = 20;
            break;
        case "tally_intel":
            _id_81662484A343C985 = 21;
            break;
        case "jackal_intel":
            _id_81662484A343C985 = 22;
            break;
        case "sdf_intel_1":
            _id_81662484A343C985 = 23;
            break;
        case "news_intel":
            _id_81662484A343C985 = 24;
            break;
        case "eweapon_intel":
            _id_81662484A343C985 = 25;
            break;
        case "scan_intel":
            _id_81662484A343C985 = 26;
            break;
        case "intel_captain0":
            _id_81662484A343C985 = 27;
            break;
        case "intel_captain1":
            _id_81662484A343C985 = 28;
            break;
        case "intel_captain2":
            _id_81662484A343C985 = 29;
            break;
        case "intel_captain3":
            _id_81662484A343C985 = 30;
            break;
        case "intel_captain4":
            _id_81662484A343C985 = 31;
            break;
        case "intel_captain5":
            _id_81662484A343C985 = 32;
            break;
        case "intel_captain6":
            _id_81662484A343C985 = 33;
            break;
        case "intel_captain7":
            _id_81662484A343C985 = 34;
            break;
        case "intel_captain8":
            _id_81662484A343C985 = 35;
            break;
        case "intel_captain9":
            _id_81662484A343C985 = 36;
            break;
        case "intel_scrap":
            _id_81662484A343C985 = 37;
            break;
        case "intel_reticle":
            _id_81662484A343C985 = 38;
            break;
        case "intel_attachment":
            _id_81662484A343C985 = 39;
            break;
    }

    setomnvar( "ui_sp_intel_messaging_image_index", _id_81662484A343C985 );
    setomnvar( "ui_sp_intel_messaging_text", _id_B19A96B5C0A299D3 );
    setomnvar( "ui_sp_intel_messaging_header", _id_7A49C194700D0B2C );
    setomnvar( "ui_sp_intel_messaging", 1 );
    level.player thread scripts\engine\sp\utility::_intel_waypoint_button_listener();
    _id_31761DF376C7C7C3 = _id_05BAA186D177B643 == "tally_intel";

    if ( _id_31761DF376C7C7C3 )
        level.player thread scripts\engine\sp\utility::_intel_dismiss_button_listener();

    if ( isdefined( _id_2BE6A7F58DA8F2D4 ) )
        setomnvar( "ui_sp_intel_messaging_ent", 1 );
    else
        setomnvar( "ui_sp_intel_messaging_ent", 0 );

    action = "close";
    start_time = gettime() / 1000;
    wait_time = 5.0;

    while ( _id_31761DF376C7C7C3 && !isdefined( level.player.intel_dismiss_request ) || !_id_31761DF376C7C7C3 && gettime() / 1000 - start_time < wait_time )
    {
        if ( isdefined( level.player.intel_waypoint_request ) )
        {
            action = "waypoint";
            break;
        }

        wait 0.05;
    }

    setomnvar( "ui_sp_intel_messaging", 0 );
    setomnvar( "ui_sp_intel_messaging_ent", 0 );
    level.player.intel_dismiss_request = undefined;

    if ( action == "waypoint" && isdefined( _id_2BE6A7F58DA8F2D4 ) )
    {
        _id_F3FF73980FAE5DB1 = scripts\engine\utility::spawn_script_origin( _id_2BE6A7F58DA8F2D4, ( 0, 0, 0 ) );
        _id_F3FF73980FAE5DB1.icon = newhudelem();
        _id_F3FF73980FAE5DB1.icon setshader( "intel_hint_icon", 32, 32 );
        _id_F3FF73980FAE5DB1.icon.color = ( 0, 1, 0.976 );
        _id_F3FF73980FAE5DB1.icon.alpha = 1.0;
        _id_F3FF73980FAE5DB1.icon setwaypoint( 1, 1, 0 );
        _id_F3FF73980FAE5DB1.icon settargetent( _id_F3FF73980FAE5DB1 );
        _id_E8F6915FE5634B93 = distance2dsquared( level.player.origin, _id_F3FF73980FAE5DB1.origin );

        for (;;)
        {
            if ( distance2dsquared( level.player.origin, _id_F3FF73980FAE5DB1.origin ) < squared( 75.0 ) || distance2dsquared( level.player.origin, _id_F3FF73980FAE5DB1.origin ) > _id_E8F6915FE5634B93 * 2.5 )
                break;

            wait 0.05;
        }

        _id_F3FF73980FAE5DB1.icon destroy();
        _id_F3FF73980FAE5DB1 delete();
        level.player.intel_waypoint_request = undefined;
    }
    else
    {
        level.player notify( "dismiss_skipped" );
        level.player.intel_dismiss_request = undefined;
        return;
    }
}

is_demo()
{
    if ( getdvarint( "dvar_03A25F2D5A820AD8", 0 ) )
        return 1;

    return 0;
}

is_lastlevel()
{
    if ( level.script == scripts\sp\endmission::_id_823F915153B5FCD8() )
        return 1;

    return 0;
}

hudoutline_ar_callout( display_name, _id_C355E4A1F2F73B02, _id_502FBFF642B814F5 )
{
    if ( isdefined( level.player.ar_callout_ent ) )
        hudoutline_ar_disable();

    level.player endon( "stop_ar_callout" );
    setomnvar( "ui_inworld_ar_ent", undefined );
    wait 0.05;
    setsaveddvar( "dvar_5F5C12C95C44F093", 1 );
    level.player.ar_callout_ent = scripts\engine\utility::spawn_tag_origin();
    setomnvar( "ui_inworld_ar_ent", level.player.ar_callout_ent );

    if ( !isdefined( display_name ) )
        display_name = "ar_callouts_default";

    setomnvar( "ui_ar_object_text", display_name );
    wait 0.05;

    if ( isdefined( _id_C355E4A1F2F73B02 ) && _id_C355E4A1F2F73B02 )
        scripts\engine\sp\utility::hudoutline_enable_new( "outlinefill_depth_orange", "default" );
    else
        scripts\engine\sp\utility::hudoutline_enable_new( "outlinefill_nodepth_orange", "default" );

    setomnvar( "ui_show_ar_elem", 1 );
    thread _ar_callout_tracker( _id_502FBFF642B814F5 );
}

_ar_callout_tracker( _id_502FBFF642B814F5 )
{
    level.player endon( "stop_ar_callout" );
    self endon( "death" );

    for (;;)
    {
        if ( isdefined( _id_502FBFF642B814F5 ) )
            offset = self.origin + _id_502FBFF642B814F5;
        else
            offset = self.origin + ( 0, 0, 30 );

        level.player.ar_callout_ent.origin = offset;
        wait 0.05;
    }
}

hudoutline_ar_disable()
{
    scripts\engine\sp\utility::hudoutline_disable( "default" );
    setomnvar( "ui_show_ar_elem", 0 );
    wait 0.1;
    level.player notify( "stop_ar_callout" );
    setomnvar( "ui_inworld_ar_ent", undefined );
    level.player.ar_callout_ent delete();
    level.player.ar_callout_ent = undefined;
}

in_specialist_mode()
{
    if ( getdvarint( "dvar_FD8C5B01485D9D7E" ) )
        return 1;
    else
        return 0;
}

in_yolo_mode()
{
    if ( getdvarint( "dvar_E352B7180A71C62A" ) )
        return 1;
    else
        return 0;
}

in_zero_gravity()
{
    return level.player scripts\engine\utility::ent_flag_exist( "zero_gravity" ) && level.player scripts\engine\utility::ent_flag( "zero_gravity" );
}

remove_equipment_immediately( _id_129DD15D9B198B97, _id_5B7E6D5592E340EE, _id_62E4A9A6936CE22C, _id_7A342A650BEABD86, _id_615ACDF145578D94, _id_864FE5DF401EA798 )
{
    if ( !isdefined( _id_129DD15D9B198B97 ) )
        _id_129DD15D9B198B97 = 1;

    if ( !isdefined( _id_5B7E6D5592E340EE ) )
        _id_5B7E6D5592E340EE = 1;

    if ( !isdefined( _id_62E4A9A6936CE22C ) )
        _id_62E4A9A6936CE22C = 1;

    if ( !isdefined( _id_7A342A650BEABD86 ) )
        _id_7A342A650BEABD86 = 1;

    if ( !isdefined( _id_615ACDF145578D94 ) )
        _id_615ACDF145578D94 = 1;

    if ( !isdefined( _id_864FE5DF401EA798 ) )
        _id_864FE5DF401EA798 = 0;
}

isactorwallrunning()
{
    if ( isdefined( self.wall_run_direction ) )
        return 1;

    return 0;
}

init_modern()
{
    _func_ DCF8797A7CAF749( "modern_sp" );
    level.player setsuit( "modern_sp" );
}

setplayerlootenabled( _id_B96D126FC701024B )
{
    setdvar( "dvar_614D0737DA55CB97", _id_B96D126FC701024B );
}

playerlootenabled()
{
    return getdvarint( "dvar_614D0737DA55CB97" );
}

personalcoldbreathstop()
{
    self notify( "stop personal effect" );
}

personalcoldbreathspawner()
{
    self endon( "death" );
    self notify( "stop personal effect" );
    self endon( "stop personal effect" );

    for (;;)
    {
        self waittill( "spawned", spawn );

        if ( scripts\common\ai::spawn_failed( spawn ) )
            continue;

        spawn thread _id_7E4D332E911E1B90::personalcoldbreath();
    }
}

missionfailedwrapper()
{
    if ( level.missionfailed )
        return;

    if ( isdefined( level.nextmission ) )
        return;

    scripts\sp\analytics::analytics_obj_failed();
    level.missionfailed = 1;
    scripts\engine\utility::flag_set( "missionfailed" );

    if ( getdvar( "dvar_1780D96F1FEF8D01" ) == "1" )
        return;

    if ( isdefined( level.mission_fail_func ) )
    {
        thread [[ level.mission_fail_func ]]();
        return;
    }

    thread scripts\sp\player_death::set_death_hint();
    _func_75BC5E4B0895A0F4( in_yolo_mode() );
}

giveachievement_wrapper( achievement, _id_7E61E74D63DF5EDF )
{
    if ( is_demo() )
        return;

    level.player giveachievement( achievement );
}

player_giveachievement_wrapper( achievement )
{
    if ( is_demo() )
        return;

    if ( is_lastlevel() )
        return;

    self giveachievement( achievement );
}

play_skippable_cinematic( _id_7843D2EBEA704934, _id_5ECE5031931FDDA9, _id_F7BF02AB54FDCD73 )
{
    setsaveddvar( "dvar_D3EE5A6578FE61DE", "1" );
    setsaveddvar( "dvar_B9FF37D084074DF3", "1" );
    level.player cleardamageindicators();
    _func_1EB3E4964FF5A2EF( _id_7843D2EBEA704934 );
    level.player scripts\sp\player::remove_damage_effects_instantly();
    remove_equipment_immediately();
    _id_8343675ABCFBF20D = "skippable_cinematic";
    level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "weapon", 0 );
    level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "freezecontrols", 1 );
    level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "damage", 0 );
    level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "breath_system", 0 );
    level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "cg_drawcrosshair", 0 );
    level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "show_weapon_hud", 0 );
    level.player _id_3B64EB40368C1450::set( _id_8343675ABCFBF20D, "show_hud", 0 );

    while ( !_func_D0860C69E8E4022C() )
        waitframe();

    thread cinematic_skip_input( _id_5ECE5031931FDDA9 );

    if ( isdefined( _id_F7BF02AB54FDCD73 ) )
    {
        cinematic_waittill_skip_or_time( _id_F7BF02AB54FDCD73 );
        level.player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( _id_8343675ABCFBF20D );
        level.player cleardamageindicators();
        level notify( "skippable_cinematic_done" );

        while ( _func_D0860C69E8E4022C() )
            waitframe();

        setsaveddvar( "dvar_D3EE5A6578FE61DE", "0" );
        setsaveddvar( "dvar_B9FF37D084074DF3", "0" );
        setomnvar( "ui_is_bink_skippable", 0 );
        _func_ 5770D2EA2D158CF();
    }
    else
    {
        while ( _func_D0860C69E8E4022C() )
            waitframe();

        setsaveddvar( "dvar_D3EE5A6578FE61DE", "0" );
        setsaveddvar( "dvar_B9FF37D084074DF3", "0" );
        setomnvar( "ui_is_bink_skippable", 0 );
        _func_ 5770D2EA2D158CF();
        level.player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( _id_8343675ABCFBF20D );
        level.player cleardamageindicators();
        level notify( "skippable_cinematic_done" );
    }
}

cinematic_skip_input( _id_5ECE5031931FDDA9 )
{
    level endon( "skippable_cinematic_done" );

    if ( isdefined( _id_5ECE5031931FDDA9 ) )
        self waittill( _id_5ECE5031931FDDA9 );

    setomnvar( "ui_is_bink_skippable", 1 );

    for (;;)
    {
        level.player waittill( "luinotifyserver", message, value );

        if ( message == "skip_bink_input" )
        {
            level notify( "cinematic_skipped" );
            _func_ 5770D2EA2D158CF();
            break;
        }
    }
}

cinematic_waittill_skip_or_time( wait_time )
{
    level endon( "cinematic_skipped" );
    wait_time = wait_time * 1000;

    for (;;)
    {
        _id_6097B8E64EFFBF66 = _func_B80022E186EAF084();

        if ( _id_6097B8E64EFFBF66 >= wait_time )
            return;

        waitframe();
    }
}

isriotshield( weapon )
{
    if ( isweapon( weapon ) && isnullweapon( weapon ) )
        return 0;

    if ( isstring( weapon ) && weapon == "none" )
        return 0;

    return weapontype( weapon ) == "riotshield";
}

isknifeonly( weapon )
{
    _id_C27E2A04BAB78C1F = getweaponbasename( weapon );
    return issubstr( _id_C27E2A04BAB78C1F, "knife" );
}

isbulletweapon( weapon )
{
    if ( isweapon( weapon ) && isnullweapon( weapon ) )
        return 0;

    if ( isstring( weapon ) && weapon == "none" )
        return 0;

    if ( isriotshield( weapon ) || isknifeonly( weapon ) )
        return 0;

    switch ( weaponclass( weapon ) )
    {
        case "mg":
        case "sniper":
        case "rifle":
        case "pistol":
        case "spread":
        case "smg":
            return 1;
        default:
            return 0;
    }
}

_id_1A12913E4F208E36( func )
{
    if ( getdvarint( "dvar_E9E247C60CD8800A" ) )
    {
        if ( !isdefined( func ) )
            func = "";

        if ( !isdefined( level._id_9392EA6EF7F37909 ) )
            level._id_9392EA6EF7F37909 = [];

        if ( !scripts\engine\utility::array_contains( level._id_9392EA6EF7F37909, func ) )
        {
            iprintlnbold( "^1" + func + "(), Time to switch to the scripted_melee version of this func!" );
            level._id_9392EA6EF7F37909 = scripts\engine\utility::array_add( level._id_9392EA6EF7F37909, func );
        }
    }
}

context_melee_enable( _id_E3108E412AFB3811 )
{
    _id_1A12913E4F208E36( "context_melee_enable" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        level.player scripts\common\utility::_id_B6A59F7759A30482( _id_E3108E412AFB3811 );
    else if ( !_id_E3108E412AFB3811 )
        level.player thread scripts\sp\player\context_melee::disable_dynamic_takedowns();
    else
        level thread scripts\sp\player\context_melee::main();
}

context_melee_allow( _id_E3108E412AFB3811 )
{
    _id_1A12913E4F208E36( "context_melee_allow" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        scripts\common\utility::_id_1A479CAD9C3ADBB1( _id_E3108E412AFB3811 );
    else
        self.context_melee_allowed = _id_E3108E412AFB3811;
}

_id_B3F670DE5A642A83( _id_E3108E412AFB3811 )
{
    _id_1A12913E4F208E36( "context_melee_allow_hint" );
    level._id_F27CEEAD977ABAB6 = scripts\engine\utility::ter_op( !isdefined( _id_E3108E412AFB3811 ) || _id_E3108E412AFB3811, undefined, 1 );
}

context_melee_allow_blocked_hint( _id_E3108E412AFB3811 )
{
    _id_1A12913E4F208E36( "context_melee_allow_blocked_hint" );
    level.player.context_melee_blocked_hint_allowed = _id_E3108E412AFB3811;
}

context_melee_allow_directions( _id_8E4D6CA7020FE22F )
{
    _id_1A12913E4F208E36( "context_melee_allow_directions" );
    self.context_melee_allow_directions = _id_8E4D6CA7020FE22F;
}

context_melee_set_silent_kill( _id_E3108E412AFB3811 )
{
    _id_1A12913E4F208E36( "context_melee_set_silent_kill" );

    if ( _id_E3108E412AFB3811 )
        setdvar( "dvar_AC0F71BC1FF1DC42", 1 );
    else
        setdvar( "dvar_AC0F71BC1FF1DC42", 0 );
}

context_melee_set_custom_hint( hint_string )
{
    _id_1A12913E4F208E36( "context_melee_set_custom_hint" );
    level.player.context_melee_hint_custom = hint_string;
}

context_melee_clear_custom_hint()
{
    _id_1A12913E4F208E36( "context_melee_clear_custom_hint" );
    level.player.context_melee_hint_custom = undefined;
}

context_melee_set_blocked_custom_hint( hint_string )
{
    _id_1A12913E4F208E36( "context_melee_set_blocked_custom_hint" );
    level.player.context_melee_hint_blocked_custom = hint_string;
}

context_melee_clear_blocked_custom_hint()
{
    _id_1A12913E4F208E36( "context_melee_clear_blocked_custom_hint" );
    level.player.context_melee_hint_blocked_custom = undefined;
}

context_melee_set_hint_directions( _id_8E4D6CA7020FE22F )
{
    _id_1A12913E4F208E36( "context_melee_set_hint_directions" );
    level.player.context_melee_allow_directions = _id_8E4D6CA7020FE22F;
}

context_melee_override_anim( _id_56E57B64F9AC67C4, direction, _id_3177EDD6EFF71E89, _id_B20AAAEC40F95803, launch, rules, _id_FB8F407964E90B58 )
{
    _id_1A12913E4F208E36( "context_melee_override_anim" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        scripts\common\utility::_id_299B43EE3353DACC( _id_56E57B64F9AC67C4, direction, rules, _id_FB8F407964E90B58, undefined, launch );
    else
    {
        if ( !isdefined( direction ) )
            direction = "all";

        if ( !isdefined( _id_56E57B64F9AC67C4 ) && isdefined( self.context_melee_anim_name ) && isdefined( self.context_melee_anim_name[direction] ) )
        {
            _id_CB3128D2433C8D85( direction, 1 );
            return;
        }

        self.context_melee_victim_lives = _id_FB8F407964E90B58;

        if ( isdefined( level.scr_anim[_id_0EB2248238B31387()][_id_56E57B64F9AC67C4] ) && isdefined( level.scr_anim["generic"][_id_56E57B64F9AC67C4] ) )
        {
            if ( !isdefined( self.context_melee_anim_name ) )
                self.context_melee_anim_name = [];

            self.context_melee_anim_name[direction] = _id_56E57B64F9AC67C4;
            notetracks = [ "cm_death", "cm_ragdoll", "cm_fx", "cm_sfx", "cm_sfx_player" ];
            _id_E830EBCF792A5EF2[0] = scripts\sp\player\context_melee::context_melee_death;
            _id_E830EBCF792A5EF2[1] = scripts\sp\player\context_melee::context_melee_ragdoll;
            _id_E830EBCF792A5EF2[2] = scripts\sp\player\context_melee::context_melee_fx;
            _id_E830EBCF792A5EF2[3] = scripts\sp\player\context_melee::context_melee_sfx;
            _id_E830EBCF792A5EF2[4] = scripts\sp\player\context_melee::context_melee_sfx;

            foreach ( n, notetrack in notetracks )
            {
                if ( isdefined( level.scr_notetrack["generic"] ) && isdefined( level.scr_notetrack["generic"][_id_56E57B64F9AC67C4] ) && isdefined( level.scr_notetrack["generic"][_id_56E57B64F9AC67C4][notetrack] ) && level.scr_notetrack["generic"][_id_56E57B64F9AC67C4][notetrack].size > 0 )
                {
                    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.scr_notetrack["generic"][_id_56E57B64F9AC67C4][notetrack].size; _id_AC0E594AC96AA3A8++ )
                    {
                        if ( isdefined( level.scr_notetrack["generic"][_id_56E57B64F9AC67C4][notetrack][_id_AC0E594AC96AA3A8]["function"] ) )
                        {
                            if ( level.scr_notetrack["generic"][_id_56E57B64F9AC67C4][notetrack][_id_AC0E594AC96AA3A8]["function"] == _id_E830EBCF792A5EF2[n] )
                                level.scr_notetrack["generic"][_id_56E57B64F9AC67C4][notetrack][_id_AC0E594AC96AA3A8]["function"] = undefined;
                        }
                    }
                }
            }

            scripts\common\anim::addnotetrack_customfunction( "generic", "cm_death", scripts\sp\player\context_melee::context_melee_death, _id_56E57B64F9AC67C4 );
            scripts\common\anim::addnotetrack_customfunction( "generic", "cm_ragdoll", scripts\sp\player\context_melee::context_melee_ragdoll, _id_56E57B64F9AC67C4 );
            scripts\common\anim::addnotetrack_customfunction( "generic", "cm_fx", scripts\sp\player\context_melee::context_melee_fx, _id_56E57B64F9AC67C4 );
            scripts\common\anim::addnotetrack_customfunction( "generic", "cm_sfx", scripts\sp\player\context_melee::context_melee_sfx, _id_56E57B64F9AC67C4 );
            scripts\common\anim::addnotetrack_customfunction( "generic", "cm_sfx_player", scripts\sp\player\context_melee::context_melee_sfx, _id_56E57B64F9AC67C4 );
        }

        if ( isdefined( _id_3177EDD6EFF71E89 ) )
            context_melee_set_lastframe_bone( _id_3177EDD6EFF71E89 );
        else
            context_melee_set_lastframe_bone( level.context_melee_player_link_bone );

        if ( isdefined( _id_B20AAAEC40F95803 ) )
            context_melee_set_lastframe_type( _id_B20AAAEC40F95803 );
        else
            context_melee_set_lastframe_type( "player_capsule" );

        if ( istrue( launch ) )
            level.context_melee_do_launch = 1;
    }
}

_id_CB3128D2433C8D85( direction, _id_79AA652300C68D5A )
{
    _id_1A12913E4F208E36( "context_melee_removeOverrideDirection" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        scripts\common\utility::_id_A072535B3F7182FE( direction, _id_79AA652300C68D5A );
    else
        self.context_melee_anim_name[direction] = undefined;
}

context_melee_set_arms( _id_437409FD34EB2546 )
{
    _id_1A12913E4F208E36( "context_melee_set_arms" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        level.player scripts\common\utility::_id_C4EC7D985422CE24( _id_437409FD34EB2546 );
    else
    {
        level.scr_model[_id_0EB2248238B31387()] = _id_437409FD34EB2546;
        level.player.melee_arms delete();
        level.player.melee_arms = scripts\engine\sp\utility::spawn_anim_model( _id_0EB2248238B31387(), level.player.origin, level.player.angles );
        level.player.melee_arms notsolid();
        level.player.melee_arms hide();
    }
}

context_melee_set_weapon( weapon )
{
    _id_1A12913E4F208E36( "context_melee_set_weapon" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        scripts\common\utility::_id_AA54D0684BB8D0CF( weapon );
    else
        level.player.context_melee_knife = weapon;
}

context_melee_set_lastframe_bone( bone )
{
    _id_1A12913E4F208E36( "context_melee_set_lastframe_bone" );
    level.context_melee_lastframe_bone = bone;
}

context_melee_set_lastframe_type( type )
{
    _id_1A12913E4F208E36( "context_melee_set_lastframe_type" );
    level.context_melee_lastframe_type = type;
}

context_melee_sight_disabled( _id_E3108E412AFB3811 )
{
    _id_1A12913E4F208E36( "context_melee_sight_disabled" );
    level.context_melee_sight_disabled = _id_E3108E412AFB3811;
}

context_melee_waittill_player_finished()
{
    _id_1A12913E4F208E36( "context_melee_waittill_player_finished" );
    level.player endon( "death" );
    level.player waittill( "context_melee_anim_ended" );
    waittillframeend;

    while ( istrue( level.player.context_melee_launching ) )
        waitframe();
}

_id_91BCB29AF7CC03D0()
{
    _id_1A12913E4F208E36( "context_melee_getStartNotifyString" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        return scripts\common\utility::_id_A1260C3B5F229F69();
    else
        return "start_context_melee";
}

_id_8E2D9AC98629E146()
{
    _id_1A12913E4F208E36( "context_melee_getAnimStartedNotifyString" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        return scripts\common\utility::_id_AE9FB94402A02D07();
    else
        return "context_melee_anim_started";
}

_id_DB4E5CD0C4D2648F()
{
    _id_1A12913E4F208E36( "context_melee_getAnimEndedNotifyString" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        return scripts\common\utility::_id_A73C26A3FEB8EF0E();
    else
        return "context_melee_anim_ended";
}

_id_6BAABABE5BA0AAFF()
{
    _id_1A12913E4F208E36( "context_melee_getAnimLongestEndedNotifyString" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        return scripts\common\utility::_id_835E274F31E87CF4();
    else
        return "context_melee_longest_anim_ended";
}

_id_6AF13FCB03216B58()
{
    _id_1A12913E4F208E36( "context_melee_getVictim" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        return scripts\common\utility::_id_7E105B48CE221583();
    else
        return self.context_melee_victim;
}

_id_0EB2248238B31387()
{
    _id_1A12913E4F208E36( "context_melee_getPlayerRigAnimname" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        return scripts\common\utility::_id_EA3248E9ABE4700A();
    else
        return "context_melee_player_rig";
}

_id_4E6665E2CEC4D305()
{
    _id_1A12913E4F208E36( "context_melee_isEnabled" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        return scripts\common\utility::_id_75B55C43BF528532();
    else
        return level.context_melee_enabled;
}

_id_906673D270412B82()
{
    _id_1A12913E4F208E36( "context_melee_getScriptedNode" );

    if ( getdvarint( "dvar_FA7C16B886C722ED" ) )
        return scripts\common\utility::_id_D561019E2A68D6CF();
    else
        return level._id_9665E8B8736FF0B7;
}

enable_stayahead( _id_90F9773EF140E661 )
{
    setdvarifuninitialized( "dvar_3D6AEC1E7192648B", 0 );
    disable_stayahead( 0, 0 );
    waittillframeend;
    thread scripts\sp\stayahead::stayahead_thread( _id_90F9773EF140E661 );
}

disable_stayahead( speed, reset )
{
    if ( isdefined( self.stayahead ) && isdefined( self.stayahead.using_goto_node ) )
    {
        scripts\sp\stayahead::print3d_debug( self.origin + ( 0, 0, 8 ), "Stayahead disabled, going back to go_to_node()", ( 0, 1, 0 ), 1, 0.3, 500, 1 );
        thread scripts\sp\spawner::go_to_node( scripts\sp\stayahead::get_best_goto_node( self.stayahead.goto_patharray, 2 ) );
    }

    if ( isdefined( self.stayahead ) && isdefined( self.stayahead.bg_2d ) )
        self.stayahead.bg_2d destroy();

    if ( isdefined( self.stayahead ) && isdefined( self.stayahead.team ) )
    {
        foreach ( guy in self.stayahead.team )
            guy scripts\engine\sp\utility::disable_dynamic_run_speed( speed );
    }

    if ( !isdefined( reset ) || istrue( reset ) )
        self.stayahead = undefined;

    if ( !isdefined( speed ) )
        speed = 165;

    self notify( "stop_stayahead" );

    if ( istrue( speed ) )
        scripts\engine\utility::set_movement_speed( speed );
}

set_stayahead_values( plane, speed, distance, _id_9CF4AC09E4991562 )
{
    if ( !isdefined( self.stayahead ) )
        self.stayahead = spawnstruct();

    _id_9AC3D9BEB29B21C7["speed"] = speed;
    _id_9AC3D9BEB29B21C7["distance"] = distance;

    if ( isdefined( _id_9CF4AC09E4991562 ) )
        _id_9AC3D9BEB29B21C7["variance"] = _id_9CF4AC09E4991562;

    switch ( plane )
    {
        case 1:
            self.stayahead.p1 = _id_9AC3D9BEB29B21C7;
            break;
        case 2:
            self.stayahead.p2 = _id_9AC3D9BEB29B21C7;
            break;
        case 3:
            self.stayahead.p3 = _id_9AC3D9BEB29B21C7;
            break;
        case 4:
            self.stayahead.p4 = _id_9AC3D9BEB29B21C7;
            break;
        case "wait":
            self.stayahead.pw = _id_9AC3D9BEB29B21C7;
            break;
        default:
    }
}

set_stayahead_wait_values( distance, _id_750C94BA41F40A47, _id_242E84D91F155AE8 )
{
    set_stayahead_values( "wait", 0, distance, 0 );
    self.stayahead.pw["buffer"] = _id_750C94BA41F40A47;

    if ( istrue( _id_242E84D91F155AE8 ) )
        self.stayahead.use_goto_wait = 1;
}

stayahead_disable_wait()
{
    if ( isdefined( self.stayahead ) )
    {
        if ( isdefined( self.stayahead.goalnode_pw ) )
        {
            goalnode = scripts\engine\utility::ter_op( isdefined( self.stayahead.goalnode ), self.stayahead.goalnode, self.goalnode );
            childthread scripts\sp\stayahead::stayahead_set_goalnode( goalnode, 0 );
        }

        if ( isdefined( self.stayahead.pw ) )
            self.stayahead.pw = undefined;
    }
}

enable_stayahead_turbo( speed )
{
    if ( !isdefined( self.stayahead ) )
        return;

    if ( isdefined( speed ) )
    {

    }

    self.stayahead.turbo = speed;
}

set_stayahead_wait_nodes( nodes, _id_242E84D91F155AE8 )
{
    if ( !isdefined( self.stayahead ) )
        self.stayahead = spawnstruct();

    if ( isdefined( nodes ) )
        self.stayahead.wait_nodes = nodes;

    if ( istrue( _id_242E84D91F155AE8 ) )
        self.stayahead.use_goto_wait = 1;
}

set_stayahead_wait_func( func )
{
    self.stayahead.wait_func = func;
}

stayahead_add_to_team( team, _id_A765F9B570E8F8CC, _id_81EC67164BE866BD, _id_1124265EE011BB02 )
{
    if ( !isdefined( self.stayahead.team ) )
        self.stayahead.team = [];

    array = [];

    if ( !isarray( team ) )
        array[0] = team;
    else
        array = team;

    foreach ( guy in array )
    {
        if ( !isdefined( guy.stayahead ) )
            guy.stayahead = spawnstruct();

        guy.stayahead.dynamic_frontdist = _id_A765F9B570E8F8CC;
        guy.stayahead.dynamic_middist = _id_81EC67164BE866BD;
        guy.stayahead.dynamic_backdist = _id_1124265EE011BB02;
    }

    self.stayahead.team = scripts\engine\utility::array_combine( self.stayahead.team, array );
}

stayahead_pause( _id_E3108E412AFB3811 )
{
    if ( scripts\engine\utility::ent_flag_exist( "stayahead_pause" ) )
    {
        if ( _id_E3108E412AFB3811 )
            scripts\engine\utility::ent_flag_set( "stayahead_pause" );
        else
            scripts\engine\utility::ent_flag_clear( "stayahead_pause" );
    }
    else
    {

    }
}

stayahead_set_wait_node_radius( radius )
{
    if ( !isdefined( self.stayahead ) )
        self.stayahead = spawnstruct();

    self.stayahead.wait_node_radius = radius;
}

stayahead_lookat_enabled( _id_E3108E412AFB3811 )
{
    if ( !isdefined( self.stayahead ) )
        self.stayahead = spawnstruct();

    if ( istrue( _id_E3108E412AFB3811 ) )
        self.stayahead.lookat_allowed = 1;
    else
        self.stayahead.lookat_allowed = undefined;
}

getweapondefaults( _id_5C3F9357F11D2223 )
{
    defaults = [];

    if ( isweapon( _id_5C3F9357F11D2223 ) )
        _id_5C3F9357F11D2223 = getweaponbasename( _id_5C3F9357F11D2223 );

    switch ( _id_5C3F9357F11D2223 )
    {
        case "iw8_pi_golf21":
        case "iw8_pi_golf21_flashlight":
        case "iw8_pi_golf21_tfarah":
            return [ "rec_golf21", "slide_golf21", "backno_golf21", "mag_golf21", "ironsdefault_golf21" ];
        case "iw8_pi_papa320":
            return [ "rec_papa320", "slide_papa320", "mag_papa320" ];
        case "iw8_pi_decho":
            return [ "iw8_rec_decho", "iw8_slide_decho", "iw8_mag_decho", "iw8_triggrip_decho", "iw8_ironsdefault_decho" ];
        case "iw8_pi_mike1911":
        case "iw8_pi_mike1911_marina":
        case "iw8_pi_mike1911_first_raise":
            return [ "rec_mike1911", "slide_mike1911", "mag_mike1911", "triggrip_mike1911", "ironsdefault_mike1911" ];
        case "iw8_pi_cpapa":
            return [ "rec_cpapa", "front_cpapa", "backno_cpapa", "ammo_cpapa", "ironsdefault_cpapa" ];
        case "iw8_sm_mpapa5":
            return [ "iw8_rec_mpapa5", "iw8_front_mpapa5", "iw8_back_mpapa5", "iw8_mag_mpapa5", "iw8_ironsdefault_mpapa5", "selectsemi" ];
        case "iw8_sm_beta":
            return [ "rec_beta", "front_beta", "back_beta", "mag_beta", "ironsdefault_beta", "selectsemi" ];
        case "iw8_sm_augolf":
            return [ "rec_augolf", "front_augolf", "mag_augolf", "toprail_augolf", "gripcust_augolf", "ironsdefault_augolf", "selectsemi" ];
        case "iw8_sm_papa90":
            return [ "rec_papa90", "front_papa90", "mag_papa90", "ironsdefault_papa90", "selectsemi" ];
        case "iw8_sm_mpapa7":
            return [ "iw8_rec_mpapa7", "iw8_front_mpapa7", "iw8_back_mpapa7", "iw8_mag_mpapa7", "iw8_ironsdefault_mpapa7", "selectsemi" ];
        case "iw8_sm_uzulu":
            return [ "rec_uzulu", "front_uzulu", "back_uzulu", "mag_uzulu", "ironsdefault_uzulu", "selectsemi" ];
        case "iw8_sm_charlie9":
            return [ "rec_charlie9", "front_charlie9", "back_charlie9", "mag_charlie9", "triggrip_charlie9", "ironsdefault_charlie9", "selectsemi" ];
        case "iw8_sm_smgolf45":
            return [ "rec_smgolf45", "front_smgolf45", "back_smgolf45", "mag_smgolf45", "ironsdefault_smgolf45", "selectsemi" ];
        case "iw8_sm_victor":
            return [ "rec_victor", "front_victor", "back_victor", "mag_victor", "ironsdefault_victor", "selectsemi" ];
        case "iw8_ar_mike4":
            return [ "rec_mike4", "front_mike4", "back_mike4", "mag_mike4", "ironsdefault_mike4", "selectsemi" ];
        case "iw8_ar_akilo47_melee":
        case "iw8_ar_akilo47":
        case "iw8_ar_akilo47_goliath":
        case "iw8_ar_akilo47_tfarah":
        case "iw8_ar_akilo47_brightmuzzle":
            return [ "rec_akilo47", "front_akilo47", "back_akilo47", "mag_akilo47", "ironsdefault_akilo47", "selectsemi" ];
        case "iw8_ar_asierra12":
            return [ "rec_asierra12", "front_asierra12", "mag_asierra12", "toprail_asierra12", "ironsdefault_asierra12", "selectsemi" ];
        case "iw8_ar_falpha":
            return [ "rec_falpha", "front_falpha", "mag_falpha", "triggrip_falpha", "toprail_falpha", "ironsdefault_falpha", "selectsemi_falpha" ];
        case "iw8_ar_mcharlie":
            return [ "rec_mcharlie", "front_mcharlie", "back_mcharlie", "mag_mcharlie", "ironsdefault_mcharlie", "selectsemi" ];
        case "iw8_ar_kilo433":
            return [ "rec_kilo433", "front_kilo433", "back_kilo433", "mag_kilo433", "ironsdefault_kilo433", "selectsemi" ];
        case "iw8_ar_falima":
            return [ "rec_falima", "front_falima", "back_falima", "mag_falima", "ironsdefault_falima", "selectauto_falima" ];
        case "iw8_ar_scharlie":
            return [ "rec_scharlie", "front_scharlie", "back_scharlie", "mag_scharlie", "ironsdefault_scharlie", "selectsemi" ];
        case "iw8_ar_sierra552":
            return [ "rec_sierra552", "front_sierra552", "back_sierra552", "mag_sierra552", "triggrip_sierra552", "ironsdefault_sierra552", "selectsemi" ];
        case "iw8_ar_tango21":
            return [ "rec_tango21", "front_tango21", "back_tango21", "mag_tango21", "ironsdefault_tango21", "selectsemi" ];
        case "iw8_ar_galima":
            return [ "rec_galima", "front_galima", "back_galima", "mag_galima", "ironsdefault_galima", "selectsemi" ];
        case "iw8_la_gromeo":
            return [ "lnchrscope_gromeo" ];
        case "iw8_la_juliet":
            return [ "lnchrscope_juliet" ];
        case "iw8_la_kgolf":
            return [ "lnchrscope_kgolf" ];
        case "iw8_sn_mike14":
            return [ "rec_mike14", "front_mike14", "back_mike14", "mag_mike14", "reargrip_mike14", "snprscope_mike14" ];
        case "iw8_sn_kilo98":
            return [ "rec_kilo98", "front_kilo98", "snprscope_kilo98" ];
        case "iw8_sn_sbeta":
            return [ "rec_sbeta", "front_sbeta", "reargrip_sbeta", "snprscope_sbeta" ];
        case "iw8_sn_alpha50":
            return [ "iw8_rec_alpha50", "iw8_front_alpha50", "iw8_back_alpha50", "iw8_mag_alpha50", "snprscope_alpha50" ];
        case "iw8_sn_delta":
            return [ "rec_delta", "front_delta", "back_delta", "mag_delta", "snprscope_delta" ];
        case "iw8_sn_hdromeo_ballistics_quickraise":
        case "iw8_sn_hdromeo_ballistics":
        case "iw8_sn_hdromeo":
            return [ "rec_hdromeo", "front_hdromeo", "back_hdromeo", "mag_hdromeo", "snprscope_hdromeo" ];
        case "iw8_sn_crossbow":
            return [ "rec_crossbow", "wire_crossbow", "back_crossbow", "ammo_crossbow" ];
        case "iw8_sn_sksierra":
            return [ "rec_sksierra", "front_sksierra", "mag_sksierra", "reargrip_sksierra", "snprscope_sksierra", "selectauto" ];
        case "iw8_sn_xmike109":
            return [ "rec_xmike109", "front_xmike109", "back_xmike109", "mag_xmike109", "snprscope_xmike109" ];
        case "iw8_sn_romeo700":
            return [ "rec_romeo700", "front_romeo700", "back_romeo700", "mag_romeo700", "boltaction_romeo700" ];
        case "iw8_sh_dpapa12_incendiary":
        case "iw8_sh_dpapa12":
            return [ "rec_dpapa12", "front_dpapa12", "ammo_dpapa12", "guard_dpapa12", "gripcust_dpapa12", "ironsdefault_dpapa12" ];
        case "iw8_sh_oscar12":
            return [ "rec_oscar12", "front_oscar12", "back_oscar12", "mag_oscar12", "gripside_oscar12", "ironsdefault_oscar12" ];
        case "iw8_sh_charlie725":
            return [ "rec_charlie725", "front_charlie725", "back_charlie725", "ammo_charlie725", "guard_charlie725", "ironsdefault_charlie725" ];
        case "iw8_sh_romeo870":
            return [ "rec_romeo870", "front_romeo870", "back_romeo870", "ammo_romeo870", "grip_romeo870", "ironsdefault_romeo870" ];
        case "iw8_lm_kilo121":
            return [ "rec_kilo121", "front_kilo121", "back_kilo121", "mag_kilo121", "ironsdefault_kilo121", "selectsemi" ];
        case "iw8_lm_pkilo":
            return [ "rec_pkilo", "front_pkilo", "back_pkilo", "mag_pkilo", "ironsdefault_pkilo", "selectsemi" ];
        case "iw8_lm_lima86":
            return [ "rec_lima86", "front_lima86", "mag_lima86", "ironsdefault_lima86", "selectsemi" ];
        case "iw8_lm_mgolf34":
            return [ "rec_mgolf34", "front_mgolf34", "back_mgolf34", "mag_mgolf34", "ironsdefault_mgolf34", "selectsemi" ];
        case "iw8_lm_mgolf36":
            return [ "rec_mgolf36", "front_mgolf36", "back_mgolf36", "mag_mgolf36", "reargrip_mgolf36", "toprail_mgolf36", "ironsdefault_mgolf36", "selectsemi" ];
        default:
            return defaults;
    }
}

removeconflictingattachments( attachments, defaults )
{
    defaults = removeconflictingdefaultattachment( attachments, defaults );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "bar", "front_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "barlong", "slide_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "barcust", "guard_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "stock", "back_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "cal", "mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "drums", "mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "xmag", "mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "xmags", "mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "rack", "mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "mmags", "mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "box_", "mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "xmagslrg", "xmags_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "mag_", "xmags_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "rack", "ammo_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "thermal", "snprscope" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "acog", "snprscope" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "reflex", "snprscope" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "holo", "snprscope" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "hybrid", "snprscope" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "vzscope", "snprscope" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "minireddot", "snprscope" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "thermal", "ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "acog", "ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "reflex", "ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "holo", "ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "hybrid", "ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "vzscope", "ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "minireddot", "ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "scope", "ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "snprscope", "ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "irons", "ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "wounded_", "grip" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "grip", "gripcust_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "griprail", "grip_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "ironsdefault_", "snprscope" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "thermal", "iw8_ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "acog", "iw8_ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "reflex", "iw8_ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "holo", "iw8_ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "hybrid", "iw8_ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "vzscope", "iw8_ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "minireddot", "iw8_ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "scope", "iw8_ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "snprscope", "iw8_ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "irons", "iw8_ironsdefault_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "bar", "iw8_front_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "stock", "iw8_back_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "barlong", "iw8_slide_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "cal", "iw8_mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "drums", "iw8_mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "xmags", "iw8_mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "rack", "iw8_mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "mmags", "iw8_mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "box_", "iw8_mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "barsil", "bar_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "barbrake", "bar_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "barcomp", "bar_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "bartube", "bar_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "bar", "barsil_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "ub", "select" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "ub", "iw9_select" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "ub", "grip" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "glmini", "select" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "glmini", "iw9_select" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "stockno", "stock" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "stock", "stockr" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "stockr", "stock" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "stockp", "stockno_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "fourx", "ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "snscope", "ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "iw9_minireddot", "ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "pgolf1_scope", "ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "mike24_scope", "ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "shscope", "ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "arscope", "ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "dmscope", "ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "fourx", "iw9_ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "holo", "iw9_ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "hybrid", "iw9_ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "reflex", "iw9_ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "thermal", "iw9_ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "arscope", "iw9_ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "iw9_minireddot", "iw9_ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "piscope", "iw9_ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "dmscope", "iw9_ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "vzscope", "iw9_ironsdefault" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "drum_", "mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "mag_", "mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "belt_", "mag_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "mag_", "belt_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "mag_", "drum_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "magheligrip_", "magheli_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "grip", "magheligrip_" );
    defaults = removeconflictingdefaultattachment( attachments, defaults, "ballistics", "ammo_" );
    return defaults;
}

removeconflictingdefaultattachment( _id_39ACC07A4F70F5CA, _id_5EE0618A4ED56AE4, _id_88392C40E907845C, _id_2B1E423CC62C0FD2 )
{
    if ( !isdefined( _id_88392C40E907845C ) )
    {
        foreach ( attachment in _id_39ACC07A4F70F5CA )
        {
            _id_E97377032A878881 = strtok( attachment, "_" )[0];

            if ( _id_E97377032A878881 == "iw8" || _id_E97377032A878881 == "iw9" )
            {
                _id_E97377032A878881 = strtok( attachment, "_" )[1];

                foreach ( def in _id_5EE0618A4ED56AE4 )
                {
                    if ( !isdefined( strtok( def, "_" )[1] ) )
                        continue;

                    if ( _id_E97377032A878881 == strtok( def, "_" )[1] )
                    {
                        _id_5EE0618A4ED56AE4 = scripts\engine\utility::array_remove( _id_5EE0618A4ED56AE4, def );
                        continue;
                    }

                    if ( issubstr( attachment, "scope" ) && issubstr( def, "scope" ) )
                        _id_5EE0618A4ED56AE4 = scripts\engine\utility::array_remove( _id_5EE0618A4ED56AE4, def );
                }

                continue;
            }

            foreach ( def in _id_5EE0618A4ED56AE4 )
            {
                if ( _id_E97377032A878881 == strtok( def, "_" )[0] )
                {
                    _id_5EE0618A4ED56AE4 = scripts\engine\utility::array_remove( _id_5EE0618A4ED56AE4, def );
                    continue;
                }

                if ( issubstr( attachment, "scope" ) && issubstr( def, "scope" ) )
                    _id_5EE0618A4ED56AE4 = scripts\engine\utility::array_remove( _id_5EE0618A4ED56AE4, def );
            }
        }

        return _id_5EE0618A4ED56AE4;
    }

    foreach ( attachment in _id_39ACC07A4F70F5CA )
    {
        if ( isstartstr( attachment, _id_88392C40E907845C ) )
        {
            for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_5EE0618A4ED56AE4.size; _id_AC0E594AC96AA3A8++ )
            {
                if ( isstartstr( _id_5EE0618A4ED56AE4[_id_AC0E594AC96AA3A8], _id_2B1E423CC62C0FD2 ) )
                {
                    _id_5EE0618A4ED56AE4 = scripts\engine\utility::array_remove_index( _id_5EE0618A4ED56AE4, _id_AC0E594AC96AA3A8 );
                    return _id_5EE0618A4ED56AE4;
                }
            }
        }
    }

    return _id_5EE0618A4ED56AE4;
}

make_weapon( basename, attachments, reticle, camo, lootid, _id_CCBAB88FC1E2B3DA, _id_134C70A5C6DE474C )
{
    if ( !isdefined( level._weapons ) )
        level._weapons = spawnstruct();

    if ( !isdefined( attachments ) )
        attachments = [];

    if ( !isweapon( basename ) )
    {
        _id_E97377032A878881 = strtok( basename, "+" );

        if ( _id_E97377032A878881.size > 1 )
        {
            basename = _id_E97377032A878881[0];
            attachments = scripts\engine\utility::array_combine( attachments, scripts\engine\utility::array_remove( _id_E97377032A878881, _id_E97377032A878881[0] ) );
        }
    }
    else
    {
        if ( isnullweapon( basename ) )
            return basename;

        basename = getweaponbasename( basename );
    }

    if ( istrue( _id_CCBAB88FC1E2B3DA ) )
        _id_8B5443598FC587BF = ::makealtweapon;
    else
        _id_8B5443598FC587BF = ::makeweapon;

    if ( isstartstr( basename, "iw8_" ) )
        defaults = getweapondefaults( basename );
    else
        defaults = _func_6527364C1ECCA6C6( basename );

    defaults = removeconflictingattachments( attachments, defaults );
    attachments = scripts\engine\utility::array_combine( attachments, defaults );
    _id_31792301AA1F7373 = [];

    foreach ( attachment in attachments )
    {
        if ( issubstr( attachment, "|" ) )
        {
            attachments = scripts\engine\utility::array_remove( attachments, attachment );
            attachments[attachments.size] = strtok( attachment, "|" )[0];
            _id_31792301AA1F7373[_id_31792301AA1F7373.size] = attachment;
        }
    }

    if ( isdefined( lootid ) )
        weapon = call [[ _id_8B5443598FC587BF ]]( basename, attachments, reticle, camo, lootid );
    else if ( isdefined( camo ) )
        weapon = call [[ _id_8B5443598FC587BF ]]( basename, attachments, reticle, camo );
    else if ( isdefined( reticle ) )
        weapon = call [[ _id_8B5443598FC587BF ]]( basename, attachments, reticle );
    else if ( isdefined( attachments ) )
        weapon = call [[ _id_8B5443598FC587BF ]]( basename, attachments );
    else
        weapon = call [[ _id_8B5443598FC587BF ]]( basename );

    foreach ( attachment in _id_31792301AA1F7373 )
    {
        _id_E97377032A878881 = strtok( attachment, "|" );
        weapon = weapon withattachment( _id_E97377032A878881[0], int( _id_E97377032A878881[1] ) );
    }

    if ( isdefined( _id_134C70A5C6DE474C ) )
        _id_4F62FB945AD6AF8D = _func_3211981142EC5AEE( basename, _id_134C70A5C6DE474C );

    return weapon;
}

_id_CB12B7D7E358890C( basename, attachments, _id_8B5443598FC587BF )
{
    weapon = call [[ _id_8B5443598FC587BF ]]( basename );
    _id_7CB19F95DBC68942 = attachments;

    foreach ( attachment in attachments )
    {
        if ( !weapon canuseattachment( attachment ) )
            _id_7CB19F95DBC68942 = scripts\engine\utility::array_remove( _id_7CB19F95DBC68942, attachment );
    }

    return _id_7CB19F95DBC68942;
}

check_for_blacklisted_attachment()
{
    weapon = self;
    _id_CEB0AAF169DDC698 = [];
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_silencer01";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_kilo433_stock";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_mike4_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_mike4_stock";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_mike4_barrel";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_mike4_mag";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_scharlie_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_scharlie_stock";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_scharlie_barrel";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_scharlie_mag";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_falpha_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_falpha_barrel";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_falpha_mag";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_falpha_toprail";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_ar_falpha_triggrip";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sm_mpapa5_reciever";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sm_mpapa5_stock";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sm_mpapa5_barrel";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sm_mpapa5_mag";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sm_papa90_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sm_papa90_barrel";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sm_papa90_mag";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sh_dpapa12_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sh_dpapa12_ammo";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sh_dpapa12_pump";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_lm_kilo121_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_lm_kilo121_stock";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_lm_kilo121_barrel";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_lm_kilo121_mag";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sn_mike14_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sn_mike14_stock";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sn_mike14_barrel";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sn_mike14_mag";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sn_mike14_stock";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sn_kilo98_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_sn_kilo98_barrel";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_pi_golf21_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_pi_golf21_mag";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_pi_golf21_slide";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_pi_mike1911_v1_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_pi_mike1911_v1_mag";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_pi_mike1911_v1_slide";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_pi_decho_receiver";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_pi_decho_mag";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_pi_decho_slide";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "attachment_wm_pi_decho_grip";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "weapon_wm_la_mike32";
    _id_CEB0AAF169DDC698[_id_CEB0AAF169DDC698.size] = "weapon_vm_me_soscar_knife";
    attachments = scripts\engine\utility::array_reverse( getweaponattachments( weapon ) );
    _id_4F359D2FA176355F = getweaponattachmentworldmodels( weapon );

    foreach ( _id_AC0E594AC96AA3A8, model in _id_4F359D2FA176355F )
    {
        if ( isdefined( scripts\engine\utility::array_find( _id_CEB0AAF169DDC698, model ) ) )
            weapon = self withoutattachment( attachments[_id_AC0E594AC96AA3A8] );
    }

    return weapon;
}

give_weapon( weapon, _id_E16E8F22BC34F7DC, _id_F50C33AAFEFD2127, _id_07C28C5D814DCFD9, _id_BB91D53764EDC89A )
{
    if ( isstring( weapon ) )
        weapon = make_weapon( weapon );

    if ( isdefined( _id_BB91D53764EDC89A ) )
        self giveweapon( weapon, _id_E16E8F22BC34F7DC, _id_F50C33AAFEFD2127, _id_07C28C5D814DCFD9, _id_BB91D53764EDC89A );
    else if ( isdefined( _id_07C28C5D814DCFD9 ) )
        self giveweapon( weapon, _id_E16E8F22BC34F7DC, _id_F50C33AAFEFD2127, _id_07C28C5D814DCFD9 );
    else if ( isdefined( _id_F50C33AAFEFD2127 ) )
        self giveweapon( weapon, _id_E16E8F22BC34F7DC, _id_F50C33AAFEFD2127 );
    else if ( isdefined( _id_E16E8F22BC34F7DC ) )
        self giveweapon( weapon, _id_E16E8F22BC34F7DC );
    else
        self giveweapon( weapon );
}

take_weapon( weapon )
{
    self takeweapon( weapon );
}

_id_DF81045786886808( basename )
{
    _id_8CAC01EF5BCB1816 = self getweaponslistall();

    foreach ( weapon in _id_8CAC01EF5BCB1816 )
    {
        if ( weapon.basename == basename )
            take_weapon( weapon );
    }
}

_id_7B79994F52C60A82( weapon )
{
    if ( isweapon( weapon ) )
        take_weapon( weapon );
    else
        _id_DF81045786886808( weapon );
}

make_weapon_special( weapon, basename, _id_134C70A5C6DE474C )
{
    if ( isdefined( basename ) )
        weapon = make_weapon( basename, undefined, undefined, undefined, undefined, undefined, _id_134C70A5C6DE474C );
    else
    {
        switch ( weapon )
        {
            case "iw9_ar_akilo_v4":
                weapon = make_weapon( "iw9_ar_akilo_sp", [ "bar_ar_hvyshort_p04_akilo|1", "mag_ar_p04_akilo|1", "pgrip_aim_p04|1", "rec_akilo|1", "reflex03_tall|1", "stock_ar_light_p04_akilo|1" ] );
                break;
            case "iw9_ar_mcharlie_v1":
                weapon = make_weapon( "iw9_ar_mcharlie_sp", [ "bar_ar_short_p08|1", "flash_ar_01|1", "grip_vertshort06|1", "hybrid02|1", "iw9_rec_mcharlie|1", "mag_ar_p08|1", "pgrip_ar_p08|1+stock_sm_p08|1" ] );
                break;
            case "iw9_ar_mcbravo_v1":
                weapon = make_weapon( "iw9_ar_mcbravo_sp", [ "ammo_blk", "bar_ar_light_p08|1", "grip_vertshort03|1", "iw9_selectsemi", "lasercyl_ads01|2", "mag_ar_heavy_p08|1", "pgrip_ar2_p08", "rec_mcbravo|1", "reflex07_tall|1", "stock_ar_tactical_p08|2" ] );
                break;
            case "iw9_ar_mike4_v1":
                weapon = make_weapon( "iw9_ar_mike4_sp", [ "ammo_556n", "bar_ar_short_p01_mike4|2", "grip_vert02|1", "iw9_rec_mike4|1", "selectsemi_mike4", "laserbox_ads01|1", "mag_ar_p01|1", "pgrip_p01|2", "reflex02_tall|2", "silencer07_ar|1", "stock_ar_p01_mike4|4" ] );
                break;
            case "iw9_ar_mike4_v9":
                weapon = make_weapon( "iw9_ar_mike4_sp", [ "ammo_556n", "bar_ar_short_p01_mike4|3", "grip_angled01|3", "hybridtherm01|1", "iw9_rec_mike4|3", "selectsemi_mike4", "mag_ar_p01|3", "pgrip_p01|3", "silencer03_ar_p01|2", "stock_ar_p01_mike4|5" ] );
                break;
            case "iw9_dm_mike14_v1":
                weapon = make_weapon( "iw9_dm_mike14_sp", [ "ammo_762n", "arscope_vz02|1", "bar_dm_p18_mike14|1", "grip_vertshort03|2", "iw9_rec_mike14|1", "mag_sn_large_p18|1", "pgrip_dm_p18|1", "stock_dm_light_p18|1" ] );
                break;
            case "iw9_dm_xmike2010_v1":
                weapon = make_weapon( "iw9_dm_xmike2010_sp", [ "ammo_300wm", "bar_sn_light_p20_xmike2010|1", "bipod01|3", "bolt_p20|1", "mike24_scope|1", "pgrip_ass_p20|1", "rec_xmike2010|1", "stock_sn_heavy_p20|1", "xmag_sn_p20|1" ] );
                break;
            case "iw9_sn_alpha50_v1":
                weapon = make_weapon( "iw9_sn_alpha50_sp", [ "bar_sn_p23|1", "|1+dmscope_therm01|1", "mag_sn_p23|1", "rec_alpha50|1", "silencer04_sn|1", "stock_sn_assault_p23|1" ] );
                break;
            case "iw9_sn_mromeo_v1":
                weapon = make_weapon( "iw9_sn_mromeo_sp", [ "ammo_300nm", "bar_sn_p21|1", "bipod01|1", "bolt_p21|1", "mag_sn_large_p21|1", "pgrip_p21|1", "rec_mromeo|1", "silencer03_dm|1", "stock_sn_heavy_p21|1", "vzscope_mromeo|1" ] );
                break;
            case "iw9_sn_mromeo_v4":
                weapon = make_weapon( "iw9_sn_mromeo_sp", [ "ammo_300nm_intercept", "bar_sn_p21|2", "bolt_p21|2", "dmscope_therm01_intercept|2", "laserbox_ads01|2", "mag_sn_p21|2", "pgrip_p21|2", "rec_mromeo|4", "silencer01_dm_intercept|1", "sp_intercept_sniper", "stock_sn_p21|1" ] );
                break;
            case "graves_br_schotel":
                weapon = make_weapon( "iw9_ar_schotel_sp", [ "ammo_762n", "bar_br_short_p05|1", "bipod01|2", "hybrid01|1", "mag_br_p05|1", "pgrip_p05|1", "rec_schotel|1", "selectsemi_schotel", "stock_ar_heavy_p05|1" ] );
                break;
            case "alejandro_sm_mpapax":
                weapon = make_weapon( "iw9_sm_mpapax_sp", [ "ammo_9p", "bar_sm_p08|1", "grip_angled13|1", "iw9_selectsemi", "lasercyl_ads01|1", "mag_sm_p08|2", "pgrip_sm_tac_p08|1", "rec_mpapax|2", "reflex02_tall|1", "stock_ar_tactical_p08|1" ] );
                break;
            default:
                weapon = undefined;
        }
    }

    return weapon;
}

fixplacedweapons( _id_BC738540DD23FE15 )
{
    weapons = [];
    entities = getentarray();

    foreach ( ent in entities )
    {
        if ( !isdefined( ent.classname ) )
            continue;

        if ( scripts\engine\utility::string_starts_with( ent.classname, "weapon_" ) )
            weapons[weapons.size] = ent;
    }

    foreach ( weapon in weapons )
    {
        weaponattachments = strtok( weapon.classname, "+" );
        weaponname = getsubstr( weaponattachments[0], 7, weaponattachments[0].size );
        weaponattachments = scripts\engine\utility::array_remove_index( weaponattachments, 0 );
        _id_52E390F81FB2BFB4 = weapon._id_6E242F85C090F3BF;

        if ( isdefined( level._id_8D5928A6024FFD1C ) )
            _id_25C927C7E11B8B91 = [[ level._id_8D5928A6024FFD1C ]]( weaponname, weapon.origin, weaponattachments, weapon.angles, weapon.spawnflags, _id_52E390F81FB2BFB4 );
        else
            _id_25C927C7E11B8B91 = _id_EC8A443FE8165FE4( weaponname, weapon.origin, weaponattachments, weapon.angles, weapon.spawnflags, _id_52E390F81FB2BFB4 );

        if ( isdefined( weapon.targetname ) )
            _id_25C927C7E11B8B91.targetname = weapon.targetname;

        if ( isdefined( weapon.script_noteworthy ) )
            _id_25C927C7E11B8B91.script_noteworthy = weapon.script_noteworthy;

        if ( isdefined( weapon.script_namenumber ) )
            _id_25C927C7E11B8B91.script_namenumber = weapon.script_namenumber;

        if ( isdefined( weapon.script_parameters ) )
            _id_25C927C7E11B8B91.script_parameters = weapon.script_parameters;

        if ( isdefined( weapon.script_label ) )
            _id_25C927C7E11B8B91.script_label = weapon.script_label;

        if ( isdefined( weapon.script_ammo_alt_clip ) )
            _id_25C927C7E11B8B91.script_ammo_alt_clip = weapon.script_ammo_alt_clip;

        if ( isdefined( weapon.script_ammo_alt_extra ) )
            _id_25C927C7E11B8B91.script_ammo_alt_extra = weapon.script_ammo_alt_extra;

        if ( isdefined( weapon.script_ammo_clip ) )
            _id_25C927C7E11B8B91.script_ammo_clip = weapon.script_ammo_clip;

        if ( isdefined( weapon.script_ammo_extra ) )
            _id_25C927C7E11B8B91.script_ammo_extra = weapon.script_ammo_extra;
        else if ( isdefined( weapon.script_ammo_clip ) )
            _id_25C927C7E11B8B91.script_ammo_extra = 0;

        if ( isdefined( weapon.script_ammo_max ) )
            _id_25C927C7E11B8B91.script_ammo_max = weapon.script_ammo_max;

        _id_C071435AAC5CFC1C = undefined;
        _id_87F798FAF85AFB05 = "";

        foreach ( attachment in weaponattachments )
        {
            _id_87F798FAF85AFB05 = _id_87F798FAF85AFB05 + "+" + attachment;

            if ( isstartstr( attachment, "ub_gl" ) )
                _id_C071435AAC5CFC1C = 1;
        }

        _id_25C927C7E11B8B91 _id_3433EE6B63C7E243::setscriptammo( weaponname, weapon, _id_C071435AAC5CFC1C );
        weapon delete();
    }
}

_id_E59F7849726AD730( weaponname, _id_FD0D6694540A4BAB, _id_F5AA585692ED7934 )
{
    _id_94C9FB0BC9232353 = getentarray( _id_FD0D6694540A4BAB, "code_classname" );

    foreach ( _id_F0FFAFCA5D927A12 in _id_94C9FB0BC9232353 )
    {
        _id_DD515FCF025B2E79 = spawn( _id_F5AA585692ED7934, _id_F0FFAFCA5D927A12.origin, _id_F0FFAFCA5D927A12.spawnflags );
        _id_DD515FCF025B2E79.angles = _id_F0FFAFCA5D927A12.angles;
        _id_DD515FCF025B2E79.targetname = _id_F0FFAFCA5D927A12.targetname;
        _id_DD515FCF025B2E79 _id_3433EE6B63C7E243::setscriptammo( weaponname, _id_F0FFAFCA5D927A12, undefined );
        _id_F0FFAFCA5D927A12 delete();
    }
}

_id_EC8A443FE8165FE4( weaponname, origin, weaponattachments, angles, spawnflags, _id_FEFAD7765EF87400 )
{
    if ( getdvarint( "dvar_4589562A903DB3E0" ) && isstartstr( weaponname, "iw8_" ) )
    {

    }

    if ( isstartstr( weaponname, "iw8_" ) )
        defaults = getweapondefaults( weaponname );
    else
        defaults = _func_6527364C1ECCA6C6( weaponname );

    defaults = removeconflictingattachments( weaponattachments, defaults );
    weaponattachments = scripts\engine\utility::array_combine( defaults, weaponattachments );
    _id_87F798FAF85AFB05 = "";

    foreach ( attachment in weaponattachments )
        _id_87F798FAF85AFB05 = _id_87F798FAF85AFB05 + "+" + attachment;

    if ( isdefined( _id_FEFAD7765EF87400 ) )
        _id_87F798FAF85AFB05 = _id_87F798FAF85AFB05 + ( "+camo|" + _id_FEFAD7765EF87400 );

    if ( !isdefined( spawnflags ) )
        spawnflags = 0;

    if ( !isdefined( angles ) )
        angles = ( 0, 0, 0 );

    weapon = spawn( "weapon_" + weaponname + _id_87F798FAF85AFB05, origin, spawnflags );
    weapon.angles = angles;
    return weapon;
}

aim_at( origin, laser_state, _id_0BED50C3A7A759BB, _id_275DED6DDE2FE356 )
{
    self notify( "stop_aiming" );
    self endon( "stop_aiming" );
    self endon( "death" );

    if ( !isdefined( origin ) )
        origin = self localtoworldcoords( ( 150, 0, 30 ) );

    if ( !isdefined( laser_state ) )
        laser_state = 0;

    if ( !isdefined( _id_275DED6DDE2FE356 ) )
        _id_275DED6DDE2FE356 = 1.5;

    self.aim_target = scripts\engine\utility::spawn_script_origin();
    self.aim_target.origin = self gettagorigin( "tag_flash" ) + anglestoforward( self gettagangles( "tag_flash" ) ) * 50;
    childthread internal_aim_occlusion_override();
    self setentitytarget( self.aim_target );
    self.aim_target moveto( origin, _id_275DED6DDE2FE356, 0.01, 0.01 );
    wait( _id_275DED6DDE2FE356 * 0.5 );

    if ( laser_state > 0 )
        thread aim_at_laser_on( laser_state, _id_0BED50C3A7A759BB );

    wait( _id_275DED6DDE2FE356 * 0.5 );
}

internal_aim_occlusion_override()
{
    self.suppress_uselastenemysightpos = 1;
    self.dontgiveuponsuppression = 1;
    self.forcesuppressai = 1;

    for (;;)
    {
        self.lastenemysightpos = self.aim_target.origin;
        waitframe();
    }
}

internal_aim_at_laser_tracker()
{
    for (;;)
    {
        waittillframeend;
        _id_A04EA954C347F6D6 = self gettagorigin( self.aim_laser.tag );
        self.aim_laser dontinterpolate();
        self.aim_laser.origin = _id_A04EA954C347F6D6;
        self.aim_laser.angles = vectortoangles( self.aim_target.origin - _id_A04EA954C347F6D6 );
        waitframe();
    }
}

_id_E24293736E639DCF( team, org, _id_8BC14603A27FA3E7, _id_3A6FA490549F46D9 )
{
    ent = scripts\engine\utility::spawn_script_origin( org, _id_8BC14603A27FA3E7 );
    ent.health = 1;
    ent makeentitysentient( team, _id_3A6FA490549F46D9 );
    return ent;
}

is_aiming()
{
    return isdefined( self.aim_target );
}

aim_at_laser_on( laser_state, _id_0BED50C3A7A759BB )
{
    self endon( "laser_off" );
    self endon( "death" );

    if ( laser_state != 0 )
    {
        if ( !isdefined( _id_0BED50C3A7A759BB ) )
            _id_0BED50C3A7A759BB = "tag_laser";

        self.aim_laser = spawn( "script_model", self gettagorigin( _id_0BED50C3A7A759BB ) );
        self.aim_laser setmodel( "tag_laser" );
        self.aim_laser setmoverlaserweapon( self.weapon );
        self.aim_laser.tag = _id_0BED50C3A7A759BB;

        if ( laser_state == 1 )
            self.aim_laser laseron();
        else
            self.aim_laser _meth_6F7BE4CB996E4D3E();

        self.aim_laser.laser_state = laser_state;
        internal_aim_at_laser_tracker();
    }
}

aim_at_laser_off()
{
    self notify( "laser_off" );

    if ( isdefined( self.aim_laser ) )
    {
        if ( self.aim_laser.laser_state == 1 )
            self.aim_laser laseroff();
        else
            self.aim_laser _meth_9BA253C26D6D6740();

        self.aim_laser delete();
        self.aim_laser = undefined;
    }
}

move_aim_to( origin, time, _id_5FCD68807ADA6113, _id_EFE93C754F5124E6 )
{
    self endon( "death" );
    self endon( "stop_aiming" );

    if ( !isdefined( _id_5FCD68807ADA6113 ) )
        _id_5FCD68807ADA6113 = 0.05;

    if ( !isdefined( _id_EFE93C754F5124E6 ) )
        _id_EFE93C754F5124E6 = 0.05;

    self.aim_target moveto( origin, time, _id_5FCD68807ADA6113, _id_EFE93C754F5124E6 );
    wait( time );
}

link_aim_to( ent, tag, origin_offset )
{
    self endon( "stop_aiming" );
    self endon( "death" );

    if ( !isdefined( tag ) )
        tag = "tag_origin";

    if ( isdefined( origin_offset ) )
        self.aim_target linkto( ent, tag, origin_offset, ( 0, 0, 0 ) );
    else
        self.aim_target linkto( ent, tag );
}

move_aim_to_enemy( enemy, tag, _id_CCA3FAB42A571371, _id_DC102D0A3FA40D6C, _id_3C6327D2DC93EEB9, _id_6BFFF23CA9261D1E )
{
    self endon( "stop_aiming" );
    self endon( "death" );
    enemy endon( "death" );

    if ( !isdefined( tag ) )
        tag = "tag_origin";

    if ( !isdefined( _id_CCA3FAB42A571371 ) )
        _id_CCA3FAB42A571371 = 3.0;

    if ( !isdefined( _id_DC102D0A3FA40D6C ) )
        _id_DC102D0A3FA40D6C = 50.0;

    if ( !isdefined( _id_3C6327D2DC93EEB9 ) )
        _id_3C6327D2DC93EEB9 = 1;

    _id_12AD39F0F512B167 = enemy gettagorigin( tag );
    _id_D1AE2A623ABD35C1 = _id_DC102D0A3FA40D6C;
    _id_F9803F210F99196A = enemy.origin;
    _id_2C0637398AFF5042 = _id_DC102D0A3FA40D6C / _id_CCA3FAB42A571371;
    _id_F878DC67E6B8B59F = distance( self.aim_target.origin, _id_12AD39F0F512B167 ) / _id_CCA3FAB42A571371;

    while ( distancesquared( self.aim_target.origin, enemy gettagorigin( tag ) ) > 5.0 )
    {
        _id_161A38F49FFBA787 = 0.05;

        if ( randomfloat( 100 ) > 50 )
            _id_78339221B41E8B44 = enemy localtoworldcoords( ( 0, 0, _id_D1AE2A623ABD35C1 ) );
        else
            _id_78339221B41E8B44 = enemy localtoworldcoords( ( 0, 0, _id_D1AE2A623ABD35C1 * -1.0 ) );

        _id_2E85B4CC8C8F0D24 = _id_78339221B41E8B44 - enemy.origin + enemy gettagorigin( tag );
        _id_F6101D58D76925EB = self.aim_target.origin;
        _id_D763E2D8FF9FF57B = length( enemy.origin - _id_F9803F210F99196A ) / _id_161A38F49FFBA787;
        speed = _id_D763E2D8FF9FF57B + _id_F878DC67E6B8B59F;
        direction = vectornormalize( _id_2E85B4CC8C8F0D24 - _id_F6101D58D76925EB );
        velocity = direction * speed * _id_161A38F49FFBA787;
        _id_D1AE2A623ABD35C1 = _id_D1AE2A623ABD35C1 - _id_2C0637398AFF5042 * _id_161A38F49FFBA787;
        _id_D1AE2A623ABD35C1 = clamp( _id_D1AE2A623ABD35C1, 0, _id_DC102D0A3FA40D6C );
        _id_F9803F210F99196A = enemy.origin;
        move_aim_to( _id_F6101D58D76925EB + velocity, _id_161A38F49FFBA787, 0.001, 0.001 );
    }

    if ( _id_3C6327D2DC93EEB9 )
    {
        self.aim_target.origin = self.aim_target.origin + vectornormalize( self gettagorigin( "tag_flash" ) - self.aim_target.origin ) * 20.0;
        link_aim_to( enemy, tag );
    }
}

stop_aiming()
{
    self notify( "stop_aiming" );
    aim_at_laser_off();

    if ( isdefined( self.aim_target ) )
    {
        self clearentitytarget();
        self.aim_target delete();
        self.aim_target = undefined;
    }

    self.suppress_uselastenemysightpos = 0;
    self.dontgiveuponsuppression = undefined;
    self.forcesuppressai = 0;
    self.lastenemysightpos = undefined;
}

move_aim_along_spline( start_struct, _id_FC410CE8BF19DAC9 )
{
    self endon( "stop_aiming" );
    self endon( "death" );
    _id_69BBF8519D194DF1 = 0;

    for ( current_struct = start_struct; isdefined( current_struct.target ); current_struct = current_struct.next )
    {
        current_struct.next = scripts\engine\utility::getstruct( current_struct.target, "targetname" );
        current_struct.dist_to_next = distance( current_struct.next.origin, current_struct.origin );
        _id_69BBF8519D194DF1 = _id_69BBF8519D194DF1 + current_struct.dist_to_next;
    }

    for ( current_struct = start_struct; isdefined( current_struct.target ); current_struct = current_struct.next )
    {
        _id_275DED6DDE2FE356 = current_struct.dist_to_next / _id_69BBF8519D194DF1 * _id_FC410CE8BF19DAC9;
        move_aim_to( current_struct.next.origin, _id_275DED6DDE2FE356 );
    }
}

aim_search_around( _id_EB0C52046ED75B79, _id_3DCE490E575954CB, _id_C1C6436496D9B6E8, _id_4AF84BD7B4E025CA )
{
    self endon( "stop_aiming" );
    self endon( "stop_searching" );
    self endon( "death" );

    if ( !isdefined( _id_EB0C52046ED75B79 ) )
        _id_EB0C52046ED75B79 = -15.0;
    else
    {
        _id_EB0C52046ED75B79 = _id_EB0C52046ED75B79 * -1.0;
        _id_EB0C52046ED75B79 = clamp( _id_EB0C52046ED75B79, -30, 30 );
    }

    if ( !isdefined( _id_3DCE490E575954CB ) )
        _id_3DCE490E575954CB = 15.0;
    else
    {
        _id_3DCE490E575954CB = _id_3DCE490E575954CB * -1.0;
        _id_3DCE490E575954CB = clamp( _id_3DCE490E575954CB, -30, 30 );
    }

    if ( !isdefined( _id_C1C6436496D9B6E8 ) )
        _id_C1C6436496D9B6E8 = 45.0;
    else
        _id_C1C6436496D9B6E8 = clamp( _id_C1C6436496D9B6E8, -90, 90 );

    if ( !isdefined( _id_4AF84BD7B4E025CA ) )
        _id_4AF84BD7B4E025CA = -45.0;
    else
        _id_4AF84BD7B4E025CA = clamp( _id_4AF84BD7B4E025CA, -90, 90 );

    for (;;)
    {
        if ( randomfloat( 100 ) > 50 )
            _id_8360D787CD2D6ECA = _id_3DCE490E575954CB;
        else
            _id_8360D787CD2D6ECA = _id_EB0C52046ED75B79;

        if ( randomfloat( 100 ) > 50 )
            _id_DDA88971030CB1E1 = _id_4AF84BD7B4E025CA;
        else
            _id_DDA88971030CB1E1 = _id_C1C6436496D9B6E8;

        _id_56DDE920C84C7B04 = 0.05;
        _id_918A8291DD10F42B = 0.0;

        for ( _id_FB4344FC091E2D67 = self.aim_target.origin; _id_918A8291DD10F42B < 4.0; _id_918A8291DD10F42B = _id_918A8291DD10F42B + _id_56DDE920C84C7B04 )
        {
            _id_73B5B47181E59812 = self gettagorigin( "tag_flash" )[2];

            if ( length( self.velocity ) > 0 )
                _id_841F34DE4EF161E4 = vectortoangles( self.velocity );
            else
                _id_841F34DE4EF161E4 = self.angles;

            _id_9F241DC3C38E2C9A = _id_841F34DE4EF161E4 + ( _id_8360D787CD2D6ECA, _id_DDA88971030CB1E1, 0 );
            _id_F14FE3DC08460A5D = anglestoforward( _id_9F241DC3C38E2C9A ) * 75;
            _id_712CFF6062468796 = ( self.origin[0], self.origin[1], _id_73B5B47181E59812 );
            _id_FB4344FC091E2D67 = _id_712CFF6062468796 + _id_F14FE3DC08460A5D;
            _id_BD6328B6F6B2ADD8 = _id_FB4344FC091E2D67 - self.aim_target.origin;
            _id_1DB13F6A6EB165A9 = length( _id_BD6328B6F6B2ADD8 );
            _id_A2B39965224CB294 = vectornormalize( _id_BD6328B6F6B2ADD8 );
            _id_F8E3F290A434DF80 = _id_1DB13F6A6EB165A9 / ( 4.0 - _id_918A8291DD10F42B );
            _id_3D4F8D9283542D92 = _id_A2B39965224CB294 * _id_F8E3F290A434DF80 + self.velocity;
            move_aim_to( self.aim_target.origin + _id_3D4F8D9283542D92 * _id_56DDE920C84C7B04, _id_56DDE920C84C7B04, 0.00001, 0.00001 );
        }

        self.aim_target.origin = _id_FB4344FC091E2D67;
    }
}

stop_aim_search_around()
{
    self notify( "stop_searching" );
}

userskip_wait()
{
    _id_B57418FDE4F91E90 = "userskipped";
    _id_5A5437BAB7D7156B = "stop_userskip";
    flags = [ _id_B57418FDE4F91E90, _id_5A5437BAB7D7156B ];

    while ( gettime() < 450 )
        waitframe();

    foreach ( flag in flags )
        scripts\engine\utility::flag_clear( flag );

    setomnvar( "ui_is_bink_skippable", 1 );
    thread userskip_input();

    while ( !scripts\engine\utility::flag( _id_5A5437BAB7D7156B ) && !scripts\engine\utility::flag( _id_B57418FDE4F91E90 ) )
        waitframe();

    setomnvar( "ui_is_bink_skippable", 0 );
    level notify( "stop_userskip_input_thread" );
    return scripts\engine\utility::flag( _id_B57418FDE4F91E90 );
}

userskip_input()
{
    level endon( "stop_userskip_input_thread" );

    for (;;)
    {
        level.player waittill( "luinotifyserver", message, value );

        if ( message == "skip_bink_input" )
        {
            scripts\engine\utility::flag_set( "userskipped" );
            break;
        }
    }
}

userskip_stop()
{
    scripts\engine\utility::flag_set( "stop_userskip" );
}

_id_D4697F18FC3FF634()
{
    level.player clearclienttriggeraudiozone( 0.1 );
    level.player stopsoundchannel( "scn_igc_unres_2d" );
    level.player stopsoundchannel( "scn_igc_lfe_unres_2d" );
}

get_adjusted_difficulty()
{
    return scripts\sp\gameskill::auto_adjust_difficult_get();
}

civilianfailwrapper( _id_35BC92CC3C2FC0A8, mindamage, _id_94A5745C9566A0A7, _id_05F6265D8D7EE3C8 )
{
    self notify( "stop_civilian_fail_wrapper" );
    self endon( "stop_civilian_fail_wrapper" );
    level endon( "stop_all_civilian_fail_wrappers" );

    if ( !isdefined( _id_35BC92CC3C2FC0A8 ) )
        _id_35BC92CC3C2FC0A8 = [ 9, 30 ];

    if ( !isdefined( mindamage ) )
        mindamage = 20;

    if ( isdefined( _id_94A5745C9566A0A7 ) )
        _id_94A5745C9566A0A7 = _id_94A5745C9566A0A7 * _id_94A5745C9566A0A7;

    if ( !isdefined( _id_05F6265D8D7EE3C8 ) )
        _id_05F6265D8D7EE3C8 = 0;

    distance = undefined;
    _id_B1910274D33B458B = [ "MOD_IMPACT", "MOD_GRENADE", "MOD_GRENADE_SPLASH", "MOD_PROJECTILE_SPLASH", "MOD_EXPLOSIVE", "MOD_FIRE" ];

    for (;;)
    {
        self waittill( "damage", damage, attacker, direction_vec, point, meansofdeath, modelname, tagname, partname, idflags, objweapon, origin, angles, normal, inflictor );

        if ( !isdefined( attacker ) || !isdefined( damage ) )
            continue;
        else if ( !isplayer( attacker ) )
            continue;
        else if ( damage < mindamage )
            continue;
        else if ( isdefined( meansofdeath ) && istrue( _id_05F6265D8D7EE3C8 ) && scripts\engine\utility::array_contains( _id_B1910274D33B458B, meansofdeath ) )
            continue;
        else if ( isdefined( objweapon ) && objweapon.basename == "flash" )
            continue;
        else if ( isdefined( _id_94A5745C9566A0A7 ) )
        {
            distance = distancesquared( level.player.origin, self.origin );

            if ( distance > _id_94A5745C9566A0A7 )
                continue;
        }

        break;
    }

    level thread scripts\sp\hud_util::fade_out( 0 );
    scripts\sp\player_death::set_custom_death_quote( scripts\engine\utility::array_randomize( _id_35BC92CC3C2FC0A8 )[0] );
    missionfailedwrapper();
}

get_mount_activation_mode()
{
    if ( self usinggamepad() )
        _id_53CF7906631431B8 = self _meth_569AC32FF1837D7C( "mountButtonConfig" );
    else
        _id_53CF7906631431B8 = self _meth_569AC32FF1837D7C( "mountButtonConfigKBM" );

    switch ( _id_53CF7906631431B8 )
    {
        case 1:
            return "disabled";
        case 2:
            return "double_ads";
        case 3:
            return "ads_melee";
        case 4:
            return "ads_sprint";
        case 5:
            return "offhand";
        case 6:
            return "offhand_hold";
        case 7:
            return "ads";
        case 8:
            return "mount_binding";
        case 9:
            return "mount_binding_hold";
        case 10:
            return "ads_activate";
    }
}

notetrack_mission_failed_vo_enable()
{
    level.notetrackmissionfailedvo = 1;
}

notetrack_mission_failed_vo_disable()
{
    level.notetrackmissionfailedvo = 0;
}

notetrack_vo_enable()
{
    level.notetrackvo = 1;
}

notetrack_vo_disable()
{
    level.notetrackvo = 0;
}

door_remove_open_prompts()
{
    thread scripts\sp\door::remove_open_prompts();
}

door_ai_allowed( _id_E3108E412AFB3811 )
{
    self.lockedforai = !_id_E3108E412AFB3811;

    if ( _id_E3108E412AFB3811 )
        thread scripts\sp\door::clear_navobstacle();
    else
        thread scripts\sp\door::create_navobstacle();
}

door_force_open_fully( opener, time )
{
    scripts\game\sp\door::remove_door_snake_cam_ability();
    scripts\sp\door::remove_open_ability();
    scripts\sp\door::door_open_completely( opener, time );
}

nvidiaansel_scriptdisable( val )
{
    if ( _func_BF268273256885F4() )
        setsaveddvar( "dvar_941ECB757E3D818E", val );
}

nvidiaansel_allowduringcinematic( val )
{
    if ( _func_BF268273256885F4() )
        setsaveddvar( "dvar_61B4CC96F32BDEF8", val );
}

nvidiaansel_overridecollisionradius( val )
{
    if ( _func_BF268273256885F4() )
        setsaveddvar( "dvar_3E148A07C591F341", val );
}

is_trials_level()
{
    if ( !isdefined( level.istrialslevel ) )
        level.istrialslevel = scripts\engine\utility::string_starts_with( level.script, "trials_" );

    return level.istrialslevel;
}

weapon_empty( _id_06B62DB6EEC868E2 )
{
    if ( !isdefined( _id_06B62DB6EEC868E2 ) )
        return 1;

    if ( isnullweapon( _id_06B62DB6EEC868E2 ) )
        return 1;

    return scripts\engine\utility::is_equal( _id_06B62DB6EEC868E2.basename, "none" );
}

_id_1CA6C8AF36B17B0F()
{
    return weapon_empty( level.player.currentweapon );
}

_id_9E18F54B324AE950( _id_5C3F9357F11D2223 )
{
    if ( _id_1CA6C8AF36B17B0F() )
        return 0;

    if ( level.player.currentweapon.basename == _id_5C3F9357F11D2223 )
        return 1;

    return 0;
}

_id_986696F61C278B49( _id_9DB4B8F72F8AB345 )
{
    _id_99F4520333E40283 = scripts\sp\equipment\offhands::getweaponoffhandtype( _id_9DB4B8F72F8AB345 );
    return scripts\engine\utility::is_equal( level.player _meth_51BB5F1539048C4C( _id_99F4520333E40283 ).basename, _id_9DB4B8F72F8AB345 );
}

_id_B877CFF8B7533624()
{
    return level.player isthrowinggrenade() || level.player isthrowingbackgrenade();
}

_id_06063FCF0386F0C4( string )
{
    _id_E67B176637F4C5C1 = undefined;

    for (;;)
    {
        level.player waittill( "luinotifyserver", _id_EA3E3B2121E6713A, _id_E67B176637F4C5C1 );

        if ( _id_EA3E3B2121E6713A == string )
            break;
    }

    return _id_E67B176637F4C5C1;
}
