// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( isdefined( level.dynolights_initialized ) )
        return;

    level.dynolights_initialized = 1;

    if ( !isdefined( level.dynolights ) )
        level.dynolights = [];

    if ( !getdvarint( "dvar_DFE07EAA4A978E85" ) )
        setdvar( "dvar_DFE07EAA4A978E85", 0 );

    level.castingdynolights = [];

    foreach ( _id_94715B1541BC0E7B in level.dynolights )
    {
        if ( !isdefined( _id_94715B1541BC0E7B.init_count ) )
            _id_94715B1541BC0E7B.init_count = 0;

        _id_94715B1541BC0E7B.init_count++;
        _id_94715B1541BC0E7B thread dynolight_postload_state_init();
        _id_94715B1541BC0E7B thread dynolight_death_watcher();

        if ( isdefined( _id_94715B1541BC0E7B.targetname ) )
            targets = getentarray( _id_94715B1541BC0E7B.targetname, "target" );
        else
            targets = [];

        foreach ( target in targets )
        {
            if ( target is_lightswitch() )
                target thread lightswitch_init( _id_94715B1541BC0E7B );
        }

        _id_94715B1541BC0E7B.lightpos = _id_94715B1541BC0E7B.origin;
    }

    level.dynolight_trace_contents = scripts\engine\trace::create_contents( 0, 1, 0, 0, 0, 0, 0, 1, 0 );
}

add_dynolight( ent )
{
    if ( !isdefined( level.dynolights ) )
        level.dynolights = [];

    level.dynolights[level.dynolights.size] = ent;
}

dynolight_postload_state_init()
{
    self endon( "death" );
    wait 0.05;

    if ( !isdefined( self.circuitparents ) )
        self.circuitparents = [];

    _id_8C990DFE07DC97DD = strtok( self.script_noteworthy, "_" );
    _id_4123546CB7C24B1C = 0;

    foreach ( _id_E97377032A878881 in _id_8C990DFE07DC97DD )
    {
        if ( _id_E97377032A878881 == "off" )
            _id_4123546CB7C24B1C = 1;
    }

    if ( _id_4123546CB7C24B1C )
        self setscriptablepartstate( "onoff", "off" );
    else
        self setscriptablepartstate( "onoff", "on" );

    self.timeoflaststatechange = gettime();
    self.intensity = float( self getscriptablepartstate( "light_intensity" ) );

    if ( self.intensity > 0 )
        level.castingdynolights = scripts\engine\utility::array_add( level.castingdynolights, self );

    self.data = scripts\engine\sp\utility::get_linked_struct();

    if ( isdefined( self.data ) && !istrue( self.data.script_ignoreme ) )
    {
        if ( isdefined( self.data.target ) )
            self.data.angles = vectortoangles( scripts\engine\utility::getstruct( self.data.target, "targetname" ).origin - self.data.origin );

        if ( !isdefined( self.data.script_radius ) )
            iprintln( "dynolight data struct at " + self.origin + " missing script_radius kvp" );

        if ( !isdefined( self.data.script_fov_inner ) )
            iprintln( "dynolight data struct at " + self.origin + " missing script_fov_inner kvp" );

        if ( !isdefined( self.data.script_type ) )
            iprintln( "dynolight data struct at " + self.origin + " missing script_type kvp" );
    }

    linked_ents = scripts\engine\utility::get_linked_ents();

    if ( isdefined( linked_ents ) )
        self.linked_ents = linked_ents;

    self.lightpos = get_model_trace_start();
}

lightswitch_postload_state_init()
{
    self endon( "death" );
    wait 0.05;
    thread lightswitch_interact_manager();

    if ( !self.script_light_switch_state )
        lightswitch_update_children( self.script_light_switch_state );
}

lightswitch_init( _id_E71D7ADD6D0EE193 )
{
    if ( !isdefined( _id_E71D7ADD6D0EE193.circuitparents ) )
        _id_E71D7ADD6D0EE193.circuitparents = [];

    if ( !scripts\engine\utility::array_contains( _id_E71D7ADD6D0EE193.circuitparents, self ) )
        _id_E71D7ADD6D0EE193.circuitparents = scripts\engine\utility::array_add( _id_E71D7ADD6D0EE193.circuitparents, self );

    if ( !isdefined( self.lights ) )
    {
        self.lights = [];
        self.circuitchildren = [];
        self.circuitsiblings = [];
        self.circuitparents = [];
        self.disabled = 0;

        if ( !isdefined( self.script_light_switch_state ) )
            self.script_light_switch_state = 1;

        if ( !isdefined( self.script_light_switch_sfx ) )
            self.script_light_switch_sfx = "light_switch";

        if ( isdefined( self.script_light_idle_sfx ) )
            self playloopsound( self.script_light_idle_sfx );

        if ( isdefined( self.script_light_idle_sfx ) && !self.script_light_switch_state )
            self _meth_F4604329F388A96F( 0, 0.0 );

        thread lightswitch_postload_state_init();
        thread lightswitch_death_watcher();

        if ( isdefined( self.targetname ) )
            targets = getentarray( self.targetname, "target" );
        else
            targets = [];

        foreach ( target in targets )
        {
            if ( isdefined( target.classname ) && target.classname == "script_origin" )
                target thread lightswitch_init( self );
        }
    }

    foreach ( _id_F819E7742DFC07C8 in _id_E71D7ADD6D0EE193.circuitparents )
    {
        if ( _id_F819E7742DFC07C8 == self )
            continue;

        if ( !scripts\engine\utility::array_contains( self.circuitsiblings, _id_F819E7742DFC07C8 ) )
            self.circuitsiblings = scripts\engine\utility::array_add( self.circuitsiblings, _id_F819E7742DFC07C8 );

        if ( !scripts\engine\utility::array_contains( _id_F819E7742DFC07C8.circuitsiblings, self ) )
            _id_F819E7742DFC07C8.circuitsiblings = scripts\engine\utility::array_add( _id_F819E7742DFC07C8.circuitsiblings, self );
    }

    if ( _id_E71D7ADD6D0EE193 is_light() )
        self.lights = scripts\engine\utility::array_add( self.lights, _id_E71D7ADD6D0EE193 );
    else if ( _id_E71D7ADD6D0EE193 is_lightswitch() )
        self.circuitchildren = scripts\engine\utility::array_add( self.circuitchildren, _id_E71D7ADD6D0EE193 );
}

lightswitch_interact_manager()
{
    self endon( "death" );
    self.interact = 0;
    lightswitch_enable_interact();

    for (;;)
    {
        self waittill( "lightswitch_toggle" );

        if ( self.script_light_switch_state == 1 )
        {
            _id_3ADBBAE91E45099C = "_off";
            _id_908A456AFE967357 = 0;

            if ( isdefined( self.script_light_switch_fx ) )
                playfxontag( self.script_light_switch_fx, self, get_lightswitch_fx_tag() );
        }
        else
        {
            _id_3ADBBAE91E45099C = "_on";
            _id_908A456AFE967357 = 1;

            if ( isdefined( self.script_light_switch_fx ) )
                killfxontag( self.script_light_switch_fx, self, get_lightswitch_fx_tag() );
        }

        thread scripts\engine\utility::play_sound_in_space( self.script_light_switch_sfx + _id_3ADBBAE91E45099C, self.origin );
        lightswitch_onoff( _id_908A456AFE967357 );
        lightswitch_update_children( _id_908A456AFE967357, self );
        thread lightswitch_toggle_debounce();
    }
}

get_lightswitch_fx_tag()
{
    if ( isdefined( self.script_light_switch_fx_tag ) )
        return self.script_light_switch_fx_tag;

    return getpartname( self.model, 0 );
}

lightswitch_onoff( state )
{
    if ( self.script_light_switch_state == state )
        return;

    self.script_light_switch_state = state;

    if ( state )
    {
        if ( isdefined( self.script_light_idle_sfx ) )
            self _meth_F4604329F388A96F( 0, 0.5 );
    }
    else if ( isdefined( self.script_light_idle_sfx ) )
        self _meth_F4604329F388A96F( 1, 0.25 );
}

lightswitch_disable( state )
{
    if ( state == self.disabled )
        return;

    self.disabled = state;

    if ( state )
        lightswitch_disable_interact();
    else
        lightswitch_enable_interact();
}

lightswitch_send_stealth_event()
{
    if ( gettime() < 1000 )
        return;

    if ( isdefined( level.stealth ) )
    {
        lights = sortbydistance( self.lights, level.player.origin );

        foreach ( light in lights )
        {
            guys = scripts\engine\sp\utility::get_within_range( light.lightpos, getaiarray( "axis" ), 500 );
            guys = sortbydistance( guys, light.lightpos );

            if ( isdefined( guys[0] ) )
            {
                guys[0] aieventlistenerevent( "footstep", level.player, self.origin );
                return 1;
            }
        }
    }
}

lightswitch_toggle_debounce()
{
    self endon( "death" );
    self endon( "disable_interact" );

    while ( level.player usebuttonpressed() )
        wait 0.05;

    lightswitch_enable_interact();
}

collect_circuit_children( _id_17947F4A9AA52B15 )
{

}

collect_circuit_siblines( _id_17947F4A9AA52B15 )
{

}

lightswitch_update_children( _id_908A456AFE967357, _id_7009229600A41E8A )
{
    _id_56F49452D58C0380 = self.lights;

    foreach ( _id_F819E7742DFC07C8 in self.circuitsiblings )
    {
        _id_F819E7742DFC07C8 lightswitch_onoff( _id_908A456AFE967357 );

        foreach ( light in _id_F819E7742DFC07C8.lights )
        {
            if ( !scripts\engine\utility::array_contains( _id_56F49452D58C0380, light ) )
                _id_56F49452D58C0380 = scripts\engine\utility::array_add( _id_56F49452D58C0380, light );
        }
    }

    _id_701AE0782A275861 = self.circuitchildren;
    _id_20133FBEADFAE162 = [];

    for (;;)
    {
        _id_E186C1BCE116892B = 0;

        foreach ( _id_F819E7742DFC07C8 in _id_701AE0782A275861 )
        {
            if ( !scripts\engine\utility::array_contains( _id_20133FBEADFAE162, _id_F819E7742DFC07C8 ) )
            {
                foreach ( _id_C574BAFBA1435A68 in _id_F819E7742DFC07C8.circuitchildren )
                {
                    if ( !scripts\engine\utility::array_contains( _id_701AE0782A275861, _id_C574BAFBA1435A68 ) )
                        _id_701AE0782A275861 = scripts\engine\utility::array_add( _id_701AE0782A275861, _id_C574BAFBA1435A68 );
                }

                foreach ( _id_C574BAFBA1435A68 in _id_F819E7742DFC07C8.circuitsiblings )
                {
                    if ( !scripts\engine\utility::array_contains( _id_701AE0782A275861, _id_C574BAFBA1435A68 ) )
                        _id_701AE0782A275861 = scripts\engine\utility::array_add( _id_701AE0782A275861, _id_C574BAFBA1435A68 );
                }

                _id_20133FBEADFAE162 = scripts\engine\utility::array_add( _id_20133FBEADFAE162, _id_F819E7742DFC07C8 );
                _id_E186C1BCE116892B = 1;
            }
        }

        if ( !_id_E186C1BCE116892B )
            break;
    }

    _id_272E5F2D4E8DBC28 = scripts\engine\utility::ter_op( _id_908A456AFE967357, 0, 1 );

    foreach ( _id_F819E7742DFC07C8 in _id_701AE0782A275861 )
    {
        _id_F819E7742DFC07C8 lightswitch_onoff( _id_908A456AFE967357 );
        _id_F819E7742DFC07C8 lightswitch_disable( _id_272E5F2D4E8DBC28 );

        foreach ( light in _id_F819E7742DFC07C8.lights )
        {
            if ( !scripts\engine\utility::array_contains( _id_56F49452D58C0380, light ) )
                _id_56F49452D58C0380 = scripts\engine\utility::array_add( _id_56F49452D58C0380, light );
        }
    }

    foreach ( light in _id_56F49452D58C0380 )
    {
        if ( !light.alive )
            continue;

        light dynolight_set_onoff_state( _id_908A456AFE967357 );
    }
}

lightswitch_enable_interact()
{
    if ( self.disabled )
        return;

    if ( self.interact )
        return;

    self.interact = 1;
    offset = ( 0, 0, 0 );

    if ( isdefined( self.interact_offset ) )
    {
        offset = self.interact_offset;

        if ( isdefined( self.angles ) )
            offset = rotatevectorinverted( offset, self.angles );
    }

    _id_28E5CBCD928A9CA9 = 120;

    if ( isdefined( self.show_dist_override ) )
        _id_28E5CBCD928A9CA9 = self.show_dist_override;

    _id_3619F00A65FF1269 = 85;

    if ( isdefined( self.use_dist_override ) )
        _id_3619F00A65FF1269 = self.use_dist_override;

    scripts\sp\player\cursor_hint::create_cursor_hint( undefined, offset, &"SCRIPT/LIGHTSWITCH_INTERACT", 65, _id_28E5CBCD928A9CA9, _id_3619F00A65FF1269, 0, undefined, undefined, undefined, "duration_none", undefined, undefined, undefined, 90 );
    thread lightswitch_trigger_notify();
}

lightswitch_trigger_notify()
{
    self endon( "death" );
    self endon( "disable_interact" );
    self waittill( "trigger", _id_FA8D840338038893 );
    self.triggering_ent = _id_FA8D840338038893;
    self.interact = 0;

    if ( isdefined( level.lightswitch_interact_func ) )
        self [[ level.lightswitch_interact_func ]]();

    lightswitch_toggle();
    self notify( "tempRandoDraWdisable" );
}

lightswitch_disable_interact()
{
    self notify( "disable_interact" );
    self.interact = 0;
    scripts\sp\player\cursor_hint::remove_cursor_hint();
}

lightswitch_toggle()
{
    self notify( "lightswitch_toggle" );
}

dynolight_set_onoff_state( on )
{
    if ( on && self getscriptablepartstate( "onoff" ) == "off" )
    {
        dynolight_update_nvg_mode();
        self.timeoflaststatechange = gettime();
    }
    else if ( !on && self getscriptablepartstate( "onoff" ) != "off" )
    {
        self setscriptablepartstate( "onoff", "off" );
        self.timeoflaststatechange = gettime();
        thread stealth_event_on_light_death();
    }
}

dynolight_update_nvg_mode()
{
    if ( level.player isnightvisionon() && !level.player scripts\engine\sp\utility::is_flir_vision_on() && !getdvarint( "dvar_DFE07EAA4A978E85" ) )
        self setscriptablepartstate( "onoff", "on" );
    else
        self setscriptablepartstate( "onoff", "on" );
}

dynolight_death_watcher()
{
    self.alive = 1;
    self waittill( "death" );
    self.alive = 0;
    self.intensity = 0;
    self.timeoflaststatechange = gettime();

    foreach ( _id_75A9C89CD4A6FB0B in self.circuitparents )
    {
        _id_75A9C89CD4A6FB0B.lights = scripts\engine\utility::array_remove( _id_75A9C89CD4A6FB0B.lights, self );
        _id_75A9C89CD4A6FB0B check_lightswitch_cleanup();
    }

    thread stealth_event_on_light_death();
}

stealth_event_on_light_death()
{
    if ( isdefined( level.stealth ) )
    {
        lightpos = scripts\engine\utility::drop_to_ground( self.lightpos, 24, -256 );
        _id_601D79340374BC27 = undefined;

        if ( self getscriptablepartstate( "onoff" ) == "death" )
            _id_601D79340374BC27 = 400;

        scripts\stealth\event::event_broadcast_axis_by_sight( "light_killed", self, self.lightpos, 800, 0, lightpos, _id_601D79340374BC27 );
    }
}

get_model_trace_start()
{
    start = self gettagorigin( "tag_fx_bulb", 1 );

    if ( isdefined( start ) )
        return start;

    switch ( self.model )
    {
        case "pnr_light_lamp_floor_tall_01_on":
        case "light_lamp_floor_tall_01_on":
            start = self.origin + ( 0, 0, 120 );
            break;
        case "ch_street_wall_light_01_off":
        case "ch_street_wall_light_01_on":
            start = self.origin - ( 0, 0, 10 ) + anglestoforward( self.angles ) * 35;
            break;
        case "ind_spotlight_generator_stripes":
        case "ind_spotlight_generator_on":
        case "ind_spotlight_generator_off":
            start = self.origin + ( 0, 0, 131 ) + anglestoforward( self.angles ) * 19;
            break;
        case "ind_flood_light_standing_tall_dmg":
        case "ind_flood_light_standing_tall_off":
        case "ind_flood_light_standing_tall_on":
            start = self.origin + ( 0, 0, 39 );
            break;
        case "deco_wall_light_fn_01":
        case "deco_wall_light_fn_01_on":
            start = self.origin + anglestoforward( self.angles ) * 10;
            break;
        case "clk_industrial_light_01_on_warm":
        case "clk_industrial_light_01_on":
            start = self.origin - ( 0, 0, 64 );
            break;
        case "cp_disco_fluorescent_light_on_blue":
        case "cp_disco_fluorescent_light_on":
            start = self.origin - ( 0, 0, 30 );
            break;
        case "crr_light_utility_01_on":
        case "crr_light_utility_01":
            start = self.origin - ( 0, 0, 7 ) + anglestoforward( self.angles ) * 5;
            break;
        case "cp_disco_searchlight_swivel_on":
            start = self.origin + ( 0, 0, 43 ) + anglestoforward( self.angles ) * 28;
            break;
        case "cs_cargoship_wall_light_off":
            start = self.origin + anglestoforward( self.angles ) * 15;
            break;
        case "dam_tunnel_light_01_off":
            start = self.origin - ( 0, 0, 23 );
            break;
        case "com_floodlight_on":
        case "com_floodlight_scr":
        case "com_floodlight":
            start = self.origin + ( 0, 0, 11 ) + anglestoforward( self.angles ) * 6;
            break;
        case "tent_ceiling_light_off":
            start = self.origin - ( 0, 0, 7 );
            break;
        case "zmb_center_portal_base_small_lights_blue":
        case "zmb_center_portal_base_small_lights_off":
        case "zmb_center_portal_base_small_lights":
            start = self.origin + anglestoforward( self.angles ) * 9;
            break;
        case "p7_light_chandelier_vintage_01_on":
        case "p7_light_chandelier_vintage_01_broken":
        case "p7_light_chandelier_vintage_01":
            start = self.origin - ( 0, 0, 44 );
            break;
        case "light_outdoorwall01":
            start = self.origin - ( 0, 0, 6 ) + anglestoforward( self.angles ) * 8;
            break;
        case "mp_dart_lightfluo_on":
            start = self.origin - ( 0, 0, 8 );
            break;
        case "light_lamp_black_01_ems":
        case "light_lamp_black_01_off":
        case "light_lamp_black_01":
            start = self.origin + ( 0, 0, 25 ) + anglestoforward( self.angles ) * 9;
            break;
        case "bo_lights_hang_lamp_on":
            start = self.origin - ( 0, 0, 37 );
            break;
        case "floor01_lamp_01_off":
        case "floor01_lamp_01":
            start = self.origin - ( 0, 0, 40 );
            break;
        case "street_lamp_post_old_iw6":
        case "street_lamp_post_old_iw6_on":
            start = self.origin + ( 0, 0, 240 );
            break;
        default:
            start = self.origin;
            break;
    }

    return start;
}

lightswitch_death_watcher()
{
    self waittill( "death" );

    foreach ( _id_75A9C89CD4A6FB0B in self.circuitparents )
    {
        _id_75A9C89CD4A6FB0B.circuitchildren = scripts\engine\utility::array_remove( _id_75A9C89CD4A6FB0B.circuitchildren, self );
        _id_75A9C89CD4A6FB0B check_lightswitch_cleanup();
    }
}

check_lightswitch_cleanup()
{
    if ( self.lights.size == 0 && self.circuitchildren.size == 0 )
        self delete();
}

is_lightswitch()
{
    if ( isdefined( self.code_classname ) && self.code_classname == "script_origin" )
        return 1;
    else
        return 0;
}

is_light()
{
    if ( isdefined( self.code_classname ) && self.code_classname == "scriptable" )
        return 1;
    else
        return 0;
}
