// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

precache()
{
    if ( !isdefined( level.tripwires ) )
    {
        tripwiremodelprecache();
        spawntripwirelevelstruct();
    }
}

tripwiremodelprecache()
{
    precachemodel( "equipment_wm_tripwire_standard" );
    precachemodel( "equipment_wm_tripwire_standard" );
    precachemodel( "equipment_wm_tripwire_standard" );
    precachemodel( "equipment_wm_tripwire_wall_after" );
    precachemodel( "equipment_wm_tripwire_wall_after_01" );
    precachemodel( "equipment_wm_tripwire_wall_after_02" );
    precachemodel( "equipment_wm_tripwire_wall_after_03" );
    precachemodel( "equipment_wm_tripwire_wall_after_04" );
    precachemodel( "equipment_wm_tripwire_ceiling_after" );
    precachemodel( "equipment_wm_tripwire_floor_after" );
}

precachetrap( type, model, candisarm, _id_FA943467B1592255, _id_AAACC9A9FE710113 )
{
    precache();

    if ( !isdefined( level.tripwires.traptypes[type] ) )
    {
        level.tripwires.traptypes[type] = spawnstruct();
        level.tripwires.traptypes[type].model = model;
        level.tripwires.traptypes[type].triggerfunc = gettriggerfunc( type );
        level.tripwires.traptypes[type]._id_F633144C166D6E62 = _id_E989E64C1996EAC0( type );
        level.tripwires.traptypes[type].candisarm = candisarm;
        level.tripwires.traptypes[type]._id_FA943467B1592255 = _id_FA943467B1592255;
        level.tripwires.traptypes[type]._id_AAACC9A9FE710113 = _id_AAACC9A9FE710113;

        if ( candisarm )
            level.tripwires.traptypes[type].disarmfunc = getdisarmfunc( type );
    }

    precachemodel( model );
}

spawntripwirelevelstruct()
{
    if ( !isdefined( level.tripwires ) )
    {
        level.tripwires = spawnstruct();
        level.tripwires.traptypes = [];
        level.tripwires.tripwires = [];
        level.tripwires.traps = [];
        level.tripwires.dangerzones = [];
        level.tripwires._id_BA1D822DA3E54246 = [];
    }
}

init()
{
    if ( !isdefined( level.tripwires ) )
        return;

    setdvarifuninitialized( "dvar_7C66EFA464D04274", 0 );
    _id_7992E35C1ABECADD = scripts\engine\utility::getstructarray( "tripwire_start", "script_noteworthy" );

    foreach ( startstruct in _id_7992E35C1ABECADD )
    {
        if ( !isdefined( startstruct.target ) )
        {

        }

        _id_0036743E75FE4A30 = scripts\engine\utility::getstructarray( startstruct.target, "targetname" );

        if ( _id_0036743E75FE4A30.size < 1 )
        {

        }

        foreach ( _id_D0697AF2ECA83D63 in _id_0036743E75FE4A30 )
            buildtripwire( startstruct, _id_D0697AF2ECA83D63 );
    }
}

buildtripwire( startstruct, _id_D0697AF2ECA83D63, _id_AA6923872CF5D7BB )
{
    if ( !isdefined( _id_D0697AF2ECA83D63.script_animname ) )
        _id_D0697AF2ECA83D63.script_animname = "wall";

    _id_801C53C0ED06495B = spawntripwire( startstruct, _id_D0697AF2ECA83D63 );
    _id_801C53C0ED06495B inittripwireanims( _id_D0697AF2ECA83D63.script_animname );
    _id_801C53C0ED06495B inittripwirestaticmodel( _id_D0697AF2ECA83D63.script_animname );
    _id_801C53C0ED06495B thread tripwirethink();
    _id_801C53C0ED06495B thread triggertripwirefuncthink( ::triggerfunctripwire );

    if ( isdefined( _id_AA6923872CF5D7BB ) )
        _id_801C53C0ED06495B.targets = scripts\engine\utility::array_add( _id_801C53C0ED06495B.targets, _id_AA6923872CF5D7BB );

    _id_801C53C0ED06495B processtripwiretarget( _id_D0697AF2ECA83D63 );
    level.tripwires.tripwires = scripts\engine\utility::array_add( level.tripwires.tripwires, _id_801C53C0ED06495B );
    return _id_801C53C0ED06495B;
}

processtripwiretarget( _id_D0697AF2ECA83D63 )
{
    msg = "script_struct_tripwire_end at location " + _id_D0697AF2ECA83D63.origin + " has no target.  Target the ent you want the tripwire to trigger, or another script_struct_tripwire_end to continue the tripwire chain";

    if ( !isdefined( _id_D0697AF2ECA83D63.target ) )
        return;

    _id_46A0BF001612E712 = scripts\engine\utility::getstructarray( _id_D0697AF2ECA83D63.target, "targetname" );
    _id_FD5EF62C4BDE358E = getentarray( _id_D0697AF2ECA83D63.target, "targetname" );
    targets = scripts\engine\utility::array_combine( _id_46A0BF001612E712, _id_FD5EF62C4BDE358E );

    if ( targets.size == 0 )
    {

    }

    if ( _id_D0697AF2ECA83D63 shouldfindnavmodifier() )
        self.navmodifier = _func_ C5C9A79BF64E5CB( _id_D0697AF2ECA83D63.target, "targetname" );

    foreach ( target in targets )
    {
        if ( target istripwirestruct() )
            target = buildtripwire( _id_D0697AF2ECA83D63, target, self );
        else if ( target istripwiretrapstruct() )
            target = buildtripwiretrap( target, self );

        self.targets = scripts\engine\utility::array_add( self.targets, target );
    }
}

shouldfindnavmodifier()
{
    if ( isdefined( self.spawnflags ) && self.spawnflags & 1 )
        return 1;
    else
        return 0;
}

_id_FE9AA5559BC83B58()
{
    if ( isdefined( self.spawnflags ) && self.spawnflags & 2 )
        return 1;
    else
        return 0;
}

_id_F48A6C353FF5D960()
{
    if ( isdefined( self.spawnflags ) && self.spawnflags & 4 )
        return 1;
    else
        return 0;
}

istripwirestruct()
{
    if ( isstruct( self ) && isdefined( self.script_noteworthy ) && self.script_noteworthy == "tripwire_end" )
        return 1;
    else
        return 0;
}

istripwiretrapstruct()
{
    if ( isstruct( self ) && isdefined( self.script_noteworthy ) && issubstr( self.script_noteworthy, "tripwire_trap_" ) )
        return 1;
    else
        return 0;
}

hastripwirechild()
{
    foreach ( target in self.targets )
    {
        if ( isdefined( target.istripwire ) && target.istripwire && !isdefined( target.triggered ) )
            return 1;
    }

    return 0;
}

#using_animtree("script_model");

spawntripwire( startstruct, _id_D0697AF2ECA83D63 )
{
    _id_06A3A1033FFC2699 = startstruct.origin - _id_D0697AF2ECA83D63.origin;
    _id_801C53C0ED06495B = spawn( "script_model", _id_D0697AF2ECA83D63.origin );
    _id_801C53C0ED06495B.angles = vectortoangles( _id_06A3A1033FFC2699 );
    _id_801C53C0ED06495B setmodel( gettripwiremodel( _id_D0697AF2ECA83D63.script_animname ) );
    _id_801C53C0ED06495B useanimtree( #animtree );

    if ( isdefined( _id_D0697AF2ECA83D63.angles ) )
    {
        f = anglestoforward( _id_D0697AF2ECA83D63.angles );
        r = anglestoright( _id_801C53C0ED06495B.angles );
        _id_AC0E454AC96A77AC = anglestoup( _id_801C53C0ED06495B.angles );
        _id_801C53C0ED06495B.finalangles = axistoangles( f, r, _id_AC0E454AC96A77AC );
    }

    _id_801C53C0ED06495B.targets = [];
    _id_801C53C0ED06495B.endpoint = startstruct.origin;
    _id_801C53C0ED06495B.length = length( _id_06A3A1033FFC2699 );
    _id_D5B2A103934621F3 = 30;
    _id_C0EE4D060004600B = _id_801C53C0ED06495B.origin + anglestoforward( _id_801C53C0ED06495B.angles ) * ( 0.5 * _id_801C53C0ED06495B.length );

    if ( _id_D0697AF2ECA83D63 _id_FE9AA5559BC83B58() )
        _id_801C53C0ED06495B.trigger = spawn( "trigger_rotatable_radius", _id_801C53C0ED06495B.origin, 7, _id_D5B2A103934621F3, _id_801C53C0ED06495B.length + 10 );
    else
        _id_801C53C0ED06495B.trigger = spawn( "trigger_rotatable_radius", _id_801C53C0ED06495B.origin, 0, _id_D5B2A103934621F3, _id_801C53C0ED06495B.length + 10 );

    _id_801C53C0ED06495B._id_D8EC40FF894A8D81 = _id_D0697AF2ECA83D63 _id_F48A6C353FF5D960();
    _id_B1A278451F610D5A = -1 * anglestoup( _id_801C53C0ED06495B.angles );
    _id_B1A264451F60E15E = anglestoright( _id_801C53C0ED06495B.angles );
    _id_B1A267451F60E7F7 = anglestoforward( _id_801C53C0ED06495B.angles );
    _id_801C53C0ED06495B.trigger.angles = axistoangles( _id_B1A278451F610D5A, _id_B1A264451F60E15E, _id_B1A267451F60E7F7 );
    _id_801C53C0ED06495B.istripwire = 1;

    if ( isdefined( startstruct.script_delay ) )
        _id_801C53C0ED06495B.delay = startstruct.script_delay;
    else
        _id_801C53C0ED06495B.delay = scripts\engine\math::factor_value( 0.1, 0.35, _id_801C53C0ED06495B getnormtripwirelength() );

    return _id_801C53C0ED06495B;
}

inittripwireanims( animname )
{
    if ( !isdefined( animname ) )
    {

    }

    self.triggeranim = gettripwiretriggeranim( animname );
    self.stretchanim = gettripwirestretchanim( animname );
    self setanim( self.triggeranim, 1, 0, 0 );
    self setanim( self.stretchanim, 1, 0, 0 );

    if ( self.length < 10 || self.length > 300 )
    {

    }

    self setanimtime( self.stretchanim, getnormtripwirelength() );
}

inittripwirestaticmodel( animname )
{
    if ( !isdefined( animname ) )
    {

    }

    self.staticmodel = gettripwirestaticmodel( animname );
}

gettripwiretriggersound( _id_D70A4921808926E2 )
{
    if ( _id_D70A4921808926E2 )
        return "tripwire_pop_first";
    else if ( hastripwirechild() )
        return "tripwire_pop";
    else
        return "tripwire_pop_last";
}

tripwirethink()
{
    self endon( "tripwire_trigger" );

    for (;;)
    {
        self.trigger waittill( "trigger", _id_FA8D840338038893 );
        _id_D447527401B9B4A9 = 1;
        _id_D70A4921808926E2 = 1;

        if ( tripwireshouldtrigger( _id_FA8D840338038893 ) )
            self notify( "trigger", _id_FA8D840338038893, _id_D447527401B9B4A9, _id_D70A4921808926E2 );
    }
}

tripwireshouldtrigger( _id_FA8D840338038893 )
{
    _id_C3FBB6661B91750F = scripts\engine\trace::create_contents( 1, 0, 0, 0, 1, 1, 0, 0, 1 );
    trace = scripts\engine\trace::ray_trace_ents( self.origin, self.endpoint, _id_FA8D840338038893, _id_C3FBB6661B91750F );

    if ( trace["fraction"] < 1 )
        return 1;
    else
        return 0;
}

buildtripwiretrap( struct, _id_AA6923872CF5D7BB )
{
    if ( !isdefined( struct.trap ) )
    {
        [[ level.tripwires.traptypes[struct.script_noteworthy]._id_F633144C166D6E62 ]]( struct );
        struct.trap thread triggertrapfuncthink( level.tripwires.traptypes[struct.script_noteworthy].triggerfunc, struct );
        struct.trap thread damagetrapfuncthink();
        struct.trap.candisarm = level.tripwires.traptypes[struct.script_noteworthy].candisarm;
        struct.trap.istrap = 1;

        if ( isdefined( level.tripwires.traptypes[struct.script_noteworthy].disarmfunc ) )
            struct.trap thread disarmfuncthink( level.tripwires.traptypes[struct.script_noteworthy].disarmfunc, struct );

        if ( isdefined( struct.script_parameters ) )
        {
            _id_AF462E92BEAC4F4E = strtok( struct.script_parameters, " " );
            struct.trap.grenadeweaponoverride = _id_AF462E92BEAC4F4E[0];
        }

        struct.trap.parenttripwires = [];
        level.tripwires.traps = scripts\engine\utility::array_add( level.tripwires.traps, struct.trap );
    }

    struct.trap.parenttripwires = scripts\engine\utility::array_add( struct.trap.parenttripwires, _id_AA6923872CF5D7BB );
    return struct.trap;
}

getnormtripwirelength()
{
    return scripts\engine\math::normalize_value( 10, 300, self.length );
}

tripwirehastraps()
{
    foreach ( target in self.targets )
    {
        if ( isdefined( target.istrap ) && !isdefined( target.triggered ) )
            return 1;
    }

    return 0;
}

gettripwiretraps()
{
    traps = [];

    foreach ( target in self.targets )
    {
        if ( isdefined( target.istrap ) && !isdefined( target.triggered ) )
            traps = scripts\engine\utility::array_add( traps, target );
    }

    return traps;
}

triggertripwirefuncthink( triggerfunc )
{
    for (;;)
    {
        self waittill( "trigger", _id_FA8D840338038893, _id_4482194AC72A29C0, _id_D70A4921808926E2 );

        if ( _id_4482194AC72A29C0 )
            break;
        else if ( !tripwirehastraps() )
            break;
    }

    if ( isdefined( _id_FA8D840338038893 ) )
        _id_FA8D840338038893.lasttriptime = gettime();

    self notify( "tripwire_trigger" );
    self.triggered = 1;
    thread trapdangerzoneproc();
    self [[ triggerfunc ]]( _id_FA8D840338038893, _id_4482194AC72A29C0, _id_D70A4921808926E2 );
}

trapdangerzoneproc()
{
    if ( !tripwirehastraps() )
        return;

    traps = gettripwiretraps();

    foreach ( trap in traps )
        trap thread spawntrapdangerzone();
}

spawntrapdangerzone()
{
    dangerzone = spawn( "trigger_radius", self.origin, 0, 300, 300 );
    level.tripwires.dangerzones = scripts\engine\utility::array_add( level.tripwires.dangerzones, dangerzone );
    wait 1;
    level.tripwires.dangerzones = scripts\engine\utility::array_remove( level.tripwires.dangerzones, dangerzone );
    dangerzone delete();
}

playerintripwiredangerzone()
{
    if ( !isdefined( level.tripwires ) )
        return 0;

    foreach ( dangerzone in level.tripwires.dangerzones )
    {
        if ( level.player istouching( dangerzone ) )
            return 1;
    }

    return 0;
}

triggertrapfuncthink( triggerfunc, struct )
{
    for (;;)
    {
        self waittill( "trigger", _id_FA8D840338038893, _id_4482194AC72A29C0 );

        if ( _id_4482194AC72A29C0 )
            break;
    }

    self notify( "trap_trigger" );
    self.triggered = 1;

    if ( isdefined( self.defusehintstruct ) && !isdefined( self.defusehintstruct.defused ) && !level.tripwires.traptypes[struct.script_noteworthy]._id_FA943467B1592255 )
        self.defusehintstruct scripts\sp\player\cursor_hint::remove_cursor_hint();

    self [[ triggerfunc ]]( _id_FA8D840338038893 );
}

gettriggerfunc( type )
{
    switch ( type )
    {
        case "tripwire_trap_c4":
            return ::triggerfuncc4;
        case "tripwire_trap_semtex":
            return ::triggerfuncsemtex;
        case "tripwire_trap_frag":
            return ::triggerfuncfrag;
        case "tripwire_trap_bottle":
            return ::_id_FF147402C60CCD89;
        case "tripwire_trap_weapon":
            return ::_id_69EDFCD6FFCD5561;
        default:
    }
}

_id_E989E64C1996EAC0( type )
{
    switch ( type )
    {
        case "tripwire_trap_c4":
            return ::_id_DC3CD630742E5AE9;
        case "tripwire_trap_semtex":
            return ::_id_DC3CD630742E5AE9;
        case "tripwire_trap_frag":
            return ::_id_DC3CD630742E5AE9;
        case "tripwire_trap_bottle":
            return ::_id_DC3CD630742E5AE9;
        case "tripwire_trap_weapon":
            return ::_id_0AF551BCEDF90478;
        default:
    }
}

_id_DC3CD630742E5AE9( struct )
{
    if ( !isdefined( struct.angles ) )
        angles = ( 0, 0, 0 );
    else
        angles = struct.angles;

    struct.trap = spawn( "script_model", struct.origin );
    struct.trap.angles = angles;
    struct.trap setmodel( level.tripwires.traptypes[struct.script_noteworthy].model );
}

_id_0AF551BCEDF90478( struct )
{
    _id_614411B9142BD852 = getent( struct.target, "targetname" );

    if ( !isdefined( _id_614411B9142BD852.angles ) )
        angles = ( 0, 0, 0 );
    else
        angles = _id_614411B9142BD852.angles;

    struct.trap = spawn( "script_model", _id_614411B9142BD852.origin );
    struct.trap.angles = angles;
    _id_5C3F9357F11D2223 = getweaponbasename( _id_614411B9142BD852 );
    weaponattachments = getweaponattachments( _id_614411B9142BD852 );
    struct.trap._id_06B62DB6EEC868E2 = scripts\sp\utility::make_weapon( _id_5C3F9357F11D2223, weaponattachments );
    struct.trap scripts\common\utility::make_weapon_model( _id_5C3F9357F11D2223, struct.trap._id_06B62DB6EEC868E2.attachments );
    struct.trap.script_ammo_clip = _id_614411B9142BD852.script_ammo_clip;
    struct.trap._id_0E84AD86715D85CC = struct.trap gettagorigin( "tag_flash" );
    struct.trap._id_6A862672391C9895 = struct.trap._id_0E84AD86715D85CC + anglestoforward( struct.trap gettagangles( "tag_flash" ) ) * 100;
    struct.trap.targetname = _id_614411B9142BD852.targetname;
    _id_614411B9142BD852 delete();
}

gettripwiretriggeranim( animname )
{
    switch ( animname )
    {
        case "ceiling":
            return scripts\engine\utility::random( [ %tripwire_trigger_standard_ceiling ] );
        case "floor":
            return scripts\engine\utility::random( [ %tripwire_trigger_standard_floor ] );
        case "wall":
            if ( shouldusewallsize1() )
            {
                return scripts\engine\utility::random( [ %tripwire_trigger_standard_wall_01 ] );
                return;
            }

            if ( shouldusewallsize2() )
            {
                return scripts\engine\utility::random( [ %tripwire_trigger_standard_wall_02 ] );
                return;
            }

            if ( shouldusewallsize3() )
            {
                return scripts\engine\utility::random( [ %tripwire_trigger_standard_wall_03 ] );
                return;
            }

            if ( shouldusewallsize4() )
            {
                return scripts\engine\utility::random( [ %tripwire_trigger_standard_wall_04 ] );
                return;
            }

            return scripts\engine\utility::random( [ %tripwire_trigger_standard_wall ] );
            return;
            return;
            return;
            return;
    }
}

gettripwirestaticmodel( animname )
{
    switch ( animname )
    {
        case "ceiling":
            return "equipment_wm_tripwire_ceiling_after";
        case "floor":
            return "equipment_wm_tripwire_floor_after";
        case "wall":
            if ( shouldusewallsize1() )
            {
                return "equipment_wm_tripwire_wall_after_01";
                return;
            }

            if ( shouldusewallsize2() )
            {
                return "equipment_wm_tripwire_wall_after_02";
                return;
            }

            if ( shouldusewallsize3() )
            {
                return "equipment_wm_tripwire_wall_after_03";
                return;
            }

            if ( shouldusewallsize4() )
            {
                return "equipment_wm_tripwire_wall_after_04";
                return;
            }

            return "equipment_wm_tripwire_wall_after";
            return;
            return;
            return;
            return;
    }
}

gettripwirestretchanim( animname )
{
    switch ( animname )
    {
        case "ceiling":
            return %tripwire_trigger_standard_stretch;
        case "floor":
            return %tripwire_trigger_standard_stretch;
        case "wall":
            return %tripwire_trigger_standard_stretch;
    }
}

gettripwiremodel( animname )
{
    if ( !isdefined( animname ) )
    {

    }

    switch ( animname )
    {
        case "ceiling":
            return "equipment_wm_tripwire_standard";
        case "floor":
            return "equipment_wm_tripwire_standard";
        case "wall":
            return "equipment_wm_tripwire_standard";
    }
}

shouldusewallsize1()
{
    return self.length >= 51 && self.length < 69;
}

shouldusewallsize2()
{
    return self.length >= 69 && self.length < 100;
}

shouldusewallsize3()
{
    return self.length > 10 && self.length < 37;
}

shouldusewallsize4()
{
    return self.length >= 37 && self.length < 51;
}

triggerfunctripwire( _id_FA8D840338038893, _id_D447527401B9B4A9, _id_D70A4921808926E2 )
{
    self.trigger delete();
    self setanimrate( self.triggeranim, 1 );
    self setanim( %tripwire_stretch_overlay, 0, 0.2, 0 );

    if ( !self._id_D8EC40FF894A8D81 )
        thread swaptostaticmodel();

    _id_FFBAD4B01F6FC4CE = gettripwiretriggersound( _id_D70A4921808926E2 );
    thread scripts\engine\utility::play_sound_in_space( _id_FFBAD4B01F6FC4CE, self.origin );

    if ( isdefined( self.finalangles ) && !self._id_D8EC40FF894A8D81 )
        thread rotatetofinalangles();

    if ( _id_FA8D840338038893 == level.player )
    {
        level.player playrumbleonentity( "damage_light" );
        earthquake( 0.1, 0.2, level.player.origin, 2000 );
    }

    wait( self.delay );

    if ( isdefined( self.navmodifier ) )
        destroynavobstacle( self.navmodifier );

    _id_D70A4921808926E2 = 0;

    foreach ( target in self.targets )
        target notify( "trigger", _id_FA8D840338038893, _id_D447527401B9B4A9, _id_D70A4921808926E2 );

    if ( self._id_D8EC40FF894A8D81 )
        self delete();
}

rotatetofinalangles()
{
    self endon( "death" );
    wait 0.25;
    self rotateto( self.finalangles, 0.25 );
}

swaptostaticmodel()
{
    _id_EB5B1F36E255152D = getanimlength( self.triggeranim );
    wait( _id_EB5B1F36E255152D );
    self setmodel( self.staticmodel );
}

triggerfuncsemtex( _id_FA8D840338038893 )
{
    if ( isdefined( self.grenadeweaponoverride ) )
        _id_195927E09B405481 = self.grenadeweaponoverride;
    else
        _id_195927E09B405481 = "semtex_tripwire";

    _id_9F6FB768C9C55D2D = magicgrenademanual( _id_195927E09B405481, self.origin, ( 0, 0, 0 ), 0.25 );
    _id_9F6FB768C9C55D2D.angles = self.angles;
    _id_9F6FB768C9C55D2D.origin = self.origin;
    _id_9F6FB768C9C55D2D linkto( self );
    self hide();
    thread death_hint_think( 60, "MOD_GRENADE_SPLASH" );
    _id_9F6FB768C9C55D2D waittill( "explode" );
    level notify( "tripwire_grenade_explode", self );
    playrumbleonposition( "grenade_rumble", self.origin );
    earthquake( 0.45, 0.7, self.origin, 800 );
    wait 0.1;
    self notify( "cancel_death_hint" );
    self delete();
}

triggerfuncfrag( _id_FA8D840338038893 )
{
    if ( isdefined( self.grenadeweaponoverride ) )
        _id_195927E09B405481 = self.grenadeweaponoverride;
    else
        _id_195927E09B405481 = "frag_tripwire";

    frag = magicgrenademanual( _id_195927E09B405481, self.origin, ( 0, 0, 0 ), 0.25 );
    frag.angles = self.angles;
    frag.origin = self.origin;
    frag linkto( self );
    self hide();
    thread death_hint_think( 60, "MOD_GRENADE_SPLASH" );
    frag waittill( "explode" );
    level notify( "tripwire_grenade_explode", self );
    playrumbleonposition( "grenade_rumble", self.origin );
    earthquake( 0.45, 0.7, self.origin, 800 );
    wait 0.1;
    self notify( "cancel_death_hint" );
    self delete();
}

triggerfuncc4( _id_FA8D840338038893 )
{
    if ( isdefined( self.grenadeweaponoverride ) )
        _id_195927E09B405481 = self.grenadeweaponoverride;
    else
        _id_195927E09B405481 = "c4_sp_tripwire";

    c4 = magicgrenademanual( _id_195927E09B405481, self.origin, ( 0, 0, 0 ), 0.25 );
    c4.angles = self.angles;
    c4.origin = self.origin;
    thread scripts\engine\utility::play_sound_in_space( "minefield_click", self.origin );
    self hide();
    c4 setscriptablepartstate( "plant", "active", 0 );
    c4 waittill( "explode" );
    thread scripts\engine\utility::play_sound_in_space( "iw9_frag_grenade_expl_trans", self.origin );
    playrumbleonposition( "grenade_rumble", self.origin );
    earthquake( 0.45, 0.7, self.origin, 800 );
    self delete();
}

_id_FF147402C60CCD89( _id_FA8D840338038893 )
{
    if ( isdefined( self.grenadeweaponoverride ) )
        _id_195927E09B405481 = self.grenadeweaponoverride;
    else
        _id_195927E09B405481 = "bottle";

    _id_8A967B32BA39402D = magicgrenademanual( _id_195927E09B405481, self.origin, ( 0, 0, 0 ) );
    _id_8A967B32BA39402D.angles = self.angles;
    _id_8A967B32BA39402D.origin = self.origin;
    self delete();
    _id_FA8D840338038893 thread _id_0E429028F9C1C965::_id_4B06C81B27875A14( _id_8A967B32BA39402D );
}

_id_69EDFCD6FFCD5561( _id_FA8D840338038893 )
{
    thread _id_8186812CE74A2A3B();
    magicbullet( self._id_06B62DB6EEC868E2, self._id_0E84AD86715D85CC, self._id_6A862672391C9895 );

    if ( !isdefined( level.stealth ) )
        return;

    if ( scripts\engine\utility::flag( "stealth_spotted" ) )
        radius = _func_61B03C8C194A6733( "spotted", "gunshot" );
    else
        radius = _func_61B03C8C194A6733( "hidden", "gunshot" );

    _id_DA96C8943126A950 = getaiarrayinradius( self.origin, radius );

    foreach ( ai in _id_DA96C8943126A950 )
    {
        if ( !isdefined( ai.stealth ) )
            continue;

        ai aieventlistenerevent( "gunshot", _id_FA8D840338038893, self.origin );
    }
}

_id_8186812CE74A2A3B()
{
    level.player _id_3B64EB40368C1450::set( "trap", "shotgun_overkill", 1 );
    waitframe();

    if ( isalive( level.player ) )
        level.player _id_3B64EB40368C1450::set( "trap", "shotgun_overkill", 0 );
}

death_hint_think( _id_80B69F611222045B, _id_74CF69CE872E454A )
{
    self endon( "cancel_death_hint" );
    level.player waittill( "death", attacker, cause, objweapon, _id_A2731E6D9AF15254, inflictor );

    if ( cause == _id_74CF69CE872E454A )
        scripts\sp\player_death::set_custom_death_quote( _id_80B69F611222045B );
}

damagetrapfuncthink( _id_1BA137D944D10B5A, struct )
{
    self endon( "trap_trigger" );
    self setcandamage( 1 );
    self.health = 99999;

    for (;;)
    {
        self waittill( "damage", damage, attacker, direction_vec, point, type, modelname, tagname, partname, idflags, objweapon, origin, angles, normal, inflictor );

        if ( candamagetrap( attacker, type, damage ) )
            break;

        self.health = self.health + damage;
    }

    self.triggered = 1;

    if ( isdefined( self.defusehintstruct ) && !isdefined( self.defusehintstruct.defused ) && !level.tripwires.traptypes[struct.script_noteworthy]._id_FA943467B1592255 )
        self.defusehintstruct scripts\sp\player\cursor_hint::remove_cursor_hint();

    _id_D447527401B9B4A9 = 0;
    _id_D70A4921808926E2 = 1;

    foreach ( _id_AA6923872CF5D7BB in self.parenttripwires )
        _id_AA6923872CF5D7BB notify( "trigger", attacker, _id_D447527401B9B4A9, _id_D70A4921808926E2 );

    self notify( "trigger", attacker, 1 );
}

candamagetrap( attacker, type, damage )
{
    if ( !isdefined( attacker ) )
        return 0;

    if ( attacker == level.player && ( type == "MOD_GRENADE_SPLASH" || type == "MOD_PROJECTILE_SPLASH" ) && damage > 150 )
    {
        if ( level.player _meth_2583E4BC5ABCA7B5( "achievementBoom" ) != "true" )
            thread trapachievementboom();

        return 1;
    }

    return 0;
}

trapachievementboom()
{
    _id_E97377032A878881 = strtok( level.player _meth_2583E4BC5ABCA7B5( "achievementBoom" ), "," );
    _id_C3E4AD662947B0DB = "" + self.origin[0] + self.origin[1];

    if ( level.player _meth_2583E4BC5ABCA7B5( "achievementBoom" ) == "" )
        level.player _meth_8E232755197D2A79( "achievementBoom", _id_C3E4AD662947B0DB );
    else if ( _id_E97377032A878881.size == 1 && _id_E97377032A878881[0] != _id_C3E4AD662947B0DB )
        level.player _meth_8E232755197D2A79( "achievementBoom", _id_E97377032A878881[0] + "," + _id_C3E4AD662947B0DB );
    else if ( _id_E97377032A878881.size == 2 && ( !isstartstr( _id_E97377032A878881[0], _id_C3E4AD662947B0DB ) && !isstartstr( _id_E97377032A878881[1], _id_C3E4AD662947B0DB ) ) )
    {
        level.player _meth_8E232755197D2A79( "achievementBoom", "true" );
        level thread scripts\sp\utility::giveachievement_wrapper( "boom" );
    }
}

disarmfuncthink( disarmfunc, struct )
{
    if ( !level.tripwires.traptypes[struct.script_noteworthy]._id_FA943467B1592255 )
        self endon( "trap_trigger" );

    if ( isdefined( struct.radius ) )
        _id_7C46CA1BDCC9E980 = struct.radius;
    else
        _id_7C46CA1BDCC9E980 = 64;

    _id_10653A9B07EE3ECE = ( 0, 0, 0 );
    self.defusehintstruct = struct scripts\engine\utility::spawn_script_origin();

    if ( isdefined( level.tripwires.traptypes[struct.script_noteworthy]._id_AAACC9A9FE710113 ) )
        self.defusehintstruct scripts\sp\player\cursor_hint::create_cursor_hint( undefined, _id_10653A9B07EE3ECE, level.tripwires.traptypes[struct.script_noteworthy]._id_AAACC9A9FE710113, 2, _id_7C46CA1BDCC9E980, 64, 0, 0, 0, undefined, "duration_medium" );
    else
        self.defusehintstruct scripts\sp\player\cursor_hint::create_cursor_hint( undefined, _id_10653A9B07EE3ECE, &"SCRIPT/DEFUSE", 2, _id_7C46CA1BDCC9E980, 64, 0, 0, 0, undefined, "duration_medium" );

    if ( isdefined( struct.script_spotlight ) )
        self.defusehintstruct.script_spotlight = struct.script_spotlight;

    self.defusehintstruct waittill( "trigger", _id_FA8D840338038893 );
    level.lasttripwiredefusedtime = gettime();
    self.defusehintstruct.defused = 1;
    self.triggered = 1;
    _id_D447527401B9B4A9 = 0;
    _id_D70A4921808926E2 = 1;

    if ( isdefined( self._id_E8C8FEFE0DFAABDE ) )
        self [[ self._id_E8C8FEFE0DFAABDE ]]();

    self [[ disarmfunc ]]( _id_FA8D840338038893 );

    foreach ( _id_AA6923872CF5D7BB in self.parenttripwires )
        _id_AA6923872CF5D7BB notify( "trigger", _id_FA8D840338038893, _id_D447527401B9B4A9, _id_D70A4921808926E2 );

    if ( isdefined( self._id_068EED041E77BE27 ) )
        self [[ self._id_068EED041E77BE27 ]]();

    self delete();
}

getdisarmfunc( type )
{
    switch ( type )
    {
        case "tripwire_trap_semtex":
            return ::disarmfuncsemtex;
        case "tripwire_trap_frag":
            return ::disarmfuncfrag;
        case "tripwire_trap_bottle":
            return ::_id_A7F90B357BC11AB5;
        case "tripwire_trap_weapon":
            return ::_id_7B932C4705FD44B5;
        default:
    }
}

disarmfuncsemtex( _id_FA8D840338038893 )
{
    _id_FA8D840338038893 _id_FCBF46ACA1DDDE2A( "semtex", "Semtex" );
}

disarmfuncfrag( _id_FA8D840338038893 )
{
    _id_FA8D840338038893 _id_FCBF46ACA1DDDE2A( "frag", "M67 Frag" );
}

_id_A7F90B357BC11AB5( _id_FA8D840338038893 )
{
    _id_FA8D840338038893 _id_FCBF46ACA1DDDE2A( "bottle", "Bottle" );
}

_id_7B932C4705FD44B5( _id_FA8D840338038893 )
{
    if ( !isplayer( _id_FA8D840338038893 ) )
        return;

    if ( _id_FA8D840338038893 scripts\engine\sp\utility::player_has_weapon( self._id_06B62DB6EEC868E2 ) )
    {
        _id_41FE346FD14B2567 = self.script_ammo_clip;
        _id_9EABBD13591B6DFB = _id_FA8D840338038893 getweaponammostock( getweaponbasename( self._id_06B62DB6EEC868E2 ) ) + _id_41FE346FD14B2567;
        _id_FA8D840338038893 setweaponammostock( self._id_06B62DB6EEC868E2, _id_9EABBD13591B6DFB );
        _id_FA8D840338038893 notify( "ammo_pickup", _id_41FE346FD14B2567, getweaponammopoolname( self._id_06B62DB6EEC868E2 ) );
    }
    else
    {
        primaryweapons = _id_FA8D840338038893.primaryweapons;

        foreach ( primaryweapon in primaryweapons )
        {
            if ( scripts\engine\utility::is_equal( primaryweapon.basename, "none" ) )
                primaryweapons = scripts\engine\utility::array_remove( primaryweapons, primaryweapon );
        }

        if ( primaryweapons.size >= 2 )
        {
            if ( weaponcandrop( _id_FA8D840338038893.currentweapon ) )
            {
                _id_B375AF50D8D557A3 = _id_FA8D840338038893 getweaponammostock( _id_FA8D840338038893.currentweapon );
                _id_3B508D61581B138D = _id_FA8D840338038893 getweaponammoclip( _id_FA8D840338038893.currentweapon );
                _id_CD028C8593C6371D = getweaponattachments( _id_FA8D840338038893.currentweapon );
                _id_66DA0A5F69E8DD56 = _id_FA8D840338038893.currentweapon.basename;

                foreach ( _id_443A58B864C0B11C in _id_CD028C8593C6371D )
                    _id_66DA0A5F69E8DD56 = _id_66DA0A5F69E8DD56 + ( "+" + _id_443A58B864C0B11C );

                _id_0D2346943E5CB1F5 = spawn( "weapon_" + _id_66DA0A5F69E8DD56, _id_FA8D840338038893.origin + ( 0, 0, 15 ) );
                _id_0D2346943E5CB1F5 itemweaponsetammo( _id_3B508D61581B138D, _id_B375AF50D8D557A3 );
                _id_FA8D840338038893 notify( "pickup", undefined, _id_0D2346943E5CB1F5 );
            }
            else
                _id_FA8D840338038893 notify( "pickup" );

            _id_FA8D840338038893 takeweapon( _id_FA8D840338038893.currentweapon );
            _id_FA8D840338038893 giveweapon( self._id_06B62DB6EEC868E2 );
            _id_FA8D840338038893 switchtoweapon( self._id_06B62DB6EEC868E2 );
        }
        else
        {
            _id_FA8D840338038893 notify( "pickup" );
            _id_FA8D840338038893 giveweapon( self._id_06B62DB6EEC868E2 );
            _id_FA8D840338038893 switchtoweapon( self._id_06B62DB6EEC868E2 );
        }
    }
}

_id_FCBF46ACA1DDDE2A( _id_F4692D0892428480, _id_A1093166DE09E6B8 )
{
    if ( self == level.player )
    {
        if ( !hasequipmentoftype( _id_F4692D0892428480 ) )
        {
            level.player scripts\engine\sp\utility::give_offhand( _id_F4692D0892428480 );
            level.player setweaponammoclip( _id_F4692D0892428480, 0 );
        }

        if ( scripts\engine\sp\utility::player_has_equipment( _id_F4692D0892428480 ) )
            scripts\sp\loot::lootfuncandnotification( _id_A1093166DE09E6B8 );
    }
}

hasequipmentoftype( _id_DE88CD14114C1E24 )
{
    objweapon = _id_DE88CD14114C1E24;

    if ( isstring( _id_DE88CD14114C1E24 ) )
        objweapon = makeweaponfromstring( _id_DE88CD14114C1E24 );

    _id_70148FF25532A07F = level.player.offhandinventory;

    foreach ( weapon in _id_70148FF25532A07F )
    {
        if ( issameoffhandtype( weapon, objweapon ) )
            return 1;
    }

    return 0;
}

issameoffhandtype( weapon, objweapon )
{
    if ( scripts\sp\equipment\offhands::getweaponoffhandtype( weapon ) == scripts\sp\equipment\offhands::getweaponoffhandtype( objweapon ) )
        return 1;

    return 0;
}
