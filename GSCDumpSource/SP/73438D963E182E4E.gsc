// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

get_load_trigger_classes()
{
    _id_B65F27B4BA84B114 = [];
    _id_B65F27B4BA84B114["trigger_multiple_nobloodpool"] = ::trigger_nobloodpool;
    _id_B65F27B4BA84B114["trigger_multiple_flag_set"] = ::trigger_flag_set;
    _id_B65F27B4BA84B114["trigger_radius_flag_set"] = ::trigger_flag_set;
    _id_B65F27B4BA84B114["trigger_multiple_flag_clear"] = ::trigger_flag_clear;
    _id_B65F27B4BA84B114["trigger_radius_flag_clear"] = ::trigger_flag_clear;
    _id_B65F27B4BA84B114["trigger_multiple_sun_off"] = ::trigger_sun_off;
    _id_B65F27B4BA84B114["trigger_multiple_sun_on"] = ::trigger_sun_on;
    _id_B65F27B4BA84B114["trigger_use_flag_set"] = ::trigger_flag_set;
    _id_B65F27B4BA84B114["trigger_use_flag_clear"] = ::trigger_flag_clear;
    _id_B65F27B4BA84B114["trigger_multiple_flag_set_touching"] = ::trigger_flag_set_touching;
    _id_B65F27B4BA84B114["trigger_multiple_flag_lookat"] = ::trigger_lookat;
    _id_B65F27B4BA84B114["trigger_multiple_flag_looking"] = ::trigger_looking;
    _id_B65F27B4BA84B114["trigger_multiple_no_prone"] = ::trigger_no_prone;
    _id_B65F27B4BA84B114["trigger_multiple_no_crouch_or_prone"] = ::trigger_no_crouch_or_prone;
    _id_B65F27B4BA84B114["trigger_multiple_compass"] = ::trigger_multiple_compass;
    _id_B65F27B4BA84B114["trigger_multiple_fx_volume"] = ::trigger_multiple_fx_volume;
    _id_B65F27B4BA84B114["trigger_multiple_kleenex"] = ::trigger_multiple_kleenex;
    _id_B65F27B4BA84B114["trigger_multiple_light_sunshadow"] = scripts\sp\lights::sun_shadow_trigger;
    _id_B65F27B4BA84B114["trigger_multiple_arbitrary_up"] = ::trigger_arbitrary_up;

    if ( !scripts\sp\starts::is_no_game_start() )
    {
        _id_B65F27B4BA84B114["trigger_multiple_autosave"] = scripts\sp\autosave::trigger_autosave;
        _id_B65F27B4BA84B114["trigger_multiple_autosave_silent"] = scripts\sp\autosave::_id_E96F7708C1775016;
        _id_B65F27B4BA84B114["trigger_multiple_spawn"] = scripts\sp\spawner::trigger_spawner;
        _id_B65F27B4BA84B114["trigger_multiple_spawn_reinforcement"] = scripts\sp\spawner::trigger_spawner_reinforcement;
        _id_B65F27B4BA84B114["trigger_multiple_zone_spawn"] = scripts\sp\spawner::trigger_zone_spawn;
    }

    _id_B65F27B4BA84B114["trigger_multiple_stealth_shadow"] = ::trigger_stealth_shadow;
    _id_B65F27B4BA84B114["trigger_multiple_slide"] = ::trigger_slide;
    _id_B65F27B4BA84B114["trigger_multiple_depthoffield"] = ::trigger_multiple_depthoffield;
    _id_B65F27B4BA84B114["trigger_multiple_tessellationcutoff"] = ::trigger_multiple_tessellationcutoff;
    _id_B65F27B4BA84B114["trigger_damage_player_flag_set"] = ::trigger_damage_player_flag_set;
    _id_B65F27B4BA84B114["trigger_multiple_glass_break"] = ::trigger_glass_break;
    _id_B65F27B4BA84B114["trigger_radius_glass_break"] = ::trigger_glass_break;
    _id_B65F27B4BA84B114["trigger_multiple_friendly_respawn"] = ::trigger_friendly_respawn;
    _id_B65F27B4BA84B114["trigger_multiple_friendly_stop_respawn"] = ::trigger_friendly_stop_respawn;
    _id_B65F27B4BA84B114["trigger_multiple_physics"] = ::trigger_physics;
    _id_B65F27B4BA84B114["trigger_multiple_fx_watersheeting"] = ::trigger_multiple_fx_watersheeting;
    _id_B65F27B4BA84B114["trigger_multiple_fakeactor_move"] = scripts\sp\fakeactor::trigger_fakeactor_move;
    _id_B65F27B4BA84B114["trigger_multiple_fakeactor_node_disable"] = scripts\sp\fakeactor::trigger_fakeactor_node_disable;
    _id_B65F27B4BA84B114["trigger_multiple_fakeactor_node_enable"] = scripts\sp\fakeactor::trigger_fakeactor_node_enable;
    _id_B65F27B4BA84B114["trigger_multiple_fakeactor_node_disablegroup"] = scripts\sp\fakeactor::trigger_fakeactor_node_disablegroup;
    _id_B65F27B4BA84B114["trigger_multiple_fakeactor_node_enablegroup"] = scripts\sp\fakeactor::trigger_fakeactor_node_enablegroup;
    _id_B65F27B4BA84B114["trigger_multiple_fakeactor_node_passthrough"] = scripts\sp\fakeactor::trigger_fakeactor_node_passthrough;
    _id_B65F27B4BA84B114["trigger_multiple_fakeactor_node_lock"] = scripts\sp\fakeactor::trigger_fakeactor_node_lock;
    _id_B65F27B4BA84B114["trigger_multiple_geo_mover"] = scripts\sp\geo_mover::trigger_moveto;
    _id_B65F27B4BA84B114["trigger_multiple_transient"] = ::trigger_multiple_transient;
    _id_B65F27B4BA84B114["trigger_multiple_fire"] = ::trigger_fire;
    _id_B65F27B4BA84B114["trigger_radius_fire"] = ::trigger_fire;
    _id_B65F27B4BA84B114["trigger_multiple_fx_on"] = ::trigger_multiple_fx;
    _id_B65F27B4BA84B114["trigger_multiple_fx_off"] = ::trigger_multiple_fx;
    _id_B65F27B4BA84B114["trigger_multiple_fx_fxzone"] = ::trigger_flag_set_touching;
    _id_B65F27B4BA84B114["trigger_multiple_unlock"] = ::trigger_unlock;
    _id_B65F27B4BA84B114["trigger_multiple_light_on_touching"] = scripts\sp\lights::_id_0ADB0429DE1A7284;
    _id_B65F27B4BA84B114 = scripts\game\sp\trigger::get_load_trigger_classes( _id_B65F27B4BA84B114 );
    return _id_B65F27B4BA84B114;
}

trigger_multiple_fx_watersheeting( trigger )
{
    duration = 3;

    if ( isdefined( trigger.script_duration ) )
        duration = trigger.script_duration;

    for (;;)
    {
        trigger waittill( "trigger", other );

        if ( isplayer( other ) )
        {
            other _meth_5A0996AFDC9FC0FF( 1, duration );
            wait( duration * 0.2 );
        }
    }
}

get_load_trigger_funcs()
{
    _id_6AE9F8DF81EFA2D7 = [];
    _id_6AE9F8DF81EFA2D7["friendly_mgTurret"] = scripts\sp\spawner::friendly_mgturret;

    if ( !scripts\sp\starts::is_no_game_start() )
    {
        _id_6AE9F8DF81EFA2D7["camper_spawner"] = scripts\sp\spawner::camper_trigger_think;
        _id_6AE9F8DF81EFA2D7["flood_spawner"] = scripts\sp\spawner::flood_trigger_think;
        _id_6AE9F8DF81EFA2D7["trigger_spawner"] = scripts\sp\spawner::trigger_spawner;
        _id_6AE9F8DF81EFA2D7["trigger_autosave"] = scripts\sp\autosave::trigger_autosave;
        _id_6AE9F8DF81EFA2D7["trigger_spawngroup"] = ::trigger_spawngroup;
        _id_6AE9F8DF81EFA2D7["trigger_vehicle_spline_spawn"] = ::trigger_vehicle_spline_spawn;
        _id_6AE9F8DF81EFA2D7["trigger_vehicle_spawn"] = scripts\sp\spawner::trigger_spawner;
        _id_6AE9F8DF81EFA2D7["random_spawn"] = scripts\sp\spawner::random_spawn;
        _id_6AE9F8DF81EFA2D7["zone_spawn"] = scripts\sp\spawner::trigger_zone_spawn;
    }

    _id_6AE9F8DF81EFA2D7["autosave_now"] = scripts\sp\autosave::autosave_now_trigger;
    _id_6AE9F8DF81EFA2D7["trigger_autosave_tactical"] = scripts\sp\autosave::trigger_autosave_tactical;
    _id_6AE9F8DF81EFA2D7["trigger_autosave_stealth"] = scripts\sp\autosave::trigger_autosave_stealth;
    _id_6AE9F8DF81EFA2D7["trigger_unlock"] = ::trigger_unlock;
    _id_6AE9F8DF81EFA2D7["trigger_lookat"] = ::trigger_lookat;
    _id_6AE9F8DF81EFA2D7["trigger_looking"] = ::trigger_looking;
    _id_6AE9F8DF81EFA2D7["trigger_cansee"] = ::trigger_cansee;
    _id_6AE9F8DF81EFA2D7["flag_set"] = ::trigger_flag_set;
    _id_6AE9F8DF81EFA2D7["flag_set_player"] = ::trigger_flag_set_player;
    _id_6AE9F8DF81EFA2D7["flag_unset"] = ::trigger_flag_clear;
    _id_6AE9F8DF81EFA2D7["flag_clear"] = ::trigger_flag_clear;
    _id_6AE9F8DF81EFA2D7["friendly_respawn_trigger"] = ::trigger_friendly_respawn;
    _id_6AE9F8DF81EFA2D7["radio_trigger"] = ::trigger_radio;
    _id_6AE9F8DF81EFA2D7["trigger_ignore"] = ::trigger_ignore;
    _id_6AE9F8DF81EFA2D7["trigger_pacifist"] = ::trigger_pacifist;
    _id_6AE9F8DF81EFA2D7["trigger_delete"] = ::trigger_turns_off;
    _id_6AE9F8DF81EFA2D7["trigger_delete_on_touch"] = ::trigger_delete_on_touch;
    _id_6AE9F8DF81EFA2D7["trigger_off"] = ::trigger_turns_off;
    _id_6AE9F8DF81EFA2D7["trigger_outdoor"] = scripts\sp\spawner::outdoor_think;
    _id_6AE9F8DF81EFA2D7["trigger_indoor"] = scripts\sp\spawner::indoor_think;
    _id_6AE9F8DF81EFA2D7["trigger_hint"] = ::trigger_hint;
    _id_6AE9F8DF81EFA2D7["trigger_grenade_at_player"] = ::trigger_throw_grenade_at_player;
    _id_6AE9F8DF81EFA2D7["flag_on_cleared"] = ::trigger_flag_on_cleared;
    _id_6AE9F8DF81EFA2D7["flag_set_touching"] = ::trigger_flag_set_touching;
    _id_6AE9F8DF81EFA2D7["delete_link_chain"] = ::trigger_delete_link_chain;
    _id_6AE9F8DF81EFA2D7["trigger_slide"] = ::trigger_slide;
    _id_6AE9F8DF81EFA2D7["trigger_dooropen"] = ::trigger_dooropen;
    _id_6AE9F8DF81EFA2D7["geo_mover"] = scripts\sp\geo_mover::trigger_moveto;
    _id_6AE9F8DF81EFA2D7["out_of_bounds"] = ::trigger_outofbounds;
    _id_6AE9F8DF81EFA2D7["no_crouch_or_prone"] = ::trigger_no_crouch_or_prone;
    _id_6AE9F8DF81EFA2D7["no_prone"] = ::trigger_no_prone;
    _id_6AE9F8DF81EFA2D7 = scripts\game\sp\trigger::get_load_trigger_funcs( _id_6AE9F8DF81EFA2D7 );
    return _id_6AE9F8DF81EFA2D7;
}

init_script_triggers()
{
    scripts\sp\colors::init_colors();
    scripts\sp\audio::init_audio();
    scripts\engine\utility::array_delete( getentarray( "trigger_multiple_softlanding", "classname" ) );
    _id_B65F27B4BA84B114 = get_load_trigger_classes();
    _id_6AE9F8DF81EFA2D7 = get_load_trigger_funcs();

    foreach ( classname, function in _id_B65F27B4BA84B114 )
    {
        triggers = getentarray( classname, "classname" );
        scripts\engine\utility::array_levelthread( triggers, function );
    }

    _id_AFE80762FE98E15C = getentarray( "trigger_multiple", "classname" );
    trigger_radius = getentarray( "trigger_radius", "classname" );
    triggers = scripts\engine\sp\utility::array_merge( _id_AFE80762FE98E15C, trigger_radius );
    _id_E237463D5EC4C7F5 = getentarray( "trigger_disk", "classname" );
    triggers = scripts\engine\sp\utility::array_merge( triggers, _id_E237463D5EC4C7F5 );
    _id_F9ADF2C84738DA19 = getentarray( "trigger_once", "classname" );
    triggers = scripts\engine\sp\utility::array_merge( triggers, _id_F9ADF2C84738DA19 );

    if ( !scripts\sp\starts::is_no_game_start() )
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < triggers.size; _id_AC0E594AC96AA3A8++ )
        {
            if ( triggers[_id_AC0E594AC96AA3A8].spawnflags & 32 )
                thread scripts\sp\spawner::trigger_spawner( triggers[_id_AC0E594AC96AA3A8] );
        }
    }

    _id_ED07CF11C0353267 = [ "trigger_multiple", "trigger_once", "trigger_use", "trigger_radius", "trigger_lookat", "trigger_disk", "trigger_damage" ];

    foreach ( triggertype in _id_ED07CF11C0353267 )
    {
        triggers = getentarray( triggertype, "code_classname" );

        foreach ( trigger in triggers )
        {
            if ( isdefined( trigger.script_flag_true ) )
                level thread trigger_script_flag_true( trigger );

            if ( isdefined( trigger.script_flag_false ) )
                level thread trigger_script_flag_false( trigger );

            if ( isdefined( trigger.script_autosavename ) || isdefined( trigger.script_autosave ) )
                level thread scripts\sp\autosave::_id_0806EE0C06769F6F( trigger );

            if ( isdefined( trigger.script_mgturretauto ) )
                level thread scripts\sp\mgturret::mgturret_auto( trigger );

            if ( isdefined( trigger.script_killspawner ) )
                level thread scripts\sp\spawner::kill_spawner( trigger );

            if ( isdefined( trigger.script_kill_vehicle_spawner ) )
                level thread scripts\common\vehicle_code::vehicle_triggerkillspawner( trigger );

            if ( isdefined( trigger.script_emptyspawner ) )
                level thread scripts\sp\spawner::empty_spawner( trigger );

            if ( isdefined( trigger.script_prefab_exploder ) )
                trigger.script_exploder = trigger.script_prefab_exploder;

            if ( isdefined( trigger.script_exploder ) )
                level thread exploder_load( trigger );

            if ( isdefined( trigger.script_triggered_playerseek ) )
                level thread trigger_playerseek( trigger );

            if ( isdefined( trigger.script_bctrigger ) )
                level thread trigger_battlechatter( trigger );

            if ( isdefined( trigger.script_trigger_group ) )
                trigger thread trigger_group();

            if ( isdefined( trigger.script_random_killspawner ) )
                level thread scripts\sp\spawner::random_killspawner( trigger );

            if ( isdefined( trigger.targetname ) )
            {
                targetname = trigger.targetname;

                if ( isdefined( _id_6AE9F8DF81EFA2D7[targetname] ) )
                    level thread [[ _id_6AE9F8DF81EFA2D7[targetname] ]]( trigger );
            }
        }
    }
}

trigger_createart_transient( trigger )
{
    _id_05C1A7B0F9067B25 = 1;

    if ( _id_05C1A7B0F9067B25 )
        trigger delete();
}

createart_transient_thread()
{

}

is_transient_createart_enabled()
{
    if ( getdvar( "dvar_284CBC4392371C00" ) != "" )
        return 1;

    if ( getdvarint( "dvar_41ECBB9B60AF8BCF" ) > 0 )
        return 1;

    if ( isdefined( level.start_point ) && level.start_point == "no_game" )
        return 1;

    return 0;
}

trigger_multiple_transient( trigger )
{
    _id_948C52243A58121A = undefined;
    _id_681B77DA216575EF = undefined;
    _id_928EDEEDA9D326CE = undefined;
    _id_A4B124A0C6EE69E9 = 0;
    _id_06D8B9034036E075 = undefined;
    _id_77F428A152A84444 = undefined;

    if ( isdefined( trigger.script_transient ) )
        _id_948C52243A58121A = strtok( trigger.script_transient, " " );

    if ( isdefined( trigger.script_transient_unload ) )
        _id_681B77DA216575EF = strtok( trigger.script_transient_unload, " " );

    if ( isdefined( trigger.script_transient_set ) )
        _id_928EDEEDA9D326CE = trigger.script_transient_set;

    if ( isdefined( trigger.script_transient_unload_set ) )
        _id_A4B124A0C6EE69E9 = 1;

    if ( isdefined( trigger._id_6803211C32618486 ) )
        _id_06D8B9034036E075 = strtok( trigger._id_6803211C32618486, " " );

    if ( isdefined( trigger._id_E6AA8BD6620DC7CF ) )
        _id_77F428A152A84444 = strtok( trigger._id_E6AA8BD6620DC7CF, " " );

    _id_E8231B408C4BBE74 = [];
    _id_E8231B408C4BBE74 = scripts\engine\utility::array_combine( _id_948C52243A58121A, _id_681B77DA216575EF );

    if ( isdefined( trigger.script_transient_set ) )
    {
        names = _func_4B2EEF7AEDA21AB9( trigger.script_transient_set );
        _id_E8231B408C4BBE74 = scripts\engine\utility::array_combine( _id_E8231B408C4BBE74, names );
    }

    foreach ( str in _id_E8231B408C4BBE74 )
    {
        if ( !scripts\engine\utility::flag_exist( str + "_loaded" ) )
            scripts\engine\utility::flag_init( str + "_loaded" );
    }

    for (;;)
    {
        trigger waittill( "trigger" );

        if ( isdefined( _id_06D8B9034036E075 ) )
            scripts\engine\sp\utility::_id_17175F6AF83BAFEA( _id_06D8B9034036E075 );

        if ( isdefined( _id_681B77DA216575EF ) )
            scripts\engine\sp\utility::transient_unload_array( _id_681B77DA216575EF );

        if ( isdefined( _id_948C52243A58121A ) )
            scripts\engine\sp\utility::transient_load_array( _id_948C52243A58121A );

        if ( isdefined( _id_77F428A152A84444 ) )
            scripts\engine\sp\utility::_id_7DCC5E04AB79399B( _id_77F428A152A84444 );

        if ( isdefined( _id_928EDEEDA9D326CE ) )
            _func_702716BC42360FB3( _id_928EDEEDA9D326CE );

        if ( istrue( _id_A4B124A0C6EE69E9 ) )
            _func_702716BC42360FB3( "none" );
    }
}

trigger_damage_player_flag_set( trigger )
{
    flag = trigger scripts\engine\sp\utility::get_trigger_flag();

    if ( !isdefined( level.flag[flag] ) )
        scripts\engine\utility::flag_init( flag );

    for (;;)
    {
        trigger waittill( "trigger", other );

        if ( !isalive( other ) )
            continue;

        if ( !isplayer( other ) )
            continue;

        trigger scripts\engine\utility::script_delay();
        scripts\engine\utility::flag_set( flag, other );
    }
}

trigger_flag_clear( trigger )
{
    flag = trigger scripts\engine\sp\utility::get_trigger_flag();

    if ( !isdefined( level.flag[flag] ) )
        scripts\engine\utility::flag_init( flag );

    for (;;)
    {
        trigger waittill( "trigger" );
        trigger scripts\engine\utility::script_delay();
        scripts\engine\utility::flag_clear( flag );
    }
}

trigger_flag_on_cleared( trigger )
{
    flag = trigger scripts\engine\sp\utility::get_trigger_flag();

    if ( !isdefined( level.flag[flag] ) )
        scripts\engine\utility::flag_init( flag );

    for (;;)
    {
        trigger waittill( "trigger" );
        wait 1;

        if ( trigger found_toucher() )
            continue;

        break;
    }

    scripts\engine\utility::flag_set( flag );
}

found_toucher()
{
    ai = getaiarray( "bad_guys" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = ai[_id_AC0E594AC96AA3A8];

        if ( !isalive( guy ) )
            continue;

        if ( guy istouching( self ) )
            return 1;

        wait 0.1;
    }

    ai = getaiarray( "bad_guys" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = ai[_id_AC0E594AC96AA3A8];

        if ( guy istouching( self ) )
            return 1;
    }

    return 0;
}

trigger_flag_set( trigger )
{
    flag = trigger scripts\engine\sp\utility::get_trigger_flag();

    if ( !isdefined( level.flag[flag] ) )
        scripts\engine\utility::flag_init( flag );

    for (;;)
    {
        trigger waittill( "trigger", other );
        trigger scripts\engine\utility::script_delay();
        scripts\engine\utility::flag_set( flag, other );

        if ( !isdefined( trigger ) )
            break;
    }
}

trigger_friendly_respawn( trigger )
{
    trigger endon( "death" );
    org = getent( trigger.target, "targetname" );
    origin = undefined;

    if ( isdefined( org ) )
    {
        origin = org.origin;
        org delete();
    }
    else
    {
        org = scripts\engine\utility::getstruct( trigger.target, "targetname" );
        origin = org.origin;
    }

    for (;;)
    {
        trigger waittill( "trigger" );
        level.respawn_spawner_org = origin;
        scripts\engine\utility::flag_set( "respawn_friendlies" );
        wait 0.5;
    }
}

trigger_landingzone( trigger )
{
    flag = trigger scripts\engine\sp\utility::get_trigger_flag();

    if ( !isdefined( level.flag[flag] ) )
        scripts\engine\utility::flag_init( flag );

    if ( !isdefined( level.landingzones_active ) )
        level.landingzones_active = [];

    for (;;)
    {
        trigger waittill( "trigger", player );

        if ( isalive( player ) && isdefined( trigger ) && player istouching( trigger ) )
            level.landingzones_active = scripts\engine\utility::array_add( level.landingzones_active, trigger );

        while ( isalive( player ) && isdefined( trigger ) && player istouching( trigger ) )
        {
            if ( !scripts\engine\utility::flag( flag ) )
                thread trigger_landingzone_active( flag );

            wait 0.25;
        }

        level.landingzones_active = scripts\engine\utility::array_remove( level.landingzones_active, trigger );
    }
}

trigger_landingzone_active( flag )
{
    scripts\engine\utility::flag_set( flag );

    for (;;)
    {
        level.landingzones_active = scripts\engine\utility::array_removeundefined( level.landingzones_active );

        if ( level.landingzones_active.size == 0 )
            break;

        wait 0.25;
    }

    scripts\engine\utility::flag_clear( flag );
}

trigger_arbitrary_up( trigger )
{
    trigger setworlduptrigger( 1 );

    if ( isdefined( trigger.target ) )
    {
        parent = getent( trigger.target, "targetname" );
        trigger enablelinkto();
        trigger linkto( parent );
    }
}

trigger_flag_set_touching( trigger )
{
    flag = trigger scripts\engine\sp\utility::get_trigger_flag();

    if ( !isdefined( level.flag[flag] ) )
        scripts\engine\utility::flag_init( flag );

    for (;;)
    {
        trigger waittill( "trigger", other );
        trigger scripts\engine\utility::script_delay();

        if ( isalive( other ) && isdefined( trigger ) && other istouching( trigger ) )
            scripts\engine\utility::flag_set( flag );

        while ( isalive( other ) && isdefined( trigger ) && other istouching( trigger ) )
            wait 0.25;

        scripts\engine\utility::flag_clear( flag );
    }
}

trigger_friendly_stop_respawn( trigger )
{
    for (;;)
    {
        trigger waittill( "trigger" );
        scripts\engine\utility::flag_clear( "respawn_friendlies" );
    }
}

trigger_group()
{
    thread trigger_group_remove();
    level endon( "trigger_group_" + self.script_trigger_group );
    self waittill( "trigger" );
    level notify( "trigger_group_" + self.script_trigger_group, self );
}

trigger_group_remove()
{
    level waittill( "trigger_group_" + self.script_trigger_group, trigger );

    if ( self != trigger )
        self delete();
}

trigger_nobloodpool( trigger )
{
    for (;;)
    {
        trigger waittill( "trigger", other );

        if ( !isalive( other ) )
            continue;

        other.skipbloodpool = 1;
        other thread set_wait_then_clear_skipbloodpool();
    }
}

set_wait_then_clear_skipbloodpool()
{
    self notify( "notify_wait_then_clear_skipBloodPool" );
    self endon( "notify_wait_then_clear_skipBloodPool" );
    self endon( "death" );
    wait 2;
    self.skipbloodpool = undefined;
}

trigger_physics( trigger )
{
    ents = [];
    _id_9E4E1482CB40C9C5 = scripts\engine\utility::getstructarray( trigger.target, "targetname" );
    _id_6C12B33F337303BA = getentarray( trigger.target, "targetname" );

    foreach ( org in _id_6C12B33F337303BA )
    {
        struct = spawnstruct();
        struct.origin = org.origin;
        struct.script_parameters = org.script_parameters;
        struct.script_damage = org.script_damage;
        struct.radius = org.radius;
        _id_9E4E1482CB40C9C5[_id_9E4E1482CB40C9C5.size] = struct;
        org delete();
    }

    trigger.org = _id_9E4E1482CB40C9C5[0].origin;
    trigger waittill( "trigger" );
    trigger scripts\engine\utility::script_delay();

    foreach ( struct in _id_9E4E1482CB40C9C5 )
    {
        radius = struct.radius;
        vel = struct.script_parameters;
        damage = struct.script_damage;

        if ( !isdefined( radius ) )
            radius = 350;

        if ( !isdefined( vel ) )
            vel = 0.25;

        setdvar( "dvar_A83DE6DDDE3FF199", vel );
        vel = getdvarfloat( "dvar_A83DE6DDDE3FF199" );

        if ( isdefined( damage ) )
            radiusdamage( struct.origin, radius, damage, damage * 0.5 );

        physicsexplosionsphere( struct.origin, radius, radius * 0.5, vel );
    }
}

trigger_playerseek( trig )
{
    _id_0CB63D1EC2AC5378 = trig.script_triggered_playerseek;
    trig waittill( "trigger" );
    ai = getaiarray();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !isalive( ai[_id_AC0E594AC96AA3A8] ) )
            continue;

        if ( isdefined( ai[_id_AC0E594AC96AA3A8].script_triggered_playerseek ) && ai[_id_AC0E594AC96AA3A8].script_triggered_playerseek == _id_0CB63D1EC2AC5378 )
        {
            ai[_id_AC0E594AC96AA3A8].goalradius = 800;
            ai[_id_AC0E594AC96AA3A8] setgoalentity( level.player );
            level thread scripts\sp\spawner::delayed_player_seek_think( ai[_id_AC0E594AC96AA3A8] );
        }
    }
}

trigger_script_flag_false( trigger )
{
    _id_67F14F8315CB0F2F = scripts\engine\utility::create_flags_and_return_tokens( trigger.script_flag_false );
    trigger add_tokens_to_trigger_flags( _id_67F14F8315CB0F2F );
    trigger scripts\engine\utility::update_trigger_based_on_flags();
}

trigger_script_flag_true( trigger )
{
    _id_67F14F8315CB0F2F = scripts\engine\utility::create_flags_and_return_tokens( trigger.script_flag_true );
    trigger add_tokens_to_trigger_flags( _id_67F14F8315CB0F2F );
    trigger scripts\engine\utility::update_trigger_based_on_flags();
}

add_tokens_to_trigger_flags( _id_67F14F8315CB0F2F )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_67F14F8315CB0F2F.size; _id_AC0E594AC96AA3A8++ )
    {
        flag = _id_67F14F8315CB0F2F[_id_AC0E594AC96AA3A8];

        if ( !isdefined( level.trigger_flags[flag] ) )
            level.trigger_flags[flag] = [];

        level.trigger_flags[flag][level.trigger_flags[flag].size] = self;
    }
}

trigger_spawngroup( trigger )
{
    waittillframeend;
    spawngroup = trigger.script_spawngroup;

    if ( !isdefined( level.spawn_group ) || !isdefined( level.spawn_groups[spawngroup] ) )
        return;

    trigger waittill( "trigger" );
    spawners = scripts\engine\utility::random( level.spawn_groups[spawngroup] );

    foreach ( _, spawner in spawners )
        spawner scripts\engine\sp\utility::spawn_ai();
}

trigger_sun_off( trigger )
{
    for (;;)
    {
        trigger waittill( "trigger", other );

        if ( getdvarint( "dvar_531180C075033638" ) == 0 )
            continue;

        setsaveddvar( "dvar_531180C075033638", 0 );
    }
}

trigger_sun_on( trigger )
{
    for (;;)
    {
        trigger waittill( "trigger", other );

        if ( getdvarint( "dvar_531180C075033638" ) == 1 )
            continue;

        setsaveddvar( "dvar_531180C075033638", 1 );
    }
}

trigger_vehicle_spline_spawn( trigger )
{
    trigger waittill( "trigger" );
    spawners = getentarray( trigger.target, "targetname" );

    foreach ( spawner in spawners )
    {
        spawner thread scripts\common\vehicle_code::spawn_vehicle_and_attach_to_spline_path( 70 );
        wait 0.05;
    }
}

get_trigger_targs()
{
    triggers = [];
    _id_4351410D12107DF3 = undefined;

    if ( isdefined( self.target ) )
    {
        targets = getentarray( self.target, "targetname" );
        _id_6C12B33F337303BA = [];

        foreach ( target in targets )
        {
            if ( target.classname == "script_origin" || target.classname == "script_origin_mini" )
                _id_6C12B33F337303BA[_id_6C12B33F337303BA.size] = target;

            if ( issubstr( target.classname, "trigger" ) )
                triggers[triggers.size] = target;
        }

        targets = scripts\engine\utility::getstructarray( self.target, "targetname" );

        foreach ( target in targets )
            _id_6C12B33F337303BA[_id_6C12B33F337303BA.size] = target;

        if ( _id_6C12B33F337303BA.size == 1 )
        {
            org = _id_6C12B33F337303BA[0];
            _id_4351410D12107DF3 = org.origin;

            if ( isdefined( org.code_classname ) )
                org delete();
        }
    }

    array = [];
    array["triggers"] = triggers;
    array["target_origin"] = _id_4351410D12107DF3;
    return array;
}

trigger_lookat( trigger )
{
    trigger_lookat_think( trigger, 1 );
}

trigger_looking( trigger )
{
    trigger_lookat_think( trigger, 0 );
}

trigger_lookat_think( trigger, _id_5E9C6D43CE0D5F51 )
{
    _id_6ED26B95A228BF7C = 0.78;

    if ( isdefined( trigger.script_dot ) )
        _id_6ED26B95A228BF7C = trigger.script_dot;

    array = trigger get_trigger_targs();
    triggers = array["triggers"];
    _id_4351410D12107DF3 = array["target_origin"];
    _id_5D4F5564BE97748A = isdefined( trigger.script_flag ) || isdefined( trigger.script_noteworthy );
    flagname = undefined;

    if ( _id_5D4F5564BE97748A )
    {
        flagname = trigger scripts\engine\sp\utility::get_trigger_flag();

        if ( !isdefined( level.flag[flagname] ) )
            scripts\engine\utility::flag_init( flagname );
    }
    else if ( !triggers.size )
    {

    }

    if ( _id_5E9C6D43CE0D5F51 && _id_5D4F5564BE97748A )
        level endon( flagname );

    trigger endon( "death" );
    _id_7761ED00C96773CB = 1;

    if ( isdefined( trigger.script_nosight ) )
        _id_7761ED00C96773CB = trigger.script_nosight;

    duration = 0;

    if ( isdefined( trigger.script_duration ) )
        duration = trigger.script_duration;

    debounce = 0.05;

    if ( _id_7761ED00C96773CB )
        debounce = 0.5;

    for (;;)
    {
        if ( _id_5D4F5564BE97748A )
            scripts\engine\utility::flag_clear( flagname );

        trigger waittill( "trigger", other );
        _id_2052ECA56B4DBF27 = [];
        _id_918A8291DD10F42B = 0;

        while ( other istouching( trigger ) )
        {
            _id_8B333A88CE97BA96 = other geteye();

            if ( _id_7761ED00C96773CB )
            {
                _id_3B986839D9525D92 = 0;

                if ( isdefined( level._id_76BE4C1D6BD7DBD9 ) )
                    _id_3B986839D9525D92 = scripts\engine\trace::ray_trace_passed( _id_8B333A88CE97BA96, _id_4351410D12107DF3, level.player, level._id_76BE4C1D6BD7DBD9 );
                else
                    _id_3B986839D9525D92 = sighttracepassed( _id_8B333A88CE97BA96, _id_4351410D12107DF3, 0, undefined );

                if ( !_id_3B986839D9525D92 )
                {
                    _id_918A8291DD10F42B = 0;

                    if ( _id_5D4F5564BE97748A )
                        scripts\engine\utility::flag_clear( flagname );

                    wait( debounce );
                    continue;
                }
            }

            normal = vectornormalize( _id_4351410D12107DF3 - _id_8B333A88CE97BA96 );
            _id_DEE6508B0BA437C5 = other getplayerangles();
            _id_70222FBC47330166 = anglestoforward( _id_DEE6508B0BA437C5 );
            dot = vectordot( _id_70222FBC47330166, normal );

            if ( dot >= _id_6ED26B95A228BF7C )
            {
                _id_918A8291DD10F42B = _id_918A8291DD10F42B + debounce;

                if ( _id_918A8291DD10F42B >= duration )
                {
                    scripts\engine\utility::array_thread( triggers, scripts\engine\utility::send_notify, "trigger" );

                    if ( _id_5D4F5564BE97748A )
                        scripts\engine\utility::flag_set( flagname, other );

                    if ( _id_5E9C6D43CE0D5F51 )
                        return;

                    wait 2;
                }
            }
            else
            {
                _id_918A8291DD10F42B = 0;

                if ( _id_5D4F5564BE97748A )
                    scripts\engine\utility::flag_clear( flagname );
            }

            wait( debounce );
        }
    }
}

trigger_cansee( trigger )
{
    triggers = [];
    _id_4351410D12107DF3 = undefined;
    array = trigger get_trigger_targs();
    triggers = array["triggers"];
    _id_4351410D12107DF3 = array["target_origin"];
    _id_5D4F5564BE97748A = isdefined( trigger.script_flag ) || isdefined( trigger.script_noteworthy );
    flagname = undefined;

    if ( _id_5D4F5564BE97748A )
    {
        flagname = trigger scripts\engine\sp\utility::get_trigger_flag();

        if ( !isdefined( level.flag[flagname] ) )
            scripts\engine\utility::flag_init( flagname );
    }
    else if ( !triggers.size )
    {

    }

    trigger endon( "death" );
    range = 12;
    offsets = [];
    offsets[offsets.size] = ( 0, 0, 0 );
    offsets[offsets.size] = ( range, 0, 0 );
    offsets[offsets.size] = ( range * -1, 0, 0 );
    offsets[offsets.size] = ( 0, range, 0 );
    offsets[offsets.size] = ( 0, range * -1, 0 );
    offsets[offsets.size] = ( 0, 0, range );

    for (;;)
    {
        if ( _id_5D4F5564BE97748A )
            scripts\engine\utility::flag_clear( flagname );

        trigger waittill( "trigger", other );

        while ( level.player istouching( trigger ) )
        {
            if ( !other cantraceto( _id_4351410D12107DF3, offsets ) )
            {
                if ( _id_5D4F5564BE97748A )
                    scripts\engine\utility::flag_clear( flagname );

                wait 0.1;
                continue;
            }

            if ( _id_5D4F5564BE97748A )
                scripts\engine\utility::flag_set( flagname );

            scripts\engine\utility::array_thread( triggers, scripts\engine\utility::send_notify, "trigger" );
            wait 0.5;
        }
    }
}

cantraceto( _id_4351410D12107DF3, offsets )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < offsets.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( sighttracepassed( self geteye(), _id_4351410D12107DF3 + offsets[_id_AC0E594AC96AA3A8], 1, self ) )
            return 1;
    }

    return 0;
}

trigger_unlock( trigger )
{
    noteworthy = "ent_" + trigger getentitynumber() + "_not_set";

    if ( isdefined( trigger.script_noteworthy ) )
        noteworthy = trigger.script_noteworthy;

    _id_5383307D8828D4FC = getentarray( trigger.target, "targetname" );
    trigger thread trigger_unlock_death( trigger.target );

    for (;;)
    {
        scripts\engine\utility::array_thread( _id_5383307D8828D4FC, scripts\engine\utility::trigger_off );
        trigger waittill( "trigger" );
        scripts\engine\utility::array_thread( _id_5383307D8828D4FC, scripts\engine\utility::trigger_on );
        wait_for_an_unlocked_trigger( _id_5383307D8828D4FC, noteworthy );
        scripts\engine\sp\utility::array_notify( _id_5383307D8828D4FC, "relock" );
    }
}

trigger_unlock_death( target )
{
    self waittill( "death" );
    _id_5383307D8828D4FC = getentarray( target, "targetname" );
    scripts\engine\utility::array_thread( _id_5383307D8828D4FC, scripts\engine\utility::trigger_off );
}

wait_for_an_unlocked_trigger( triggers, noteworthy )
{
    level endon( "unlocked_trigger_hit" + noteworthy );
    ent = spawnstruct();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < triggers.size; _id_AC0E594AC96AA3A8++ )
        triggers[_id_AC0E594AC96AA3A8] thread report_trigger( ent, noteworthy );

    ent waittill( "trigger" );
    level notify( "unlocked_trigger_hit" + noteworthy );
}

report_trigger( ent, noteworthy )
{
    self endon( "relock" );
    level endon( "unlocked_trigger_hit" + noteworthy );
    self waittill( "trigger" );
    ent notify( "trigger" );
}

trigger_battlechatter( trigger )
{
    _id_28B4EEDE82BEB71F = undefined;

    if ( isdefined( trigger.target ) )
    {
        _id_FD5EF62C4BDE358E = getentarray( trigger.target, "targetname" );

        if ( issubstr( _id_FD5EF62C4BDE358E[0].classname, "trigger" ) )
            _id_28B4EEDE82BEB71F = _id_FD5EF62C4BDE358E[0];
    }

    if ( isdefined( _id_28B4EEDE82BEB71F ) )
        _id_28B4EEDE82BEB71F waittill( "trigger", other );
    else
        trigger waittill( "trigger", other );

    soldier = undefined;

    if ( isdefined( _id_28B4EEDE82BEB71F ) )
    {
        if ( other.team != level.player.team && level.player istouching( trigger ) )
            soldier = level.player _id_35DE402EFC5ACFB3::getclosestfriendlyspeaker( "custom" );
        else if ( other.team == level.player.team )
        {
            enemyteam = "axis";

            if ( level.player.team == "axis" )
                enemyteam = "allies";

            _id_1047A207E101159E = _id_35DE402EFC5ACFB3::getspeakers( "custom", enemyteam );
            _id_1047A207E101159E = scripts\engine\utility::get_array_of_farthest( level.player.origin, _id_1047A207E101159E );

            foreach ( guy in _id_1047A207E101159E )
            {
                if ( guy istouching( trigger ) )
                {
                    soldier = guy;

                    if ( battlechatter_dist_check( guy.origin ) )
                        break;
                }
            }
        }
    }
    else if ( isplayer( other ) )
        soldier = other _id_35DE402EFC5ACFB3::getclosestfriendlyspeaker( "custom" );
    else
        soldier = other;

    if ( !isdefined( soldier ) )
        return;

    if ( battlechatter_dist_check() )
        return;

    success = soldier scripts\engine\sp\utility::custom_battlechatter( trigger.script_bctrigger );

    if ( !success )
        level scripts\engine\utility::delaythread( 0.25, ::trigger_battlechatter, trigger );
    else
        trigger notify( "custom_battlechatter_done" );
}

battlechatter_dist_check( origin )
{
    return distancesquared( origin, level.player getorigin() ) <= 262144;
}

trigger_dooropen( trigger )
{
    trigger waittill( "trigger" );
    targets = getentarray( trigger.target, "targetname" );
    rotations = [];
    rotations["left_door"] = -170;
    rotations["right_door"] = 170;

    foreach ( door in targets )
    {
        rotation = rotations[door.script_noteworthy];
        door connectpaths();
        door rotateyaw( rotation, 1, 0, 0.5 );
    }
}

trigger_glass_break( trigger )
{
    _id_7CF165BC68D7F162 = _func_24642E648A544FF2( trigger.target );
    type = "notetrack";

    if ( isdefined( trigger.script_type ) )
        type = "trigger";

    if ( !isdefined( _id_7CF165BC68D7F162 ) || _id_7CF165BC68D7F162.size == 0 )
        return;

    other = undefined;

    for (;;)
    {
        if ( type == "notetrack" )
            level waittill( "glass_break", other );
        else
            trigger waittill( "trigger", other );

        if ( other istouching( trigger ) )
        {
            _id_3CEA6DC5D5A77765 = other.origin;
            waitframe();
            _id_3CEA6AC5D5A770CC = other.origin;
            direction = undefined;

            if ( _id_3CEA6DC5D5A77765 != _id_3CEA6AC5D5A770CC )
                direction = _id_3CEA6AC5D5A770CC - _id_3CEA6DC5D5A77765;

            if ( isdefined( direction ) )
            {
                foreach ( glass in _id_7CF165BC68D7F162 )
                    _func_1DE9891B45EB41F7( glass, direction );

                break;
            }
            else
            {
                foreach ( glass in _id_7CF165BC68D7F162 )
                    _func_1DE9891B45EB41F7( glass );

                break;
            }
        }
    }

    trigger delete();
}

trigger_delete_link_chain( trigger )
{
    trigger waittill( "trigger" );
    targets = trigger get_script_linkto_targets();
    scripts\engine\utility::array_thread( targets, ::delete_links_then_self );
}

get_script_linkto_targets()
{
    targets = [];

    if ( !isdefined( self.script_linkto ) )
        return targets;

    _id_67F14F8315CB0F2F = strtok( self.script_linkto, " " );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_67F14F8315CB0F2F.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_E921CD2D3FB29B66 = _id_67F14F8315CB0F2F[_id_AC0E594AC96AA3A8];
        target = getent( _id_E921CD2D3FB29B66, "script_linkname" );

        if ( isdefined( target ) )
            targets[targets.size] = target;
    }

    return targets;
}

delete_links_then_self()
{
    targets = get_script_linkto_targets();
    scripts\engine\utility::array_thread( targets, ::delete_links_then_self );
    self delete();
}

trigger_throw_grenade_at_player( trigger )
{
    trigger endon( "death" );
    trigger waittill( "trigger" );
    scripts\sp\utility::throwgrenadeatplayerasap();
}

trigger_hint( trigger )
{
    if ( !isdefined( level.displayed_hints ) )
        level.displayed_hints = [];

    waittillframeend;
    hint = trigger.script_hint;
    trigger waittill( "trigger", other );

    if ( isdefined( level.displayed_hints[hint] ) )
        return;

    level.displayed_hints[hint] = 1;
    other scripts\engine\sp\utility::display_hint( hint );
}

trigger_delete_on_touch( trigger )
{
    for (;;)
    {
        trigger waittill( "trigger", other );

        if ( isdefined( other ) )
            other delete();
    }
}

trigger_turns_off( trigger )
{
    trigger waittill( "trigger" );
    trigger scripts\engine\utility::trigger_off();

    if ( !isdefined( trigger.script_linkto ) )
        return;

    _id_67F14F8315CB0F2F = strtok( trigger.script_linkto, " " );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_67F14F8315CB0F2F.size; _id_AC0E594AC96AA3A8++ )
        scripts\engine\utility::array_thread( getentarray( _id_67F14F8315CB0F2F[_id_AC0E594AC96AA3A8], "script_linkname" ), scripts\engine\utility::trigger_off );
}

trigger_ignore( trigger )
{
    thread trigger_runs_function_on_touch( trigger, scripts\engine\sp\utility::set_ignoreme, scripts\engine\sp\utility::get_ignoreme );
}

trigger_pacifist( trigger )
{
    thread trigger_runs_function_on_touch( trigger, scripts\engine\sp\utility::set_pacifist, scripts\engine\sp\utility::get_pacifist );
}

trigger_runs_function_on_touch( trigger, set_func, _id_6A4AD94DB7F006E2 )
{
    for (;;)
    {
        trigger waittill( "trigger", other );

        if ( !isalive( other ) )
            continue;

        if ( other [[ _id_6A4AD94DB7F006E2 ]]() )
            continue;

        other thread touched_trigger_runs_func( trigger, set_func );
    }
}

touched_trigger_runs_func( trigger, set_func )
{
    self endon( "death" );
    self.ignoreme = 1;
    [[ set_func ]]( 1 );
    self.ignoretriggers = 1;
    wait 1;
    self.ignoretriggers = 0;

    while ( self istouching( trigger ) )
        wait 1;

    [[ set_func ]]( 0 );
}

trigger_radio( trigger )
{
    trigger waittill( "trigger" );
    scripts\engine\sp\utility::radio_dialogue( trigger.script_noteworthy );
}

trigger_flag_set_player( trigger )
{
    flag = trigger scripts\engine\sp\utility::get_trigger_flag();

    if ( !isdefined( level.flag[flag] ) )
        scripts\engine\utility::flag_init( flag );

    for (;;)
    {
        trigger waittill( "trigger", other );

        if ( !isplayer( other ) )
            continue;

        trigger scripts\engine\utility::script_delay();
        scripts\engine\utility::flag_set( flag );
    }
}

trigger_multiple_depthoffield( trigger )
{
    waittillframeend;

    for (;;)
    {
        trigger waittill( "trigger", player );
        _id_E0AF59BA48C8CB09 = trigger.script_dof_near_start;
        _id_FF6B46DA0D04E078 = trigger.script_dof_near_end;
        nearblur = trigger.script_dof_near_blur;
        _id_2FE3DC2F1289D072 = trigger.script_dof_far_start;
        _id_7A6976D1E774FE57 = trigger.script_dof_far_end;
        farblur = trigger.script_dof_far_blur;
        time = trigger.script_delay;

        if ( _id_E0AF59BA48C8CB09 != level.dof["base"]["goal"]["nearStart"] || _id_FF6B46DA0D04E078 != level.dof["base"]["goal"]["nearEnd"] || nearblur != level.dof["base"]["goal"]["nearBlur"] || _id_2FE3DC2F1289D072 != level.dof["base"]["goal"]["farStart"] || _id_7A6976D1E774FE57 != level.dof["base"]["goal"]["farEnd"] || farblur != level.dof["base"]["goal"]["farBlur"] )
        {
            scripts\sp\art::dof_set_base( _id_E0AF59BA48C8CB09, _id_FF6B46DA0D04E078, nearblur, _id_2FE3DC2F1289D072, _id_7A6976D1E774FE57, farblur, time );
            wait( time );
            continue;
        }

        waitframe();
    }
}

trigger_multiple_tessellationcutoff( trigger )
{
    waittillframeend;

    for (;;)
    {
        trigger waittill( "trigger", player );
        _id_92AD28AEDE5BF05E = trigger.script_tess_distance;
        _id_61A97DF702385989 = trigger.script_tess_falloff;
        time = trigger.script_delay;

        if ( _id_92AD28AEDE5BF05E != level.tess.cutoff_distance_goal || _id_61A97DF702385989 != level.tess.cutoff_falloff_goal )
        {
            _id_92AD28AEDE5BF05E = max( 0, _id_92AD28AEDE5BF05E );
            _id_92AD28AEDE5BF05E = min( 10000, _id_92AD28AEDE5BF05E );
            _id_61A97DF702385989 = max( 0, _id_61A97DF702385989 );
            _id_61A97DF702385989 = min( 10000, _id_61A97DF702385989 );
            scripts\sp\art::tess_set_goal( _id_92AD28AEDE5BF05E, _id_61A97DF702385989, time );
            continue;
        }

        waitframe();
    }
}

trigger_slide( trigger )
{
    setdvarifuninitialized( "dvar_4C481F7E26AFB913", 0 );
    trigger.script_gesture = scripts\engine\utility::_id_53C4C53197386572( trigger.script_gesture, "ges_slide" );

    for (;;)
    {
        trigger waittill( "trigger", player );
        player thread slidetriggerplayerthink( trigger );
    }
}

slidetriggerplayerthink( trig )
{
    if ( isdefined( self.vehicle ) )
        return;

    if ( scripts\engine\sp\utility::issliding() || self isjumping() )
        return;

    if ( isdefined( self.player_view ) )
        return;

    if ( scripts\engine\utility::ent_flag_exist( "is_sliding" ) && scripts\engine\utility::ent_flag( "is_sliding" ) )
        return;

    self endon( "death" );

    if ( soundexists( "SCN_cliffhanger_player_hillslide" ) )
        self playsound( "SCN_cliffhanger_player_hillslide" );

    accel = undefined;

    if ( isdefined( trig.script_accel ) )
        accel = trig.script_accel;

    self endon( "cancel_sliding" );

    if ( getdvarint( "dvar_4C481F7E26AFB913" ) > 0 )
        thread scripts\engine\sp\utility::beginslidinglegacy();
    else
        thread scripts\engine\sp\utility::beginsliding( undefined, accel, undefined, trig.script_gesture );

    for (;;)
    {
        if ( !self istouching( trig ) )
            break;

        wait 0.05;
    }

    if ( isdefined( level.end_slide_delay ) )
        wait( level.end_slide_delay );

    if ( getdvarint( "dvar_4C481F7E26AFB913" ) > 0 )
        scripts\engine\sp\utility::endslidinglegacy();
    else
        scripts\engine\sp\utility::endsliding( trig.script_stance, trig.script_damage, trig.script_gesture );
}

trigger_multiple_fx_volume( trigger )
{
    dummy = spawn( "script_origin", ( 0, 0, 0 ) );
    trigger.fx = [];

    foreach ( _id_F8AC4F4543B492E8 in level.createfxent )
        assign_fx_to_trigger( _id_F8AC4F4543B492E8, trigger, dummy );

    dummy delete();

    if ( !isdefined( trigger.target ) )
        return;

    targets = getentarray( trigger.target, "targetname" );
    trigger.fx_on = 1;

    foreach ( target in targets )
    {
        switch ( target.classname )
        {
            case "trigger_multiple_fx_volume_on":
                target thread trigger_multiple_fx_trigger_on_think( trigger );
                break;
            case "trigger_multiple_fx_volume_off":
                target thread trigger_multiple_fx_trigger_off_think( trigger );
                break;
            default:
                break;
        }
    }
}

trigger_multiple_fx_trigger_on_think( volume )
{
    for (;;)
    {
        self waittill( "trigger" );

        if ( !volume.fx_on )
            scripts\engine\utility::array_thread( volume.fx, scripts\engine\sp\utility::restarteffect );

        wait 1;
    }
}

trigger_multiple_fx_trigger_off_think( volume )
{
    for (;;)
    {
        self waittill( "trigger" );

        if ( volume.fx_on )
            scripts\engine\utility::array_thread( volume.fx, scripts\engine\utility::pauseeffect );

        wait 1;
    }
}

assign_fx_to_trigger( _id_F8AC4F4543B492E8, trigger, dummy )
{
    if ( isdefined( _id_F8AC4F4543B492E8.v["soundalias"] ) && _id_F8AC4F4543B492E8.v["soundalias"] != "nil" )
    {
        if ( !isdefined( _id_F8AC4F4543B492E8.v["stopable"] ) || !_id_F8AC4F4543B492E8.v["stopable"] )
            return;
    }

    dummy.origin = _id_F8AC4F4543B492E8.v["origin"];

    if ( dummy istouching( trigger ) )
        trigger.fx[trigger.fx.size] = _id_F8AC4F4543B492E8;
}

trigger_multiple_compass( trigger )
{
    minimap_image = trigger.script_parameters;

    if ( !isdefined( level.minimap_image ) )
        level.minimap_image = "";

    for (;;)
    {
        trigger waittill( "trigger" );

        if ( level.minimap_image != minimap_image )
            scripts\sp\compass::setupminimap( minimap_image );
    }
}

trigger_no_crouch_or_prone( trigger )
{
    scripts\engine\utility::array_thread( level.players, ::no_crouch_or_prone_think_for_player, trigger );
}

no_crouch_or_prone_think_for_player( trigger )
{
    for (;;)
    {
        trigger waittill( "trigger", player );

        if ( !isdefined( player ) )
            continue;

        if ( player != self )
            continue;

        while ( player istouching( trigger ) )
        {
            player allowprone( 0 );
            player allowcrouch( 0 );
            wait 0.05;
        }

        player allowprone( 1 );
        player allowcrouch( 1 );
    }
}

trigger_no_prone( trigger )
{
    scripts\engine\utility::array_thread( level.players, ::no_prone_for_player, trigger );
}

no_prone_for_player( trigger )
{
    for (;;)
    {
        trigger waittill( "trigger", player );

        if ( !isdefined( player ) )
            continue;

        if ( player != self )
            continue;

        while ( player istouching( trigger ) )
        {
            player allowprone( 0 );
            wait 0.05;
        }

        player allowprone( 1 );
    }
}

exploder_load( trigger )
{
    level endon( "killexplodertridgers" + trigger.script_exploder );
    trigger waittill( "trigger" );

    if ( isdefined( trigger.script_chance ) && randomfloat( 1 ) > trigger.script_chance )
    {
        if ( !trigger scripts\engine\utility::script_delay() )
            wait 4;

        level thread exploder_load( trigger );
        return;
    }

    if ( !trigger scripts\engine\utility::script_delay() && isdefined( trigger.script_exploder_delay ) )
        wait( trigger.script_exploder_delay );

    scripts\engine\utility::exploder( trigger.script_exploder );
    level notify( "killexplodertridgers" + trigger.script_exploder );
}

trigger_multiple_kleenex( trigger )
{
    if ( getdvarint( "dvar_D37F514F864BF0D6" ) != 1 )
        return;

    trigger waittill( "trigger" );
    scripts\engine\sp\utility::kleenex_popup();
}

trigger_stealth_shadow( trigger )
{
    trigger endon( "death" );
    _id_AA4265EEB046CBBF = "stealth_in_shadow";

    if ( !isdefined( level.trigger_stealth_shadow ) )
        level.trigger_stealth_shadow = [];

    level.trigger_stealth_shadow[level.trigger_stealth_shadow.size] = trigger;
    _func_B0D778FB201FEA8D( trigger );

    for (;;)
    {
        trigger waittill( "trigger", other );

        if ( !other scripts\engine\utility::ent_flag_exist( _id_AA4265EEB046CBBF ) )
            continue;

        if ( other scripts\engine\utility::ent_flag( _id_AA4265EEB046CBBF ) )
            continue;

        other thread in_shadow_thread( trigger, _id_AA4265EEB046CBBF );
    }
}

in_shadow_thread( volume, _id_AA4265EEB046CBBF )
{
    self endon( "death" );
    scripts\stealth\player::_id_E403865F115834A8( _id_AA4265EEB046CBBF );

    while ( isdefined( volume ) && self istouching( volume ) )
        wait 0.05;

    scripts\stealth\player::_id_03718FC282393305( _id_AA4265EEB046CBBF );
}

trigger_fire( trigger )
{
    trigger endon( "death" );

    if ( isdefined( trigger.trigger_fire_endon ) )
        trigger endon( trigger.trigger_fire_endon );

    _id_D9DD8A25F0A92BA6 = 1;
    _id_A2AA212298820431 = 5;
    _id_039B044B5C4BFBE5 = 0;

    if ( !isdefined( trigger.script_delay_min ) && !isdefined( trigger.script_delay_max ) )
    {
        trigger.script_delay_min = 0.05;
        trigger.script_delay_max = 0.05;
    }

    if ( trigger.script_delay_min == trigger.script_delay_max )
        trigger.script_delay = trigger.script_delay_min;

    if ( isdefined( trigger.script_damage ) )
        _id_D9DD8A25F0A92BA6 = trigger.script_damage;

    for (;;)
    {
        trigger waittill( "trigger", victim );
        center_point = trigger.origin;

        if ( isplayer( victim ) )
        {
            _id_039B044B5C4BFBE5 = _id_D9DD8A25F0A92BA6;

            if ( trigger.classname == "trigger_radius_fire" )
            {
                if ( isdefined( trigger.script_radius ) )
                {
                    if ( distance2dsquared( victim.origin, trigger.origin ) <= squared( trigger.script_radius ) )
                    {
                        if ( isdefined( trigger.script_multiplier ) && isnumber( trigger.script_multiplier ) )
                            _id_A2AA212298820431 = trigger.script_multiplier;

                        _id_039B044B5C4BFBE5 = _id_039B044B5C4BFBE5 * _id_A2AA212298820431;
                    }
                }
            }
            else if ( isdefined( trigger.target ) )
            {
                struct = scripts\engine\utility::getstruct( trigger.target, "targetname" );
                center_point = struct.origin;

                if ( isdefined( struct.script_radius ) )
                {
                    if ( distance2dsquared( victim.origin, struct.origin ) <= squared( struct.script_radius ) )
                    {
                        if ( isdefined( trigger.script_multiplier ) && isnumber( trigger.script_multiplier ) )
                            _id_A2AA212298820431 = trigger.script_multiplier;

                        _id_039B044B5C4BFBE5 = _id_039B044B5C4BFBE5 * _id_A2AA212298820431;
                    }
                }
            }
        }

        if ( istrue( victim.damageshield ) )
            continue;

        victim scripts\sp\utility::do_damage( _id_039B044B5C4BFBE5, center_point, undefined, undefined, "MOD_FIRE" );

        if ( _id_039B044B5C4BFBE5 < 6 )
            victim playrumbleonentity( "damage_light" );
        else
            victim playrumbleonentity( "damage_heavy" );

        trigger scripts\engine\utility::script_delay();
    }
}

trigger_multiple_fx( trigger )
{
    if ( trigger.classname == "trigger_multiple_fx_on" )
    {
        _id_E3108E412AFB3811 = scripts\common\fx::struct_fx_inactive;
        func = scripts\common\fx::play_struct_fx;
    }
    else
    {
        _id_E3108E412AFB3811 = scripts\common\fx::struct_fx_active;
        func = scripts\common\fx::stop_struct_fx;
    }

    for (;;)
    {
        trigger waittill( "trigger" );

        foreach ( struct in level.struct_fx )
        {
            if ( [[ _id_E3108E412AFB3811 ]]( struct ) && scripts\engine\utility::is_equal( struct.script_fxgroup, trigger.script_fxgroup ) )
                [[ func ]]( struct );
        }
    }
}

trigger_outofbounds( trigger )
{
    trigger.failtrigger = getent( trigger.target, "targetname" );
    trigger endon( "death" );
    _id_56C37E91E8B85F4D = trigger.spawnflags & 16;

    for (;;)
    {
        trigger waittill( "trigger", other );
        trigger.failtrigger childthread outofbounds_failthread();
        setomnvar( "ui_out_of_bounds_countdown", 1 );

        if ( _id_56C37E91E8B85F4D && isdefined( other.driver ) && other.driver == level.player )
            ent = other;
        else
            ent = level.player;

        while ( ent istouching( trigger ) )
            waitframe();

        setomnvar( "ui_out_of_bounds_countdown", 0 );
        trigger.failtrigger notify( "stop_failthread" );
    }
}

outofbounds_failthread()
{
    self endon( "death" );
    self endon( "stop_failthread" );
    self waittill( "trigger" );
    setomnvar( "ui_out_of_bounds_countdown", 0 );
    scripts\sp\player_death::set_custom_death_quote( 29 );
    scripts\sp\utility::missionfailedwrapper();
}
