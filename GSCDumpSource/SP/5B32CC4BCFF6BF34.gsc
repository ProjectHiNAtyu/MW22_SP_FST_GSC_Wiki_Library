// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_destructible()
{
    if ( !isdefined( self.script_destructible ) )
        return;

    self.destructible = 1;
    _id_B69AA7B59AA1F9E2 = scripts\engine\utility::get_linked_ents();
    mainpiece = undefined;

    foreach ( ent in _id_B69AA7B59AA1F9E2 )
    {
        if ( ent.code_classname == "script_brushmodel" && !ent scripts\sp\door_internal::is_clip_nosight() )
        {
            mainpiece = ent;
            break;
        }
        else if ( isdefined( ent.script_index ) && ent.script_index == 0 )
        {
            mainpiece = ent;
            break;
        }
    }

    _id_66736075638834DF = get_door_dependencies();
    mainpiece.parent = self;
    mainpiece linkto( self );
    mainpiece.script_index = 0;
    ents = mainpiece scripts\engine\utility::get_linked_ents();
    ents[ents.size] = mainpiece;
    mainpiece.allpieces = ents;
    self.pieces = scripts\engine\sp\utility::array_index_by_script_index( ents );

    foreach ( ent in self.pieces )
    {
        ent.health = 200;
        ent setcandamage( 1 );
        ent linkto( self );
        ent.destroyed = 0;
        ent.mainpiece = mainpiece;

        if ( isdefined( ent.script_type ) )
        {
            if ( ent.script_type == "handle" )
            {
                ent.hashandle = 1;

                if ( isdefined( self.no_handle_ajar ) )
                    ent.ignore_bullets = self.no_handle_ajar;
            }
        }

        if ( ent.script_index == 0 )
        {
            ent.start_health = 2200;
            ent.health = ent.start_health;
        }
        else if ( ent.script_index > 0 )
        {
            ent.depends = [];

            foreach ( _id_AC443591A15057C5 in _id_66736075638834DF[ent.script_index] )
            {
                foreach ( temp in self.pieces )
                {
                    if ( temp.script_index == _id_AC443591A15057C5 )
                    {
                        ent.depends[ent.depends.size] = temp;

                        if ( !isdefined( temp.updatedepends ) )
                            temp.updatedepends = [];

                        temp.updatedepends[temp.updatedepends.size] = ent;
                    }
                }
            }
        }

        ent thread destructible_piece_thread();
    }
}

get_door_dependencies()
{
    if ( isdefined( self.script_type ) )
        _id_66736075638834DF = get_model_dependencies();
    else
        _id_66736075638834DF = get_brushmodel_dependencies();

    return _id_66736075638834DF;
}

get_model_dependencies()
{
    _id_66736075638834DF = [];
    _id_66736075638834DF[1] = [ 0, 2, 3, 6 ];
    _id_66736075638834DF[2] = [ 1, 3, 6, 7, 8 ];
    _id_66736075638834DF[3] = [ 2, 4, 8 ];
    _id_66736075638834DF[4] = [ 3, 8, 9 ];
    _id_66736075638834DF[5] = [ 0, 1, 6, 10 ];
    _id_66736075638834DF[6] = [ 1, 2, 5, 7, 11, 12 ];
    _id_66736075638834DF[7] = [ 2, 6, 8, 12 ];
    _id_66736075638834DF[8] = [ 2, 3, 4, 7, 9, 12, 13, 14 ];
    _id_66736075638834DF[9] = [ 4, 8, 14, 21 ];
    _id_66736075638834DF[10] = [ 0, 5, 11, 15 ];
    _id_66736075638834DF[11] = [ 6, 10, 12, 16, 17 ];
    _id_66736075638834DF[12] = [ 6, 7, 8, 11, 13, 18, 19 ];
    _id_66736075638834DF[13] = [ 8, 12, 14, 19, 20 ];
    _id_66736075638834DF[14] = [ 8, 9, 13, 20, 21 ];
    _id_66736075638834DF[15] = [ 0, 10, 22, 17 ];
    _id_66736075638834DF[16] = [ 11, 15, 16, 22, 23 ];
    _id_66736075638834DF[17] = [ 11, 12, 16, 18, 23 ];
    _id_66736075638834DF[18] = [ 12, 13, 17, 19, 23, 24 ];
    _id_66736075638834DF[19] = [ 13, 18, 20, 24 ];
    _id_66736075638834DF[20] = [ 13, 14, 19, 21, 24, 25 ];
    _id_66736075638834DF[21] = [ 14, 20, 25 ];
    _id_66736075638834DF[22] = [ 0, 15, 16, 23 ];
    _id_66736075638834DF[23] = [ 18, 19, 20, 22, 25 ];
    _id_66736075638834DF[24] = [ 18, 20, 23, 25 ];
    _id_66736075638834DF[25] = [ 20, 21, 24 ];
    return _id_66736075638834DF;
}

get_brushmodel_dependencies()
{
    _id_66736075638834DF = [];
    _id_66736075638834DF[1] = [ 0, 2, 3, 6 ];
    _id_66736075638834DF[2] = [ 1, 3, 6, 7, 8 ];
    _id_66736075638834DF[3] = [ 2, 4, 8 ];
    _id_66736075638834DF[4] = [ 3, 8, 9 ];
    _id_66736075638834DF[5] = [ 0, 1, 6, 10 ];
    _id_66736075638834DF[6] = [ 1, 2, 5, 7, 11, 12 ];
    _id_66736075638834DF[7] = [ 2, 6, 8, 12 ];
    _id_66736075638834DF[8] = [ 2, 3, 4, 7, 9, 12, 13, 14 ];
    _id_66736075638834DF[9] = [ 4, 8, 14, 22 ];
    _id_66736075638834DF[10] = [ 0, 5, 11, 15 ];
    _id_66736075638834DF[11] = [ 6, 10, 12, 16, 17 ];
    _id_66736075638834DF[12] = [ 6, 7, 8, 11, 13, 18, 19 ];
    _id_66736075638834DF[13] = [ 8, 12, 14, 20, 21 ];
    _id_66736075638834DF[14] = [ 8, 9, 13, 21, 22 ];
    _id_66736075638834DF[15] = [ 0, 10, 23, 17 ];
    _id_66736075638834DF[16] = [ 11, 15, 16, 23 ];
    _id_66736075638834DF[17] = [ 11, 16, 18, 24 ];
    _id_66736075638834DF[18] = [ 12, 17, 19, 24 ];
    _id_66736075638834DF[19] = [ 12, 18, 20, 24 ];
    _id_66736075638834DF[20] = [ 13, 19, 21, 25 ];
    _id_66736075638834DF[21] = [ 13, 14, 20, 22, 25 ];
    _id_66736075638834DF[22] = [ 14, 9, 21, 26 ];
    _id_66736075638834DF[23] = [ 0, 15, 16, 24 ];
    _id_66736075638834DF[24] = [ 16, 17, 18, 19, 23, 25 ];
    _id_66736075638834DF[25] = [ 19, 20, 21, 24, 26 ];
    _id_66736075638834DF[26] = [ 21, 22, 25 ];
    return _id_66736075638834DF;
}

is_heirarchy_good()
{
    self.heirarchytest = 1;

    foreach ( ent in self.depends )
    {
        if ( ent.script_index == 0 )
        {
            self notify( "stop_heirarchy_line" );
            return 1;
        }

        if ( !isdefined( ent.heirarchytest ) && !ent.destroyed )
        {
            if ( ent is_heirarchy_good() )
            {
                self notify( "stop_heirarchy_line" );
                return 1;
            }
        }
    }

    self notify( "stop_heirarchy_line" );
    return 0;
}

doline( pos, _id_5CAA769F456AE615 )
{
    self endon( "stop_heirarchy_line" );

    for (;;)
        waitframe();
}

update_depends( dir )
{
    if ( isdefined( self.depends ) )
        self.depends = scripts\engine\utility::array_removeundefined( self.depends );

    self.updatedepends = scripts\engine\utility::array_removeundefined( self.updatedepends );

    foreach ( ent in self.updatedepends )
    {
        if ( ent.destroyed )
            continue;

        ent.depends = scripts\engine\utility::array_remove( ent.depends, self );

        if ( !ent is_heirarchy_good() )
        {
            self.updatedepends = scripts\engine\utility::array_remove( self.updatedepends, ent );

            if ( isdefined( self.doordamagemod ) )
                ent notify( "damage", 90, undefined, dir, self.doordamagepoint, self.doordamagemod );
            else
                ent notify( "damage", 90, undefined, dir, undefined, "scripted" );
        }

        foreach ( ent in self.mainpiece.allpieces )
            ent.heirarchytest = undefined;
    }
}

destructible_ignore_attacker( attacker )
{
    if ( !isdefined( attacker ) )
        return 0;

    if ( isdefined( self.mainpiece.parent.damgeignoreents ) )
    {
        foreach ( ent in self.mainpiece.parent.damgeignoreents )
        {
            if ( !isdefined( ent ) )
                continue;

            if ( attacker == ent )
                return 1;
        }
    }

    return 0;
}

destructible_piece_thread()
{
    point = undefined;
    dir = undefined;
    mod = undefined;
    attacker = undefined;

    while ( self.health > 0 )
    {
        self waittill( "damage", dmg, attacker, dir, point, mod, modelname, tagname, partname, idflags, _id_A7408DBFED49F3F9 );

        if ( destructible_ignore_attacker( attacker ) || should_ignore_mod( mod ) )
        {
            self.maxhealth = 0;
            self.health = self.health + dmg;
            continue;
        }

        dmg = door_damage_scale( dmg, _id_A7408DBFED49F3F9, mod );

        if ( isdefined( mod ) )
        {
            if ( mod == "MOD_GRENADE" || mod == "MOD_GRENADE_SPLASH" )
            {
                self.doordamagemod = mod;
                self.doordamagepoint = point;

                if ( self.script_index == 0 && dmg > 100 )
                    break;

                dir = vectornormalize( self.origin - point );

                if ( self.health < dmg * 3 )
                    break;
            }
            else if ( mod == "MOD_MELEE" )
            {
                self.maxhealth = 0;
                self.health = self.health + dmg;
            }
            else if ( mod == "scripted" )
                break;
        }

        if ( self.script_index > 0 )
        {
            origin = self.origin + dir * -1 * 100;

            if ( !isdefined( mod ) )
            {
                if ( !isdefined( attacker ) )
                    self.mainpiece scripts\sp\utility::do_damage( dmg, origin );
                else
                    self.mainpiece scripts\sp\utility::do_damage( dmg, origin, attacker, attacker );
            }
            else if ( mod != "scripted" )
                self.mainpiece scripts\sp\utility::do_damage( dmg, origin, attacker, attacker, mod );
        }

        self.doordamagepoint = undefined;
        self.doordamagemod = undefined;
    }

    if ( isdefined( self.mainpiece ) )
        mainpiece = self.mainpiece;
    else
        mainpiece = self;

    if ( isdefined( mainpiece.parent.clip_nosight ) )
        mainpiece.parent.clip_nosight delete();

    mainpiece.parent notify( "piece_destroyed", self );
    self.destroyed = 1;
    update_depends( dir );

    if ( !isdefined( point ) )
        point = self.origin;

    angles = vectortoangles( self.mainpiece.parent.forward );
    right = anglestoright( angles );
    normal = vectornormalize( point - self.origin );
    dot = vectordot( right, normal );
    dir = right;

    if ( dot > 0 )
        dir = dir * -1;

    self unlink();

    if ( isdefined( attacker ) && isplayer( attacker ) )
        dir = dir * -1;

    if ( istrue( self.hashandle ) && !istrue( self.ignore_bullets ) )
    {
        struct = spawnstruct();
        struct.origin = self.origin + dir * 32;
        self.mainpiece.parent.ajar_opener = struct;
        scripts\sp\door::unlock_door();
        self.mainpiece.parent.nohint = 1;
        self.mainpiece.parent notify( "first_interact" );
        self.mainpiece.parent.open_struct scripts\sp\door::remove_open_interact_hint();
    }

    if ( self.code_classname == "script_brushmodel" )
    {
        power = randomintrange( 300, 600 );
        self.origin = self.origin + dir * 3;
    }
    else
        power = randomintrange( 50, 150 );

    waitframe();

    if ( isdefined( mod ) && mod == "explosive" )
        self physicslaunchclient( point, dir * power * 0.5 );
    else
        self physicslaunchclient( point, dir * power );

    if ( self.script_index == 0 )
    {
        self.parent notify( "unusable" );
        self.parent scripts\sp\door::clear_navobstacle();
        level.interactive_doors.ents = scripts\engine\utility::array_remove( level.interactive_doors.ents, self.parent );

        if ( isdefined( self.parent.pivot_ent ) )
            self.parent.pivot_ent delete();

        if ( isdefined( self.parent.clip_nosight ) )
            self.parent.clip_nosight delete();

        self.parent delete();
    }

    wait 5;
    self delete();
}

door_damage_scale( dmg, _id_A7408DBFED49F3F9, mod )
{
    if ( isdefined( _id_A7408DBFED49F3F9 ) )
    {
        if ( mod != "MOD_MELEE" )
        {
            if ( _id_A7408DBFED49F3F9.classname == "spread" )
                dmg = dmg * 1.36;
        }
    }

    return int( dmg );
}

should_ignore_mod( mod )
{
    if ( istrue( self.ignore_bullets ) )
    {
        switch ( mod )
        {
            case "MOD_PISTOL_BULLET":
            case "MOD_RIFLE_BULLET":
                return 1;
            default:
                return 0;
        }
    }
    else if ( istrue( self.mainpiece.parent.ignore_grenades ) )
    {
        switch ( mod )
        {
            case "MOD_GRENADE":
            case "MOD_GRENADE_SPLASH":
            case "MOD_EXPLOSIVE":
                return 1;
            default:
                return 0;
        }
    }

    return 0;
}

scriptable_init()
{
    self.destructible = 1;
    scriptable_inherit_parameters();
    scriptable_parts_init();

    if ( self.classname == "scriptable_door_wooden_hollow_rl_01" && !isdefined( self.script_health ) )
        self.script_health = 90;

    self enablelinkto();
    self.health = 200000;
    self.start_health = 200000;
    self setcandamage( 1 );
    thread scriptable_damage_thread();
    scripts\sp\door_internal::init_door_internal();
    level scripts\sp\door_internal::global_door_threads();
}

scriptable_inherit_parameters()
{
    _id_9E4E1482CB40C9C5 = scripts\engine\utility::get_linked_structs();
    struct = _id_9E4E1482CB40C9C5[0];
    self.script_parameters = struct.script_parameters;
    self.script_max_left_angle = struct.script_max_left_angle;
    self.script_max_right_angle = struct.script_max_right_angle;
    self.script_side = struct.script_side;
    self.script_health = struct.script_health;
    self.script_spawn_open_yaw = struct.script_spawn_open_yaw;
}

scriptable_parts_init()
{
    self.parts = [];
    self.part_main = scriptable_part_struct( 0 );
    self.part_main.health = 2200;
    self.parts_map = get_scriptable_map();

    for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < 31; _id_AC0E594AC96AA3A8++ )
    {
        struct = scriptable_part_struct( _id_AC0E594AC96AA3A8 );

        if ( _id_AC0E594AC96AA3A8 == 1 )
            struct.ishandle = 1;

        self.parts[struct.full_partname] = struct;
    }
}

scriptable_part_struct( partindex, partname )
{
    part = spawnstruct();
    part.health = scripts\engine\utility::_id_53C4C53197386572( self.script_health, 150 );
    part.partindex = partindex;

    if ( partindex > 0 )
        part.full_partname = scriptable_get_full_partname( partindex );

    part.destroyed = 0;
    return part;
}

scriptable_damage_thread()
{
    self.ispristine = 1;

    for (;;)
    {
        self waittill( "damage", dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 );
        scriptable_damage_proc( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 );
    }
}

scriptable_damage_proc( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 )
{
    if ( !self.ispristine )
    {
        if ( is_explosive_damage( mod, _id_A7408DBFED49F3F9 ) )
            scriptable_explosive_damage( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 );
        else if ( isdefined( mod ) && mod == "MOD_MELEE" )
            thread _id_65DBBA8723B53CBF( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 );
        else
            thread scriptable_gun_damage( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 );
    }
    else
    {
        self.ispristine = 0;
        self setscriptablepartstate( "main", "initial_dmg" );

        if ( isdefined( self.fndamage ) )
            [[ self.fndamage ]]( 0, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 );

        if ( is_explosive_damage( mod, _id_A7408DBFED49F3F9 ) )
            thread scriptable_explosive_damage_framedelay( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 );
    }
}

is_explosive_damage( mod, weaponobj )
{
    if ( isdefined( weaponobj ) )
    {
        if ( weaponobj.basename == "flash" || weaponobj.basename == "molotov" )
            return 0;
    }

    if ( !isdefined( mod ) )
        return 0;

    switch ( mod )
    {
        case "MOD_GRENADE":
        case "MOD_GRENADE_SPLASH":
        case "MOD_EXPLOSIVE":
            return 1;
    }

    return 0;
}

scriptable_explosive_damage_framedelay( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 )
{
    waitframe();
    scriptable_explosive_damage( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 );
}

scriptable_explosive_damage( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 )
{
    if ( scriptable_ignore_attacker( attacker ) || scriptable_ignore_mod( mod ) )
    {
        self.maxhealth = 0;
        self.health = self.health + dmg;
        return;
    }

    _id_50F783A5617F8940 = [];

    foreach ( part in self.parts )
        _id_50F783A5617F8940[_id_50F783A5617F8940.size] = part;

    _id_50F783A5617F8940 = scripts\engine\utility::array_randomize( _id_50F783A5617F8940 );
    scale = dmg / 400;
    count = int( _id_50F783A5617F8940.size * scale );

    foreach ( part in _id_50F783A5617F8940 )
    {
        if ( !isdefined( part.full_partname ) )
            continue;

        if ( part.destroyed )
            continue;

        thread scriptable_gun_damage( 90, undefined, dir, point, "scripted", undefined, undefined, part.full_partname );
        count--;

        if ( count == 0 )
            break;
    }
}

scriptable_gun_damage( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 )
{
    if ( scriptable_ignore_attacker( attacker ) || scriptable_ignore_mod( mod ) )
    {
        self.maxhealth = 0;
        self.health = self.health + dmg;
    }
    else
    {
        dmg = door_damage_scale( dmg, _id_A7408DBFED49F3F9, mod );

        if ( isdefined( self.fndamage ) )
            [[ self.fndamage ]]( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 );

        if ( isdefined( self.parts[full_partname] ) )
        {
            part = self.parts[full_partname];
            part.health = part.health - dmg;

            if ( part.health <= 0 || mod == "scripted" )
            {
                scriptable_destroy_part( part.partindex, part, mod, dir, point, attacker );
                return;
            }
        }
    }
}

_id_65DBBA8723B53CBF( dmg, attacker, dir, point, mod, modelname, tagname, full_partname, idflags, _id_A7408DBFED49F3F9 )
{
    if ( scriptable_ignore_attacker( attacker ) || scriptable_ignore_mod( mod ) )
    {
        self.maxhealth = 0;
        self.health = self.health + dmg;
        return;
    }

    if ( !self.locked )
        return;

    if ( !isplayer( attacker ) )
        return;

    _id_8B39E5984DA1FFAF = attacker geteye() + anglestoforward( attacker getplayerangles() ) * 50;
    trace = scripts\engine\trace::ray_trace( attacker geteye(), _id_8B39E5984DA1FFAF, attacker );
    point = trace["position"];
    array = [];
    _id_636C8575D7A7768B = squared( 15 );

    foreach ( part in self.parts )
    {
        if ( part.health <= 0 )
            continue;

        part._id_B096B0A9EB1D2EEB = distancesquared( point, self gettagorigin( part.full_partname ) );

        if ( part._id_B096B0A9EB1D2EEB > _id_636C8575D7A7768B )
            continue;

        if ( array.size == 0 )
        {
            array[0] = part;
            continue;
        }

        _id_0BCBC0FA499511BD = 0;

        for ( _id_AC0E5C4AC96AAA41 = 0; _id_AC0E5C4AC96AAA41 < array.size; _id_AC0E5C4AC96AAA41++ )
        {
            if ( array[_id_AC0E5C4AC96AAA41]._id_B096B0A9EB1D2EEB > part._id_B096B0A9EB1D2EEB )
            {
                array = scripts\engine\utility::array_insert( array, part, _id_AC0E5C4AC96AAA41 );
                _id_0BCBC0FA499511BD = 1;
                break;
            }
        }

        if ( !_id_0BCBC0FA499511BD )
            array[array.size] = part;
    }

    if ( array.size == 0 )
        return;

    foreach ( part in array )
        part._id_B096B0A9EB1D2EEB = undefined;

    _id_25CF95F1AC9BC2E5 = array[0];
    _id_25CF95F1AC9BC2E5.health = _id_25CF95F1AC9BC2E5.health - dmg;

    if ( _id_25CF95F1AC9BC2E5.health <= 0 )
        scriptable_destroy_part( _id_25CF95F1AC9BC2E5.partindex, _id_25CF95F1AC9BC2E5, mod, dir, point, attacker );
}

scriptable_ignore_attacker( attacker )
{
    if ( !isdefined( attacker ) )
        return 0;

    if ( isdefined( self.damgeignoreents ) )
    {
        foreach ( ent in self.damgeignoreents )
        {
            if ( !isdefined( ent ) )
                continue;

            if ( attacker == ent )
                return 1;
        }
    }

    return 0;
}

scriptable_ignore_mod( mod )
{
    if ( istrue( self.ignore_bullets ) )
    {
        switch ( mod )
        {
            case "MOD_PISTOL_BULLET":
            case "MOD_RIFLE_BULLET":
                return 1;
            default:
                return 0;
        }
    }
    else if ( istrue( self.ignore_grenades ) )
    {
        switch ( mod )
        {
            case "MOD_GRENADE":
            case "MOD_GRENADE_SPLASH":
            case "MOD_EXPLOSIVE":
                return 1;
            default:
                return 0;
        }
    }

    return 0;
}

get_fx_direction( point )
{
    if ( !isdefined( point ) )
        return 1;

    angles = vectortoangles( self.forward );
    right = anglestoright( angles );
    normal = vectornormalize( point - self.origin );
    dot = vectordot( right, normal );
    self._id_F2507A3C1B546D7C = self._id_6CD0321E55F60F8F;

    if ( dot > 0 )
        return 1;
    else
        return 0;
}

scriptable_destroy_part( partname, part, mod, dir, point, attacker )
{
    partname = "" + partname;
    part.destroyed = 1;

    if ( !self getscriptablehaspart( partname ) )
        return;

    scriptable_update_map( part.partindex, partname, point );

    if ( isdefined( self.clip_nosight ) )
        self.clip_nosight delete();

    _id_88D52927C4F90CD5 = get_fx_direction( point );

    if ( isplayer( attacker ) )
        _id_88D52927C4F90CD5 = !_id_88D52927C4F90CD5;

    if ( _id_88D52927C4F90CD5 )
        self setscriptablepartstate( partname, "hide" );
    else
        self setscriptablepartstate( partname, "hide_minus" );

    if ( isdefined( part.ishandle ) )
    {
        struct = spawnstruct();
        struct.origin = self.origin + dir * -32;
        self.ajar_opener = struct;
        self.nohint = 1;
        self notify( "first_interact" );
        self.open_struct scripts\sp\door::remove_open_interact_hint();
    }

    if ( self.locked )
    {
        _id_9D2E5AB82BC374FF = 0;

        foreach ( part in self.parts )
        {
            if ( part.health <= 0 )
                _id_9D2E5AB82BC374FF++;
        }

        if ( _id_9D2E5AB82BC374FF / self.parts.size > 0.6 )
            scripts\sp\door::unlock_door();
    }
}

scriptable_update_map( partindex, dir, point )
{
    if ( !isdefined( self.parts_map[partindex] ) )
        return;

    _id_38FB4C2922D89DA1 = self.parts_map[partindex];

    foreach ( index in _id_38FB4C2922D89DA1 )
    {
        if ( index == 0 )
            continue;

        part = scriptable_get_part_by_index( index );

        if ( part.destroyed )
            continue;

        if ( !is_scriptable_heirarchy_good( part ) )
        {
            if ( isdefined( self.doordamagemod ) )
                thread scriptable_gun_damage( 90, undefined, dir, self.doordamagepoint, self.doordamagemod, undefined, undefined, part.full_partname );
            else
                thread scriptable_gun_damage( 90, undefined, dir, point, "scripted", undefined, undefined, part.full_partname );
        }

        foreach ( _id_AC0E424AC96A7113 in self.parts )
            _id_AC0E424AC96A7113.heirarchytest = undefined;
    }
}

scriptable_get_full_partname( num )
{
    if ( num < 10 )
        _id_2CD7DA4D7CCA2FB5 = "0" + num;
    else
        _id_2CD7DA4D7CCA2FB5 = num;

    return "tag_geo_frag_a_0" + _id_2CD7DA4D7CCA2FB5;
}

scriptable_get_part_by_index( index )
{
    return self.parts[scriptable_get_full_partname( index )];
}

is_scriptable_heirarchy_good( part )
{
    part.heirarchytest = 1;

    if ( !isdefined( self.parts_map[part.partindex] ) )
        return 1;

    _id_38FB4C2922D89DA1 = self.parts_map[part.partindex];

    foreach ( index in _id_38FB4C2922D89DA1 )
    {
        if ( index == 0 )
            return 1;

        _id_76FF9965733EE123 = scriptable_get_part_by_index( index );

        if ( !isdefined( _id_76FF9965733EE123.heirarchytest ) && !_id_76FF9965733EE123.destroyed )
        {
            if ( is_scriptable_heirarchy_good( _id_76FF9965733EE123 ) )
                return 1;
        }
    }

    return 0;
}

get_scriptable_map()
{
    _id_365929041E4386ED = [];

    if ( self.classname == "scriptable_door_wooden_hollow_rl_01" )
        return get_prototype_scriptable_map();

    _id_365929041E4386ED[1] = [ 0, 11 ];
    _id_365929041E4386ED[2] = [ 0, 6 ];
    _id_365929041E4386ED[3] = [ 0, 6 ];
    _id_365929041E4386ED[4] = [ 0, 6 ];
    _id_365929041E4386ED[5] = [ 0, 6, 9 ];
    _id_365929041E4386ED[6] = [ 2, 3, 5, 7, 9 ];
    _id_365929041E4386ED[7] = [ 0, 6, 10 ];
    _id_365929041E4386ED[8] = [ 0, 9, 12 ];
    _id_365929041E4386ED[9] = [ 5, 6, 7, 12, 10 ];
    _id_365929041E4386ED[10] = [ 7, 9, 11, 12, 13 ];
    _id_365929041E4386ED[11] = [ 0, 1, 10, 13 ];
    _id_365929041E4386ED[12] = [ 8, 9, 10, 13, 15, 16 ];
    _id_365929041E4386ED[13] = [ 10, 11, 12, 14, 17, 18 ];
    _id_365929041E4386ED[14] = [ 0, 13 ];
    _id_365929041E4386ED[15] = [ 0, 12, 16, 19 ];
    _id_365929041E4386ED[16] = [ 12, 15, 17, 19, 20 ];
    _id_365929041E4386ED[17] = [ 13, 16, 20, 18 ];
    _id_365929041E4386ED[18] = [ 0, 13, 17, 20 ];
    _id_365929041E4386ED[19] = [ 15, 16, 20, 21, 22 ];
    _id_365929041E4386ED[20] = [ 16, 17, 18, 19, 23, 24 ];
    _id_365929041E4386ED[21] = [ 0, 19, 12, 22 ];
    _id_365929041E4386ED[22] = [ 19, 21, 23, 25, 26 ];
    _id_365929041E4386ED[23] = [ 20, 22, 24, 26, 27, 30 ];
    _id_365929041E4386ED[24] = [ 0, 20, 23 ];
    _id_365929041E4386ED[25] = [ 0, 22, 26 ];
    _id_365929041E4386ED[26] = [ 22, 23, 25, 28, 29, 30 ];
    _id_365929041E4386ED[27] = [ 0, 23 ];
    _id_365929041E4386ED[28] = [ 0, 26 ];
    _id_365929041E4386ED[29] = [ 0, 26 ];
    _id_365929041E4386ED[30] = [ 0, 23, 26 ];
    return _id_365929041E4386ED;
}

get_prototype_scriptable_map()
{
    _id_365929041E4386ED = [];
    _id_365929041E4386ED[1] = [ 0, 13, 18 ];
    _id_365929041E4386ED[2] = [ 0, 6 ];
    _id_365929041E4386ED[3] = [ 0, 6 ];
    _id_365929041E4386ED[4] = [ 0, 6 ];
    _id_365929041E4386ED[5] = [ 0, 6, 9 ];
    _id_365929041E4386ED[6] = [ 2, 3, 5, 7, 9 ];
    _id_365929041E4386ED[7] = [ 0, 6, 10 ];
    _id_365929041E4386ED[8] = [ 0, 9, 12 ];
    _id_365929041E4386ED[9] = [ 5, 6, 7, 8, 12, 10 ];
    _id_365929041E4386ED[10] = [ 7, 9, 11, 12, 13, 14 ];
    _id_365929041E4386ED[11] = [ 0, 10 ];
    _id_365929041E4386ED[12] = [ 8, 9, 10, 13, 15, 16 ];
    _id_365929041E4386ED[13] = [ 10, 11, 12, 14, 17, 18 ];
    _id_365929041E4386ED[14] = [ 0, 10, 13 ];
    _id_365929041E4386ED[15] = [ 0, 12, 16, 19 ];
    _id_365929041E4386ED[16] = [ 12, 15, 17, 19, 20 ];
    _id_365929041E4386ED[17] = [ 13, 16, 20, 18 ];
    _id_365929041E4386ED[18] = [ 0, 13, 17, 20 ];
    _id_365929041E4386ED[19] = [ 15, 16, 20, 21, 22 ];
    _id_365929041E4386ED[20] = [ 16, 17, 18, 19, 23, 24 ];
    _id_365929041E4386ED[21] = [ 0, 19, 12, 22 ];
    _id_365929041E4386ED[22] = [ 19, 21, 23, 25, 26 ];
    _id_365929041E4386ED[23] = [ 20, 22, 24, 26, 27, 30 ];
    _id_365929041E4386ED[24] = [ 0, 20, 23 ];
    _id_365929041E4386ED[25] = [ 0, 22, 26 ];
    _id_365929041E4386ED[26] = [ 22, 23, 25, 28, 29, 30 ];
    _id_365929041E4386ED[27] = [ 0, 23 ];
    _id_365929041E4386ED[28] = [ 0, 26 ];
    _id_365929041E4386ED[29] = [ 0, 26 ];
    _id_365929041E4386ED[30] = [ 0, 23, 26 ];
    return _id_365929041E4386ED;
}

scriptable_get_part_origin( part )
{
    if ( part.partindex == 0 )
        tag = "tag_origin";
    else
        tag = part.full_partname;

    return self gettagorigin( tag );
}
