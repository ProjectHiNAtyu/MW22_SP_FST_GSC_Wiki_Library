// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_DF57C8A03E293DB4( anime )
{
    _id_1F6148CE8D91365C = [];

    foreach ( animname, array in level.scr_anim )
    {
        foreach ( scene, xanim in array )
        {
            if ( scene == anime )
                _id_1F6148CE8D91365C[_id_1F6148CE8D91365C.size] = animname;
        }
    }

    return _id_1F6148CE8D91365C;
}

get_tag_list( model )
{
    array = [];
    _id_E729413199FE30D3 = getnumparts( model );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_E729413199FE30D3; _id_AC0E594AC96AA3A8++ )
        array[array.size] = getpartname( model, _id_AC0E594AC96AA3A8 );

    return array;
}

get_all_closest_living( org, ai_array, _id_21B0311D64CADFA2, _id_49E7756D07C8048D )
{
    _id_6D906809844C7CB1 = [];

    if ( ai_array.size < 1 )
        return _id_6D906809844C7CB1;

    if ( !isdefined( _id_49E7756D07C8048D ) )
        _id_49E7756D07C8048D = 0;

    _id_21B0311D64CADFA2 = squared( _id_21B0311D64CADFA2 );

    foreach ( guy in ai_array )
    {
        if ( !isalive( guy ) || !isdefined( guy ) || !_id_49E7756D07C8048D && guy scripts\engine\utility::doinglongdeath() )
            continue;

        if ( distancesquared( guy.origin, org ) <= _id_21B0311D64CADFA2 )
            _id_6D906809844C7CB1[_id_6D906809844C7CB1.size] = guy;
    }

    return _id_6D906809844C7CB1;
}

mph_travel_time( speed, dist )
{
    speed = speed * 17.6;
    time = dist / speed;
    return time;
}

set_hudoutline( _id_2844A7466F2D6436, _id_AA202F6993CCC074, _id_E1558AF7C1CD5AD2 )
{
    num = undefined;
    _id_2844A7466F2D6436 = tolower( _id_2844A7466F2D6436 );
    array["friendly"] = "outline_nodepth_cyan";
    array["enemy"] = "outline_nodepth_red";
    array["objective"] = "outline_nodepth_orange";
    array["neutral"] = "outline_nodepth_white";
    num = array[_id_2844A7466F2D6436];
    hudoutline_enable_new( array[_id_2844A7466F2D6436] );
}

convert_to_time_string( timer, _id_9930AB910B718A51 )
{
    string = "";

    if ( timer < 0 )
        string = string + "-";

    timer = scripts\engine\math::round_float( timer, 1, 0 );
    _id_87272C6F95DD558E = timer * 100;
    _id_87272C6F95DD558E = int( _id_87272C6F95DD558E );
    _id_87272C6F95DD558E = abs( _id_87272C6F95DD558E );
    _id_6C681AD49BE4496A = _id_87272C6F95DD558E / 6000;
    _id_6C681AD49BE4496A = int( _id_6C681AD49BE4496A );
    string = string + _id_6C681AD49BE4496A;
    _id_CC748B6D457627FE = _id_87272C6F95DD558E / 100;
    _id_CC748B6D457627FE = int( _id_CC748B6D457627FE );
    _id_CC748B6D457627FE = _id_CC748B6D457627FE - _id_6C681AD49BE4496A * 60;

    if ( _id_CC748B6D457627FE < 10 )
        string = string + ( ":0" + _id_CC748B6D457627FE );
    else
        string = string + ( ":" + _id_CC748B6D457627FE );

    if ( isdefined( _id_9930AB910B718A51 ) && _id_9930AB910B718A51 )
    {
        _id_125A70AB390D60BD = _id_87272C6F95DD558E;
        _id_125A70AB390D60BD = _id_125A70AB390D60BD - _id_6C681AD49BE4496A * 6000;
        _id_125A70AB390D60BD = _id_125A70AB390D60BD - _id_CC748B6D457627FE * 100;
        _id_125A70AB390D60BD = int( _id_125A70AB390D60BD / 10 );
        string = string + ( "." + _id_125A70AB390D60BD );
    }

    return string;
}

sun_light_fade( _id_277EDE8250943CED, _id_8300EF7E24B53984, _id_E69C0FDE567784B4 )
{
    _id_E69C0FDE567784B4 = int( _id_E69C0FDE567784B4 * 20 );
    _id_2F977E27FA739602 = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 4; _id_AC0E594AC96AA3A8++ )
        _id_2F977E27FA739602[_id_AC0E594AC96AA3A8] = ( _id_277EDE8250943CED[_id_AC0E594AC96AA3A8] - _id_8300EF7E24B53984[_id_AC0E594AC96AA3A8] ) / _id_E69C0FDE567784B4;

    _id_80BBCD5EFB3983A3 = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_E69C0FDE567784B4; _id_AC0E594AC96AA3A8++ )
    {
        wait 0.05;

        for ( _id_AC0E5C4AC96AAA41 = 0; _id_AC0E5C4AC96AAA41 < 4; _id_AC0E5C4AC96AAA41++ )
            _id_80BBCD5EFB3983A3[_id_AC0E5C4AC96AAA41] = _id_277EDE8250943CED[_id_AC0E5C4AC96AAA41] - _id_2F977E27FA739602[_id_AC0E5C4AC96AAA41] * _id_AC0E594AC96AA3A8;

        setsuncolorandintensity( _id_80BBCD5EFB3983A3[0], _id_80BBCD5EFB3983A3[1], _id_80BBCD5EFB3983A3[2], _id_80BBCD5EFB3983A3[3] );
    }

    setsuncolorandintensity( _id_8300EF7E24B53984[0], _id_8300EF7E24B53984[1], _id_8300EF7E24B53984[2], _id_8300EF7E24B53984[3] );
}

get_closest_to_player_view( array, player, _id_C603E9FF12D40A5A, _id_8461F3DA37A8BF63 )
{
    if ( !array.size )
        return;

    if ( !isdefined( player ) )
        player = level.player;

    if ( !isdefined( _id_8461F3DA37A8BF63 ) )
        _id_8461F3DA37A8BF63 = -1;

    _id_A00884ED3A6D8B4B = player.origin;

    if ( isdefined( _id_C603E9FF12D40A5A ) && _id_C603E9FF12D40A5A )
        _id_A00884ED3A6D8B4B = player geteye();

    ent = undefined;
    _id_DEE6508B0BA437C5 = player getplayerangles();
    _id_70222FBC47330166 = anglestoforward( _id_DEE6508B0BA437C5 );
    dot = -1;

    foreach ( _id_2AA56193B94A18F8 in array )
    {
        angles = vectortoangles( _id_2AA56193B94A18F8.origin - _id_A00884ED3A6D8B4B );
        forward = anglestoforward( angles );
        _id_1B67C55A5634F958 = vectordot( _id_70222FBC47330166, forward );

        if ( _id_1B67C55A5634F958 < dot )
            continue;

        if ( _id_1B67C55A5634F958 < _id_8461F3DA37A8BF63 )
            continue;

        dot = _id_1B67C55A5634F958;
        ent = _id_2AA56193B94A18F8;
    }

    return ent;
}

get_closest_index_to_player_view( array, player, _id_C603E9FF12D40A5A )
{
    if ( !array.size )
        return;

    if ( !isdefined( player ) )
        player = level.player;

    _id_A00884ED3A6D8B4B = player.origin;

    if ( isdefined( _id_C603E9FF12D40A5A ) && _id_C603E9FF12D40A5A )
        _id_A00884ED3A6D8B4B = player geteye();

    index = undefined;
    _id_DEE6508B0BA437C5 = player getplayerangles();
    _id_70222FBC47330166 = anglestoforward( _id_DEE6508B0BA437C5 );
    dot = -1;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        angles = vectortoangles( array[_id_AC0E594AC96AA3A8].origin - _id_A00884ED3A6D8B4B );
        forward = anglestoforward( angles );
        _id_1B67C55A5634F958 = vectordot( _id_70222FBC47330166, forward );

        if ( _id_1B67C55A5634F958 < dot )
            continue;

        dot = _id_1B67C55A5634F958;
        index = _id_AC0E594AC96AA3A8;
    }

    return index;
}

flag_trigger_init( message, trigger, _id_BB61E30B80CD2DD6 )
{
    scripts\engine\utility::flag_init( message );

    if ( !isdefined( _id_BB61E30B80CD2DD6 ) )
        _id_BB61E30B80CD2DD6 = 0;

    trigger thread scripts\engine\sp\utility_code::_flag_wait_trigger( message, _id_BB61E30B80CD2DD6 );
    return trigger;
}

flag_triggers_init( message, triggers, all )
{
    scripts\engine\utility::flag_init( message );

    if ( !isdefined( all ) )
        all = 0;

    for ( index = 0; index < triggers.size; index++ )
        triggers[index] thread scripts\engine\sp\utility_code::_flag_wait_trigger( message, 0 );

    return triggers;
}

flag_clear_delayed( message, delay )
{
    wait( delay );
    scripts\engine\utility::flag_clear( message );
}

flag_clear_delayed_endonset( message, delay )
{
    level endon( message );
    wait( delay );
    scripts\engine\utility::flag_clear( message );
}

level_end_save()
{
    if ( level.missionfailed )
        return;

    if ( scripts\sp\utility::is_trials_level() )
        return 0;

    if ( scripts\engine\utility::flag( "game_saving" ) )
        return;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.players.size; _id_AC0E594AC96AA3A8++ )
    {
        player = level.players[_id_AC0E594AC96AA3A8];

        if ( !isalive( player ) )
            return;
    }

    scripts\engine\utility::flag_set( "game_saving" );
    _id_D63C50F8A63DC1A5 = "levelshots / autosave / autosave_" + level.script + "end";
    _func_58DCB11B5A8AA9EE( "levelend", &"AUTOSAVE_AUTOSAVE", _id_D63C50F8A63DC1A5, 1 );
    scripts\engine\utility::flag_clear( "game_saving" );
}

add_extra_autosave_check( name, func, msg )
{
    level.autosave.extra_autosave_checks[name] = [];
    level.autosave.extra_autosave_checks[name]["func"] = func;
    level.autosave.extra_autosave_checks[name]["msg"] = msg;
}

remove_extra_autosave_check( name )
{
    level.autosave.extra_autosave_checks[name] = undefined;
}

_id_8D94212299B4B241()
{
    thread autosave_by_name_thread( "autosave_silent", undefined, undefined, 1 );
}

autosave_stealth()
{
    thread autosave_by_name_thread( "autosave_stealth", 8, 1 );
}

autosave_stealth_silent()
{
    thread autosave_by_name_thread( "autosave_stealth", 8, 1, 1 );
}

autosave_tactical()
{
    scripts\engine\sp\utility_code::autosave_tactical_setup();
    thread scripts\engine\sp\utility_code::autosave_tactical_proc();
}

autosave_by_name( name )
{
    thread autosave_by_name_thread( name );
}

autosave_by_name_silent( name )
{
    thread autosave_by_name_thread( name, undefined, undefined, 1 );
}

autosave_by_name_thread( name, timeout, _id_F78389D2B10C1F26, _id_7DF840403F42AC86, _id_07EE0E272B34FAFF )
{
    if ( !isdefined( name ) )
        name = "undefined";

    _id_D63C50F8A63DC1A5 = "levelshots/autosave/autosave_" + level.script;
    result = level scripts\sp\autosave::tryautosave( name, "autosave", _id_D63C50F8A63DC1A5, timeout, _id_F78389D2B10C1F26, _id_7DF840403F42AC86, _id_07EE0E272B34FAFF );
}

autosave_or_timeout( name, timeout )
{
    thread autosave_by_name_thread( name, timeout );
}

autosave_try_once( name, _id_7DF840403F42AC86 )
{
    thread autosave_by_name_thread( name, undefined, undefined, _id_7DF840403F42AC86, 1 );
}

autosave_or_timeout_silent( name, timeout )
{
    thread autosave_by_name_thread( name, timeout, undefined, 1 );
}

debug_message( message, origin, duration, entity )
{
    if ( !isdefined( duration ) )
        duration = 5;

    if ( isdefined( entity ) )
    {
        entity endon( "death" );
        origin = entity.origin;
    }

    for ( time = 0; time < duration * 20; time++ )
    {
        if ( !isdefined( entity ) )
        {

        }
        else
        {

        }

        wait 0.05;
    }
}

debug_message_clear( message, origin, duration, _id_7A192573E89D8B1B )
{
    if ( isdefined( _id_7A192573E89D8B1B ) )
    {
        level notify( message + _id_7A192573E89D8B1B );
        level endon( message + _id_7A192573E89D8B1B );
    }
    else
    {
        level notify( message );
        level endon( message );
    }

    if ( !isdefined( duration ) )
        duration = 5;

    for ( time = 0; time < duration * 20; time++ )
        wait 0.05;
}

closerfunc( _id_7F281383902BBB5C, _id_7F281683902BC1F5 )
{
    return _id_7F281383902BBB5C >= _id_7F281683902BC1F5;
}

getclosestfx( org, _id_0984A5137B32E6F4, dist )
{
    return scripts\engine\sp\utility_code::comparesizesfx( org, _id_0984A5137B32E6F4, dist, ::closerfunc );
}

get_farthest_ent( org, array )
{
    if ( array.size < 1 )
        return;

    dist = distance( array[0] getorigin(), org );
    ent = array[0];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_5C1EE5AB8012EA11 = distance( array[_id_AC0E594AC96AA3A8] getorigin(), org );

        if ( _id_5C1EE5AB8012EA11 < dist )
            continue;

        dist = _id_5C1EE5AB8012EA11;
        ent = array[_id_AC0E594AC96AA3A8];
    }

    return ent;
}

get_within_range( org, array, dist )
{
    guys = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( distance( array[_id_AC0E594AC96AA3A8].origin, org ) <= dist )
            guys[guys.size] = array[_id_AC0E594AC96AA3A8];
    }

    return guys;
}

get_outside_range( org, array, dist )
{
    guys = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( distance( array[_id_AC0E594AC96AA3A8].origin, org ) > dist )
            guys[guys.size] = array[_id_AC0E594AC96AA3A8];
    }

    return guys;
}

get_closest_living( org, array, dist )
{
    if ( !isdefined( dist ) )
        dist = 9999999;

    if ( array.size < 1 )
        return;

    ent = undefined;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !isalive( array[_id_AC0E594AC96AA3A8] ) )
            continue;

        _id_5C1EE5AB8012EA11 = distance( array[_id_AC0E594AC96AA3A8].origin, org );

        if ( _id_5C1EE5AB8012EA11 >= dist )
            continue;

        dist = _id_5C1EE5AB8012EA11;
        ent = array[_id_AC0E594AC96AA3A8];
    }

    return ent;
}

get_highest_dot( start, end, array )
{
    if ( !array.size )
        return;

    ent = undefined;
    angles = vectortoangles( end - start );
    _id_172D42D175E16C61 = anglestoforward( angles );
    dot = -1;

    foreach ( _id_80EF668C09FFB70F in array )
    {
        angles = vectortoangles( _id_80EF668C09FFB70F.origin - start );
        forward = anglestoforward( angles );
        _id_1B67C55A5634F958 = vectordot( _id_172D42D175E16C61, forward );

        if ( _id_1B67C55A5634F958 < dot )
            continue;

        dot = _id_1B67C55A5634F958;
        ent = _id_80EF668C09FFB70F;
    }

    return ent;
}

get_closest_index( org, array, dist )
{
    if ( !isdefined( dist ) )
        dist = 9999999;

    if ( array.size < 1 )
        return;

    index = undefined;

    foreach ( _id_AC0E594AC96AA3A8, ent in array )
    {
        _id_5C1EE5AB8012EA11 = distance( ent.origin, org );

        if ( _id_5C1EE5AB8012EA11 >= dist )
            continue;

        dist = _id_5C1EE5AB8012EA11;
        index = _id_AC0E594AC96AA3A8;
    }

    return index;
}

get_closest_exclude( org, ents, _id_6342A5CD84590602 )
{
    if ( !isdefined( ents ) )
        return undefined;

    range = 0;

    if ( isdefined( _id_6342A5CD84590602 ) && _id_6342A5CD84590602.size )
    {
        _id_17947F4A9AA52B15 = [];

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ents.size; _id_AC0E594AC96AA3A8++ )
            _id_17947F4A9AA52B15[_id_AC0E594AC96AA3A8] = 0;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ents.size; _id_AC0E594AC96AA3A8++ )
        {
            for ( _id_AC0E424AC96A7113 = 0; _id_AC0E424AC96A7113 < _id_6342A5CD84590602.size; _id_AC0E424AC96A7113++ )
            {
                if ( ents[_id_AC0E594AC96AA3A8] == _id_6342A5CD84590602[_id_AC0E424AC96A7113] )
                    _id_17947F4A9AA52B15[_id_AC0E594AC96AA3A8] = 1;
            }
        }

        _id_0BFA8A19E94600A5 = 0;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ents.size; _id_AC0E594AC96AA3A8++ )
        {
            if ( !_id_17947F4A9AA52B15[_id_AC0E594AC96AA3A8] && isdefined( ents[_id_AC0E594AC96AA3A8] ) )
            {
                _id_0BFA8A19E94600A5 = 1;
                range = distance( org, ents[_id_AC0E594AC96AA3A8].origin );
                ent = _id_AC0E594AC96AA3A8;
                _id_AC0E594AC96AA3A8 = ents.size + 1;
            }
        }

        if ( !_id_0BFA8A19E94600A5 )
            return undefined;
    }
    else
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ents.size; _id_AC0E594AC96AA3A8++ )
        {
            if ( isdefined( ents[_id_AC0E594AC96AA3A8] ) )
            {
                range = distance( org, ents[0].origin );
                ent = _id_AC0E594AC96AA3A8;
                _id_AC0E594AC96AA3A8 = ents.size + 1;
            }
        }
    }

    ent = undefined;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ents.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( isdefined( ents[_id_AC0E594AC96AA3A8] ) )
        {
            _id_17947F4A9AA52B15 = 0;

            if ( isdefined( _id_6342A5CD84590602 ) )
            {
                for ( _id_AC0E424AC96A7113 = 0; _id_AC0E424AC96A7113 < _id_6342A5CD84590602.size; _id_AC0E424AC96A7113++ )
                {
                    if ( ents[_id_AC0E594AC96AA3A8] == _id_6342A5CD84590602[_id_AC0E424AC96A7113] )
                        _id_17947F4A9AA52B15 = 1;
                }
            }

            if ( !_id_17947F4A9AA52B15 )
            {
                _id_5DEDDF73E0BD834A = distance( org, ents[_id_AC0E594AC96AA3A8].origin );

                if ( _id_5DEDDF73E0BD834A <= range )
                {
                    range = _id_5DEDDF73E0BD834A;
                    ent = _id_AC0E594AC96AA3A8;
                }
            }
        }
    }

    if ( isdefined( ent ) )
        return ents[ent];
    else
        return undefined;
}

get_closest_ai( org, team, _id_6342A5CD84590602 )
{
    if ( isdefined( team ) )
        ents = getaiarray( team );
    else
        ents = getaiarray();

    if ( ents.size == 0 )
        return undefined;

    if ( isdefined( _id_6342A5CD84590602 ) )
        ents = scripts\engine\utility::array_remove_array( ents, _id_6342A5CD84590602 );

    return scripts\engine\utility::getclosest( org, ents );
}

get_closest_ai_exclude( org, team, _id_6342A5CD84590602 )
{
    if ( isdefined( team ) )
        ents = getaiarray( team );
    else
        ents = getaiarray();

    if ( ents.size == 0 )
        return undefined;

    return get_closest_exclude( org, ents, _id_6342A5CD84590602 );
}

get_progress( start, end, org, dist )
{
    if ( !isdefined( dist ) )
        dist = distance( start, end );

    dist = max( 0.01, dist );
    normal = vectornormalize( end - start );
    _id_06A3A1033FFC2699 = org - start;
    progress = vectordot( _id_06A3A1033FFC2699, normal );
    progress = progress / dist;
    progress = clamp( progress, 0, 1 );
    return progress;
}

disable_long_death()
{
    self._id_98ADD129A7ECB962 = 0;
}

enable_long_death()
{
    self._id_98ADD129A7ECB962 = 1;
}

enable_blood_pool()
{
    self.skipbloodpool = undefined;
    self _meth_2F19997BDF29036F( 0 );
}

disable_blood_pool()
{
    self.skipbloodpool = 1;
    self _meth_2F19997BDF29036F( 1 );
}

deletable_magic_bullet_shield()
{
    scripts\common\ai::magic_bullet_shield( 1 );
}

get_ignoreme()
{
    return self.ignoreme;
}

set_ignoreme( val )
{
    self.ignoreme = val;
}

set_ignoreall( val )
{
    self.ignoreall = val;
}

_id_478CF9EDB77879F5()
{
    return self.ignoreall;
}

set_favoriteenemy( enemy )
{
    self.favoriteenemy = enemy;
}

get_pacifist()
{
    return self.pacifist;
}

set_pacifist( val )
{
    self.pacifist = val;
}

set_maxsightdistsquared( value )
{
    self.maxsightdistsqrd = value;
}

set_maxvisibledist( value )
{
    self.maxvisibledist = value;
}

set_maxfaceenemydist( value )
{
    self.maxfaceenemydist = value;
}

set_sprint( value )
{
    self.sprint = value;
}

flood_spawn( spawners )
{
    scripts\sp\spawner::flood_spawner_scripted( spawners );
}

force_crawling_death( angle, _id_4BD2747924ED0FC8, array, nofallanim )
{
    if ( !isdefined( _id_4BD2747924ED0FC8 ) )
        _id_4BD2747924ED0FC8 = 4;

    thread force_crawling_death_proc( angle, _id_4BD2747924ED0FC8, array, nofallanim );
}

override_crawl_death_anims()
{
    if ( isdefined( self.a.custom_crawling_death_array ) )
    {
        self.a.array["crawl"] = self.a.custom_crawling_death_array["crawl"];
        self.a.array["death"] = self.a.custom_crawling_death_array["death"];
        self.a.crawl_fx_rate = self.a.custom_crawling_death_array["blood_fx_rate"];

        if ( isdefined( self.a.custom_crawling_death_array["blood_fx"] ) )
            self.a.crawl_fx = self.a.custom_crawling_death_array["blood_fx"];
    }

    self.a.array["stand_2_crawl"] = [];

    if ( isdefined( self.nofallanim ) )
        self.currentpose = "prone";

    self orientmode( "face angle", self.a.force_crawl_angle );
    self.a.force_crawl_angle = undefined;
}

force_crawling_death_proc( angle, _id_4BD2747924ED0FC8, array, nofallanim )
{
    self.forcelongdeath = 1;
    self.force_num_crawls = _id_4BD2747924ED0FC8;
    self.noragdoll = 1;
    self.nofallanim = nofallanim;
    self.a.custom_crawling_death_array = array;
    self.crawlingpainanimoverridefunc = ::override_crawl_death_anims;
    self.maxhealth = 100000;
    self.health = 100000;
    enable_long_death();

    if ( !isdefined( nofallanim ) || nofallanim == 0 )
        self.a.force_crawl_angle = angle + 181.02;
    else
    {
        self.a.force_crawl_angle = angle;
        thread _id_55B3046625FB79B6::notetrackposecrawl();
    }
}

ai_ragdoll_immediate()
{
    self.skipdeathanim = 1;
    die();
}

playerwatch_unresolved_collision( count )
{
    self endon( "death" );
    self endon( "stop_unresolved_collision_script" );

    if ( !isdefined( count ) )
        count = 20;

    self.unresolved_collision_count = 0;

    for (;;)
    {
        self waittill( "unresolved_collision", mover );
        self.last_unresolved_collision_time = gettime();

        if ( isdefined( mover ) && ( istrue( mover.doorclip ) || istrue( mover.allowunresolvedcollision ) ) )
            continue;

        childthread resetunresolvedcollision();
        self.unresolved_collision_count++;

        if ( self.unresolved_collision_count >= count )
        {
            if ( isdefined( mover ) && isdefined( mover.unresolved_collision_func ) )
                mover [[ mover.unresolved_collision_func ]]( self );

            if ( isdefined( self.handle_unresolved_collision ) )
            {
                self [[ self.handle_unresolved_collision ]]();
                continue;
            }

            default_unresolved_collision_handler();
        }
    }
}

resetunresolvedcollision()
{
    self notify( "newUnresolvedCollision" );
    self endon( "newUnresolvedCollision" );
    wait 0.05;
    waittillframeend;
    self.unresolved_collision_count = 0;
}

default_unresolved_collision_handler()
{
    level.custom_death_quote = 438;
    scripts\sp\utility::missionfailedwrapper();
}

stop_playerwatch_unresolved_collision()
{
    self notify( "stop_unresolved_collision_script" );
}

play_sound_on_tag_endon_death( alias, tag )
{
    play_sound_on_tag( alias, tag, 1 );
}

play_loop_sound_on_entity_with_pitch( alias, offset, _id_C99D038C1C68D20A, _id_3F5C9BE80D64106F )
{
    org = spawn( "script_origin", ( 0, 0, 0 ) );
    org endon( "death" );
    thread scripts\engine\utility::delete_on_death( org );

    if ( !isdefined( _id_C99D038C1C68D20A ) )
        _id_C99D038C1C68D20A = 0;

    if ( !isdefined( _id_3F5C9BE80D64106F ) )
        _id_3F5C9BE80D64106F = 0;

    if ( isdefined( offset ) )
        org.origin = self.origin + offset;
    else
        org.origin = self.origin;

    org.angles = self.angles;
    org linkto( self );
    org playloopsound( alias );
    org _meth_D467F33E1B8AEDD1( _id_C99D038C1C68D20A, _id_3F5C9BE80D64106F );
    self waittill( "stop sound" + alias );
    org stoploopsound( alias );
    org delete();
}

play_sound_on_entity( alias, _id_B426F32755673BA6 )
{
    play_sound_on_tag( alias, undefined, undefined, _id_B426F32755673BA6 );
}

play_loop_sound_on_tag( alias, tag, _id_24818F8FD7946BA1, _id_627C155C7AC80247, _id_81ADE82BE8CAA4CE )
{
    org = spawn( "script_origin", ( 0, 0, 0 ) );
    org endon( "death" );

    if ( !isdefined( _id_24818F8FD7946BA1 ) )
        _id_24818F8FD7946BA1 = 1;

    if ( _id_24818F8FD7946BA1 )
        thread scripts\engine\utility::delete_on_death( org );

    if ( !isdefined( _id_627C155C7AC80247 ) )
        _id_627C155C7AC80247 = 0;

    if ( _id_627C155C7AC80247 )
        thread delete_on_removed( org );

    if ( isdefined( tag ) )
        org linkto( self, tag, ( 0, 0, 0 ), ( 0, 0, 0 ) );
    else
    {
        org.origin = self.origin;
        org.angles = self.angles;
        org linkto( self );
    }

    org playloopsound( alias );
    self waittill( "stop sound" + alias );

    if ( isdefined( _id_81ADE82BE8CAA4CE ) )
    {
        org playsound( _id_81ADE82BE8CAA4CE, "sounddone" );
        org scripts\engine\utility::delaycall( 0.15, ::stoploopsound, alias );
        org waittill( "sounddone" );
        org delete();
    }
    else
    {
        org stoploopsound( alias );
        org delete();
    }
}

delete_on_removed( ent )
{
    ent endon( "death" );

    while ( isdefined( self ) )
        wait 0.05;

    if ( isdefined( ent ) )
        ent delete();
}

assign_animtree( animname )
{
    if ( isdefined( animname ) )
        self.animname = animname;

    self useanimtree( level.scr_animtree[self.animname] );
}

assign_model()
{
    if ( isarray( level.scr_model[self.animname] ) )
    {
        _id_2ADBA961C731BAF6 = randomint( level.scr_model[self.animname].size );
        self setmodel( level.scr_model[self.animname][_id_2ADBA961C731BAF6] );
    }
    else
        self setmodel( level.scr_model[self.animname] );
}

spawn_anim_model( animname, origin, angles )
{
    if ( !isdefined( origin ) )
        origin = ( 0, 0, 0 );

    model = spawn( "script_model", origin );
    model.animname = animname;
    model assign_animtree();
    model assign_model();

    if ( isdefined( angles ) )
        model.angles = angles;

    return model;
}

spawn_anim_weapon( animname, origin, angles, viewmodel )
{
    if ( !isdefined( origin ) )
        origin = ( 0, 0, 0 );

    if ( !isdefined( viewmodel ) )
        viewmodel = 0;

    model = spawn( "script_model", origin );
    model.animname = animname;
    model assign_animtree();
    attachments = [];

    if ( isdefined( level.scr_weapon[animname][1] ) )
        attachments = level.scr_weapon[animname][1];

    model scripts\common\utility::make_weapon_model( level.scr_weapon[animname][0], attachments, viewmodel );

    if ( isdefined( angles ) )
        model.angles = angles;

    return model;
}

trigger_wait( _id_44541668EE276747, _id_F70F72E84B51467B )
{
    _id_AF79548FB29EBC00 = getent( _id_44541668EE276747, _id_F70F72E84B51467B );

    if ( !isdefined( _id_AF79548FB29EBC00 ) )
        return;

    _id_AF79548FB29EBC00 waittill( "trigger", _id_4CD25328422B94AE );
    level notify( _id_44541668EE276747, _id_4CD25328422B94AE );
    return _id_4CD25328422B94AE;
}

trigger_wait_targetname( _id_44541668EE276747 )
{
    return trigger_wait( _id_44541668EE276747, "targetname" );
}

set_flag_on_dead( spawners, _id_E617A42386278BB6 )
{
    thread set_flag_on_func_wait_proc( spawners, _id_E617A42386278BB6, ::waittill_dead, "set_flag_on_dead" );
}

set_flag_on_dead_or_dying( spawners, _id_E617A42386278BB6 )
{
    thread set_flag_on_func_wait_proc( spawners, _id_E617A42386278BB6, ::waittill_dead_or_dying, "set_flag_on_dead_or_dying" );
}

empty_func( _id_06B5C8034010B9BA )
{
    return;
}

set_flag_on_spawned_ai_proc( _id_7D6FF273EF953CB0, _id_BF0A2467AF6B724B )
{
    self waittill( "spawned", guy );

    if ( scripts\common\ai::spawn_failed( guy ) )
        return;

    _id_7D6FF273EF953CB0.ai[_id_7D6FF273EF953CB0.ai.size] = guy;
    scripts\engine\utility::ent_flag_set( _id_BF0A2467AF6B724B );
}

set_flag_on_func_wait_proc( spawners, _id_E617A42386278BB6, waitfunc, _id_BF0A2467AF6B724B )
{
    _id_7D6FF273EF953CB0 = spawnstruct();
    _id_7D6FF273EF953CB0.ai = [];

    foreach ( key, spawn in spawners )
        spawn scripts\engine\utility::ent_flag_init( _id_BF0A2467AF6B724B );

    scripts\engine\utility::array_thread( spawners, ::set_flag_on_spawned_ai_proc, _id_7D6FF273EF953CB0, _id_BF0A2467AF6B724B );

    foreach ( key, spawn in spawners )
        spawn scripts\engine\utility::ent_flag_wait( _id_BF0A2467AF6B724B );

    [[ waitfunc ]]( _id_7D6FF273EF953CB0.ai );
    scripts\engine\utility::flag_set( _id_E617A42386278BB6 );
}

set_flag_on_trigger( _id_AF79548FB29EBC00, _id_E617A42386278BB6 )
{
    if ( !scripts\engine\utility::flag( _id_E617A42386278BB6 ) )
    {
        _id_AF79548FB29EBC00 waittill( "trigger", _id_4CD25328422B94AE );
        scripts\engine\utility::flag_set( _id_E617A42386278BB6 );
        return _id_4CD25328422B94AE;
    }
}

set_flag_on_targetname_trigger( msg )
{
    if ( scripts\engine\utility::flag( msg ) )
        return;

    trigger = getent( msg, "targetname" );
    trigger waittill( "trigger" );
    scripts\engine\utility::flag_set( msg );
}

waittill_dead( guys, num, _id_F6A66E3FC1BF61C0 )
{
    ent = spawnstruct();

    if ( isdefined( _id_F6A66E3FC1BF61C0 ) )
    {
        ent endon( "thread_timed_out" );
        ent thread scripts\engine\sp\utility_code::waittill_dead_timeout( _id_F6A66E3FC1BF61C0 );
    }

    ent.count = guys.size;

    if ( isdefined( num ) && num < ent.count )
        ent.count = num;

    scripts\engine\utility::array_thread( guys, scripts\engine\sp\utility_code::waittill_dead_thread, ent );

    while ( ent.count > 0 )
        ent waittill( "waittill_dead guy died" );
}

waittill_dead_or_dying( guys, num, _id_F6A66E3FC1BF61C0 )
{
    _id_BFC65A378A6D8EFE = [];

    foreach ( _id_80EF668C09FFB70F in guys )
    {
        if ( isalive( _id_80EF668C09FFB70F ) && !_id_80EF668C09FFB70F.ignoreforfixednodesafecheck )
            _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = _id_80EF668C09FFB70F;
    }

    guys = _id_BFC65A378A6D8EFE;
    ent = spawnstruct();

    if ( isdefined( _id_F6A66E3FC1BF61C0 ) )
    {
        ent endon( "thread_timed_out" );
        ent thread scripts\engine\sp\utility_code::waittill_dead_timeout( _id_F6A66E3FC1BF61C0 );
    }

    ent.count = guys.size;

    if ( isdefined( num ) && num < ent.count )
        ent.count = num;

    scripts\engine\utility::array_thread( guys, scripts\engine\sp\utility_code::waittill_dead_or_dying_thread, ent );

    while ( ent.count > 0 )
        ent waittill( "waittill_dead_guy_dead_or_dying" );
}

waittill_notetrack_or_damage( notetrack )
{
    self endon( "damage" );
    self endon( "death" );
    self waittillmatch( "single anim", notetrack );
}

get_living_ai( name, type )
{
    array = get_living_ai_array( name, type );

    if ( array.size > 1 )
        return undefined;

    return array[0];
}

get_living_ai_array( name, type )
{
    ai = getaispeciesarray( "all", "all" );
    array = [];

    foreach ( actor in ai )
    {
        if ( !isalive( actor ) )
            continue;

        switch ( type )
        {
            case "targetname":
                if ( isdefined( actor.targetname ) && actor.targetname == name )
                    array[array.size] = actor;

                break;
            case "script_noteworthy":
                if ( isdefined( actor.script_noteworthy ) && actor.script_noteworthy == name )
                    array[array.size] = actor;

                break;
            case "animname":
                if ( isdefined( actor.animname ) && actor.animname == name )
                    array[array.size] = actor;

                break;
        }
    }

    return array;
}

get_vehicle( name, type )
{
    array = get_vehicle_array( name, type );

    if ( !array.size )
        return undefined;

    return array[0];
}

get_vehicle_array( name, type )
{
    array = getentarray( name, type );
    vehicle = [];
    _id_C274B6E0EA923011 = [];

    foreach ( object in array )
    {
        if ( object.code_classname != "script_vehicle" )
            continue;

        _id_C274B6E0EA923011[0] = object;

        if ( isspawner( object ) )
        {
            if ( isdefined( object.last_spawned_vehicle ) )
            {
                _id_C274B6E0EA923011[0] = object.last_spawned_vehicle;
                vehicle = array_merge( vehicle, _id_C274B6E0EA923011 );
            }

            continue;
        }

        vehicle = array_merge( vehicle, _id_C274B6E0EA923011 );
    }

    return vehicle;
}

get_living_aispecies( name, type, _id_A29C8A41C266F67D )
{
    array = get_living_aispecies_array( name, type, _id_A29C8A41C266F67D );

    if ( array.size > 1 )
        return undefined;

    return array[0];
}

get_living_aispecies_array( name, type, _id_A29C8A41C266F67D )
{
    if ( !isdefined( _id_A29C8A41C266F67D ) )
        _id_A29C8A41C266F67D = "all";

    ai = getaispeciesarray( "allies", _id_A29C8A41C266F67D );
    ai = scripts\engine\utility::array_combine( ai, getaispeciesarray( "axis", _id_A29C8A41C266F67D ) );
    array = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        switch ( type )
        {
            case "targetname":
                if ( isdefined( ai[_id_AC0E594AC96AA3A8].targetname ) && ai[_id_AC0E594AC96AA3A8].targetname == name )
                    array[array.size] = ai[_id_AC0E594AC96AA3A8];

                break;
            case "script_noteworthy":
                if ( isdefined( ai[_id_AC0E594AC96AA3A8].script_noteworthy ) && ai[_id_AC0E594AC96AA3A8].script_noteworthy == name )
                    array[array.size] = ai[_id_AC0E594AC96AA3A8];

                break;
        }
    }

    return array;
}

gather_delay_proc( msg, delay )
{
    if ( isdefined( level.gather_delay[msg] ) )
    {
        if ( level.gather_delay[msg] )
        {
            wait 0.05;

            if ( isalive( self ) )
                self notify( "gather_delay_finished" + msg + delay );

            return;
        }

        level waittill( msg );

        if ( isalive( self ) )
            self notify( "gather_delay_finished" + msg + delay );

        return;
    }

    level.gather_delay[msg] = 0;
    wait( delay );
    level.gather_delay[msg] = 1;
    level notify( msg );

    if ( isalive( self ) )
        self notify( "gat    her_delay_finished" + msg + delay );
}

gather_delay( msg, delay )
{
    thread gather_delay_proc( msg, delay );
    self waittill( "gather_delay_finished" + msg + delay );
}

getlinks_array( array, _id_CD6D5DE07F47FC51 )
{
    ents = [];

    for ( _id_AC0E5C4AC96AAA41 = 0; _id_AC0E5C4AC96AAA41 < array.size; _id_AC0E5C4AC96AAA41++ )
    {
        node = array[_id_AC0E5C4AC96AAA41];
        script_linkname = node.script_linkname;

        if ( !isdefined( script_linkname ) )
            continue;

        if ( !isdefined( _id_CD6D5DE07F47FC51[script_linkname] ) )
            continue;

        ents[ents.size] = node;
    }

    return ents;
}

array_merge( _id_4F6FF34F222B0271, _id_4F6FF04F222AFBD8 )
{
    if ( _id_4F6FF34F222B0271.size == 0 )
        return _id_4F6FF04F222AFBD8;

    if ( _id_4F6FF04F222AFBD8.size == 0 )
        return _id_4F6FF34F222B0271;

    _id_BFC65A378A6D8EFE = _id_4F6FF34F222B0271;

    foreach ( _id_3840497A74A156FA in _id_4F6FF04F222AFBD8 )
    {
        _id_31C64B5C5485BAFC = 0;

        foreach ( _id_48D4CA1D57B450E7 in _id_4F6FF34F222B0271 )
        {
            if ( _id_48D4CA1D57B450E7 == _id_3840497A74A156FA )
            {
                _id_31C64B5C5485BAFC = 1;
                break;
            }
        }

        if ( _id_31C64B5C5485BAFC )
            continue;
        else
            _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = _id_3840497A74A156FA;
    }

    return _id_BFC65A378A6D8EFE;
}

array_exclude( array, _id_08DA65502DC92404 )
{
    _id_BFC65A378A6D8EFE = array;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_08DA65502DC92404.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( scripts\engine\utility::array_contains( array, _id_08DA65502DC92404[_id_AC0E594AC96AA3A8] ) )
            _id_BFC65A378A6D8EFE = scripts\engine\utility::array_remove( _id_BFC65A378A6D8EFE, _id_08DA65502DC92404[_id_AC0E594AC96AA3A8] );
    }

    return _id_BFC65A378A6D8EFE;
}

array_compare( _id_4F6FF34F222B0271, _id_4F6FF04F222AFBD8 )
{
    if ( _id_4F6FF34F222B0271.size != _id_4F6FF04F222AFBD8.size )
        return 0;

    foreach ( key, _id_80EF668C09FFB70F in _id_4F6FF34F222B0271 )
    {
        if ( !isdefined( _id_4F6FF04F222AFBD8[key] ) )
            return 0;

        _id_8E35C2F9FD5FFB27 = _id_4F6FF04F222AFBD8[key];

        if ( _id_8E35C2F9FD5FFB27 != _id_80EF668C09FFB70F )
            return 0;
    }

    return 1;
}

deck_draw_specific( item, _id_CCA1A8591DDC8A23 )
{
    _id_81A329728ABB79E4 = self;

    if ( _id_81A329728ABB79E4.items.size == 0 )
        return undefined;

    if ( _id_81A329728ABB79E4.index >= _id_81A329728ABB79E4.items.size )
    {
        if ( _id_81A329728ABB79E4.autoshuffle )
            _id_81A329728ABB79E4 scripts\engine\utility::deck_shuffle();
        else
            _id_81A329728ABB79E4.index = 0;
    }

    foreach ( _id_A2D3F064E8D098D5, _id_9B5C4C307835273A in _id_81A329728ABB79E4.items )
    {
        if ( _id_9B5C4C307835273A != item || !istrue( _id_CCA1A8591DDC8A23 ) && _id_A2D3F064E8D098D5 < _id_81A329728ABB79E4.index )
            continue;

        _id_81A329728ABB79E4.last_drawn = _id_81A329728ABB79E4.items[_id_A2D3F064E8D098D5];

        if ( _id_81A329728ABB79E4.autoshuffle )
        {
            _id_81A329728ABB79E4.items[_id_A2D3F064E8D098D5] = _id_81A329728ABB79E4.items[_id_81A329728ABB79E4.index];
            _id_81A329728ABB79E4.items[_id_81A329728ABB79E4.index] = _id_81A329728ABB79E4.last_drawn;
            _id_81A329728ABB79E4.index++;
        }
        else
            _id_81A329728ABB79E4.index = _id_A2D3F064E8D098D5 + 1;

        return _id_81A329728ABB79E4.last_drawn;
    }
}

refill_if_empty()
{
    _id_81A329728ABB79E4 = self;

    if ( _id_81A329728ABB79E4 deck_is_empty() )
    {
        if ( _id_81A329728ABB79E4.autoshuffle )
            _id_81A329728ABB79E4 scripts\engine\utility::deck_shuffle();
        else
            _id_81A329728ABB79E4.index = 0;
    }
}

deck_is_empty()
{
    return self.index >= self.items.size;
}

is_deck( object )
{
    return isstruct( object ) && isdefined( object.items ) && isdefined( object.index );
}

getlinkedvehiclenodes()
{
    array = [];

    if ( isdefined( self.script_linkto ) )
    {
        _id_B11F91C17FEEAB8F = scripts\engine\utility::get_links();

        foreach ( name in _id_B11F91C17FEEAB8F )
        {
            entities = getvehiclenodearray( name, "script_linkname" );
            array = scripts\engine\utility::array_combine( array, entities );
        }
    }

    return array;
}

draw_line( _id_6C12713F33727294, org2, r, g, b )
{
    for (;;)
        wait 0.05;
}

draw_line_to_ent_for_time( _id_6C12713F33727294, ent, r, g, b, timer )
{
    timer = gettime() + timer * 1000;

    while ( gettime() < timer )
    {
        wait 0.05;

        if ( !isdefined( ent ) || !isdefined( ent.origin ) )
            return;
    }
}

draw_line_from_ent_for_time( ent, org, r, g, b, timer )
{
    draw_line_to_ent_for_time( org, ent, r, g, b, timer );
}

draw_line_from_ent_to_ent_for_time( _id_6848D0559BA20855, _id_6848CD559BA201BC, r, g, b, timer )
{
    _id_6848D0559BA20855 endon( "death" );
    _id_6848CD559BA201BC endon( "death" );
    timer = gettime() + timer * 1000;

    while ( gettime() < timer )
        wait 0.05;
}

draw_line_from_ent_to_ent_until_notify( _id_6848D0559BA20855, _id_6848CD559BA201BC, r, g, b, _id_E332C90D19067E4D, notifystring )
{
    _id_6848D0559BA20855 endon( "death" );
    _id_6848CD559BA201BC endon( "death" );
    _id_E332C90D19067E4D endon( notifystring );

    for (;;)
        wait 0.05;
}

draw_line_until_notify( _id_6C12713F33727294, org2, r, g, b, _id_E332C90D19067E4D, notifystring )
{
    _id_E332C90D19067E4D endon( notifystring );

    for (;;)
        scripts\engine\utility::draw_line_for_time( _id_6C12713F33727294, org2, r, g, b, 0.05 );
}

draw_line_from_ent_to_vec_for_time( ent, _id_06A3A1033FFC2699, length, r, g, b, timer )
{
    timer = gettime() + timer * 1000;
    _id_06A3A1033FFC2699 = _id_06A3A1033FFC2699 * length;

    while ( gettime() < timer )
    {
        wait 0.05;

        if ( !isdefined( ent ) || !isdefined( ent.origin ) )
            return;
    }
}

draw_circle_until_notify( center, radius, r, g, b, _id_E332C90D19067E4D, notifystring )
{
    _id_851DF4CD0132B5FA = 16;
    _id_7062EA7309FA49C4 = 360 / _id_851DF4CD0132B5FA;
    _id_8AF33769F877B5D6 = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_851DF4CD0132B5FA; _id_AC0E594AC96AA3A8++ )
    {
        angle = _id_7062EA7309FA49C4 * _id_AC0E594AC96AA3A8;
        _id_8A9F895755FD607E = cos( angle ) * radius;
        _id_D867033AB311670B = sin( angle ) * radius;
        x = center[0] + _id_8A9F895755FD607E;
        y = center[1] + _id_D867033AB311670B;
        z = center[2];
        _id_8AF33769F877B5D6[_id_8AF33769F877B5D6.size] = ( x, y, z );
    }

    thread draw_circle_lines_until_notify( _id_8AF33769F877B5D6, r, g, b, _id_E332C90D19067E4D, notifystring );
}

draw_circle_lines_until_notify( _id_8AF33769F877B5D6, r, g, b, _id_E332C90D19067E4D, notifystring )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_8AF33769F877B5D6.size; _id_AC0E594AC96AA3A8++ )
    {
        start = _id_8AF33769F877B5D6[_id_AC0E594AC96AA3A8];

        if ( _id_AC0E594AC96AA3A8 + 1 >= _id_8AF33769F877B5D6.size )
            end = _id_8AF33769F877B5D6[0];
        else
            end = _id_8AF33769F877B5D6[_id_AC0E594AC96AA3A8 + 1];

        thread draw_line_until_notify( start, end, r, g, b, _id_E332C90D19067E4D, notifystring );
    }
}

battlechatter_off( team )
{
    if ( !isdefined( team ) )
        level._id_91A8C7ABDF195C70 = 1;
    else
    {
        if ( !isdefined( level._id_EDCE163BBAB4F0CE ) )
            level._id_EDCE163BBAB4F0CE = [];

        level._id_EDCE163BBAB4F0CE[team] = 1;
    }
}

battlechatter_on( team )
{
    if ( !isdefined( level.battlechatter ) )
        _id_35DE402EFC5ACFB3::init_battlechatter();

    if ( !isdefined( team ) )
        level._id_91A8C7ABDF195C70 = undefined;
    else if ( isdefined( level._id_EDCE163BBAB4F0CE ) )
        level._id_EDCE163BBAB4F0CE[team] = undefined;
}

battlechatter_commander_off( team )
{
    if ( team == "all" )
    {
        setdvar( "dvar_702217AE066916B9", "all" );
        return;
    }

    switch ( getdvar( "dvar_702217AE066916B9" ) )
    {
        case "":
            setdvar( "dvar_702217AE066916B9", team );
            break;
        case "axis":
            if ( team == "allies" )
                setdvar( "dvar_702217AE066916B9", "all" );

            break;
        case "allies":
            if ( team == "axis" )
                setdvar( "dvar_702217AE066916B9", "all" );

            break;
    }
}

battlechatter_commander_on( team )
{
    if ( team == "all" )
    {
        setdvar( "dvar_702217AE066916B9", "" );
        return;
    }

    switch ( getdvar( "dvar_702217AE066916B9" ) )
    {
        case "axis":
            if ( team == "axis" )
                setdvar( "dvar_702217AE066916B9", "" );

            break;
        case "allies":
            if ( team == "allies" )
                setdvar( "dvar_702217AE066916B9", "" );

            break;
        case "all":
            if ( team == "axis" )
                setdvar( "dvar_702217AE066916B9", "allies" );
            else if ( team == "allies" )
                setdvar( "dvar_702217AE066916B9", "allies" );

            break;
    }
}

battlechatter_radioecho_off( team )
{
    if ( team == "all" )
    {
        setdvar( "dvar_21778F568437CD09", "all" );
        return;
    }

    switch ( getdvar( "dvar_21778F568437CD09" ) )
    {
        case "":
            setdvar( "dvar_21778F568437CD09", team );
            break;
        case "axis":
            if ( team == "allies" )
                setdvar( "dvar_21778F568437CD09", "all" );

            break;
        case "allies":
            if ( team == "axis" )
                setdvar( "dvar_21778F568437CD09", "all" );

            break;
    }
}

battlechatter_radioecho_on( team )
{
    if ( team == "all" )
    {
        setdvar( "dvar_21778F568437CD09", "" );
        return;
    }

    switch ( getdvar( "dvar_21778F568437CD09" ) )
    {
        case "axis":
            if ( team == "axis" )
                setdvar( "dvar_21778F568437CD09", "" );

            break;
        case "allies":
            if ( team == "allies" )
                setdvar( "dvar_21778F568437CD09", "" );

            break;
        case "all":
            if ( team == "axis" )
                setdvar( "dvar_21778F568437CD09", "allies" );
            else if ( team == "allies" )
                setdvar( "dvar_21778F568437CD09", "axis" );

            break;
    }
}

battlechatter_otn_on( type, team )
{
    type = tolower( type );
    team = tolower( team );
    dvar = undefined;

    switch ( type )
    {
        case "stealth":
            dvar = "dvar_495535A4877B324D";
            break;
        case "combat":
            dvar = "dvar_87DCA5163728CE02";
            break;
        default:
    }

    setdvar( dvar, team );
}

battlechatter_otn_off( type )
{
    type = tolower( type );
    dvar = undefined;

    switch ( type )
    {
        case "stealth":
            dvar = "dvar_495535A4877B324D";
            break;
        case "combat":
            dvar = "dvar_87DCA5163728CE02";
            break;
        default:
    }

    setdvar( dvar, "off" );
}

battlechatter_probability( _id_7E1B02C65B1197C8 )
{
    self.battlechatter_saytimescaled = _id_7E1B02C65B1197C8;
}

battlechatter_filter_on( type )
{
    if ( !isarray( type ) )
        type = [ type ];

    foreach ( t in type )
        battlechatter_filter_internal( t, 1 );
}

battlechatter_filter_off( type )
{
    if ( !isarray( type ) )
        type = [ type ];

    foreach ( t in type )
        battlechatter_filter_internal( t, undefined );
}

battlechatter_filter_internal( type, _id_41D8BF229CF29051 )
{
    switch ( type )
    {
        case "threat":
            self.battlechatter.filterthreat = _id_41D8BF229CF29051;
            break;
        case "inform":
            self.battlechatter.filterinform = _id_41D8BF229CF29051;
            break;
        case "vehicle":
            self.battlechatter.filtervehicle = _id_41D8BF229CF29051;
            break;
        case "order":
            self.battlechatter.filterorder = _id_41D8BF229CF29051;
            break;
        case "reaction":
            self.battlechatter.filterreaction = _id_41D8BF229CF29051;
            break;
        case "response":
            self.battlechatter.filterresponse = _id_41D8BF229CF29051;
            break;
        case "stealth":
            self.battlechatter.filterstealth = _id_41D8BF229CF29051;
            break;
    }
}

battlechatter_friendlyfire_force( _id_E3108E412AFB3811 )
{
    if ( istrue( _id_E3108E412AFB3811 ) )
        self.battlechatter.friendlyfire_force = 1;
    else
        self.battlechatter.friendlyfire_force = undefined;
}

battlechatter_addvehicle( class )
{
    if ( !isdefined( self.battlechatter ) )
        self.battlechatter = spawnstruct();

    self.battlechatter.enemyclass = class;
    thread _id_0F4E8D02D2F70888::aivehiclekillwaiter();
}

set_battlechatter( state )
{
    if ( !isalive( self ) || !isdefined( level.battlechatter ) )
        return;

    if ( isdefined( self.script_bcdialog ) && !self.script_bcdialog )
        state = 0;

    if ( !isdefined( self.battlechatterallowed ) && !state )
        return;

    self.battlechatterallowed = state;
}

set_team_bcvoice( team, _id_E1F5BA3E62FF8241 )
{
    if ( !anim.chatinitialized )
        return;

    _id_73CAAF0EC409E8D1 = getarraykeys( anim.countryids );
    _id_A3F20193B82B1467 = scripts\engine\utility::array_contains( _id_73CAAF0EC409E8D1, _id_E1F5BA3E62FF8241 );

    if ( !_id_A3F20193B82B1467 )
        return;

    allies = getaiarray( team );

    foreach ( ai in allies )
    {
        ai set_ai_bcvoice( _id_E1F5BA3E62FF8241 );
        waitframe();
    }
}

set_ai_bcvoice( _id_E1F5BA3E62FF8241 )
{
    if ( !anim.chatinitialized )
        return;

    _id_73CAAF0EC409E8D1 = getarraykeys( anim.countryids );
    _id_A3F20193B82B1467 = scripts\engine\utility::array_contains( _id_73CAAF0EC409E8D1, _id_E1F5BA3E62FF8241 );

    if ( !_id_A3F20193B82B1467 )
        return;

    if ( self.type == "dog" )
        return;

    if ( isdefined( self.battlechatter ) && istrue( self.battlechatter.isspeaking ) )
    {
        self waittill( "done speaking" );
        wait 0.1;
    }

    _id_0F4E8D02D2F70888::_id_F9E1B676055CF38B( _id_E1F5BA3E62FF8241 );
}

flavorbursts_on( team )
{
    thread set_flavorbursts_team_state( 1, team );
}

flavorbursts_off( team )
{
    thread set_flavorbursts_team_state( 0, team );
}

set_flavorbursts_team_state( state, team )
{
    if ( !isdefined( team ) )
        team = "allies";

    while ( !isdefined( anim.chatinitialized ) )
        wait 0.05;

    if ( !anim.chatinitialized )
        return;

    wait 1.5;
    level.flavorbursts[team] = state;
    guys = [];
    guys = getaiarray( team );
    scripts\engine\utility::array_thread( guys, ::set_flavorbursts, state );
}

set_flavorbursts( state )
{
    self.flavorbursts = state;
}

friendlyfire_warnings_off()
{
    _id_8BAB3203A26744B8 = getaiarray( "allies" );

    foreach ( guy in _id_8BAB3203A26744B8 )
    {
        if ( isalive( guy ) )
            guy set_friendlyfire_warnings( 0 );
    }

    level.friendlyfire_warnings = 0;
}

friendlyfire_warnings_on()
{
    _id_8BAB3203A26744B8 = getaiarray( "allies" );

    foreach ( guy in _id_8BAB3203A26744B8 )
    {
        if ( isalive( guy ) )
            guy set_friendlyfire_warnings( 1 );
    }

    level.friendlyfire_warnings = 1;
}

set_friendlyfire_warnings( state )
{
    if ( state )
        self.friendlyfire_warnings_disable = undefined;
    else
        self.friendlyfire_warnings_disable = 1;
}

player_battlechatter_on()
{
    thread scripts\sp\player\playerchatter::player_battlechatter_on_thread();
}

player_battlechatter_off()
{
    thread scripts\sp\player\playerchatter::player_battlechatter_off_thread();
}

_id_2A5C9A57CDA3367B( name )
{
    self.name = name;
    self.ainame = name;
}

_id_9E4B873F1BE5D856( _id_00AE17C5A8B1BC1B )
{
    self._id_00AE17C5A8B1BC1B = _id_00AE17C5A8B1BC1B;
    self.airank = _id_00AE17C5A8B1BC1B;
}

_id_AB35AE296C8F8609( callsign )
{
    self.callsign = callsign;
}

debugorigin()
{
    self notify( "Debug origin" );
    self endon( "Debug origin" );
    self endon( "death" );

    for (;;)
    {
        forward = anglestoforward( self.angles );
        _id_4B01E6DB3ABF9DDB = forward * 30;
        _id_3A8939B94BA42EEA = forward * 20;
        right = anglestoright( self.angles );
        left = right * -10;
        right = right * 10;
        wait 0.05;
    }
}

get_linked_struct()
{
    array = scripts\engine\utility::get_linked_structs();

    if ( !array.size )
        return undefined;

    return array[0];
}

get_last_ent_in_chain( _id_512663D15F15351D )
{
    _id_FDD947D4B22C04A3 = self;
    _id_3020022D05244862 = 0;

    while ( isdefined( _id_FDD947D4B22C04A3.target ) )
    {
        if ( isdefined( _id_FDD947D4B22C04A3.target ) )
        {
            _id_FDD947D4B22C04A3 = get_next_point_in_chain( _id_512663D15F15351D, _id_FDD947D4B22C04A3.target );
            _id_3020022D05244862++;

            if ( _id_3020022D05244862 == 10 )
            {
                waitframe();
                _id_3020022D05244862 = 0;
            }

            continue;
        }

        break;
    }

    _id_B503332FA2AA2168 = _id_FDD947D4B22C04A3;
    return _id_B503332FA2AA2168;
}

get_next_point_in_chain( _id_512663D15F15351D, _id_838DCE3ED0A1A11C )
{
    _id_FDD947D4B22C04A3 = undefined;

    if ( isdefined( _id_512663D15F15351D ) )
    {
        switch ( _id_512663D15F15351D )
        {
            case "vehiclenode":
                _id_FDD947D4B22C04A3 = getvehiclenode( _id_838DCE3ED0A1A11C, "targetname" );
                break;
            case "pathnode":
                _id_FDD947D4B22C04A3 = getnode( _id_838DCE3ED0A1A11C, "targetname" );
                break;
            case "ent":
                _id_FDD947D4B22C04A3 = getent( _id_838DCE3ED0A1A11C, "targetname" );
                break;
            case "struct":
                _id_FDD947D4B22C04A3 = scripts\engine\utility::getstruct( _id_838DCE3ED0A1A11C, "targetname" );
                break;
            default:
        }

        return _id_FDD947D4B22C04A3;
    }
    else
    {
        _id_FDD947D4B22C04A3 = scripts\engine\utility::getstruct( _id_838DCE3ED0A1A11C, "targetname" );

        if ( isdefined( _id_FDD947D4B22C04A3 ) )
            return _id_FDD947D4B22C04A3;

        _id_FDD947D4B22C04A3 = getnode( _id_838DCE3ED0A1A11C, "targetname" );

        if ( isdefined( _id_FDD947D4B22C04A3 ) )
            return _id_FDD947D4B22C04A3;

        _id_FDD947D4B22C04A3 = getent( _id_838DCE3ED0A1A11C, "targetname" );

        if ( isdefined( _id_FDD947D4B22C04A3 ) )
            return _id_FDD947D4B22C04A3;

        _id_FDD947D4B22C04A3 = getvehiclenode( _id_838DCE3ED0A1A11C, "targetname" );

        if ( isdefined( _id_FDD947D4B22C04A3 ) )
            return _id_FDD947D4B22C04A3;
    }

    return undefined;
}

timeout( timeout )
{
    self endon( "death" );
    wait( timeout );
    self notify( "timeout" );
}

array_removedead_keepkeys( array )
{
    _id_BFC65A378A6D8EFE = [];
    keys = getarraykeys( array );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < keys.size; _id_AC0E594AC96AA3A8++ )
    {
        key = keys[_id_AC0E594AC96AA3A8];

        if ( !isalive( array[key] ) )
            continue;

        _id_BFC65A378A6D8EFE[key] = array[key];
    }

    return _id_BFC65A378A6D8EFE;
}

array_remove_nokeys( ents, _id_F7E215BD10CC45E9 )
{
    _id_D674D7970EEF9653 = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ents.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( ents[_id_AC0E594AC96AA3A8] != _id_F7E215BD10CC45E9 )
            _id_D674D7970EEF9653[_id_D674D7970EEF9653.size] = ents[_id_AC0E594AC96AA3A8];
    }

    return _id_D674D7970EEF9653;
}

array_remove_key_array( array, _id_1011630871825FB8 )
{
    if ( _id_1011630871825FB8.size == 0 )
        return array;

    _id_BFC65A378A6D8EFE = [];

    foreach ( key, item in array )
    {
        found = 0;

        foreach ( _id_B3E77F92460BE011 in _id_1011630871825FB8 )
        {
            if ( _id_B3E77F92460BE011 == key )
            {
                found = 1;
                break;
            }
        }

        if ( found )
            continue;

        _id_BFC65A378A6D8EFE[key] = item;
    }

    return _id_BFC65A378A6D8EFE;
}

array_notify( ents, _id_B3D834019B5EA83F, _id_AA9F4C033D62BC8A )
{
    foreach ( key, value in ents )
        value notify( _id_B3D834019B5EA83F, _id_AA9F4C033D62BC8A );
}

struct_arrayspawn()
{
    struct = spawnstruct();
    struct.array = [];
    struct.lastindex = 0;
    return struct;
}

structarray_add( struct, object )
{
    struct.array[struct.lastindex] = object;
    object.struct_array_index = struct.lastindex;
    struct.lastindex++;
}

structarray_remove( struct, object )
{
    structarray_swaptolast( struct, object );
    struct.array[struct.lastindex - 1] = undefined;
    struct.lastindex--;
}

structarray_remove_index( struct, index )
{
    if ( isdefined( struct.array[struct.lastindex - 1] ) )
    {
        struct.array[index] = struct.array[struct.lastindex - 1];
        struct.array[index].struct_array_index = index;
        struct.array[struct.lastindex - 1] = undefined;
        struct.lastindex = struct.array.size;
    }
    else
    {
        struct.array[index] = undefined;
        structarray_remove_undefined( struct );
    }
}

structarray_remove_undefined( struct )
{
    _id_BFC65A378A6D8EFE = [];

    foreach ( object in struct.array )
    {
        if ( !isdefined( object ) )
            continue;

        _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = object;
    }

    struct.array = _id_BFC65A378A6D8EFE;

    foreach ( _id_AC0E594AC96AA3A8, object in struct.array )
        object.struct_array_index = _id_AC0E594AC96AA3A8;

    struct.lastindex = struct.array.size;
}

structarray_swaptolast( struct, object )
{
    struct scripts\engine\sp\utility_code::structarray_swap( struct.array[struct.lastindex - 1], object );
}

structarray_shuffle( struct, _id_0554E8BB5CAD50DA )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_0554E8BB5CAD50DA; _id_AC0E594AC96AA3A8++ )
        struct scripts\engine\sp\utility_code::structarray_swap( struct.array[_id_AC0E594AC96AA3A8], struct.array[randomint( struct.lastindex )] );
}

custom_battlechatter( _id_69857F6E03B5E3DC )
{
    return _id_0F4E8D02D2F70888::custom_battlechatter_internal( _id_69857F6E03B5E3DC );
}

get_stop_watch( time, _id_44C5C34DA5574D68 )
{
    _id_71CCD3C0058E238C = newhudelem();

    if ( _func_AFE76380661D5C7F() )
    {
        _id_71CCD3C0058E238C.x = 68;
        _id_71CCD3C0058E238C.y = 35;
    }
    else
    {
        _id_71CCD3C0058E238C.x = 58;
        _id_71CCD3C0058E238C.y = 95;
    }

    _id_71CCD3C0058E238C.alignx = "center";
    _id_71CCD3C0058E238C.aligny = "middle";
    _id_71CCD3C0058E238C.horzalign = "left";
    _id_71CCD3C0058E238C.vertalign = "middle";

    if ( isdefined( _id_44C5C34DA5574D68 ) )
        timer = _id_44C5C34DA5574D68;
    else
        timer = level.explosiveplanttime;

    _id_71CCD3C0058E238C _meth_37D2F8B3CF54BD33( timer, time, "hudStopwatch", 64, 64 );
    return _id_71CCD3C0058E238C;
}

set_mission_failed_override( func )
{
    level.mission_fail_func = func;
}

get_force_color_guys( team, color )
{
    ai = getaiarray( team );
    guys = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = ai[_id_AC0E594AC96AA3A8];

        if ( !isdefined( guy.script_forcecolor ) )
            continue;

        if ( guy.script_forcecolor != color )
            continue;

        guys[guys.size] = guy;
    }

    return guys;
}

get_all_force_color_friendlies()
{
    ai = getaiarray( "allies" );
    guys = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = ai[_id_AC0E594AC96AA3A8];

        if ( !isdefined( guy.script_forcecolor ) )
            continue;

        guys[guys.size] = guy;
    }

    return guys;
}

enable_ai_color()
{
    if ( isdefined( self.script_forcecolor ) )
        return;

    if ( !isdefined( self.old_forcecolor ) )
        return;

    set_force_color( self.old_forcecolor );
    self.old_forcecolor = undefined;
}

enable_ai_color_dontmove()
{
    self.dontcolormove = 1;
    enable_ai_color();
}

disable_ai_color()
{
    if ( isdefined( self.new_force_color_being_set ) )
    {
        self endon( "death" );
        self waittill( "done_setting_new_color" );
    }

    self _meth_1CE2B487DF6864F3();

    if ( !isdefined( self.script_forcecolor ) )
        return;

    self.old_forcecolor = self.script_forcecolor;
    level.arrays_of_colorforced_ai[scripts\sp\colors::get_team()][self.script_forcecolor] = scripts\engine\utility::array_remove( level.arrays_of_colorforced_ai[scripts\sp\colors::get_team()][self.script_forcecolor], self );
    scripts\sp\colors::left_color_node();
    self.script_forcecolor = undefined;
    self.currentcolorcode = undefined;
}

clear_force_color()
{
    disable_ai_color();
}

get_force_color()
{
    color = self.script_forcecolor;
    return color;
}

shortencolor( color )
{
    return level.colorchecklist[tolower( color )];
}

set_force_color( _color )
{
    color = shortencolor( _color );

    if ( !isai( self ) )
    {
        set_force_color_spawner( color );
        return;
    }

    if ( self.team == "allies" )
    {
        self.fixednode = 1;
        self.fixednodesaferadius = 64;
        self.pathenemyfightdist = 0;
        self.pathenemylookahead = 0;
    }

    self.script_color_axis = undefined;
    self.script_color_allies = undefined;
    self.old_forcecolor = undefined;
    team = scripts\sp\colors::get_team();

    if ( isdefined( self.script_forcecolor ) )
        level.arrays_of_colorforced_ai[team][self.script_forcecolor] = scripts\engine\utility::array_remove( level.arrays_of_colorforced_ai[team][self.script_forcecolor], self );

    self.script_forcecolor = color;
    level.arrays_of_colorforced_ai[team][color] = scripts\engine\utility::array_removedead( level.arrays_of_colorforced_ai[team][color] );
    level.arrays_of_colorforced_ai[team][self.script_forcecolor] = scripts\engine\utility::array_add( level.arrays_of_colorforced_ai[team][self.script_forcecolor], self );
    thread scripts\engine\sp\utility_code::new_color_being_set( color );
}

set_force_color_spawner( color )
{
    self.script_forcecolor = color;
    self.old_forcecolor = undefined;
}

restarteffect()
{
    scripts\common\createfx::restart_fx_looper();
}

pauseexploder( num )
{
    num = num + "";
    exploders = level.createfxexploders[num];

    if ( isdefined( exploders ) )
    {
        foreach ( ent in exploders )
            ent scripts\engine\utility::pauseeffect();
    }
}

restartexploder( num )
{
    num = num + "";
    exploders = level.createfxexploders[num];

    if ( isdefined( exploders ) )
    {
        foreach ( ent in exploders )
            ent restarteffect();
    }
}

ignoreallenemies( _id_C20FD24466DC43B8 )
{
    self notify( "ignoreAllEnemies_threaded" );
    self endon( "ignoreAllEnemies_threaded" );

    if ( _id_C20FD24466DC43B8 )
    {
        self.old_threat_bias_group = self getthreatbiasgroup();
        num = undefined;
        createthreatbiasgroup( "ignore_everybody" );
        self setthreatbiasgroup( "ignore_everybody" );
        teams = [];
        teams["axis"] = "allies";
        teams["allies"] = "axis";
        ai = getaiarray( teams[self.team] );
        groups = [];

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
            groups[ai[_id_AC0E594AC96AA3A8] getthreatbiasgroup()] = 1;

        keys = getarraykeys( groups );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < keys.size; _id_AC0E594AC96AA3A8++ )
            setthreatbias( keys[_id_AC0E594AC96AA3A8], "ignore_everybody", 0 );
    }
    else
    {
        num = undefined;

        if ( self.old_threat_bias_group != "" )
            self setthreatbiasgroup( self.old_threat_bias_group );

        self.old_threat_bias_group = undefined;
    }
}

add_start( msg, _id_D0E49134703DA0D5, _id_032566017AA4406B, _id_E4223248FA0A44F9, _id_7A3C1094F38EC7D2 )
{
    scripts\sp\starts::add_start_assert();
    msg = tolower( msg );
    array = scripts\sp\starts::add_start_construct( msg, _id_D0E49134703DA0D5, _id_032566017AA4406B, _id_E4223248FA0A44F9, _id_7A3C1094F38EC7D2 );
    level.start_functions[level.start_functions.size] = array;
    level.start_arrays[msg] = array;
}

set_default_start( start )
{
    level.default_start_override = tolower( start );
}

set_default_start_alt( start )
{
    level.default_start_override_alt = tolower( start );
}

within_fov_of_players( end_origin, fov )
{
    _id_B17D99B17C3501ED = undefined;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.players.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_D539DD4D949070D9 = level.players[_id_AC0E594AC96AA3A8] geteye();
        _id_B17D99B17C3501ED = scripts\engine\utility::within_fov( _id_D539DD4D949070D9, level.players[_id_AC0E594AC96AA3A8] getplayerangles(), end_origin, fov );

        if ( !_id_B17D99B17C3501ED )
            return 0;
    }

    return 1;
}

wait_for_buffer_time_to_pass( last_queue_time, _id_8B4BA669452DB241 )
{
    timer = _id_8B4BA669452DB241 * 1000 - ( gettime() - last_queue_time );
    timer = timer * 0.001;

    if ( timer > 0 )
        wait( timer );
}

bcs_scripted_dialogue_start()
{
    anim.scripteddialoguestarttime = gettime();
}

dialogue_queue( msg )
{
    bcs_scripted_dialogue_start();
    scripts\sp\anim::anim_single_queue( self, msg );
}

generic_dialogue_queue( msg, timeout )
{
    bcs_scripted_dialogue_start();
    scripts\sp\anim::anim_generic_queue( self, msg, undefined, undefined, timeout );
}

radio_dialogue( msg, timeout )
{
    if ( !isdefined( level.player_radio_emitter ) )
    {
        ent = spawn( "script_origin", ( 0, 0, 0 ) );
        ent linkto( level.player, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        level.player_radio_emitter = ent;
    }

    bcs_scripted_dialogue_start();
    success = 0;

    if ( !isdefined( timeout ) )
        success = level.player_radio_emitter function_stack( scripts\engine\utility::playsoundontag, level.scr_radio[msg], undefined, 1 );
    else
        success = level.player_radio_emitter function_stack_timeout( timeout, scripts\engine\utility::playsoundontag, level.scr_radio[msg], undefined, 1 );

    return success;
}

radio_dialogue_overlap( msg )
{
    level.player_radio_emitter play_sound_on_tag( level.scr_radio[msg], undefined, 1 );
}

radio_dialogue_stop()
{
    if ( !isdefined( level.player_radio_emitter ) )
        return;

    level.player_radio_emitter delete();
}

radio_dialogue_clear_stack()
{
    if ( !isdefined( level.player_radio_emitter ) )
        return;

    level.player_radio_emitter function_stack_clear();
}

radio_dialogue_interupt( msg )
{
    if ( !isdefined( level.player_radio_emitter ) )
    {
        ent = spawn( "script_origin", ( 0, 0, 0 ) );
        ent linkto( level.player, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        level.player_radio_emitter = ent;
    }

    level.player_radio_emitter play_sound_on_tag( level.scr_radio[msg], undefined, 1 );
}

radio_dialogue_safe( msg )
{
    return radio_dialogue( msg, 0.05 );
}

smart_radio_dialogue( dialogue, timeout )
{
    scripts\engine\sp\utility_code::add_to_radio( dialogue );
    radio_dialogue( dialogue, timeout );
}

smart_radio_dialogue_interrupt( dialogue )
{
    scripts\engine\sp\utility_code::add_to_radio( dialogue );
    radio_dialogue_stop();
    radio_dialogue_interupt( dialogue );
}

smart_radio_dialogue_overlap( dialogue )
{
    scripts\engine\sp\utility_code::add_to_radio( dialogue );
    radio_dialogue_overlap( dialogue );
}

player_dialogue( msg, timeout )
{
    return player_dialogue_gesture( msg, 0, undefined, undefined, undefined, timeout );
}

_play_player_dialogue( alias, _id_5F3C8CFE71AC11E7, gestures, _id_90E92F9F64842594, _id_539A0308B1CCA14E )
{
    if ( scripts\engine\utility::is_dead_sentient() )
        return;

    org = spawn( "script_origin", ( 0, 0, 0 ) );
    org endon( "death" );
    org.origin = self.origin;
    org.angles = self.angles;
    org linkto( self );

    if ( _id_5F3C8CFE71AC11E7 > 0 )
        org scripts\engine\utility::delaycall( _id_5F3C8CFE71AC11E7, ::playsound, alias, "sounddone" );
    else
        org playsound( alias, "sounddone" );

    if ( isdefined( gestures ) )
    {
        if ( isarray( gestures ) )
        {
            for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < gestures.size; _id_AC0E594AC96AA3A8++ )
            {
                if ( isdefined( _id_539A0308B1CCA14E ) && isdefined( _id_539A0308B1CCA14E[_id_AC0E594AC96AA3A8] ) )
                {
                    level.player scripts\engine\utility::delaythread( _id_90E92F9F64842594[_id_AC0E594AC96AA3A8], ::player_gesture_force, gestures[_id_AC0E594AC96AA3A8], _id_539A0308B1CCA14E[_id_AC0E594AC96AA3A8] );
                    continue;
                }

                level.player scripts\engine\utility::delaythread( _id_90E92F9F64842594[_id_AC0E594AC96AA3A8], ::player_gesture_force, gestures[_id_AC0E594AC96AA3A8] );
            }
        }
        else if ( isdefined( _id_539A0308B1CCA14E ) )
            level.player scripts\engine\utility::delaythread( _id_90E92F9F64842594, ::player_gesture_force, gestures, _id_539A0308B1CCA14E );
        else
            level.player scripts\engine\utility::delaythread( _id_90E92F9F64842594, ::player_gesture_force, gestures );
    }

    if ( _id_5F3C8CFE71AC11E7 > 0 )
        wait( _id_5F3C8CFE71AC11E7 );

    if ( !isdefined( wait_for_sounddone_or_death( org, level.player ) ) )
        org stopsounds();

    wait 0.05;
    org delete();
}

player_dialogue_gesture( msg, _id_5F3C8CFE71AC11E7, gestures, _id_90E92F9F64842594, _id_FD5EF62C4BDE358E, timeout )
{
    if ( !isdefined( level.player_dialogue_emitter ) )
    {
        ent = spawn( "script_origin", ( 0, 0, 0 ) );
        ent linkto( level.player, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        level.player_dialogue_emitter = ent;
    }

    bcs_scripted_dialogue_start();
    success = 0;

    if ( !isdefined( timeout ) )
        success = level.player_dialogue_emitter function_stack( ::_play_player_dialogue, level.scr_plrdialogue[msg], _id_5F3C8CFE71AC11E7, gestures, _id_90E92F9F64842594, _id_FD5EF62C4BDE358E );
    else
        success = level.player_dialogue_emitter function_stack_timeout( timeout, ::_play_player_dialogue, level.scr_plrdialogue[msg], _id_5F3C8CFE71AC11E7, gestures, _id_90E92F9F64842594, _id_FD5EF62C4BDE358E );

    return success;
}

player_dialogue_stop()
{
    if ( !isdefined( level.player_dialogue_emitter ) )
        return;

    level.player_dialogue_emitter delete();
}

player_dialogue_clear_stack()
{
    if ( !isdefined( level.player_dialogue_emitter ) )
        return;

    level.player_dialogue_emitter function_stack_clear();
}

player_dialogue_interrupt( msg )
{
    player_dialogue_stop();

    if ( !isdefined( level.player_dialogue_emitter ) )
    {
        ent = spawn( "script_origin", ( 0, 0, 0 ) );
        ent linkto( level.player, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        level.player_dialogue_emitter = ent;
    }

    level.player_dialogue_emitter _play_player_dialogue( level.scr_plrdialogue[msg], 0 );
}

smart_player_dialogue( dialogue, timeout )
{
    scripts\engine\sp\utility_code::add_to_player_dialogue( dialogue );
    player_dialogue( dialogue, timeout );
}

smart_player_dialogue_interrupt( dialogue )
{
    scripts\engine\sp\utility_code::add_to_player_dialogue( dialogue );
    player_dialogue_interrupt( dialogue );
}

smart_player_dialogue_gesture( dialogue, _id_5F3C8CFE71AC11E7, gestures, _id_90E92F9F64842594, _id_FD5EF62C4BDE358E, timeout )
{
    scripts\engine\sp\utility_code::add_to_player_dialogue( dialogue );
    player_dialogue_gesture( dialogue, _id_5F3C8CFE71AC11E7, gestures, _id_90E92F9F64842594, _id_FD5EF62C4BDE358E, timeout );
}

smart_dialogue( dialogue )
{
    scripts\engine\sp\utility_code::add_to_dialogue( dialogue );
    dialogue_queue( dialogue );
}

smart_dialogue_generic( dialogue )
{
    scripts\engine\sp\utility_code::add_to_dialogue_generic( dialogue );
    generic_dialogue_queue( dialogue );
}

_id_077BCF02459F2BA7( dialogue, _id_C5B2004CFE93F886, _id_40C2A85296F1ABFF, _id_F8C64B655F66014C )
{
    if ( !isdefined( _id_F8C64B655F66014C ) && isdefined( level._id_E45D4B8E1CC3925C ) )
        _id_F8C64B655F66014C = level._id_E45D4B8E1CC3925C;

    if ( istrue( _id_40C2A85296F1ABFF ) && isdefined( level.dialoguehud ) || isdefined( _id_F8C64B655F66014C ) && isdefined( level.dialoguehud ) && level.dialoguehud.size >= _id_F8C64B655F66014C )
        _id_E1DE2D5299F57035( 1, _id_F8C64B655F66014C - 1 );

    if ( isplayer( self ) )
        color = "^3";
    else if ( isdefined( self.team ) )
    {
        switch ( self.team )
        {
            case "axis":
                color = "^1";
                break;
            case "allies":
                color = "^5";
                break;
            case "team3":
                color = "^4";
                break;
            default:
                color = "^2";
                break;
        }
    }
    else
        color = "^2";

    _id_CAB6D58F65AF5AA4 = "";

    if ( isdefined( self.name ) )
        _id_CAB6D58F65AF5AA4 = _id_CAB6D58F65AF5AA4 + self.name;
    else if ( isplayer( self ) )
        _id_CAB6D58F65AF5AA4 = _id_CAB6D58F65AF5AA4 + "Player";
    else if ( isdefined( self.team ) )
    {
        if ( isdefined( level._id_76FED2AD3DB8BB83 ) && isdefined( level._id_76FED2AD3DB8BB83[self.team] ) )
            _id_CAB6D58F65AF5AA4 = _id_CAB6D58F65AF5AA4 + level._id_76FED2AD3DB8BB83[self.team];
        else
        {
            switch ( self.team )
            {
                case "axis":
                    _id_CAB6D58F65AF5AA4 = _id_CAB6D58F65AF5AA4 + "Enemy";
                    break;
                case "team3":
                    _id_CAB6D58F65AF5AA4 = _id_CAB6D58F65AF5AA4 + "Team3";
                    break;
                case "allies":
                    _id_CAB6D58F65AF5AA4 = _id_CAB6D58F65AF5AA4 + "Friendly";
                    break;
                default:
                    _id_CAB6D58F65AF5AA4 = _id_CAB6D58F65AF5AA4 + "Civ";
                    break;
            }
        }
    }

    if ( istrue( _id_C5B2004CFE93F886 ) )
        _id_CAB6D58F65AF5AA4 = _id_CAB6D58F65AF5AA4 + " Over Radio";

    if ( _id_CAB6D58F65AF5AA4 != "" )
        _id_CAB6D58F65AF5AA4 = color + _id_CAB6D58F65AF5AA4 + ": ^7";

    _id_CAB6D58F65AF5AA4 = _id_CAB6D58F65AF5AA4 + dialogue;
    thread _id_EA8BBCC7FB7AE790( _id_CAB6D58F65AF5AA4 );
}

_id_EA8BBCC7FB7AE790( string )
{
    _id_B54520C420443A7C = int( 5.9 );
    _id_CA02086954972024 = int( 10 );
    _id_7794FDD4649E6D7F = int( 4 );

    if ( isdefined( level._id_EECD069BB8D057C5 ) )
        _id_688F98559BF04F9D = level._id_EECD069BB8D057C5;
    else
        _id_688F98559BF04F9D = 425;

    width = int( clamp( string.size * _id_B54520C420443A7C, 350, 630 ) );
    _id_AB9868B0589A6052 = scripts\engine\utility::wrap_text( string, int( 630 / _id_B54520C420443A7C ) );
    height = _id_CA02086954972024 * _id_AB9868B0589A6052.size + _id_7794FDD4649E6D7F * 2;
    _id_9A77F8C6FC5AC4A4 = [];

    foreach ( _id_AC0E594AC96AA3A8, string in _id_AB9868B0589A6052 )
    {
        text = newhudelem();
        text.alpha = 0;
        text settext( string );
        text.fontscale = 1;
        text._id_CB89110314447B2F = _id_AC0E594AC96AA3A8;
        text.y = 425;
        _id_9A77F8C6FC5AC4A4[_id_9A77F8C6FC5AC4A4.size] = text;
    }

    bg = newhudelem();
    bg.alpha = 0;
    bg setshader( "black", width, height );
    bg.y = 425;

    if ( isdefined( level.dialoguehud ) )
    {
        foreach ( _id_A42ACACCA10B911D in level.dialoguehud )
        {
            foreach ( hud in _id_A42ACACCA10B911D )
            {
                hud moveovertime( 0.1 );
                hud.y = hud.y - ( height + 5 );
            }
        }
    }
    else
        level.dialoguehud = [];

    array = scripts\engine\utility::array_add( _id_9A77F8C6FC5AC4A4, bg );
    array[0] endon( "dialogue_print_clear" );
    level.dialoguehud[level.dialoguehud.size] = array;

    foreach ( hud in array )
    {
        hud.alignx = "center";
        hud.aligny = "top";
        hud.x = 320;
        hud.y = 425;
        hud.sort = 5;

        if ( isdefined( hud._id_CB89110314447B2F ) )
            hud.y = hud.y + ( hud._id_CB89110314447B2F * _id_CA02086954972024 + _id_7794FDD4649E6D7F );
    }

    _id_688F98559BF04F9D = _id_688F98559BF04F9D - height;

    foreach ( hud in array )
    {
        hud fadeovertime( 0.1 );

        if ( isdefined( hud._id_CB89110314447B2F ) )
            hud.alpha = 1;
        else
            hud.alpha = 0.5;

        hud moveovertime( 0.1 );

        if ( isdefined( hud._id_CB89110314447B2F ) )
        {
            hud.y = _id_688F98559BF04F9D + hud._id_CB89110314447B2F * _id_CA02086954972024 + _id_7794FDD4649E6D7F;
            continue;
        }

        hud.y = _id_688F98559BF04F9D;
    }

    wait 2.1;

    foreach ( hud in array )
    {
        hud fadeovertime( 1.0 );
        hud.alpha = 0;
    }

    wait 1.0;

    foreach ( _id_AC0E594AC96AA3A8, _id_A42ACACCA10B911D in level.dialoguehud )
    {
        if ( _id_A42ACACCA10B911D[0] == array[0] )
        {
            level.dialoguehud = scripts\engine\utility::array_remove_index( level.dialoguehud, _id_AC0E594AC96AA3A8, 0 );
            break;
        }
    }

    if ( !level.dialoguehud.size )
        level.dialoguehud = undefined;

    foreach ( hud in array )
        hud destroy();
}

_id_E1DE2D5299F57035( immediate, _id_F8C64B655F66014C )
{
    if ( !isdefined( level.dialoguehud ) )
        return;

    thread _id_BBB6C68122529E12( immediate, _id_F8C64B655F66014C );
}

_id_BBB6C68122529E12( immediate, _id_F8C64B655F66014C )
{
    if ( !isdefined( _id_F8C64B655F66014C ) )
        _id_F8C64B655F66014C = 0;

    _id_CE7AC40904613A16 = [];
    _id_A8FD9F4005A60D95 = level.dialoguehud.size;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_A8FD9F4005A60D95 && _id_A8FD9F4005A60D95 - _id_CE7AC40904613A16.size > _id_F8C64B655F66014C; _id_AC0E594AC96AA3A8++ )
    {
        level.dialoguehud[_id_AC0E594AC96AA3A8][0] notify( "dialogue_print_clear" );
        _id_CE7AC40904613A16[_id_CE7AC40904613A16.size] = level.dialoguehud[_id_AC0E594AC96AA3A8];
        level.dialoguehud = scripts\engine\utility::array_remove_index( level.dialoguehud, _id_AC0E594AC96AA3A8, 1 );
    }

    level.dialoguehud = scripts\engine\utility::array_combine( level.dialoguehud );

    if ( !istrue( immediate ) )
    {
        foreach ( _id_A42ACACCA10B911D in _id_CE7AC40904613A16 )
        {
            foreach ( hud in _id_A42ACACCA10B911D )
            {
                if ( hud.alpha > 0 )
                {
                    hud fadeovertime( 1.0 );
                    hud.alpha = 0;
                }
            }
        }

        wait 1.0;
    }

    if ( isdefined( level.dialoguehud ) && !level.dialoguehud.size )
        level.dialoguehud = undefined;

    foreach ( _id_A42ACACCA10B911D in _id_CE7AC40904613A16 )
    {
        foreach ( hud in _id_A42ACACCA10B911D )
        {
            if ( isdefined( hud ) )
                hud destroy();
        }
    }
}

_id_DDB9B7389886BCF2( y )
{
    if ( !isdefined( y ) )
        y = 425;

    if ( isdefined( level.dialoguehud ) )
    {
        if ( isdefined( level._id_EECD069BB8D057C5 ) )
            _id_BAEF87CC13A8C9DF = level._id_EECD069BB8D057C5;
        else
            _id_BAEF87CC13A8C9DF = 425;

        offset = y - _id_BAEF87CC13A8C9DF;

        foreach ( _id_A42ACACCA10B911D in level.dialoguehud )
        {
            foreach ( hud in _id_A42ACACCA10B911D )
                hud.y = hud.y + offset;
        }
    }

    level._id_EECD069BB8D057C5 = y;
}

_id_3DEAF9FA976ABF79( guy )
{
    if ( isdefined( level.battlechatter[guy.team] ) && !istrue( level.battlechatter[guy.team] ) )
        return;

    level notify( "dialogue_print_battlechatter" );
    team = guy.team;
    waitframe();
    waittime = 3.1;

    if ( isdefined( team ) )
    {
        level battlechatter_off( team );
        level scripts\engine\utility::waittill_any_timeout( waittime, "dialogue_print_clear", "dialogue_print_battlechatter" );
        level battlechatter_on( team );
    }
    else if ( isdefined( guy ) )
    {
        guy endon( "death" );
        guy endon( "entitydeleted" );
        guy set_battlechatter( 0 );
        level scripts\engine\utility::waittill_any_timeout( waittime, "dialogue_print_clear", "dialogue_print_battlechatter" );
        guy set_battlechatter( 1 );
    }
}

radio_dialogue_queue( msg )
{
    radio_dialogue( msg );
}

ignoreeachother( _id_E58FF7B19D80585B, _id_E58FF8B19D805A8E )
{
    setignoremegroup( _id_E58FF7B19D80585B, _id_E58FF8B19D805A8E );
    setignoremegroup( _id_E58FF8B19D805A8E, _id_E58FF7B19D80585B );
}

add_global_spawn_function( team, function, param1, param2, param3 )
{
    func = [];
    func["function"] = function;
    func["param1"] = param1;
    func["param2"] = param2;
    func["param3"] = param3;
    level.spawn_funcs[team][level.spawn_funcs[team].size] = func;
}

remove_global_spawn_function( team, function )
{
    array = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.spawn_funcs[team].size; _id_AC0E594AC96AA3A8++ )
    {
        if ( level.spawn_funcs[team][_id_AC0E594AC96AA3A8]["function"] != function )
            array[array.size] = level.spawn_funcs[team][_id_AC0E594AC96AA3A8];
    }

    level.spawn_funcs[team] = array;
}

exists_global_spawn_function( team, function )
{
    if ( !isdefined( level.spawn_funcs ) )
        return 0;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.spawn_funcs[team].size; _id_AC0E594AC96AA3A8++ )
    {
        if ( level.spawn_funcs[team][_id_AC0E594AC96AA3A8]["function"] == function )
            return 1;
    }

    return 0;
}

remove_spawn_function( function )
{
    _id_9590721335395C43 = [];

    foreach ( _id_8D40A831D76370F1 in self.spawn_functions )
    {
        if ( _id_8D40A831D76370F1["function"] == function )
            continue;

        _id_9590721335395C43[_id_9590721335395C43.size] = _id_8D40A831D76370F1;
    }

    self.spawn_functions = _id_9590721335395C43;
}

add_spawn_function( function, param1, param2, param3, param4, param5 )
{
    foreach ( _id_8D40A831D76370F1 in self.spawn_functions )
    {
        if ( _id_8D40A831D76370F1["function"] == function )
            return;
    }

    func = [];
    func["function"] = function;
    func["param1"] = param1;
    func["param2"] = param2;
    func["param3"] = param3;
    func["param4"] = param4;
    func["param5"] = param5;
    self.spawn_functions[self.spawn_functions.size] = func;
}

array_kill( array )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
        array[_id_AC0E594AC96AA3A8] kill();
}

ignore_triggers( timer )
{
    self endon( "death" );
    self.ignoretriggers = 1;

    if ( isdefined( timer ) )
        wait( timer );
    else
        wait 0.5;

    self.ignoretriggers = 0;
}

activate_trigger_with_targetname( msg )
{
    trigger = getent( msg, "targetname" );
    trigger activate_trigger();
}

activate_trigger_with_noteworthy( msg )
{
    trigger = getent( msg, "script_noteworthy" );
    trigger activate_trigger();
}

disable_trigger_with_targetname( msg )
{
    trigger = getent( msg, "targetname" );
    trigger scripts\engine\utility::trigger_off();
}

disable_trigger_with_noteworthy( msg )
{
    trigger = getent( msg, "script_noteworthy" );
    trigger scripts\engine\utility::trigger_off();
}

enable_trigger_with_targetname( msg )
{
    trigger = getent( msg, "targetname" );
    trigger scripts\engine\utility::trigger_on();
}

enable_trigger_with_noteworthy( msg )
{
    trigger = getent( msg, "script_noteworthy" );
    trigger scripts\engine\utility::trigger_on();
}

set_team_pacifist( team, val )
{
    ai = getaiarray( team );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
        ai[_id_AC0E594AC96AA3A8].pacifist = val;
}

replace_on_death()
{
    scripts\sp\colors::colornode_replace_on_death();
}

spawn_reinforcement( classname, color )
{
    scripts\sp\colors::colornode_spawn_reinforcement( classname, color );
}

set_promotion_order( _id_DE7B6A1F9EF2AFEE, _id_E0BA9B11E121D0A7 )
{
    if ( !isdefined( level.current_color_order ) )
        level.current_color_order = [];

    _id_DE7B6A1F9EF2AFEE = shortencolor( _id_DE7B6A1F9EF2AFEE );
    _id_E0BA9B11E121D0A7 = shortencolor( _id_E0BA9B11E121D0A7 );
    level.current_color_order[_id_DE7B6A1F9EF2AFEE] = _id_E0BA9B11E121D0A7;

    if ( !isdefined( level.current_color_order[_id_E0BA9B11E121D0A7] ) )
        set_empty_promotion_order( _id_E0BA9B11E121D0A7 );
}

set_empty_promotion_order( _id_DE7B6A1F9EF2AFEE )
{
    if ( !isdefined( level.current_color_order ) )
        level.current_color_order = [];

    level.current_color_order[_id_DE7B6A1F9EF2AFEE] = "none";
}

remove_color_from_array( array, color )
{
    _id_BFC65A378A6D8EFE = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = array[_id_AC0E594AC96AA3A8];

        if ( !isdefined( guy.script_forcecolor ) )
            continue;

        if ( guy.script_forcecolor == color )
            continue;

        _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = guy;
    }

    return _id_BFC65A378A6D8EFE;
}

remove_noteworthy_from_array( array, noteworthy )
{
    _id_BFC65A378A6D8EFE = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = array[_id_AC0E594AC96AA3A8];

        if ( !isdefined( guy.script_noteworthy ) )
            continue;

        if ( guy.script_noteworthy == noteworthy )
            continue;

        _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = guy;
    }

    return _id_BFC65A378A6D8EFE;
}

get_closest_colored_friendly( color, origin )
{
    allies = get_force_color_guys( "allies", color );

    if ( !isdefined( origin ) )
        _id_30FE47A46E5A4479 = level.player.origin;
    else
        _id_30FE47A46E5A4479 = origin;

    return scripts\engine\utility::getclosest( _id_30FE47A46E5A4479, allies );
}

remove_without_classname( array, classname )
{
    _id_BFC65A378A6D8EFE = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !issubstr( array[_id_AC0E594AC96AA3A8].classname, classname ) )
            continue;

        _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = array[_id_AC0E594AC96AA3A8];
    }

    return _id_BFC65A378A6D8EFE;
}

remove_without_model( array, model )
{
    _id_BFC65A378A6D8EFE = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !issubstr( array[_id_AC0E594AC96AA3A8].model, model ) )
            continue;

        _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = array[_id_AC0E594AC96AA3A8];
    }

    return _id_BFC65A378A6D8EFE;
}

get_closest_colored_friendly_with_classname( color, classname, origin )
{
    allies = get_force_color_guys( "allies", color );

    if ( !isdefined( origin ) )
        _id_30FE47A46E5A4479 = level.player.origin;
    else
        _id_30FE47A46E5A4479 = origin;

    allies = remove_without_classname( allies, classname );
    return scripts\engine\utility::getclosest( _id_30FE47A46E5A4479, allies );
}

promote_nearest_friendly( _id_9024B7C85F6DA81C, _id_4F3679D48D415B9D )
{
    for (;;)
    {
        _id_3E2EF879EE8848E2 = get_closest_colored_friendly( _id_9024B7C85F6DA81C );

        if ( !isalive( _id_3E2EF879EE8848E2 ) )
        {
            wait 1;
            continue;
        }

        _id_3E2EF879EE8848E2 set_force_color( _id_4F3679D48D415B9D );
        return;
    }
}

instantly_promote_nearest_friendly( _id_9024B7C85F6DA81C, _id_4F3679D48D415B9D )
{
    for (;;)
    {
        _id_3E2EF879EE8848E2 = get_closest_colored_friendly( _id_9024B7C85F6DA81C );

        if ( !isalive( _id_3E2EF879EE8848E2 ) )
            return;

        _id_3E2EF879EE8848E2 set_force_color( _id_4F3679D48D415B9D );
        return;
    }
}

instantly_promote_nearest_friendly_with_classname( _id_9024B7C85F6DA81C, _id_4F3679D48D415B9D, classname )
{
    for (;;)
    {
        _id_3E2EF879EE8848E2 = get_closest_colored_friendly_with_classname( _id_9024B7C85F6DA81C, classname );

        if ( !isalive( _id_3E2EF879EE8848E2 ) )
            return;

        _id_3E2EF879EE8848E2 set_force_color( _id_4F3679D48D415B9D );
        return;
    }
}

promote_nearest_friendly_with_classname( _id_9024B7C85F6DA81C, _id_4F3679D48D415B9D, classname )
{
    for (;;)
    {
        _id_3E2EF879EE8848E2 = get_closest_colored_friendly_with_classname( _id_9024B7C85F6DA81C, classname );

        if ( !isalive( _id_3E2EF879EE8848E2 ) )
        {
            wait 1;
            continue;
        }

        _id_3E2EF879EE8848E2 set_force_color( _id_4F3679D48D415B9D );
        return;
    }
}

instantly_set_color_from_array_with_classname( array, color, classname )
{
    _id_BD2749B7045B149E = 0;
    _id_BFC65A378A6D8EFE = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = array[_id_AC0E594AC96AA3A8];

        if ( _id_BD2749B7045B149E || !issubstr( guy.classname, classname ) )
        {
            _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = guy;
            continue;
        }

        _id_BD2749B7045B149E = 1;
        guy set_force_color( color );
    }

    return _id_BFC65A378A6D8EFE;
}

instantly_set_color_from_array( array, color )
{
    _id_BD2749B7045B149E = 0;
    _id_BFC65A378A6D8EFE = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = array[_id_AC0E594AC96AA3A8];

        if ( _id_BD2749B7045B149E )
        {
            _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = guy;
            continue;
        }

        _id_BD2749B7045B149E = 1;
        guy set_force_color( color );
    }

    return _id_BFC65A378A6D8EFE;
}

wait_for_script_noteworthy_trigger( msg )
{
    scripts\engine\sp\utility_code::wait_for_trigger( msg, "script_noteworthy" );
}

wait_for_targetname_trigger( msg )
{
    scripts\engine\sp\utility_code::wait_for_trigger( msg, "targetname" );
}

wait_for_flag_or_timeout( msg, timer )
{
    if ( scripts\engine\utility::flag( msg ) )
        return;

    level endon( msg );
    wait( timer );
}

wait_for_notify_or_timeout( msg, timer )
{
    self endon( msg );
    wait( timer );
}

wait_for_trigger_or_timeout( timer )
{
    self endon( "trigger" );
    wait( timer );
}

wait_for_either_trigger( _id_FBF2C60DF6D0D655, _id_FBF2C30DF6D0CFBC )
{
    ent = spawnstruct();
    array = [];
    array = scripts\engine\utility::array_combine( array, getentarray( _id_FBF2C60DF6D0D655, "targetname" ) );
    array = scripts\engine\utility::array_combine( array, getentarray( _id_FBF2C30DF6D0CFBC, "targetname" ) );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
        ent thread scripts\engine\sp\utility_code::ent_waits_for_trigger( array[_id_AC0E594AC96AA3A8] );

    ent waittill( "done" );
}

dronespawn_bodyonly( spawner )
{
    drone = scripts\sp\spawner::spawner_dronespawn( spawner );
    return drone;
}

fakeactorspawn( spawner )
{
    if ( !isdefined( spawner ) )
        spawner = self;

    _id_F585D064A2717B41 = scripts\sp\spawner::spawner_dronespawn( spawner );
    _id_F585D064A2717B41.spawn_funcs = spawner.spawn_functions;
    _id_F585D064A2717B41.spawner = spawner;

    if ( isdefined( spawner.script_nodrop ) )
        _id_F585D064A2717B41.nodrop = spawner.script_nodrop;

    if ( isdefined( spawner.script_noragdoll ) )
        _id_F585D064A2717B41.noragdoll = spawner.script_noragdoll;

    _id_F585D064A2717B41 _id_1FAD0F895757885A();
    return _id_F585D064A2717B41;
}

_id_1FAD0F895757885A( _id_3A6FA490549F46D9 )
{
    self [[ level.fakeactor_spawn_func ]]( _id_3A6FA490549F46D9 );
    self.spawn_functions = undefined;
    thread scripts\sp\spawner::run_spawn_functions();
    self.script_fakeactor = 1;
}

bodyonlyspawn( spawner )
{
    _id_19C864C6101B1F5B = scripts\sp\spawner::spawner_dronespawn( spawner );
    _id_19C864C6101B1F5B.spawn_funcs = spawner.spawn_functions;
    _id_19C864C6101B1F5B.spawn_functions = undefined;
    _id_19C864C6101B1F5B thread scripts\sp\spawner::run_spawn_functions();
    return _id_19C864C6101B1F5B;
}

dronespawn( spawner )
{
    if ( !isdefined( spawner ) )
        spawner = self;

    drone = scripts\sp\spawner::spawner_dronespawn( spawner );
    drone [[ level.drone_spawn_func ]]();
    drone.spawn_funcs = spawner.spawn_functions;
    drone.spawn_functions = undefined;
    drone thread scripts\sp\spawner::run_spawn_functions();
    return drone;
}

create_corpses()
{
    corpses = getentarray( "corpse", "script_noteworthy" );

    if ( corpses.size )
        array_spawn_function( corpses, ::init_corpse );

    corpses = getentarray( "corpse_noragdoll", "script_noteworthy" );

    if ( corpses.size )
        array_spawn_function( corpses, ::init_corpse );

    corpses = get_spawner_array( "corpse", "script_noteworthy" );

    if ( corpses.size )
        array_spawn_function( corpses, ::init_corpse );
}

init_corpse()
{
    if ( !isdefined( self.script_animation ) )
        self delete();
    else
    {
        self.animname = "corpse";
        self _meth_4F784BBF1E69DDB3();

        if ( isai( self ) )
            self.ignoreall = 1;
        else
            self notsolid();

        if ( isdefined( self.target ) )
        {
            _id_06031F28D78DEDC3 = scripts\engine\utility::get_target_ent( self.target );
            self dontinterpolate();

            if ( isai( self ) )
                self forceteleport( _id_06031F28D78DEDC3.origin, _id_06031F28D78DEDC3.angles );
            else
            {
                self.origin = _id_06031F28D78DEDC3.origin;
                self.angles = _id_06031F28D78DEDC3.angles;
            }
        }

        _id_B8F5AC23CE0DFDE3 = getweaponmodel( self.weapon );

        if ( isdefined( _id_B8F5AC23CE0DFDE3 ) && _id_B8F5AC23CE0DFDE3 != "" )
        {
            if ( isai( self ) )
                scripts\common\ai::gun_remove();

            if ( !isdefined( self.script_nodrop ) )
            {
                gun = spawn( "weapon_" + getcompleteweaponname( self.weapon ), self gettagorigin( "tag_weapon_right" ) );
                gun.angles = self gettagangles( "tag_weapon_right" );
            }
        }

        if ( isai( self ) )
        {
            if ( self.script_noteworthy == "corpse_noragdoll" )
                self.noragdoll = 1;

            scripts\common\ai::set_deathanim( self.script_animation );
            self kill();
            return;
        }

        self animscripted( "corpse_anim", self.origin, self.angles, scripts\engine\utility::getanim( self.script_animation ), "deathplant", undefined, 0 );

        if ( self.script_noteworthy != "corpse_noragdoll" )
        {
            _id_80AE60F81A65A3D6 = getanimlength( scripts\engine\utility::getanim( self.script_animation ) );

            if ( _id_80AE60F81A65A3D6 > 0 )
                wait( _id_80AE60F81A65A3D6 * 0.35 );

            if ( isdefined( self.fnpreragdoll ) )
                self [[ self.fnpreragdoll ]]();

            self startragdoll();
        }
    }
}

get_trigger_flag()
{
    if ( isdefined( self.script_flag ) )
        return self.script_flag;

    if ( isdefined( self.script_noteworthy ) )
        return self.script_noteworthy;
}

set_default_pathenemy_settings()
{
    self.pathenemylookahead = 50;
    self.pathenemyfightdist = 192;
}

walk_and_talk( _id_41E0C82E9F7AEB42, target, _id_08E41959B7FEBE01 )
{
    if ( _id_41E0C82E9F7AEB42 == "on" )
    {
        self._blackboard.walk_and_talk_requested = 1;

        if ( isdefined( _id_08E41959B7FEBE01 ) )
        {
            if ( _id_08E41959B7FEBE01 == "right" )
                self.walk_and_talk_hemisphere = "right";
            else
                self.walk_and_talk_hemisphere = "left";
        }

        if ( !isdefined( target ) )
            self.walk_and_talk_target = level.player;
        else
        {
            self.walk_and_talk_target = target;

            if ( !isdefined( target.origin ) )
                return;
        }
    }
    else
        self._blackboard.walk_and_talk_requested = 0;
}

enable_eight_point_strafe( _id_E60552DD6ABCC4AA )
{
    if ( self.type == "dog" )
        return;

    if ( _id_E60552DD6ABCC4AA )
        self._blackboard.eight_point_strafe_requested = 1;
    else
        self._blackboard.eight_point_strafe_requested = 0;
}

enable_readystand()
{
    self.busereadyidle = 1;
}

disable_readystand()
{
    self.busereadyidle = undefined;
}

cqb_aim( _id_861348D15BDBE1C0 )
{
    if ( !isdefined( _id_861348D15BDBE1C0 ) )
        self._id_6CD45C851740A435 = undefined;
    else
    {
        self._id_6CD45C851740A435 = _id_861348D15BDBE1C0;

        if ( !isdefined( _id_861348D15BDBE1C0.origin ) )
            return;
    }
}

set_force_cover( val )
{
    if ( isdefined( val ) && val )
        self.forcesuppression = 1;
    else
        self.forcesuppression = 0;
}

first_touch( ent )
{
    if ( !isdefined( self.touched ) )
        self.touched = [];

    if ( isdefined( self.touched[ent.unique_id] ) )
        return 0;

    self.touched[ent.unique_id] = 1;
    return 1;
}

add_hint_string( name, string, _id_4C4AB07DFD5327FF, _id_28F8B27E22FCF9B5 )
{
    if ( !isdefined( level.trigger_hint_string ) )
    {
        level.trigger_hint_string = [];
        level.trigger_hint_func = [];
        level._id_F8AB4524D06CD18F = [];
    }

    level.trigger_hint_string[name] = string;
    precachestring( string );

    if ( isdefined( _id_4C4AB07DFD5327FF ) )
        level.trigger_hint_func[name] = _id_4C4AB07DFD5327FF;

    if ( isdefined( _id_28F8B27E22FCF9B5 ) )
        level._id_F8AB4524D06CD18F[name] = _id_28F8B27E22FCF9B5;
}

_id_6C71A6BE15E73611( name )
{
    if ( !isdefined( level.trigger_hint_string ) )
        return 0;

    return isdefined( level.trigger_hint_string[name] );
}

clearthreatbias( _id_E58FF7B19D80585B, _id_E58FF8B19D805A8E )
{
    setthreatbias( _id_E58FF7B19D80585B, _id_E58FF8B19D805A8E, 0 );
    setthreatbias( _id_E58FF8B19D805A8E, _id_E58FF7B19D80585B, 0 );
}

set_ignoresuppression( val )
{
    self.ignoresuppression = val;
}

set_goalradius( radius )
{
    self.goalradius = radius;
}

_id_863020915099AAFE( _id_B96D126FC701024B )
{
    self._id_9A320501108844BD = _id_B96D126FC701024B;
}

set_allowdeath( val )
{
    self.allowdeath = val;
}

set_run_anim( anime, alwaysrunforward )
{
    if ( getdvarint( "dvar_44D5699D19BFAFC2", 0 ) == 1 )
    {
        _id_F7EE87DC76B45E62 = "combat";
        set_move_anim( _id_F7EE87DC76B45E62, anime );
        self.run_overrideanim = level.scr_anim[self.animname][anime];
        return;
    }

    if ( isdefined( alwaysrunforward ) )
        self.alwaysrunforward = alwaysrunforward;
    else
        self.alwaysrunforward = 1;

    scripts\common\ai::disable_turnanims();
    self.run_overrideanim = level.scr_anim[self.animname][anime];
    self.walk_overrideanim = self.run_overrideanim;
}

set_move_anim( _id_F7EE87DC76B45E62, anime )
{
    scripts\asm\asm::asm_setdemeanoranimoverride( _id_F7EE87DC76B45E62, "move", level.scr_anim[self.animname][anime] );
}

clear_move_anim( _id_F7EE87DC76B45E62 )
{
    scripts\asm\asm::asm_cleardemeanoranimoverride( _id_F7EE87DC76B45E62, "move" );
}

set_idle_anim( _id_F7EE87DC76B45E62, anime )
{
    scripts\asm\asm::asm_setdemeanoranimoverride( _id_F7EE87DC76B45E62, "idle", level.scr_anim[self.animname][anime] );
}

clear_idle_anim( _id_F7EE87DC76B45E62 )
{
    scripts\asm\asm::asm_cleardemeanoranimoverride( _id_F7EE87DC76B45E62, "idle" );
}

set_dog_walk_anim()
{
    self.a.movement = "walk";
    self.disablearrivals = 1;
    self.disableexits = 1;
    self.script_nobark = 1;
}

set_arrival_speed( _id_CCBBA16287668F0A )
{
    if ( !isdefined( _id_CCBBA16287668F0A ) )
        _id_CCBBA16287668F0A = 1;

    if ( isdefined( self.asm.arrivalspeed ) )
        self.asm.arrivalspeed = _id_CCBBA16287668F0A;
    else
        return;
}

clear_arrival_speed()
{
    if ( isdefined( self.asm.arrivalspeed ) )
        self.asm.arrivalspeed = 1;
}

override_move_with_purpose( _id_F7EE87DC76B45E62 )
{
    _id_AF1883B223CB5D63 = scripts\asm\asm::asm_lookupanimfromalias( "move_walk_loop", "casual_purpose" );
    scripts\asm\asm::asm_setdemeanoranimoverride( _id_F7EE87DC76B45E62, "move", _id_AF1883B223CB5D63 );

    if ( _id_F7EE87DC76B45E62 == "casual" )
        thread set_arrival_speed( 1.15 );
}

clear_move_with_purpose()
{
    thread clear_move_anim( scripts\asm\asm::asm_getdemeanor() );
    thread clear_arrival_speed();
}

set_generic_idle_anim( anime )
{
    idleanim = level.scr_anim["generic"][anime];

    if ( isarray( idleanim ) )
        self.specialidleanim = idleanim;
    else
        self.specialidleanim[0] = idleanim;
}

clear_generic_idle_anim()
{
    self.specialidleanim = undefined;
    self notify( "stop_specialidle" );
}

set_generic_run_anim( anime, alwaysrunforward )
{
    set_generic_run_anim_array( anime, undefined, alwaysrunforward );
}

clear_generic_run_anim()
{
    self notify( "movemode" );
    scripts\common\ai::enable_turnanims();
    self.run_overrideanim = undefined;
    self.walk_overrideanim = undefined;
}

set_generic_run_anim_array( anime, weights, alwaysrunforward )
{
    self notify( "movemode" );

    if ( !isdefined( alwaysrunforward ) || alwaysrunforward )
        self.alwaysrunforward = 1;
    else
        self.alwaysrunforward = undefined;

    scripts\common\ai::disable_turnanims();
    self.run_overrideanim = level.scr_anim["generic"][anime];
    self.walk_overrideanim = self.run_overrideanim;

    if ( isdefined( weights ) )
    {
        self.run_override_weights = level.scr_anim["generic"][weights];
        self.walk_override_weights = self.run_override_weights;
    }
    else
    {
        self.run_override_weights = undefined;
        self.walk_override_weights = undefined;
    }
}

set_run_anim_array( anime, weights, alwaysrunforward )
{
    self notify( "movemode" );

    if ( !isdefined( alwaysrunforward ) || alwaysrunforward )
        self.alwaysrunforward = 1;
    else
        self.alwaysrunforward = undefined;

    scripts\common\ai::disable_turnanims();
    self.run_overrideanim = level.scr_anim[self.animname][anime];
    self.walk_overrideanim = self.run_overrideanim;

    if ( isdefined( weights ) )
    {
        self.run_override_weights = level.scr_anim[self.animname][weights];
        self.walk_override_weights = self.run_override_weights;
    }
    else
    {
        self.run_override_weights = undefined;
        self.walk_override_weights = undefined;
    }
}

clear_run_anim()
{
    self notify( "clear_run_anim" );
    self notify( "movemode" );

    if ( self.type == "dog" )
    {
        self.a.movement = "run";
        self.disablearrivals = 0;
        self.disableexits = 0;
        self.script_nobark = undefined;
        return;
    }

    if ( getdvarint( "dvar_44D5699D19BFAFC2", 0 ) == 1 )
    {
        _id_F7EE87DC76B45E62 = "combat";
        self.allowstrafe = 1;
        clear_move_anim( _id_F7EE87DC76B45E62 );
        self.run_overrideanim = undefined;
        return;
    }

    if ( !isdefined( self.casual_killer ) )
        scripts\common\ai::enable_turnanims();

    self.alwaysrunforward = undefined;
    self.run_overrideanim = undefined;
    self.walk_overrideanim = undefined;
    self.run_override_weights = undefined;
    self.walk_override_weights = undefined;
}

physicsjolt_proximity( _id_0ABA03C6E266EF63, _id_C21614AB5A22F7EA, _id_F8048727716242B0 )
{
    self endon( "death" );
    self endon( "stop_physicsjolt" );

    if ( !isdefined( _id_0ABA03C6E266EF63 ) || !isdefined( _id_C21614AB5A22F7EA ) || !isdefined( _id_F8048727716242B0 ) )
    {
        _id_0ABA03C6E266EF63 = 400;
        _id_C21614AB5A22F7EA = 256;
        _id_F8048727716242B0 = ( 0, 0, 0.075 );
    }

    _id_C48D66AE325C0F13 = _id_0ABA03C6E266EF63 * _id_0ABA03C6E266EF63;
    _id_AE3425896251F3B3 = 3;
    _id_3F13E00C5DC00FF8 = _id_F8048727716242B0;

    for (;;)
    {
        wait 0.1;
        _id_F8048727716242B0 = _id_3F13E00C5DC00FF8;

        if ( self.code_classname == "script_vehicle" )
        {
            speed = self vehicle_getspeed();

            if ( speed < _id_AE3425896251F3B3 )
            {
                scale = speed / _id_AE3425896251F3B3;
                _id_F8048727716242B0 = _id_3F13E00C5DC00FF8 * scale;
            }
        }

        dist = distancesquared( self.origin, level.player.origin );
        scale = _id_C48D66AE325C0F13 / dist;

        if ( scale > 1 )
            scale = 1;

        _id_F8048727716242B0 = _id_F8048727716242B0 * scale;
        _id_04C8BB7822373F21 = _id_F8048727716242B0[0] + _id_F8048727716242B0[1] + _id_F8048727716242B0[2];

        if ( _id_04C8BB7822373F21 > 0.025 )
            _func_AB405C8C0C804E7C( self.origin, _id_0ABA03C6E266EF63, _id_C21614AB5A22F7EA, _id_F8048727716242B0[2], _id_F8048727716242B0[2] * 2.0 );
    }
}

set_goal_entity( ent )
{
    self setgoalentity( ent );
}

activate_trigger( name, type, _id_2D9552508615D396 )
{
    if ( !isdefined( name ) )
        activate_trigger_process( _id_2D9552508615D396 );
    else
    {
        _id_261D73DEE9F7F35C = getentarray( name, type );
        scripts\engine\utility::array_thread( _id_261D73DEE9F7F35C, ::activate_trigger_process, _id_2D9552508615D396 );
    }
}

activate_trigger_process( _id_2D9552508615D396 )
{
    if ( isdefined( self.script_color_allies ) )
    {
        self.activated_color_trigger = 1;
        scripts\sp\colors::activate_color_trigger( "allies" );
    }

    if ( isdefined( self.script_color_axis ) )
    {
        self.activated_color_trigger = 1;
        scripts\sp\colors::activate_color_trigger( "axis" );
    }

    self notify( "trigger", _id_2D9552508615D396 );
}

self_delete()
{
    self delete();
}

has_color()
{
    if ( scripts\sp\colors::get_team() == "axis" )
        return isdefined( self.script_color_axis ) || isdefined( self.script_forcecolor );

    return isdefined( self.script_color_allies ) || isdefined( self.script_forcecolor );
}

clear_colors()
{
    clear_team_colors( "axis" );
    clear_team_colors( "allies" );
}

clear_team_colors( team )
{
    level.currentcolorforced[team]["r"] = undefined;
    level.currentcolorforced[team]["b"] = undefined;
    level.currentcolorforced[team]["c"] = undefined;
    level.currentcolorforced[team]["y"] = undefined;
    level.currentcolorforced[team]["p"] = undefined;
    level.currentcolorforced[team]["o"] = undefined;
    level.currentcolorforced[team]["g"] = undefined;
}

notify_delay( _id_89D1FFD39DF87556, _id_3447DD0CDCD69308 )
{
    self endon( "death" );

    if ( _id_3447DD0CDCD69308 > 0 )
        wait( _id_3447DD0CDCD69308 );

    if ( !isdefined( self ) )
        return;

    self notify( _id_89D1FFD39DF87556 );
}

name_hide()
{
    if ( !isdefined( self.name ) )
        return;

    self.og_name = self.name;
    self.name = undefined;

    if ( isdefined( self.callsign ) )
    {
        self.og_callsign = self.callsign;
        self.callsign = "";
    }
}

name_show()
{
    self.name = self.og_name;

    if ( isdefined( self.og_callsign ) )
        self.callsign = self.og_callsign;
}

place_weapon_on( objweapon, location )
{
    if ( !_id_7E4D332E911E1B90::aihasweapon( objweapon ) )
        scripts\common\utility::initweapon( objweapon );

    _id_3433EE6B63C7E243::placeweaponon( objweapon, location );
}

player_moves( dist )
{
    org = level.player.origin;

    for (;;)
    {
        if ( distance( org, level.player.origin ) > dist )
            break;

        wait 0.05;
    }
}

waittill_either_function( _id_610748C9E56ACD4E, parm1, _id_610747C9E56ACB1B, parm2 )
{
    ent = spawnstruct();
    thread scripts\engine\sp\utility_code::waittill_either_function_internal( ent, _id_610748C9E56ACD4E, parm1 );
    thread scripts\engine\sp\utility_code::waittill_either_function_internal( ent, _id_610747C9E56ACB1B, parm2 );
    ent waittill( "done" );
}

waittill_msg( msg )
{
    self waittill( msg );
}

in_realism_mode()
{
    return isdefined( level.gameskill ) && level.gameskill == 4;
}

display_hint( hint, timeout, delay, _id_D136CF00DA26018C, _id_F63C23B8EC55B127 )
{
    if ( in_realism_mode() || _id_63171981A45B3AD8() )
        return;

    thread display_hint_proc( hint, timeout, delay, _id_D136CF00DA26018C, _id_F63C23B8EC55B127 );
}

display_hint_forced( hint, timeout, delay, _id_D136CF00DA26018C, _id_F63C23B8EC55B127 )
{
    thread display_hint_proc( hint, timeout, delay, _id_D136CF00DA26018C, _id_F63C23B8EC55B127 );
}

display_hint_proc( hint, timeout, delay, _id_D136CF00DA26018C, _id_F63C23B8EC55B127 )
{
    if ( isdefined( _id_D136CF00DA26018C ) && isdefined( _id_F63C23B8EC55B127 ) )
    {
        if ( !isarray( _id_D136CF00DA26018C ) )
            _id_D136CF00DA26018C = [ _id_D136CF00DA26018C ];

        if ( !isarray( _id_F63C23B8EC55B127 ) )
            _id_F63C23B8EC55B127 = [ _id_F63C23B8EC55B127 ];

        foreach ( entity in _id_D136CF00DA26018C )
        {
            foreach ( message in _id_F63C23B8EC55B127 )
                entity endon( message );
        }
    }

    player = get_player_from_self();
    player endon( "new_hint" );

    if ( isdefined( level.trigger_hint_func[hint] ) )
    {
        player endon( "hint_function_cancel" );
        player childthread display_hint_function_cancel_logic( level.trigger_hint_func[hint] );
    }

    if ( istrue( delay ) )
        wait( delay );

    if ( isdefined( level.trigger_hint_func[hint] ) )
    {
        if ( player [[ level.trigger_hint_func[hint] ]]() )
            return;

        player thread scripts\engine\sp\utility_code::hintprint( level.trigger_hint_string[hint], level.trigger_hint_func[hint], timeout, undefined, level._id_F8AB4524D06CD18F[hint], _id_D136CF00DA26018C, _id_F63C23B8EC55B127 );
    }
    else
        player thread scripts\engine\sp\utility_code::hintprint( level.trigger_hint_string[hint], undefined, timeout, undefined, level._id_F8AB4524D06CD18F[hint], _id_D136CF00DA26018C, _id_F63C23B8EC55B127 );
}

display_hint_function_cancel_logic( function )
{
    for (;;)
    {
        if ( [[ function ]]() )
            self notify( "hint_function_cancel" );

        waitframe();
    }
}

getgenericanim( anime )
{
    return level.scr_anim["generic"][anime];
}

enable_careful()
{
    self.script_careful = 1;
}

disable_careful()
{
    self.script_careful = 0;
    self notify( "stop_being_careful" );
}

enable_sprint()
{
    self.sprint = 1;
    scripts\common\utility::demeanor_override( "sprint" );
}

disable_sprint()
{
    self.sprint = undefined;
    scripts\common\utility::clear_demeanor_override();
}

disable_bulletwhizbyreaction()
{
    self.disablebulletwhizbyreaction = 1;
}

enable_bulletwhizbyreaction()
{
    self.disablebulletwhizbyreaction = 0;
}

set_fixednode_true()
{
    self.fixednode = 1;
}

set_fixednode_false()
{
    self.fixednode = 0;
}

spawn_aitype( aitype, origin, angles, forcespawn, perfectenemyinfo, _id_75C15E716113C51B, targetname )
{
    if ( !isdefined( forcespawn ) )
        forcespawn = 0;

    if ( !isdefined( perfectenemyinfo ) )
        perfectenemyinfo = 0;

    if ( !isdefined( _id_75C15E716113C51B ) )
        _id_75C15E716113C51B = 1;

    spawned = _func_482B56384D6F1991( aitype, origin, angles, forcespawn, perfectenemyinfo, _id_75C15E716113C51B );

    if ( isalive( spawned ) )
    {
        if ( isdefined( targetname ) )
            spawned.targetname = targetname;

        spawned thread scripts\sp\spawner::spawn_think();

        if ( !scripts\common\ai::spawn_failed( spawned ) )
            return spawned;
    }

    return undefined;
}

spawn_ai( forcespawn, _id_201EB40916A10809 )
{
    if ( isdefined( self.script_delay_spawn ) )
    {
        self endon( "death" );
        wait( self.script_delay_spawn );
    }

    _id_3BB35A1B2C0BF0A8 = undefined;
    _id_75C15E716113C51B = isdefined( self.script_stealthgroup ) && scripts\engine\utility::flag( "stealth_enabled" ) && !scripts\engine\utility::flag( "stealth_spotted" );
    _id_07208FC96EA182F6 = 0;

    if ( isdefined( self.script_suspend ) )
    {
        _id_07208FC96EA182F6 = scripts\sp\spawner::prespawn_suspended_ai();

        if ( self.count == 0 && !_id_07208FC96EA182F6 )
            return undefined;
    }

    _id_580C2EAF7E445D19 = 0;
    _id_0032A16E8A7495D3 = 0;

    if ( isdefined( self.script_drone ) )
        spawned = dronespawn( self );
    else if ( istrue( self.script_fakeactor ) )
        spawned = fakeactorspawn( self );
    else if ( isdefined( self.script_bodyonly ) )
        spawned = bodyonlyspawn( self );
    else
    {
        _id_580C2EAF7E445D19 = 1;

        if ( isdefined( self.script_forcespawn ) || istrue( forcespawn ) )
        {
            spawned = self _meth_514FCB5326AE8D5F( _id_75C15E716113C51B );
            _id_0032A16E8A7495D3 = 1;
        }
        else if ( isdefined( self.script_forcespawndist ) && distancesquared( self.origin, level.player.origin ) > squared( self.script_forcespawndist ) )
        {
            spawned = self _meth_514FCB5326AE8D5F( _id_75C15E716113C51B );
            _id_0032A16E8A7495D3 = 1;
        }
        else
            spawned = self _meth_D40DED8691CE620F( _id_75C15E716113C51B );
    }

    if ( _id_580C2EAF7E445D19 )
    {
        if ( isdefined( _id_201EB40916A10809 ) && _id_201EB40916A10809 && isalive( spawned ) )
            spawned scripts\common\ai::magic_bullet_shield();

        if ( scripts\common\ai::spawn_failed( spawned ) )
        {
            if ( !_id_07208FC96EA182F6 && isdefined( self.script_aigroup ) )
                scripts\sp\spawner::aigroup_decrement( level._ai_group[self.script_aigroup] );

            if ( _id_07208FC96EA182F6 )
            {
                self.count--;

                if ( !isdefined( self.try_og_origin ) )
                {
                    self.try_og_origin = 1;
                    spawned = spawn_ai();
                    return spawned;
                }
                else
                    self.try_og_origin = undefined;
            }
        }
        else if ( _id_0032A16E8A7495D3 )
        {

        }
    }

    if ( isdefined( self.script_spawn_once ) )
        self delete();

    return spawned;
}

function_stack( func, param1, param2, param3, param4, param5 )
{
    _id_090714D802CC091F = spawnstruct();
    _id_090714D802CC091F thread scripts\engine\sp\utility_code::function_stack_proc( self, func, param1, param2, param3, param4, param5 );
    return scripts\engine\sp\utility_code::function_stack_wait_finish( _id_090714D802CC091F );
}

function_stack_timeout( timeout, func, param1, param2, param3, param4, param5 )
{
    _id_090714D802CC091F = spawnstruct();
    _id_090714D802CC091F thread scripts\engine\sp\utility_code::function_stack_proc( self, func, param1, param2, param3, param4, param5 );

    if ( isdefined( _id_090714D802CC091F.function_stack_func_begun ) || _id_090714D802CC091F scripts\engine\utility::waittill_any_timeout( timeout, "function_stack_func_begun" ) != "timeout" )
        return scripts\engine\sp\utility_code::function_stack_wait_finish( _id_090714D802CC091F );
    else
    {
        _id_090714D802CC091F notify( "death" );
        return 0;
    }
}

function_stack_clear()
{
    _id_9AC63BCB72F9B537 = [];

    if ( isdefined( self.function_stack[0] ) && isdefined( self.function_stack[0].function_stack_func_begun ) )
        _id_9AC63BCB72F9B537[0] = self.function_stack[0];

    self.function_stack = undefined;
    self notify( "clear_function_stack" );
    waittillframeend;

    if ( !_id_9AC63BCB72F9B537.size )
        return;

    if ( !_id_9AC63BCB72F9B537[0].function_stack_func_begun )
        return;

    self.function_stack = _id_9AC63BCB72F9B537;
}

set_blur( _id_6BD296FF8DB5AB91, time )
{
    _func_96E4C180E15F5EE2( _id_6BD296FF8DB5AB91, time );
}

set_goal_radius( radius )
{
    self.goalradius = radius;
}

_id_9AC6D210C012D43F( height )
{
    self.goalheight = height;
}

set_goal_node( node )
{
    self.last_set_goalnode = node;
    self.last_set_goalpos = undefined;
    self.last_set_goalent = undefined;
    self setgoalnode( node );
}

set_goal_node_targetname( targetname )
{
    node = getnode( targetname, "targetname" );
    set_goal_node( node );
}

set_goal_pos( origin )
{
    self.last_set_goalnode = undefined;
    self.last_set_goalpos = origin;
    self.last_set_goalent = undefined;
    self setgoalpos( origin );
}

set_goal_ent( target )
{
    set_goal_pos( target.origin );
    self.last_set_goalent = target;

    if ( isstruct( target ) && !isdefined( target.type ) )
        target.type = "struct";
}

get_spawner_array( name, key )
{
    _id_1A977EA95154CBA4 = _func_91E8F01DD90DE05A();
    _id_8DAA7EF0C0F67DC1 = [];

    if ( key == "code_classname" )
    {
        foreach ( spawner in _id_1A977EA95154CBA4 )
        {
            if ( isdefined( spawner.code_classname ) && spawner.code_classname == name )
                _id_8DAA7EF0C0F67DC1[_id_8DAA7EF0C0F67DC1.size] = spawner;
        }
    }
    else if ( key == "classname" )
    {
        foreach ( spawner in _id_1A977EA95154CBA4 )
        {
            if ( isdefined( spawner.classname ) && spawner.classname == name )
                _id_8DAA7EF0C0F67DC1[_id_8DAA7EF0C0F67DC1.size] = spawner;
        }
    }
    else if ( key == "target" )
    {
        foreach ( spawner in _id_1A977EA95154CBA4 )
        {
            if ( isdefined( spawner.target ) && spawner.target == name )
                _id_8DAA7EF0C0F67DC1[_id_8DAA7EF0C0F67DC1.size] = spawner;
        }
    }
    else if ( key == "script_linkname" )
    {
        foreach ( spawner in _id_1A977EA95154CBA4 )
        {
            if ( isdefined( spawner.script_linkname ) && spawner.script_linkname == name )
                _id_8DAA7EF0C0F67DC1[_id_8DAA7EF0C0F67DC1.size] = spawner;
        }
    }
    else if ( key == "script_noteworthy" )
    {
        foreach ( spawner in _id_1A977EA95154CBA4 )
        {
            if ( isdefined( spawner.script_noteworthy ) && spawner.script_noteworthy == name )
                _id_8DAA7EF0C0F67DC1[_id_8DAA7EF0C0F67DC1.size] = spawner;
        }
    }
    else if ( key == "targetname" )
    {

    }
    else
    {

    }

    return _id_8DAA7EF0C0F67DC1;
}

array_spawn( spawners, bforcespawn, _id_BCBFA4748FD0F1EA )
{
    if ( !isdefined( _id_BCBFA4748FD0F1EA ) )
        _id_BCBFA4748FD0F1EA = 0;

    guys = [];

    foreach ( spawner in spawners )
    {
        spawner.count = 1;

        if ( getsubstr( spawner.classname, 7, 10 ) == "veh" )
        {
            guy = spawner scripts\common\utility::spawn_vehicle();

            if ( isdefined( guy.target ) && !isdefined( guy.script_moveoverride ) )
                guy thread scripts\common\vehicle_paths::gopath();

            guys[guys.size] = guy;
            continue;
        }

        guy = spawner spawn_ai( bforcespawn );

        if ( !_id_BCBFA4748FD0F1EA )
        {

        }

        guys[guys.size] = guy;
    }

    if ( !_id_BCBFA4748FD0F1EA )
    {

    }

    return guys;
}

array_spawn_targetname( targetname, forcespawn, _id_BCBFA4748FD0F1EA, _id_FB4C22CA40A3C27E )
{
    spawners = _func_91E8F01DD90DE05A( targetname );
    spawners = array_merge( spawners, getentarray( targetname, "targetname" ) );
    return array_spawn( spawners, forcespawn, _id_BCBFA4748FD0F1EA );
}

array_spawn_noteworthy( noteworthy, forcespawn, _id_BCBFA4748FD0F1EA, _id_FB4C22CA40A3C27E )
{
    spawners = get_spawner_array( noteworthy, "script_noteworthy" );
    spawners = array_merge( spawners, getentarray( noteworthy, "script_noteworthy" ) );
    return array_spawn( spawners, forcespawn, _id_BCBFA4748FD0F1EA );
}

spawn_script_noteworthy( script_noteworthy, bforcespawn )
{
    spawner = _func_2387688936D207B1( script_noteworthy, "script_noteworthy" );
    guy = spawner spawn_ai( bforcespawn );
    return guy;
}

spawn_targetname( targetname, bforcespawn )
{
    spawner = _func_2387688936D207B1( targetname, "targetname" );
    guy = spawner spawn_ai( bforcespawn );
    return guy;
}

set_grenadeammo( count )
{
    self.grenadeammo = count;
}

set_grenadeweapon( types )
{
    offhands = strtok( types, " " );
    self.grenadeweapon = makeweapon( offhands[randomint( offhands.size )] );
}

get_player_feet_from_view()
{
    tagorigin = self.origin;
    upvec = anglestoup( self getplayerangles() );
    height = self getplayerviewheight();
    _id_8B333A88CE97BA96 = tagorigin + ( 0, 0, height );
    _id_B3C795F07908B2EA = tagorigin + upvec * height;
    _id_FE6E9A378EC04947 = _id_8B333A88CE97BA96 - _id_B3C795F07908B2EA;
    _id_1B6B79D8EEFC9EE7 = tagorigin + _id_FE6E9A378EC04947;
    return _id_1B6B79D8EEFC9EE7;
}

set_baseaccuracy( val )
{
    self.baseaccuracy = val;
}

get_baseaccuracy()
{
    return self.baseaccuracy;
}

set_attackeraccuracy( val )
{
    if ( scripts\common\utility::issp() && isplayer( self ) )
        scripts\sp\utility::set_player_attacker_accuracy( val );
    else
        self.attackeraccuracy = val;
}

autosave_now( _id_F450DEF949FD681E )
{
    return scripts\sp\autosave::_autosave_game_now( _id_F450DEF949FD681E );
}

autosave_now_silent()
{
    return scripts\sp\autosave::_autosave_game_now( 1 );
}

set_generic_deathanim( deathanim )
{
    self.deathanim = getgenericanim( deathanim );
    self._id_2FA5EFF1B71A2229 = 1;
}

set_dontmelee( _id_E3108E412AFB3811 )
{
    self.dontmelee = _id_E3108E412AFB3811;
}

putgunaway()
{
    _id_3433EE6B63C7E243::placeweaponon( self.weapon, "none" );
    self.weapon = nullweapon();
}

anim_stopanimscripted()
{
    self stopanimscripted();
    self notify( "stop_loop" );
    self notify( "stop_animmode" );
}

antigrav_float_ai_override( _id_E3108E412AFB3811 )
{
    self.allowantigrav = _id_E3108E412AFB3811;
}

antigrav_clear_float_ai_override()
{
    self.allowantigrav = undefined;
}

antigrav_disable_nav_obstacle_for_team( team, _id_E3108E412AFB3811 )
{
    if ( _id_E3108E412AFB3811 )
    {
        if ( !isdefined( level.antigrav.disablenavobstacleteams ) || level.antigrav.disablenavobstacleteams.size == 0 || team == "all" )
        {
            level.antigrav.disablenavobstacleteams = [];
            level.antigrav.disablenavobstacleteams[0] = team;
        }
        else if ( level.antigrav.disablenavobstacleteams[0] != "all" )
            level.antigrav.disablenavobstacleteams = scripts\engine\utility::array_combine_unique( level.antigrav.disablenavobstacleteams, [ team ] );
    }
    else
    {
        if ( !isdefined( level.antigrav.disablenavobstacleteams ) || level.antigrav.disablenavobstacleteams.size == 0 )
            return;

        if ( team == "all" )
            level.antigrav.disablenavobstacleteams = undefined;
        else if ( level.antigrav.disablenavobstacleteams[0] == "all" )
        {
            level.antigrav.disablenavobstacleteams = [];

            if ( team == "allies" )
                level.antigrav.disablenavobstacleteams[0] = "axis";
            else
                level.antigrav.disablenavobstacleteams[0] = "allies";
        }
        else
        {
            level.antigrav.disablenavobstacleteams = scripts\engine\utility::array_remove_array( level.antigrav.disablenavobstacleteams, [ team ] );
            return;
        }
    }
}

kill_wrapper()
{
    self _meth_28FB77BD5F1B2F91( 0 );
    self kill();
    return 1;
}

array_wait_match( array, _id_AA9F4C033D62BC8A, message )
{
    _id_624F473FE3EE62F1 = spawnstruct();

    foreach ( _id_F7806D4CF24AACD3 in array )
        thread array_wait_match_proc( _id_624F473FE3EE62F1, _id_F7806D4CF24AACD3, _id_AA9F4C033D62BC8A, message );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
        _id_624F473FE3EE62F1 waittill( "array_wait_match_proc" );
}

array_wait_match_proc( _id_624F473FE3EE62F1, _id_F7806D4CF24AACD3, _id_AA9F4C033D62BC8A, message )
{
    _id_624F473FE3EE62F1 endon( "array_wait_success" );
    _id_F7806D4CF24AACD3 waittillmatch( _id_AA9F4C033D62BC8A, message );
    _id_624F473FE3EE62F1 notify( "array_wait_match_proc" );
}

array_any_wait_match( array, _id_AA9F4C033D62BC8A, message )
{
    _id_624F473FE3EE62F1 = spawnstruct();

    foreach ( _id_F7806D4CF24AACD3 in array )
        thread array_any_wait_match_proc( _id_624F473FE3EE62F1, _id_F7806D4CF24AACD3, _id_AA9F4C033D62BC8A, message );

    _id_624F473FE3EE62F1 waittill( "array_wait_proc" );
}

array_any_wait_match_proc( _id_624F473FE3EE62F1, _id_F7806D4CF24AACD3, _id_AA9F4C033D62BC8A, message )
{
    _id_F7806D4CF24AACD3 waittillmatch( _id_AA9F4C033D62BC8A, message );
    _id_624F473FE3EE62F1 notify( "array_wait_proc" );
}

die()
{
    self kill( ( 0, 0, 0 ) );
}

getmodel( str )
{
    return level.scr_model[str];
}

isads()
{
    return self playerads() > 0.5;
}

disable_replace_on_death()
{
    self.replace_on_death = undefined;
    self notify( "_disable_reinforcement" );
}

waittill_player_lookat( dot, timer, _id_95BFA6EAF973D593, timeout, _id_75BEA58D65510615, player )
{
    if ( !isdefined( player ) )
        player = level.player;

    timeoutent = spawnstruct();

    if ( isdefined( timeout ) )
        timeoutent thread notify_delay( "timeout", timeout );

    timeoutent endon( "timeout" );

    if ( !isdefined( dot ) )
        dot = 0.92;

    if ( !isdefined( timer ) )
        timer = 0;

    _id_47382793D414CBD0 = int( timer * 20 );
    count = _id_47382793D414CBD0;
    self endon( "death" );
    _id_0CE3DD3C6D3B576F = isai( self );
    org = undefined;

    for (;;)
    {
        if ( _id_0CE3DD3C6D3B576F )
            org = self geteye();
        else
            org = self.origin;

        if ( player player_looking_at( org, dot, _id_95BFA6EAF973D593, _id_75BEA58D65510615 ) )
        {
            count--;

            if ( count <= 0 )
                return 1;
        }
        else
            count = _id_47382793D414CBD0;

        wait 0.05;
    }
}

waittill_player_lookat_for_time( timer, dot, _id_95BFA6EAF973D593, _id_75BEA58D65510615 )
{
    waittill_player_lookat( dot, timer, _id_95BFA6EAF973D593, undefined, _id_75BEA58D65510615 );
}

player_looking_at( start, dot, _id_95BFA6EAF973D593, _id_75BEA58D65510615 )
{
    if ( !isdefined( dot ) )
        dot = 0.8;

    player = get_player_from_self();
    end = player geteye();
    angles = vectortoangles( start - end );
    forward = anglestoforward( angles );
    _id_DEE6508B0BA437C5 = player getplayerangles();
    _id_70222FBC47330166 = anglestoforward( _id_DEE6508B0BA437C5 );
    _id_334AF980E8C1A3AD = vectordot( forward, _id_70222FBC47330166 );

    if ( _id_334AF980E8C1A3AD < dot )
        return 0;

    if ( isdefined( _id_95BFA6EAF973D593 ) )
        return 1;

    return scripts\engine\trace::ray_trace_detail_passed( start, end, _id_75BEA58D65510615, scripts\engine\trace::create_default_contents( 1 ) );
}

either_player_looking_at( org, dot, _id_95BFA6EAF973D593, _id_75BEA58D65510615 )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.players.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( level.players[_id_AC0E594AC96AA3A8] player_looking_at( org, dot, _id_95BFA6EAF973D593, _id_75BEA58D65510615 ) )
            return 1;
    }

    return 0;
}

point_orientation_relative_to_player( point )
{
    player = get_player_from_self();
    angles = vectortoangles( point - player geteye() );
    forward = anglestoforward( angles );
    _id_DEE6508B0BA437C5 = player getplayerangles();
    _id_70222FBC47330166 = anglestoforward( _id_DEE6508B0BA437C5 );
    _id_775361D05A790917 = vectorcross( forward, _id_70222FBC47330166 );

    if ( _id_775361D05A790917[2] < 0 )
        return "left";
    else
        return "right";
}

players_within_distance( _id_644ED64F4BE560B9, org )
{
    _id_74A76BBC5F12D7EA = _id_644ED64F4BE560B9 * _id_644ED64F4BE560B9;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.players.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( distancesquared( org, level.players[_id_AC0E594AC96AA3A8].origin ) < _id_74A76BBC5F12D7EA )
            return 1;
    }

    return 0;
}

ai_delete_when_out_of_sight( ai_array, _id_644ED64F4BE560B9 )
{
    if ( !isdefined( ai_array ) )
        return;

    _id_7E36D51C34F3BF2F = 0.75;

    while ( ai_array.size > 0 )
    {
        wait 1;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai_array.size; _id_AC0E594AC96AA3A8++ )
        {
            if ( !isalive( ai_array[_id_AC0E594AC96AA3A8] ) )
            {
                ai_array = scripts\engine\utility::array_remove( ai_array, ai_array[_id_AC0E594AC96AA3A8] );
                continue;
            }

            if ( players_within_distance( _id_644ED64F4BE560B9, ai_array[_id_AC0E594AC96AA3A8].origin ) )
                continue;

            if ( either_player_looking_at( ai_array[_id_AC0E594AC96AA3A8].origin + ( 0, 0, 48 ), _id_7E36D51C34F3BF2F, 1 ) )
                continue;

            if ( isdefined( ai_array[_id_AC0E594AC96AA3A8].magic_bullet_shield ) )
                ai_array[_id_AC0E594AC96AA3A8] scripts\common\ai::stop_magic_bullet_shield();

            ai_array[_id_AC0E594AC96AA3A8] delete();
            ai_array = scripts\engine\utility::array_remove( ai_array, ai_array[_id_AC0E594AC96AA3A8] );
        }
    }
}

add_wait( func, parm1, parm2, parm3, parm4 )
{
    init_waits();
    ent = spawnstruct();
    ent.caller = self;
    ent.func = func;
    ent.parms = [];

    if ( isdefined( parm1 ) )
        ent.parms[ent.parms.size] = parm1;

    if ( isdefined( parm2 ) )
        ent.parms[ent.parms.size] = parm2;

    if ( isdefined( parm3 ) )
        ent.parms[ent.parms.size] = parm3;

    if ( isdefined( parm4 ) )
        ent.parms[ent.parms.size] = parm4;

    if ( !isdefined( level.waits.wait_any_func_array ) )
        level.waits.wait_any_func_array = [ ent ];
    else
        level.waits.wait_any_func_array[level.waits.wait_any_func_array.size] = ent;
}

add_abort( func, parm1, parm2, parm3 )
{
    init_waits();
    ent = spawnstruct();
    ent.caller = self;
    ent.func = func;
    ent.parms = [];

    if ( isdefined( parm1 ) )
        ent.parms[ent.parms.size] = parm1;

    if ( isdefined( parm2 ) )
        ent.parms[ent.parms.size] = parm2;

    if ( isdefined( parm3 ) )
        ent.parms[ent.parms.size] = parm3;

    level.waits.abort_wait_any_func_array[level.waits.abort_wait_any_func_array.size] = ent;
}

add_func( func, parm1, parm2, parm3, parm4, _id_77895A5B8A625552 )
{
    init_waits();
    ent = spawnstruct();
    ent.caller = self;
    ent.func = func;
    ent.parms = [];

    if ( isdefined( parm1 ) )
        ent.parms[ent.parms.size] = parm1;

    if ( isdefined( parm2 ) )
        ent.parms[ent.parms.size] = parm2;

    if ( isdefined( parm3 ) )
        ent.parms[ent.parms.size] = parm3;

    if ( isdefined( parm4 ) )
        ent.parms[ent.parms.size] = parm4;

    if ( isdefined( _id_77895A5B8A625552 ) )
        ent.parms[ent.parms.size] = _id_77895A5B8A625552;

    level.waits.run_func_after_wait_array[level.waits.run_func_after_wait_array.size] = ent;
}

add_call( func, parm1, parm2, parm3, parm4, _id_77895A5B8A625552 )
{
    init_waits();
    ent = spawnstruct();
    ent.caller = self;
    ent.func = func;
    ent.parms = [];

    if ( isdefined( parm1 ) )
        ent.parms[ent.parms.size] = parm1;

    if ( isdefined( parm2 ) )
        ent.parms[ent.parms.size] = parm2;

    if ( isdefined( parm3 ) )
        ent.parms[ent.parms.size] = parm3;

    if ( isdefined( parm4 ) )
        ent.parms[ent.parms.size] = parm4;

    if ( isdefined( _id_77895A5B8A625552 ) )
        ent.parms[ent.parms.size] = _id_77895A5B8A625552;

    level.waits.run_call_after_wait_array[level.waits.run_call_after_wait_array.size] = ent;
}

add_noself_call( func, parm1, parm2, parm3, parm4, _id_77895A5B8A625552 )
{
    init_waits();
    ent = spawnstruct();
    ent.func = func;
    ent.parms = [];

    if ( isdefined( parm1 ) )
        ent.parms[ent.parms.size] = parm1;

    if ( isdefined( parm2 ) )
        ent.parms[ent.parms.size] = parm2;

    if ( isdefined( parm3 ) )
        ent.parms[ent.parms.size] = parm3;

    if ( isdefined( parm4 ) )
        ent.parms[ent.parms.size] = parm4;

    if ( isdefined( _id_77895A5B8A625552 ) )
        ent.parms[ent.parms.size] = _id_77895A5B8A625552;

    level.waits.run_noself_call_after_wait_array[level.waits.run_noself_call_after_wait_array.size] = ent;
}

add_endon( name )
{
    init_waits();
    ent = spawnstruct();
    ent.caller = self;
    ent.ender = name;
    level.waits.do_wait_endons_array[level.waits.do_wait_endons_array.size] = ent;
}

do_wait_any()
{
    init_waits();
    do_wait( level.waits.wait_any_func_array.size - 1 );
}

do_wait( _id_FF009ED2DEBC01C4 )
{
    init_waits();

    if ( !isdefined( _id_FF009ED2DEBC01C4 ) )
        _id_FF009ED2DEBC01C4 = 0;

    ent = spawnstruct();
    array = level.waits.wait_any_func_array;
    _id_BA7E8AD2868EF874 = level.waits.do_wait_endons_array;
    _id_0F9AA72A24A1A927 = level.waits.run_func_after_wait_array;
    _id_502521F8FF044027 = level.waits.run_call_after_wait_array;
    _id_953B218366C91A88 = level.waits.run_noself_call_after_wait_array;
    _id_837C864FF77FCFDF = level.waits.abort_wait_any_func_array;
    level.waits.wait_any_func_array = [];
    level.waits.run_func_after_wait_array = [];
    level.waits.do_wait_endons_array = [];
    level.waits.abort_wait_any_func_array = [];
    level.waits.run_call_after_wait_array = [];
    level.waits.run_noself_call_after_wait_array = [];
    ent.count = array.size;
    ent scripts\engine\utility::array_levelthread( array, scripts\engine\sp\utility_code::waittill_func_ends, _id_BA7E8AD2868EF874 );
    ent thread scripts\engine\sp\utility_code::do_abort( _id_837C864FF77FCFDF );
    ent endon( "any_funcs_aborted" );

    for (;;)
    {
        if ( ent.count <= _id_FF009ED2DEBC01C4 )
            break;

        ent waittill( "func_ended" );
    }

    ent notify( "all_funcs_ended" );
    scripts\engine\utility::array_levelthread( _id_0F9AA72A24A1A927, scripts\engine\sp\utility_code::exec_func, [] );
    scripts\engine\utility::array_levelthread( _id_502521F8FF044027, scripts\engine\sp\utility_code::exec_call );
    scripts\engine\utility::array_levelthread( _id_953B218366C91A88, scripts\engine\sp\utility_code::exec_call_noself );
}

do_funcs()
{
    ent = spawnstruct();
    _id_0F9AA72A24A1A927 = level.waits.run_func_after_wait_array;
    level.waits.run_func_after_wait_array = [];

    foreach ( _id_8040F6CACB33424D in _id_0F9AA72A24A1A927 )
        level scripts\engine\sp\utility_code::exec_func( _id_8040F6CACB33424D, [] );

    ent notify( "all_funcs_ended" );
}

is_default_start()
{
    if ( isdefined( level.forced_start_catchup ) && level.forced_start_catchup == 1 )
        return 0;

    if ( isdefined( level.default_start_override_alt ) && level.default_start_override_alt == level.start_point )
        return 1;

    if ( isdefined( level.default_start_override ) )
    {
        if ( level.default_start_override == level.start_point )
            return 1;
    }
    else if ( scripts\sp\starts::level_has_start_points() )
        return level.start_point == level.start_functions[0]["name"];

    return level.start_point == "default";
}

manual_linkto( entity, offset )
{
    entity endon( "death" );
    self endon( "death" );

    if ( !isdefined( offset ) )
        offset = ( 0, 0, 0 );

    for (;;)
    {
        self.origin = entity.origin + offset;
        self.angles = entity.angles;
        wait 0.05;
    }
}

nextmission()
{
    scripts\sp\endmission::nextmission_internal();
}

nextmission_preload( type, _id_740CF07D74DBA935 )
{
    if ( !scripts\engine\utility::flag_exist( "nextmission_preload_complete" ) )
        scripts\engine\utility::flag_init( "nextmission_preload_complete" );

    scripts\engine\utility::flag_clear( "nextmission_preload_complete" );
    scripts\sp\endmission::nextmission_preload_internal( type, _id_740CF07D74DBA935 );
    scripts\engine\utility::flag_set( "nextmission_preload_complete" );
}

nextmission_primeloadbink()
{
    scripts\sp\endmission::nextmission_primeloadbink_internal();
}

make_array( _id_5A488D6BAE780D02, _id_5A488C6BAE780ACF, _id_5A488B6BAE78089C, _id_5A488A6BAE780669, _id_5A48896BAE780436 )
{
    array = [];
    array[array.size] = _id_5A488D6BAE780D02;

    if ( isdefined( _id_5A488C6BAE780ACF ) )
        array[array.size] = _id_5A488C6BAE780ACF;

    if ( isdefined( _id_5A488B6BAE78089C ) )
        array[array.size] = _id_5A488B6BAE78089C;

    if ( isdefined( _id_5A488A6BAE780669 ) )
        array[array.size] = _id_5A488A6BAE780669;

    if ( isdefined( _id_5A48896BAE780436 ) )
        array[array.size] = _id_5A48896BAE780436;

    return array;
}

fail_on_friendly_fire()
{
    level.failonfriendlyfire = 1;
}

normal_friendly_fire_penalty()
{
    level.failonfriendlyfire = 0;
}

getplayerclaymores()
{
    _id_64D3777F9580A884 = 0;
    _id_BCA88BEB35879353 = self.equippedweapons;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_BCA88BEB35879353.size; _id_AC0E594AC96AA3A8++ )
    {
        weapon = _id_BCA88BEB35879353[_id_AC0E594AC96AA3A8];

        if ( weapon.basename == "claymore" )
            _id_64D3777F9580A884 = _id_64D3777F9580A884 + self getweaponammoclip( weapon );
    }

    return _id_64D3777F9580A884;
}

lerp_saveddvar( name, value, time )
{
    curr = getdvarfloat( name );
    level notify( _func_A1A5654DB94DBB07( name ) + "_lerp_savedDvar" );
    level endon( _func_A1A5654DB94DBB07( name ) + "_lerp_savedDvar" );
    range = value - curr;
    interval = 0.05;
    count = int( time / interval );

    if ( count > 0 )
    {
        for ( _id_3777ECE6A73EADA5 = range / count; count; count-- )
        {
            curr = curr + _id_3777ECE6A73EADA5;
            setsaveddvar( name, curr );
            wait( interval );
        }
    }

    setsaveddvar( name, value );
}

lerp_omnvar( name, value, time, round_float )
{
    curr = getomnvar( name );
    level notify( _func_A1A5654DB94DBB07( name ) + "_lerp_savedDvar" );
    level endon( _func_A1A5654DB94DBB07( name ) + "_lerp_savedDvar" );
    range = value - curr;
    interval = 0.05;
    count = int( time / interval );

    for ( _id_3777ECE6A73EADA5 = range / count; count; count-- )
    {
        curr = curr + _id_3777ECE6A73EADA5;

        if ( isdefined( round_float ) )
        {
            _id_C5CF558181E12D1F = scripts\engine\math::round_float( curr, round_float );
            setomnvar( name, _id_C5CF558181E12D1F );
        }
        else
            setomnvar( name, curr );

        wait( interval );
    }

    if ( isdefined( round_float ) )
    {
        _id_C5CF558181E12D1F = scripts\engine\math::round_float( value, round_float );
        setomnvar( name, _id_C5CF558181E12D1F );
    }
    else
        setomnvar( name, value );
}

lerp_omnvarint( name, value, time )
{
    curr = getomnvar( name );
    level notify( _func_A1A5654DB94DBB07( name ) + "_lerp_savedDvar" );
    level endon( _func_A1A5654DB94DBB07( name ) + "_lerp_savedDvar" );
    range = value - curr;
    interval = 0.05;
    count = int( time / interval );

    for ( _id_3777ECE6A73EADA5 = range / count; count; count-- )
    {
        curr = curr + _id_3777ECE6A73EADA5;
        setomnvar( name, int( curr ) );
        wait( interval );
    }

    setomnvar( name, int( value ) );
}

slowmo_setspeed_slow( speed )
{
    level.slowmo.speed_slow = speed;
}

slowmo_setspeed_norm( speed )
{
    level.slowmo.speed_norm = speed;
}

slowmo_setlerptime_in( time )
{
    level.slowmo.lerp_time_in = time;
}

slowmo_setlerptime_out( time )
{
    level.slowmo.lerp_time_out = time;
}

slowmo_lerp_in()
{
    if ( istrue( level.no_slowmo ) )
        return;

    scripts\sp\audio::set_slowmo_dialogue_start();
    setslowmotion( level.slowmo.speed_norm, level.slowmo.speed_slow, level.slowmo.lerp_time_in );
}

slowmo_lerp_out()
{
    if ( istrue( level.no_slowmo ) )
        return;

    setslowmotion( level.slowmo.speed_slow, level.slowmo.speed_norm, level.slowmo.lerp_time_out );
    scripts\sp\audio::set_slowmo_dialogue_end();
}

add_earthquake( name, mag, duration, radius )
{
    level.earthquake[name]["magnitude"] = mag;
    level.earthquake[name]["duration"] = duration;
    level.earthquake[name]["radius"] = radius;
}

get_average_origin( array )
{
    origin = ( 0, 0, 0 );

    foreach ( _id_80EF668C09FFB70F in array )
        origin = origin + _id_80EF668C09FFB70F.origin;

    return origin * ( 1.0 / array.size );
}

_id_874B64F0417C4374( array )
{
    angles = ( 0, 0, 0 );

    foreach ( _id_80EF668C09FFB70F in array )
        angles = angles + _id_80EF668C09FFB70F.angles;

    return angles * ( 1.0 / array.size );
}

generic_damage_think()
{
    self.damage_functions = [];
    self endon( "entitydeleted" );
    self endon( "stop_generic_damage_think" );

    for (;;)
    {
        self waittill( "damage", damage, attacker, direction_vec, point, meansofdeath, modelname, tagname, partname, idflags, objweapon );

        foreach ( func in self.damage_functions )
            thread [[ func ]]( damage, attacker, direction_vec, point, meansofdeath, modelname, tagname, partname, idflags, objweapon );
    }
}

add_damage_function( func )
{
    self.damage_functions[self.damage_functions.size] = func;
}

remove_damage_function( damage_func )
{
    _id_055F75D9F16D814F = [];

    foreach ( func in self.damage_functions )
    {
        if ( func == damage_func )
            continue;

        _id_055F75D9F16D814F[_id_055F75D9F16D814F.size] = func;
    }

    self.damage_functions = _id_055F75D9F16D814F;
}

playlocalsoundwrapper( alias )
{
    self playlocalsound( alias );
}

teleport_player( object )
{
    level.player setorigin( object.origin );

    if ( isdefined( object.angles ) )
        level.player setplayerangles( object.angles );
}

translate_local()
{
    entities = [];

    if ( isdefined( self.entities ) )
        entities = self.entities;

    if ( isdefined( self.entity ) )
        entities[entities.size] = self.entity;

    scripts\engine\utility::array_levelthread( entities, scripts\engine\sp\utility_code::translate_local_on_ent );
}

open_up_fov( time, player_rig, tag, _id_EA4B96B3BC07D5EB, _id_A4F80A2ADF98DD96, _id_EC8F49EF6138E6DE, _id_94C9659B7604E0A0 )
{
    level.player endon( "stop_opening_fov" );
    wait( time );
    level.player playerlinktodelta( player_rig, tag, 1, _id_EA4B96B3BC07D5EB, _id_A4F80A2ADF98DD96, _id_EC8F49EF6138E6DE, _id_94C9659B7604E0A0, 1 );
}

get_ai_touching_volume( _id_63A94F469B35C9AF, species, _id_4E6D7BB6844AD4EC )
{
    if ( !isdefined( _id_63A94F469B35C9AF ) )
        _id_63A94F469B35C9AF = "all";

    if ( !isdefined( species ) )
        species = "all";

    _id_0585E701DAF27429 = getaispeciesarray( _id_63A94F469B35C9AF, species );
    _id_3ECBF1096D1BA823 = [];

    foreach ( guy in _id_0585E701DAF27429 )
    {
        if ( guy istouching( self ) )
            _id_3ECBF1096D1BA823[_id_3ECBF1096D1BA823.size] = guy;
    }

    return _id_3ECBF1096D1BA823;
}

get_drones_touching_volume( _id_63A94F469B35C9AF )
{
    if ( !isdefined( _id_63A94F469B35C9AF ) )
        _id_63A94F469B35C9AF = "all";

    _id_BC02B7E0A9C33EF3 = [];

    if ( _id_63A94F469B35C9AF == "all" )
    {
        _id_BC02B7E0A9C33EF3 = array_merge( level.drones["allies"].array, level.drones["axis"].array );
        _id_BC02B7E0A9C33EF3 = array_merge( _id_BC02B7E0A9C33EF3, level.drones["neutral"].array );
    }
    else
        _id_BC02B7E0A9C33EF3 = level.drones[_id_63A94F469B35C9AF].array;

    _id_EB117856CE650A18 = [];

    foreach ( drone in _id_BC02B7E0A9C33EF3 )
    {
        if ( !isdefined( drone ) )
            continue;

        if ( drone istouching( self ) )
            _id_EB117856CE650A18[_id_EB117856CE650A18.size] = drone;
    }

    return _id_EB117856CE650A18;
}

get_drones_with_targetname( _id_C1B40B757EBD4BD4 )
{
    _id_BC02B7E0A9C33EF3 = array_merge( level.drones["allies"].array, level.drones["axis"].array );
    _id_BC02B7E0A9C33EF3 = array_merge( _id_BC02B7E0A9C33EF3, level.drones["neutral"].array );
    _id_EB117856CE650A18 = [];

    foreach ( drone in _id_BC02B7E0A9C33EF3 )
    {
        if ( !isdefined( drone ) )
            continue;

        if ( isdefined( drone.targetname ) && drone.targetname == _id_C1B40B757EBD4BD4 )
            _id_EB117856CE650A18[_id_EB117856CE650A18.size] = drone;
    }

    return _id_EB117856CE650A18;
}

set_count( count )
{
    self.count = count;
}

follow_path( node, _id_FFE0E746775A6D86, _id_5E38F20C9628AE25 )
{
    self notify( "_utility::follow_path" );
    self endon( "_utility::follow_path" );
    self endon( "death" );
    _id_69FA9325EFE2F972 = self.script_forcegoal;
    self.script_forcegoal = 1;
    scripts\sp\spawner::go_to_node( node, _id_FFE0E746775A6D86, _id_5E38F20C9628AE25 );
    self.script_forcegoal = _id_69FA9325EFE2F972;

    if ( !isdefined( self.script_forcegoal ) || !self.script_forcegoal )
        self.goalradius = level.default_goalradius;
}

enable_dynamic_run_speed( _id_90F9773EF140E661, minspeed, _id_1B69369ED5CB9124, maxspeed, _id_A765F9B570E8F8CC, _id_81EC67164BE866BD, _id_1124265EE011BB02 )
{
    setdvarifuninitialized( "dvar_C459EFA5216607EE", 0 );
    disable_dynamic_run_speed( 0 );

    if ( !isdefined( minspeed ) )
        minspeed = 0;

    if ( !isdefined( _id_1B69369ED5CB9124 ) )
        _id_1B69369ED5CB9124 = 205;

    if ( !isdefined( maxspeed ) )
        maxspeed = 250;

    if ( !isdefined( _id_A765F9B570E8F8CC ) )
        _id_A765F9B570E8F8CC = 100;

    if ( !isdefined( _id_81EC67164BE866BD ) )
        _id_81EC67164BE866BD = -100;

    if ( !isdefined( _id_1124265EE011BB02 ) )
        _id_1124265EE011BB02 = -200;

    thread scripts\engine\sp\utility_code::dynamic_run_speed_thread( _id_90F9773EF140E661, minspeed, _id_1B69369ED5CB9124, maxspeed, _id_A765F9B570E8F8CC, _id_81EC67164BE866BD, _id_1124265EE011BB02 );
}

disable_dynamic_run_speed( speed )
{
    if ( !isdefined( speed ) )
        speed = 165;

    self notify( "stop_dynamic_run_speed" );

    if ( istrue( speed ) )
        scripts\engine\utility::set_movement_speed( speed );
}

waittill_entity_in_range_or_timeout( entity, range, timeout )
{
    self endon( "death" );
    entity endon( "death" );

    if ( !isdefined( timeout ) )
        timeout = 5;

    _id_BFDA656E7B3CC1A0 = gettime() + timeout * 1000;

    while ( isdefined( entity ) )
    {
        if ( distancesquared( entity.origin, self.origin ) <= range * range )
            break;

        if ( gettime() > _id_BFDA656E7B3CC1A0 )
            break;

        wait 0.1;
    }
}

waittill_entity_in_range( entity, range )
{
    self endon( "death" );
    entity endon( "death" );

    while ( isdefined( entity ) )
    {
        if ( distancesquared( entity.origin, self.origin ) <= range * range )
            break;

        wait 0.1;
    }
}

waittill_entity_out_of_range( entity, range )
{
    self endon( "death" );
    entity endon( "death" );

    while ( isdefined( entity ) )
    {
        if ( distancesquared( entity.origin, self.origin ) > range * range )
            break;

        wait 0.1;
    }
}

player_speed_percent( _id_477C1209E5432ABE, time )
{
    _id_216AA8D841F7C224 = int( getdvar( "dvar_11A6AAF18B50047B" ) );

    if ( !isdefined( level.player.g_speed ) )
        level.player.g_speed = _id_216AA8D841F7C224;

    _id_AF03A5AC7D47D6CD = int( level.player.g_speed * _id_477C1209E5432ABE * 0.01 );
    level.player player_speed_set( _id_AF03A5AC7D47D6CD, time );
}

player_speed_set( speed, time )
{
    _id_216AA8D841F7C224 = int( getdvar( "dvar_11A6AAF18B50047B" ) );

    if ( !isdefined( level.player.g_speed ) )
        level.player.g_speed = _id_216AA8D841F7C224;

    _id_6A4AD94DB7F006E2 = scripts\engine\sp\utility_code::g_speed_get_func;
    set_func = scripts\engine\sp\utility_code::g_speed_set_func;
    level.player thread player_speed_proc( speed, time, _id_6A4AD94DB7F006E2, set_func, "player_speed_set" );
}

player_bob_scale_set( scale, time )
{
    _id_6A4AD94DB7F006E2 = scripts\engine\sp\utility_code::g_bob_scale_get_func;
    set_func = scripts\engine\sp\utility_code::g_bob_scale_set_func;
    level.player thread player_speed_proc( scale, time, _id_6A4AD94DB7F006E2, set_func, "player_bob_scale_set" );
}

blend_movespeedscale( scale, time, _id_7148C1A6F25491F8 )
{
    player = self;

    if ( !isplayer( player ) )
        player = level.player;

    if ( !isdefined( player.movespeedscale ) )
        player.movespeedscale = 1.0;

    _id_6A4AD94DB7F006E2 = scripts\engine\sp\utility_code::movespeed_get_func;
    set_func = scripts\engine\sp\utility_code::movespeed_set_func;
    player thread player_speed_proc( scale, time, _id_6A4AD94DB7F006E2, set_func, "blend_movespeedscale", _id_7148C1A6F25491F8 );
}

blend_movespeedscale_percent( _id_477C1209E5432ABE, time, _id_7148C1A6F25491F8 )
{
    player = self;

    if ( !isplayer( player ) )
        player = level.player;

    if ( !isdefined( player.movespeedscale ) )
        player.movespeedscale = 1.0;

    _id_0C943DD9D8F55B20 = _id_477C1209E5432ABE * 0.01;
    player blend_movespeedscale( _id_0C943DD9D8F55B20, time, _id_7148C1A6F25491F8 );
}

player_speed_proc( speed, time, _id_6A4AD94DB7F006E2, set_func, ender, _id_7148C1A6F25491F8 )
{
    self notify( ender );
    self endon( ender );
    _id_216AA8D841F7C224 = [[ _id_6A4AD94DB7F006E2 ]]( _id_7148C1A6F25491F8 );
    _id_AF03A5AC7D47D6CD = speed;

    if ( isdefined( time ) && time > 0 )
    {
        range = _id_AF03A5AC7D47D6CD - _id_216AA8D841F7C224;
        interval = 0.05;
        _id_92FEDD11192AD154 = time / interval;
        fraction = range / _id_92FEDD11192AD154;

        while ( abs( _id_AF03A5AC7D47D6CD - _id_216AA8D841F7C224 ) > abs( fraction * 1.1 ) )
        {
            _id_216AA8D841F7C224 = _id_216AA8D841F7C224 + fraction;
            [[ set_func ]]( _id_216AA8D841F7C224, _id_7148C1A6F25491F8 );
            wait( interval );
        }
    }

    [[ set_func ]]( _id_AF03A5AC7D47D6CD, _id_7148C1A6F25491F8 );
}

player_speed_default( time )
{
    if ( !isdefined( level.player.g_speed ) )
        return;

    level.player player_speed_set( level.player.g_speed, time );
    waittillframeend;
    level.player.g_speed = undefined;
}

blend_movespeedscale_default( time, _id_7148C1A6F25491F8 )
{
    player = self;

    if ( !isplayer( player ) )
        player = level.player;

    if ( !isdefined( player.movespeedscale ) )
        return;

    player blend_movespeedscale( 1.0, time, _id_7148C1A6F25491F8 );
    player.movespeedscale = undefined;
}

teleport_ent( ent )
{
    if ( isplayer( self ) )
    {
        self setorigin( ent.origin );
        self setplayerangles( ent.angles );
    }
    else if ( isai( self ) )
        self forceteleport( ent.origin, ent.angles );
    else
    {
        self.origin = ent.origin;
        self.angles = ent.angles;
    }
}

teleport_to_ent_tag( ent, tag )
{
    position = ent gettagorigin( tag );
    angles = ent gettagangles( tag );
    self dontinterpolate();

    if ( isplayer( self ) )
    {
        self setorigin( position );
        self setplayerangles( angles );
    }
    else if ( isai( self ) )
        self forceteleport( position, angles );
    else
    {
        self.origin = position;
        self.angles = angles;
    }
}

teleport_ai( _id_4690FB463888CBD8 )
{
    self forceteleport( _id_4690FB463888CBD8.origin, _id_4690FB463888CBD8.angles );
    self setgoalpos( self.origin );
    self setgoalnode( _id_4690FB463888CBD8 );
}

move_all_fx( _id_06A3A1033FFC2699 )
{
    foreach ( fx in level.createfxent )
        fx.v["origin"] = fx.v["origin"] + _id_06A3A1033FFC2699;
}

issliding()
{
    return self issprintsliding();
}

beginsliding( velocity, _id_82EBFB9873BEBD03, _id_F8D869E874843E58, gesture )
{
    self endon( "stop_sliding" );
    self endon( "death" );
    player = self;

    if ( player scripts\engine\utility::ent_flag_exist( "is_sliding" ) )
        player scripts\engine\utility::ent_flag_clear( "is_sliding" );
    else
        player scripts\engine\utility::ent_flag_init( "is_sliding" );

    player scripts\engine\utility::ent_flag_set( "is_sliding" );
    _id_F7D4DD03F8C4AC9E = isdefined( level.custom_linkto_slide );
    slidemodel = level.player scripts\engine\utility::spawn_tag_origin();
    player.slidemodel = slidemodel;
    fx_tag = level.player scripts\engine\utility::spawn_tag_origin();
    player.fx_tag = fx_tag;
    trace_contents = scripts\engine\trace::create_contents( 0, 1, 0, 0, 0, 0 );
    trace = scripts\engine\trace::ray_trace( level.player geteye(), level.player geteye() - ( 0, 0, 100 ), player, trace_contents );
    angle = 0;
    point = ( 0, 0, 0 );
    normal = trace["normal"];

    for (;;)
    {
        if ( !player isjumping() )
        {
            trace = scripts\engine\trace::ray_trace( level.player geteye(), level.player geteye() - ( 0, 0, 100 ), player, trace_contents );
            normal = trace["normal"];

            if ( isdefined( normal ) )
            {
                _id_C22BACA169342A86 = vectordot( normal, ( 0, 0, 1 ) );

                if ( _id_C22BACA169342A86 <= 0.95 )
                {
                    angle = acos( _id_C22BACA169342A86 );
                    point = trace["position"];
                    break;
                }
            }
        }

        wait 0.05;
    }

    normal = vectornormalize( scripts\engine\utility::flatten_vector( normal, ( 0, 0, 1 ) ) );
    _id_76D34DC0F1F05F18 = vectornormalize( vectorcross( normal, ( 0, 1, 0 ) ) );
    _id_5E829C3A809CBB07 = vectornormalize( vectorcross( normal, _id_76D34DC0F1F05F18 ) );
    slidemodel.angles = player.angles;
    slidemodel.origin = player.origin;
    _id_9CBF3E1432E34389 = vectortoangles( normal ) + normal * angle;
    slidemodel.gesture_target = spawn( "script_model", slidemodel.origin + anglestoforward( _id_9CBF3E1432E34389 ) * 2000 );
    slidemodel.gesture_target.angles = _id_9CBF3E1432E34389;
    player.fx_tag.angles = _id_9CBF3E1432E34389;

    if ( !isdefined( velocity ) )
        velocity = player getvelocity() + ( 0, 0, -10 );

    if ( !isdefined( _id_82EBFB9873BEBD03 ) )
        _id_82EBFB9873BEBD03 = 10;

    if ( !isdefined( _id_F8D869E874843E58 ) )
        _id_F8D869E874843E58 = 0.035;

    slidemodel _meth_C1B4BAA714ED48E5( ( 0, 0, 15 ), 15, velocity );
    player thread play_sound_on_entity( "foot_slide_plr_start" );
    player _meth_D7D5EF1BA6D19E25();
    weapons = player getweaponslistprimaries();

    if ( weapons.size > 0 )
    {
        gesture = scripts\engine\utility::_id_53C4C53197386572( gesture, "ges_slide" );

        if ( gesture != "no_gesture" && !player isgestureplaying( gesture ) )
            player forceplaygestureviewmodel( gesture, slidemodel.gesture_target, 0.2, undefined, 1, 1 );
    }

    if ( isdefined( level._effect["vfx_slide_dirt"] ) )
    {
        effect = scripts\engine\utility::getfx( "vfx_slide_dirt" );
        playfxontag( scripts\engine\utility::getfx( "vfx_slide_dirt" ), player.fx_tag, "tag_origin" );
        player.fx_tag show();
    }

    if ( _id_F7D4DD03F8C4AC9E )
    {
        player playerlinktoblend( slidemodel, undefined, 1 );
        wait 1.0;
        player playerlinktodelta( slidemodel, "tag_origin", 1, 180, 180, 180, 180, 1 );
    }
    else
        player playerlinktodelta( slidemodel, "tag_origin", 0, 180, 180, 180, 180 );

    setsaveddvar( "dvar_7EB1641737AB83B7", 1 );
    player _id_3B64EB40368C1450::set( "slide", "fire", 0 );
    player _id_3B64EB40368C1450::set( "slide", "prone", 0 );
    player _id_3B64EB40368C1450::set( "slide", "stand", 0 );
    player _id_3B64EB40368C1450::set( "slide", "reload", 0 );

    if ( istrue( level._id_EF533D9EDB03D515 ) )
        player _id_3B64EB40368C1450::set( "slide", "sprint", 0 );

    player thread scripts\engine\sp\utility_code::doslide( slidemodel, _id_82EBFB9873BEBD03, _id_F8D869E874843E58 );
    player thread play_loop_sound_on_tag( "foot_slide_plr_loop" );
    player._id_98AC01A65B073642 = get_rumble_ent();
    player._id_98AC01A65B073642 thread rumble_ramp_to( 0.6, 3.0 );
}

endsliding( _id_15060420A136AFE6, _id_1363A88619936DF7, gesture )
{
    player = self;
    gesture = scripts\engine\utility::_id_53C4C53197386572( gesture, "ges_slide" );

    if ( gesture != "no_gesture" && level.player isgestureplaying( gesture ) )
        player stopgestureviewmodel( gesture );

    if ( isdefined( player._id_98AC01A65B073642 ) )
        player._id_98AC01A65B073642 delete();

    player notify( "stop soundfoot_slide_plr_loop" );
    player thread play_sound_on_entity( "foot_slide_plr_end" );
    player scripts\engine\utility::delaycall( 0.2, ::_meth_E4BEF14B0E71E526 );

    if ( level.player islinked() )
    {
        player unlink();
        player setvelocity( player.slidemodel.slidevelocity );
    }

    if ( isdefined( player.fx_tag ) )
    {
        if ( isdefined( level._effect["vfx_slide_dirt"] ) )
        {
            effect = scripts\engine\utility::getfx( "vfx_slide_dirt" );

            if ( isdefined( effect ) )
                stopfxontag( scripts\engine\utility::getfx( "vfx_slide_dirt" ), player.fx_tag, "tag_origin" );
        }

        player.fx_tag delete();
    }

    if ( player scripts\engine\utility::ent_flag_exist( "is_sliding" ) && player scripts\engine\utility::ent_flag( "is_sliding" ) )
        player scripts\engine\utility::ent_flag_clear( "is_sliding" );

    player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "slide" );

    if ( isdefined( _id_15060420A136AFE6 ) )
        player setstance( _id_15060420A136AFE6 );

    if ( isdefined( _id_1363A88619936DF7 ) )
        player scripts\engine\utility::delaycall( 0.2, ::dodamage, _id_1363A88619936DF7, player.origin );

    player.slidemodel delete();
    setsaveddvar( "dvar_7EB1641737AB83B7", 0 );
    player notify( "stop_sliding" );
}

beginslidinglegacy( velocity, _id_82EBFB9873BEBD03, _id_F8D869E874843E58 )
{
    player = self;

    if ( player scripts\engine\utility::ent_flag_exist( "is_sliding" ) )
        player scripts\engine\utility::ent_flag_clear( "is_sliding" );
    else
        player scripts\engine\utility::ent_flag_init( "is_sliding" );

    player thread play_sound_on_entity( "foot_slide_plr_start" );
    player thread play_loop_sound_on_tag( "foot_slide_plr_loop" );
    _id_F7D4DD03F8C4AC9E = isdefined( level.custom_linkto_slide );

    if ( !isdefined( velocity ) )
        velocity = player getvelocity() + ( 0, 0, -10 );

    if ( !isdefined( _id_82EBFB9873BEBD03 ) )
        _id_82EBFB9873BEBD03 = 10;

    if ( !isdefined( _id_F8D869E874843E58 ) )
        _id_F8D869E874843E58 = 0.035;

    slidemodel = spawn( "script_origin", player.origin );
    slidemodel.angles = player.angles;
    player.slidemodel = slidemodel;
    slidemodel _meth_C1B4BAA714ED48E5( ( 0, 0, 15 ), 15, velocity );
    player scripts\engine\utility::ent_flag_set( "is_sliding" );

    if ( _id_F7D4DD03F8C4AC9E )
        player playerlinktoblend( slidemodel, undefined, 1 );
    else
        player playerlinkto( slidemodel );

    player _id_3B64EB40368C1450::set( "slide_legacy", "weapon", 0 );
    player _id_3B64EB40368C1450::set( "slide_legacy", "prone", 0 );
    player _id_3B64EB40368C1450::set( "slide_legacy", "crouch", 1 );
    player _id_3B64EB40368C1450::set( "slide_legacy", "stand", 0 );
    player thread scripts\engine\sp\utility_code::doslide( slidemodel, _id_82EBFB9873BEBD03, _id_F8D869E874843E58 );
}

endslidinglegacy()
{
    player = self;
    player notify( "stop soundfoot_slide_plr_loop" );
    player thread play_sound_on_entity( "foot_slide_plr_end" );
    player unlink();
    player setvelocity( player.slidemodel.slidevelocity );
    player.slidemodel delete();
    player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "slide_legacy" );
    player notify( "stop_sliding" );

    if ( player scripts\engine\utility::ent_flag_exist( "is_sliding" ) && player scripts\engine\utility::ent_flag( "is_sliding" ) )
        player scripts\engine\utility::ent_flag_clear( "is_sliding" );
}

getentwithflag( flag )
{
    _id_B65F27B4BA84B114 = scripts\sp\trigger::get_load_trigger_classes();
    triggers = [];

    foreach ( class, _ in _id_B65F27B4BA84B114 )
    {
        if ( !issubstr( class, "flag" ) )
            continue;

        _id_FC9B8E336247843B = getentarray( class, "classname" );
        triggers = scripts\engine\utility::array_combine( triggers, _id_FC9B8E336247843B );
    }

    _id_6AE9F8DF81EFA2D7 = scripts\sp\trigger::get_load_trigger_funcs();

    foreach ( func, _ in _id_6AE9F8DF81EFA2D7 )
    {
        if ( !issubstr( func, "flag" ) )
            continue;

        _id_FC9B8E336247843B = getentarray( func, "targetname" );
        triggers = scripts\engine\utility::array_combine( triggers, _id_FC9B8E336247843B );
    }

    _id_0CB411FF28A70490 = undefined;

    foreach ( trigger in triggers )
    {
        if ( trigger.script_flag == flag )
            return trigger;
    }
}

getentarraywithflag( flag )
{
    _id_B65F27B4BA84B114 = scripts\sp\trigger::get_load_trigger_classes();
    triggers = [];

    foreach ( class, _ in _id_B65F27B4BA84B114 )
    {
        if ( !issubstr( class, "flag" ) )
            continue;

        _id_FC9B8E336247843B = getentarray( class, "classname" );
        triggers = scripts\engine\utility::array_combine( triggers, _id_FC9B8E336247843B );
    }

    _id_6AE9F8DF81EFA2D7 = scripts\sp\trigger::get_load_trigger_funcs();

    foreach ( func, _ in _id_6AE9F8DF81EFA2D7 )
    {
        if ( !issubstr( func, "flag" ) )
            continue;

        _id_FC9B8E336247843B = getentarray( func, "targetname" );
        triggers = scripts\engine\utility::array_combine( triggers, _id_FC9B8E336247843B );
    }

    _id_97087726674FBF39 = [];

    foreach ( trigger in triggers )
    {
        if ( trigger.script_flag == flag )
            _id_97087726674FBF39[_id_97087726674FBF39.size] = trigger;
    }

    return _id_97087726674FBF39;
}

set_z( _id_06A3A1033FFC2699, z )
{
    return ( _id_06A3A1033FFC2699[0], _id_06A3A1033FFC2699[1], z );
}

set_y( _id_06A3A1033FFC2699, y )
{
    return ( _id_06A3A1033FFC2699[0], y, _id_06A3A1033FFC2699[2] );
}

set_x( _id_06A3A1033FFC2699, x )
{
    return ( x, _id_06A3A1033FFC2699[1], _id_06A3A1033FFC2699[2] );
}

get_rumble_ent( rumble )
{
    player = get_player_from_self();

    if ( !isdefined( rumble ) )
        rumble = "steady_rumble";

    ent = spawn( "script_origin", player geteye() );
    ent.intensity = 1;
    ent thread scripts\engine\sp\utility_code::update_rumble_intensity( player, rumble );
    return ent;
}

set_rumble_intensity( intensity )
{
    self.intensity = intensity;
}

rumble_ramp_on( time )
{
    thread rumble_ramp_to( 1, time );
}

rumble_ramp_off( time )
{
    thread rumble_ramp_to( 0, time );
}

rumble_ramp_to( _id_815D30728A6EF9D9, time )
{
    self notify( "new_ramp" );
    self endon( "new_ramp" );
    self endon( "death" );
    _id_1AAD8F38CB38F703 = time * 20;
    _id_D3E80203D73E375C = _id_815D30728A6EF9D9 - self.intensity;
    _id_69A8168DF4B882E5 = _id_D3E80203D73E375C / _id_1AAD8F38CB38F703;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_1AAD8F38CB38F703; _id_AC0E594AC96AA3A8++ )
    {
        self.intensity = self.intensity + _id_69A8168DF4B882E5;
        wait 0.05;
    }

    self.intensity = _id_815D30728A6EF9D9;
}

get_player_from_self()
{
    if ( isdefined( self ) )
    {
        if ( !scripts\engine\utility::array_contains( level.players, self ) )
            return level.player;
        else
            return self;
    }
    else
        return level.player;
}

get_player_gameskill()
{
    return int( self _meth_34BB5FB0FECD937E( "gameskill" ) );
}

array_delete_evenly( array, _id_56399788AAE86E7A, _id_BF94515C0E671B69 )
{
    _id_F7F30FBD10DE4313 = [];
    _id_56399788AAE86E7A = _id_BF94515C0E671B69 - _id_56399788AAE86E7A;

    foreach ( _id_F90358454413407F in array )
    {
        _id_F7F30FBD10DE4313[_id_F7F30FBD10DE4313.size] = _id_F90358454413407F;

        if ( _id_F7F30FBD10DE4313.size == _id_BF94515C0E671B69 )
        {
            _id_F7F30FBD10DE4313 = scripts\engine\utility::array_randomize( _id_F7F30FBD10DE4313 );

            for ( _id_AC0E594AC96AA3A8 = _id_56399788AAE86E7A; _id_AC0E594AC96AA3A8 < _id_F7F30FBD10DE4313.size; _id_AC0E594AC96AA3A8++ )
                _id_F7F30FBD10DE4313[_id_AC0E594AC96AA3A8] delete();

            _id_F7F30FBD10DE4313 = [];
        }
    }

    _id_055F75D9F16D814F = [];

    foreach ( _id_F90358454413407F in array )
    {
        if ( !isdefined( _id_F90358454413407F ) )
            continue;

        _id_055F75D9F16D814F[_id_055F75D9F16D814F.size] = _id_F90358454413407F;
    }

    return _id_055F75D9F16D814F;
}

waittill_in_range( origin, range, _id_BD81361418D1A573 )
{
    if ( !isdefined( _id_BD81361418D1A573 ) )
        _id_BD81361418D1A573 = 0.5;

    self endon( "death" );

    while ( isdefined( self ) )
    {
        if ( distancesquared( origin, self.origin ) <= range * range )
            break;

        wait( _id_BD81361418D1A573 );
    }
}

waittill_out_of_range( origin, range, _id_BD81361418D1A573 )
{
    if ( !isdefined( _id_BD81361418D1A573 ) )
        _id_BD81361418D1A573 = 0.5;

    self endon( "death" );

    while ( isdefined( self ) )
    {
        if ( distancesquared( origin, self.origin ) > range * range )
            break;

        wait( _id_BD81361418D1A573 );
    }
}

disable_surprise()
{
    self.newenemyreactiondistsq = 0;
}

enable_surprise()
{
    self.newenemyreactiondistsq = squared( 512 );
}

getvehiclearray()
{
    return vehicle_getarray();
}

getteamvehiclearray( teams )
{
    if ( !isarray( teams ) )
        teams[0] = teams;

    vehicles = vehicle_getarray();

    foreach ( vehicle in vehicles )
    {
        if ( isdefined( vehicle.team ) && scripts\engine\utility::array_contains( teams, vehicle.team ) )
            continue;
        else
            vehicles = scripts\engine\utility::array_remove( vehicles, vehicle );
    }

    return vehicles;
}

getvehiclearray_in_radius( pos, dist, team )
{
    vehicles = scripts\engine\utility::get_array_of_closest( pos, vehicle_getarray(), undefined, undefined, dist );

    if ( isdefined( team ) )
    {
        _id_6D906809844C7CB1 = [];

        foreach ( vehicle in vehicles )
        {
            if ( scripts\engine\utility::is_equal( vehicle.script_team, team ) )
                _id_6D906809844C7CB1[_id_6D906809844C7CB1.size] = vehicle;
        }

        vehicles = _id_6D906809844C7CB1;
    }

    return vehicles;
}

hint( string, timeout, zoffset )
{
    if ( !isdefined( zoffset ) )
        zoffset = 0;

    _id_67EB70C3957052F2 = 0.5;
    level endon( "clearing_hints" );

    if ( isdefined( level.hintelement ) )
        level.hintelement scripts\sp\hud_util::destroyelem();

    level.hintelement = scripts\sp\hud_util::createfontstring( "default", 1.5 );
    level.hintelement scripts\sp\hud_util::setpoint( "MIDDLE", undefined, 0, 30 + zoffset );
    level.hintelement.color = ( 1, 1, 1 );
    level.hintelement settext( string );
    level.hintelement.alpha = 0;
    level.hintelement fadeovertime( 0.5 );
    level.hintelement.alpha = 1;
    wait 0.5;
    level.hintelement endon( "death" );

    if ( isdefined( timeout ) )
        wait( timeout );
    else
        return;

    level.hintelement fadeovertime( _id_67EB70C3957052F2 );
    level.hintelement.alpha = 0;
    wait( _id_67EB70C3957052F2 );
    level.hintelement scripts\sp\hud_util::destroyelem();
}

hint_fade()
{
    _id_67EB70C3957052F2 = 1;

    if ( isdefined( level.hintelement ) )
    {
        level notify( "clearing_hints" );
        level.hintelement fadeovertime( _id_67EB70C3957052F2 );
        level.hintelement.alpha = 0;
        wait( _id_67EB70C3957052F2 );
    }
}

kill_deathflag( _id_3F594777B26BB842, time )
{
    if ( !isdefined( level.flag[_id_3F594777B26BB842] ) )
        return;

    if ( !isdefined( time ) )
        time = 0;

    foreach ( _id_7B9CFB526BF80CB6 in level.deathflags[_id_3F594777B26BB842] )
    {
        foreach ( _id_F7806D4CF24AACD3 in _id_7B9CFB526BF80CB6 )
        {
            if ( isalive( _id_F7806D4CF24AACD3 ) )
            {
                _id_F7806D4CF24AACD3 thread scripts\engine\sp\utility_code::kill_deathflag_proc( time );
                continue;
            }

            _id_F7806D4CF24AACD3 delete();
        }
    }
}

get_player_view_controller( model, tag, _id_1E2F2224127D2990, turret )
{
    if ( !isdefined( turret ) )
        turret = "player_view_controller";

    if ( !isdefined( _id_1E2F2224127D2990 ) )
        _id_1E2F2224127D2990 = ( 0, 0, 0 );

    origin = model gettagorigin( tag );
    _id_6A875EB9AF4B3605 = spawnturret( "misc_turret", origin, turret );
    _id_6A875EB9AF4B3605.angles = model gettagangles( tag );
    _id_6A875EB9AF4B3605 setmodel( "tag_turret" );
    _id_6A875EB9AF4B3605 linkto( model, tag, _id_1E2F2224127D2990, ( 0, 0, 0 ) );
    _id_6A875EB9AF4B3605 makeunusable();
    _id_6A875EB9AF4B3605 hide();
    _id_6A875EB9AF4B3605 setmode( "manual" );
    return _id_6A875EB9AF4B3605;
}

create_blend( func, _id_D2806A25E4C80CB1, _id_D2806725E4C80618, _id_D2806825E4C8084B )
{
    ent = spawnstruct();
    ent childthread scripts\engine\sp\utility_code::process_blend( func, self, _id_D2806A25E4C80CB1, _id_D2806725E4C80618, _id_D2806825E4C8084B );
    return ent;
}

store_players_weapons( scene )
{
    if ( !isdefined( self.stored_weapons ) )
        self.stored_weapons = [];

    array = [];
    weapons = self getweaponslistall();

    foreach ( weapon in weapons )
    {
        weaponname = getcompleteweaponname( weapon );
        array[weaponname] = [];
        array[weaponname]["clip_left"] = self getweaponammoclip( weapon, "left" );
        array[weaponname]["clip_right"] = self getweaponammoclip( weapon, "right" );
        array[weaponname]["stock"] = self getweaponammostock( weapon );
    }

    if ( !isdefined( scene ) )
        scene = "default";

    self.stored_weapons[scene] = [];
    self.stored_weapons[scene]["current_weapon"] = self getcurrentweapon();
    self.stored_weapons[scene]["inventory"] = array;
}

restore_players_weapons( scene, immediate )
{
    if ( !isdefined( scene ) )
        scene = "default";

    if ( !isdefined( self.stored_weapons ) || !isdefined( self.stored_weapons[scene] ) )
        return;

    self takeallweapons();

    foreach ( weapon, array in self.stored_weapons[scene]["inventory"] )
    {
        if ( weaponinventorytype( weapon ) != "altmode" )
            self giveweapon( weapon );

        self setweaponammoclip( weapon, array["clip_left"], "left" );
        self setweaponammoclip( weapon, array["clip_right"], "right" );
        self setweaponammostock( weapon, array["stock"] );
    }

    _id_89162A7340BA32F3 = self.stored_weapons[scene]["current_weapon"];

    if ( !isnullweapon( _id_89162A7340BA32F3 ) )
    {
        if ( istrue( immediate ) )
            self switchtoweaponimmediate( _id_89162A7340BA32F3 );
        else
            self switchtoweapon( _id_89162A7340BA32F3 );
    }
}

hide_entity()
{
    switch ( self.code_classname )
    {
        case "light_spot":
        case "script_vehicle":
        case "script_model":
            self hide();
            break;
        case "script_brushmodel":
            self hide();
            self notsolid();

            if ( self.spawnflags & 1 )
                self connectpaths();

            break;
        case "trigger_multiple_flag_looking":
        case "trigger_multiple_flag_lookat":
        case "trigger_multiple_breachIcon":
        case "trigger_multiple_flag_set":
        case "trigger_use_touch":
        case "trigger_use":
        case "trigger_radius":
        case "trigger_multiple":
            scripts\engine\utility::trigger_off();
            break;
        default:
    }
}

show_entity()
{
    switch ( self.code_classname )
    {
        case "light_spot":
        case "script_vehicle":
        case "script_model":
            self show();
            break;
        case "script_brushmodel":
            self show();
            self solid();

            if ( self.spawnflags & 1 )
                self disconnectpaths();

            break;
        case "trigger_multiple_flag_looking":
        case "trigger_multiple_flag_lookat":
        case "trigger_multiple_breachIcon":
        case "trigger_multiple_flag_set":
        case "trigger_use_touch":
        case "trigger_use":
        case "trigger_radius":
        case "trigger_multiple":
            scripts\engine\utility::trigger_on();
            break;
        default:
    }
}

set_moveplaybackrate( rate, time )
{
    self notify( "set_moveplaybackrate" );
    self endon( "set_moveplaybackrate" );
    self endon( "death" );

    if ( isdefined( time ) )
    {
        _id_EC2AB9497C8F6E29 = scripts\asm\asm::asm_getmoveplaybackrate();
        range = rate - _id_EC2AB9497C8F6E29;
        interval = 0.05;
        _id_92FEDD11192AD154 = time / interval;

        for ( fraction = range / _id_92FEDD11192AD154; abs( rate - _id_EC2AB9497C8F6E29 ) > abs( fraction * 1.1 ); _id_EC2AB9497C8F6E29 = scripts\asm\asm::asm_getmoveplaybackrate() )
        {
            scripts\asm\asm::asm_setmoveplaybackrate( _id_EC2AB9497C8F6E29 + fraction );
            wait( interval );
        }
    }

    scripts\asm\asm::asm_setmoveplaybackrate( rate );
}

array_spawn_function( array, func, param1, param2, param3, param4 )
{
    foreach ( spawner in array )
        spawner thread add_spawn_function( func, param1, param2, param3, param4 );
}

array_spawn_function_targetname( key, func, param1, param2, param3, param4 )
{
    array = _func_91E8F01DD90DE05A( key );
    array = array_merge( array, getentarray( key, "targetname" ) );
    array_spawn_function( array, func, param1, param2, param3, param4 );
}

array_spawn_function_noteworthy( key, func, param1, param2, param3, param4 )
{
    array = get_spawner_array( key, "script_noteworthy" );
    array = array_merge( array, getentarray( key, "script_noteworthy" ) );
    array_spawn_function( array, func, param1, param2, param3, param4 );
}

array_spawn_function_aigroup( key, func, param1, param2, param3, param4 )
{
    array = get_ai_group_spawners( key );
    array_spawn_function( array, func, param1, param2, param3, param4 );
}

enable_dontevershoot()
{
    self.dontevershoot = 1;
}

disable_dontevershoot()
{
    self.dontevershoot = 0;
}

mask_exploders_in_volume( volumes )
{
    if ( getdvar( "dvar_284CBC4392371C00" ) != "" )
        return;

    ents = getentarray( "script_brushmodel", "classname" );
    _id_A85ECA59011EC620 = getentarray( "script_model", "classname" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_A85ECA59011EC620.size; _id_AC0E594AC96AA3A8++ )
        ents[ents.size] = _id_A85ECA59011EC620[_id_AC0E594AC96AA3A8];

    foreach ( volume in volumes )
    {
        foreach ( ent in ents )
        {
            if ( isdefined( ent.script_prefab_exploder ) )
                ent.script_exploder = ent.script_prefab_exploder;

            if ( !isdefined( ent.script_exploder ) )
                continue;

            if ( !isdefined( ent.model ) )
                continue;

            if ( ent.code_classname != "script_model" )
                continue;

            if ( !ent istouching( volume ) )
                continue;

            ent.masked_exploder = 1;
        }
    }
}

activate_exploders_in_volume()
{
    _id_BEC13B7C1B25DF68 = spawn( "script_origin", ( 0, 0, 0 ) );

    foreach ( _id_F8AC4F4543B492E8 in level.createfxent )
    {
        if ( !isdefined( _id_F8AC4F4543B492E8.v["masked_exploder"] ) )
            continue;

        _id_BEC13B7C1B25DF68.origin = _id_F8AC4F4543B492E8.v["origin"];
        _id_BEC13B7C1B25DF68.angles = _id_F8AC4F4543B492E8.v["angles"];

        if ( !_id_BEC13B7C1B25DF68 istouching( self ) )
            continue;

        model_name = _id_F8AC4F4543B492E8.v["masked_exploder"];
        spawnflags = _id_F8AC4F4543B492E8.v["masked_exploder_spawnflags"];
        disconnect_paths = _id_F8AC4F4543B492E8.v["masked_exploder_script_disconnectpaths"];
        _id_409E0E80F2171B93 = spawn( "script_model", ( 0, 0, 0 ), spawnflags );
        _id_409E0E80F2171B93 setmodel( model_name );
        _id_409E0E80F2171B93.origin = _id_F8AC4F4543B492E8.v["origin"];
        _id_409E0E80F2171B93.angles = _id_F8AC4F4543B492E8.v["angles"];
        _id_F8AC4F4543B492E8.v["masked_exploder"] = undefined;
        _id_F8AC4F4543B492E8.v["masked_exploder_spawnflags"] = undefined;
        _id_F8AC4F4543B492E8.v["masked_exploder_script_disconnectpaths"] = undefined;
        _id_409E0E80F2171B93.disconnect_paths = disconnect_paths;
        _id_409E0E80F2171B93.script_exploder = _id_F8AC4F4543B492E8.v["exploder"];
        scripts\common\exploder::setup_individual_exploder( _id_409E0E80F2171B93 );
        _id_F8AC4F4543B492E8.model = _id_409E0E80F2171B93;
    }

    _id_BEC13B7C1B25DF68 delete();
}

delete_destructibles_in_volumes( volumes, _id_474701AB4C04774E )
{
    foreach ( volume in volumes )
        volume.destructibles = [];

    names = [ "destructible_toy", "destructible_vehicle" ];
    _id_AD1166B62B968E30 = 0;

    if ( !isdefined( _id_474701AB4C04774E ) )
        _id_474701AB4C04774E = 0;

    foreach ( name in names )
    {
        _id_E8CDE3F22A9C6630 = getentarray( name, "targetname" );

        foreach ( _id_E97365032A8760EB in _id_E8CDE3F22A9C6630 )
        {
            foreach ( volume in volumes )
            {
                if ( _id_474701AB4C04774E )
                {
                    _id_AD1166B62B968E30++;
                    _id_AD1166B62B968E30 = _id_AD1166B62B968E30 % 5;

                    if ( _id_AD1166B62B968E30 == 1 )
                        wait 0.05;
                }

                if ( !volume istouching( _id_E97365032A8760EB ) )
                    continue;

                _id_E97365032A8760EB delete();
                break;
            }
        }
    }
}

delete_exploders_in_volumes( volumes, _id_474701AB4C04774E )
{
    ents = getentarray( "script_brushmodel", "classname" );
    _id_A85ECA59011EC620 = getentarray( "script_model", "classname" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_A85ECA59011EC620.size; _id_AC0E594AC96AA3A8++ )
        ents[ents.size] = _id_A85ECA59011EC620[_id_AC0E594AC96AA3A8];

    _id_0C6A508E00615231 = [];
    _id_BEC13B7C1B25DF68 = spawn( "script_origin", ( 0, 0, 0 ) );
    _id_AD1166B62B968E30 = 0;

    if ( !isdefined( _id_474701AB4C04774E ) )
        _id_474701AB4C04774E = 0;

    foreach ( volume in volumes )
    {
        foreach ( ent in ents )
        {
            if ( !isdefined( ent.script_exploder ) )
                continue;

            _id_BEC13B7C1B25DF68.origin = ent getorigin();

            if ( !volume istouching( _id_BEC13B7C1B25DF68 ) )
                continue;

            _id_0C6A508E00615231[_id_0C6A508E00615231.size] = ent;
        }
    }

    scripts\engine\utility::array_delete( _id_0C6A508E00615231 );
    _id_BEC13B7C1B25DF68 delete();
}

waittill_volume_dead()
{
    for (;;)
    {
        ai = getaispeciesarray( "axis", "all" );
        _id_1B645337CD41A04F = 0;

        foreach ( guy in ai )
        {
            if ( !isalive( guy ) )
                continue;

            if ( guy istouching( self ) )
            {
                _id_1B645337CD41A04F = 1;
                break;
            }

            wait 0.0125;
        }

        if ( !_id_1B645337CD41A04F )
        {
            _id_CB6F0FB8B5464BCF = get_ai_touching_volume( "axis" );

            if ( !_id_CB6F0FB8B5464BCF.size )
                break;
        }

        wait 0.05;
    }
}

waittill_volume_dead_or_dying()
{
    _id_68261D6B57587746 = 0;

    for (;;)
    {
        ai = getaispeciesarray( "axis", "all" );
        _id_1B645337CD41A04F = 0;

        foreach ( guy in ai )
        {
            if ( !isalive( guy ) )
                continue;

            if ( guy istouching( self ) )
            {
                if ( guy scripts\engine\utility::doinglongdeath() )
                    continue;

                _id_1B645337CD41A04F = 1;
                _id_68261D6B57587746 = 1;
                break;
            }

            wait 0.0125;
        }

        if ( !_id_1B645337CD41A04F )
        {
            _id_CB6F0FB8B5464BCF = get_ai_touching_volume( "axis" );

            if ( !_id_CB6F0FB8B5464BCF.size )
                break;
            else
                _id_68261D6B57587746 = 1;
        }

        wait 0.05;
    }

    return _id_68261D6B57587746;
}

waittill_volume_dead_then_set_flag( _id_6551B2A229AC5B48 )
{
    waittill_volume_dead();
    scripts\engine\utility::flag_set( _id_6551B2A229AC5B48 );
}

waittill_targetname_volume_dead_then_set_flag( targetname, msg )
{
    volume = getent( targetname, "targetname" );
    volume waittill_volume_dead_then_set_flag( msg );
}

array_index_by_parameters( _id_705CE1A2233E5D34 )
{
    array = [];

    foreach ( item in _id_705CE1A2233E5D34 )
        array[item.script_parameters] = item;

    return array;
}

array_index_by_classname( _id_705CE1A2233E5D34 )
{
    array = [];

    foreach ( item in _id_705CE1A2233E5D34 )
        array[item.classname] = item;

    return array;
}

array_index_by_script_index( array )
{
    _id_BFC65A378A6D8EFE = [];

    foreach ( ent in array )
    {
        if ( isdefined( ent.script_index ) )
            _id_BFC65A378A6D8EFE[ent.script_index] = ent;
    }

    return _id_BFC65A378A6D8EFE;
}

get_color_volume_from_trigger()
{
    info = scripts\engine\sp\utility_code::get_color_info_from_trigger();
    team = info["team"];

    foreach ( code in info["codes"] )
    {
        volume = level.arrays_of_colorcoded_volumes[team][code];

        if ( isdefined( volume ) )
            return volume;
    }

    return undefined;
}

get_color_nodes_from_trigger()
{
    info = scripts\engine\sp\utility_code::get_color_info_from_trigger();
    team = info["team"];

    foreach ( code in info["codes"] )
    {
        nodes = level.arrays_of_colorcoded_nodes[team][code];

        if ( isdefined( nodes ) )
            return nodes;
    }

    return undefined;
}

get_splineid( targetname )
{
    return _func_174B3AC1FE6AFAE4( targetname );
}

get_splineidarray( targetname )
{
    return _func_DE4D6DF4073D7239( targetname );
}

earthquake_and_rumble( position )
{
    playrumbleonposition( "grenade_rumble", position );
    earthquake( 0.4, 0.5, position, 400 );
}

pathrandompercent_set( value )
{
    if ( !isdefined( self.old_pathrandompercent ) )
        self.old_pathrandompercent = self.pathrandompercent;

    self.pathrandompercent = value;
}

pathrandompercent_zero()
{
    if ( isdefined( self.old_pathrandompercent ) )
        return;

    self.old_pathrandompercent = self.pathrandompercent;
    self.pathrandompercent = 0;
}

pathrandompercent_reset()
{
    self.pathrandompercent = self.old_pathrandompercent;
    self.old_pathrandompercent = undefined;
}

walkdist_zero()
{
    if ( isdefined( self.old_walkdistfacingmotion ) )
        return;

    self.old_walkdist = self.walkdist;
    self.old_walkdistfacingmotion = self.walkdistfacingmotion;
    self.walkdist = 0;
    self.walkdistfacingmotion = 0;
}

walkdist_reset()
{
    self.walkdist = self.old_walkdist;
    self.walkdistfacingmotion = self.old_walkdistfacingmotion;
    self.old_walkdist = undefined;
    self.old_walkdistfacingmotion = undefined;
}

enable_ignorerandombulletdamage_drone()
{
    thread ignorerandombulletdamage_drone_proc();
}

ignorerandombulletdamage_drone_proc()
{
    self endon( "disable_ignorerandombulletdamage_drone" );
    self endon( "death" );
    self.ignorerandombulletdamage = 1;
    self.fakehealth = self.health;
    self.health = 1000000;

    for (;;)
    {
        self waittill( "damage", damage, attacker );

        if ( !isplayer( attacker ) && issentient( attacker ) )
        {
            if ( isdefined( attacker.enemy ) && attacker.enemy != self )
                continue;
        }

        self.fakehealth = self.fakehealth - damage;

        if ( self.fakehealth <= 0 )
            break;
    }

    self kill();
}

hide_notsolid()
{
    if ( !isai( self ) )
        self notsolid();

    self hide();
}

show_solid()
{
    if ( !isai( self ) )
        self solid();

    self show();
}

set_brakes( num )
{
    self.veh_brake = num;
}

disable_ignorerandombulletdamage_drone()
{
    if ( !isalive( self ) )
        return;

    if ( !isdefined( self.ignorerandombulletdamage ) )
        return;

    self notify( "disable_ignorerandombulletdamage_drone" );
    self.ignorerandombulletdamage = undefined;
    self.health = self.fakehealth;
}

timeoutent( timeout )
{
    ent = spawnstruct();
    ent scripts\engine\utility::delaythread( timeout, scripts\engine\utility::send_notify, "timeout" );
    return ent;
}

delaychildthread( timer, func, param1, param2, param3, param4, param5, param6 )
{
    childthread scripts\engine\sp\utility_code::delaychildthread_proc( func, timer, param1, param2, param3, param4, param5, param6 );
}

flagwaitthread( flag, func, param1, param2, param3, param4, param5 )
{
    if ( !isarray( flag ) )
        flag = [ flag, 0 ];

    thread scripts\engine\sp\utility_code::flagwaitthread_proc( func, flag, param1, param2, param3, param4, param5 );
}

waittillthread( _id_A234A65C378F3289, func, param1, param2, param3, param4, param5 )
{
    self endon( "death" );

    if ( !isarray( _id_A234A65C378F3289 ) )
        _id_A234A65C378F3289 = [ _id_A234A65C378F3289, 0 ];

    thread scripts\engine\sp\utility_code::waittillthread_proc( func, _id_A234A65C378F3289, param1, param2, param3, param4, param5 );
}

enable_danger_react( duration )
{
    duration = duration * 1000;
    self.dodangerreact = 1;
    self.dangerreactduration = duration;
    self.neversprintforvariation = undefined;
}

disable_danger_react()
{
    self.dodangerreact = 0;
    self.neversprintforvariation = 1;
}

set_group_advance_to_enemy_parameters( interval, _id_BB938D563589526C )
{
    _func_ 64041B55E7EF96B( interval );
    _func_77641E56FEF12F25( _id_BB938D563589526C );
}

set_battlechatter_variable( team, val )
{
    level.battlechatter[team] = val;
    scripts\engine\sp\utility_code::update_battlechatter_hud();
}

get_minutes_and_seconds( _id_5A888D1F754C231F )
{
    time = [];
    time["minutes"] = 0;

    for ( time["seconds"] = int( _id_5A888D1F754C231F / 1000 ); time["seconds"] >= 60; time["seconds"] = time["seconds"] - 60 )
        time["minutes"]++;

    if ( time["seconds"] < 10 )
        time["seconds"] = "0" + time["seconds"];

    return time;
}

player_has_weapon( _id_DE88CD14114C1E24 )
{
    objweapon = _id_DE88CD14114C1E24;

    if ( isstring( _id_DE88CD14114C1E24 ) )
    {
        attachments = _func_6527364C1ECCA6C6( _id_DE88CD14114C1E24 );

        if ( istrue( attachments.size ) )
        {
            objweapon = makeweapon( _id_DE88CD14114C1E24 );

            foreach ( attachment in attachments )
                objweapon = objweapon withattachment( attachment );
        }
        else
            objweapon = makeweaponfromstring( _id_DE88CD14114C1E24 );
    }

    weaponlist = level.player.primaryinventory;

    foreach ( weapon in weaponlist )
    {
        if ( issameweapon( weapon, objweapon, 1 ) )
            return 1;
    }

    return 0;
}

player_has_base_weapon( _id_DE88CD14114C1E24 )
{
    objweapon = _id_DE88CD14114C1E24;

    if ( isstring( _id_DE88CD14114C1E24 ) )
        objweapon = makeweaponfromstring( _id_DE88CD14114C1E24 );

    weaponlist = level.player.primaryinventory;

    foreach ( weapon in weaponlist )
    {
        if ( weapon.basename == objweapon.basename )
            return 1;
    }

    return 0;
}

player_has_equipment( _id_DE88CD14114C1E24, _id_26EE5805A9B07F08 )
{
    objweapon = _id_DE88CD14114C1E24;

    if ( isstring( _id_DE88CD14114C1E24 ) )
    {
        attachments = _func_6527364C1ECCA6C6( _id_DE88CD14114C1E24 );

        if ( istrue( attachments.size ) )
        {
            objweapon = makeweapon( _id_DE88CD14114C1E24 );

            foreach ( attachment in attachments )
                objweapon = objweapon withattachment( attachment );
        }
        else
            objweapon = makeweaponfromstring( _id_DE88CD14114C1E24 );
    }

    _id_70148FF25532A07F = level.player.offhandinventory;

    foreach ( weapon in _id_70148FF25532A07F )
    {
        if ( issameweapon( weapon, objweapon, 1 ) )
            return 1;
    }

    return 0;
}

graph_position( v, min_x, min_y, max_x, max_y )
{
    _id_8D82D9C554990EF4 = max_y - min_y;
    run = max_x - min_x;
    _id_13F52C8DB665C5A4 = _id_8D82D9C554990EF4 / run;
    v = v - max_x;
    v = _id_13F52C8DB665C5A4 * v;
    v = v + max_y;
    return v;
}

musiclength( alias )
{
    time = lookupsoundlength( alias );
    time = time * 0.001;
    return time;
}

is_command_bound( _id_A5516703B3F7D1FF )
{
    binding = _func_3ABB618EFFEEE387( _id_A5516703B3F7D1FF );
    return binding["count"];
}

template_level( _id_0D4C90180F6E4B32 )
{
    iprintlnbold( "remove 'template_level( " + _id_0D4C90180F6E4B32 + " );' from " + _id_0D4C90180F6E4B32 + ".gsc - this will error as of 5/19" );
}

fx_volume_pause_noteworthy( noteworthy, _id_474701AB4C04774E )
{
    thread fx_volume_pause_noteworthy_thread( noteworthy, _id_474701AB4C04774E );
}

fx_volume_pause_noteworthy_thread( noteworthy, _id_474701AB4C04774E )
{
    volume = getent( noteworthy, "script_noteworthy" );
    volume notify( "new_volume_command" );
    volume endon( "new_volume_command" );
    wait 0.05;
    scripts\engine\sp\utility_code::fx_volume_pause( volume, _id_474701AB4C04774E );
}

fx_volume_restart_noteworthy( noteworthy )
{
    thread fx_volume_restart_noteworthy_thread( noteworthy );
}

fx_volume_restart_noteworthy_thread( noteworthy )
{
    volume = getent( noteworthy, "script_noteworthy" );
    volume notify( "new_volume_command" );
    volume endon( "new_volume_command" );
    wait 0.05;

    if ( !isdefined( volume.fx_paused ) )
        return;

    volume.fx_paused = undefined;
    fx_volume_restart( volume );
}

fx_volume_restart( volume )
{
    scripts\engine\utility::array_thread( volume.fx, ::restarteffect );
}

add_cleanup_ent( ent, groupname )
{
    if ( !isdefined( level.cleanup_ents ) )
        level.cleanup_ents = [];

    if ( !isdefined( level.cleanup_ents[groupname] ) )
        level.cleanup_ents[groupname] = [];

    level.cleanup_ents[groupname][level.cleanup_ents[groupname].size] = ent;
}

cleanup_ents( groupname )
{
    array = level.cleanup_ents[groupname];
    array = scripts\engine\utility::array_removeundefined( array );
    scripts\engine\utility::array_delete( array );
    level.cleanup_ents[groupname] = undefined;
}

cleanup_ents_removing_bullet_shield( groupname )
{
    if ( !isdefined( level.cleanup_ents ) )
        return;

    if ( !isdefined( level.cleanup_ents[groupname] ) )
        return;

    array = level.cleanup_ents[groupname];
    array = scripts\engine\utility::array_removeundefined( array );

    foreach ( obj in array )
    {
        if ( !isai( obj ) )
            continue;

        if ( !isalive( obj ) )
            continue;

        if ( !isdefined( obj.magic_bullet_shield ) )
            continue;

        if ( !obj.magic_bullet_shield )
            continue;

        obj scripts\common\ai::stop_magic_bullet_shield();
    }

    scripts\engine\utility::array_delete( array );
    level.cleanup_ents[groupname] = undefined;
}

add_trigger_function( function )
{
    if ( !isdefined( self.trigger_functions ) )
        thread scripts\engine\sp\utility_code::add_trigger_func_thread();

    self.trigger_functions[self.trigger_functions.size] = function;
}

_id_1C0A584731A90429( function )
{
    if ( !isdefined( self._id_F08830DECD9EB50A ) )
        thread scripts\engine\sp\utility_code::_id_D4C885C9EF5C6BC8();

    self._id_F08830DECD9EB50A[self._id_F08830DECD9EB50A.size] = function;
}

getallweapons()
{
    array = [];
    entities = getentarray();

    foreach ( ent in entities )
    {
        if ( !isdefined( ent.classname ) )
            continue;

        if ( scripts\engine\utility::string_starts_with( ent.classname, "weapon_" ) )
            array[array.size] = ent;
    }

    return array;
}

move_with_rate( origin, angles, _id_58824A41B5315792 )
{
    self notify( "newmove" );
    self endon( "newmove" );

    if ( !isdefined( _id_58824A41B5315792 ) )
        _id_58824A41B5315792 = 200;

    dist = distance( self.origin, origin );
    movetime = dist / _id_58824A41B5315792;
    _id_2B8EA5F7A739BEA2 = vectornormalize( origin - self.origin );
    self moveto( origin, movetime, 0, 0 );
    self rotateto( angles, movetime, 0, 0 );
    wait( movetime );

    if ( !isdefined( self ) )
        return;

    self.velocity = _id_2B8EA5F7A739BEA2 * ( dist / movetime );
}

flag_on_death( msg )
{
    level endon( msg );
    self waittill( "death" );
    scripts\engine\utility::flag_set( msg );
}

enable_damagefeedback()
{
    level.damagefeedback = 1;
}

disable_damagefeedback()
{
    level.damagefeedback = 0;
}

is_damagefeedback_enabled()
{
    return isdefined( level.damagefeedback ) && level.damagefeedback;
}

worldtolocalcoords( _id_1A80CE8D4527040A )
{
    _id_F3589428C6EE8C59 = _id_1A80CE8D4527040A - self.origin;
    return ( vectordot( _id_F3589428C6EE8C59, anglestoforward( self.angles ) ), -1.0 * vectordot( _id_F3589428C6EE8C59, anglestoright( self.angles ) ), vectordot( _id_F3589428C6EE8C59, anglestoup( self.angles ) ) );
}

sound_fade_and_delete( fade, _id_0470A4AB760EAAE8 )
{
    self _meth_F4604329F388A96F( 0, fade );

    if ( istrue( _id_0470A4AB760EAAE8 ) )
        scripts\engine\utility::delaycall( fade + 0.05, ::stoploopsound );
    else
        scripts\engine\utility::delaycall( fade + 0.05, ::stopsounds );

    scripts\engine\utility::delaycall( fade + 0.1, ::delete );
}

sound_fade_in( alias, volume, fade, _id_0470A4AB760EAAE8 )
{
    self endon( "death" );
    volume = clamp( volume, 0, 1 );
    fade = max( 0.05, fade );
    self _meth_F4604329F388A96F( 0.0 );
    wait 0.05;

    if ( isdefined( _id_0470A4AB760EAAE8 ) )
        self playloopsound( alias );
    else
        self playsound( alias );

    wait 0.05;
    scripts\engine\utility::delaycall( 0.05, ::_meth_F4604329F388A96F, volume, fade );
}

_id_E0D4C67FC1A382D0( alias, offset, _id_F100EBBBD2F636FC, fadeout )
{
    org = spawn( "script_origin", ( 0, 0, 0 ) );
    org endon( "death" );
    thread scripts\engine\utility::delete_on_death( org );

    if ( isdefined( offset ) )
    {
        org.origin = self.origin + offset;
        org.angles = self.angles;
        org linkto( self );
    }
    else
    {
        org.origin = self.origin;
        org.angles = self.angles;
        org linkto( self );
    }

    if ( isdefined( _id_F100EBBBD2F636FC ) && _id_F100EBBBD2F636FC > 0 )
        org _meth_F4604329F388A96F( 0 );

    org playloopsound( alias );

    if ( isdefined( _id_F100EBBBD2F636FC ) && _id_F100EBBBD2F636FC > 0 )
        org _meth_F4604329F388A96F( 1, _id_F100EBBBD2F636FC );

    self waittill( "stop sound" + alias );

    if ( isdefined( fadeout ) && fadeout > 0 )
    {
        org _meth_F4604329F388A96F( 0, fadeout );
        wait( fadeout );
    }

    org stoploopsound( alias );
    org delete();
}

intro_screen_create( _id_0E7865AE7BE35347, _id_0E7866AE7BE3557A, _id_0E7867AE7BE357AD, _id_0E7860AE7BE34848, _id_0E7861AE7BE34A7B )
{
    if ( !isdefined( level.introscreen ) )
        level.introscreen = spawnstruct();

    level.introscreen.completed_delay = 3;
    level.introscreen.fade_out_time = 1.5;
    level.introscreen.fade_in_time = undefined;
    level.introscreen.lines = [ _id_0E7865AE7BE35347, _id_0E7866AE7BE3557A, _id_0E7867AE7BE357AD, _id_0E7860AE7BE34848, _id_0E7861AE7BE34A7B ];
    scripts\engine\utility::noself_array_call( level.introscreen.lines, ::precachestring );
}

intro_screen_custom_func( function )
{
    if ( !isdefined( level.introscreen ) )
        level.introscreen = spawnstruct();

    level.introscreen.customfunc = function;
}

_id_8AC37772D2E1050B( _id_20E7486EFB53100D )
{
    if ( !isdefined( level._id_D06C0DF83859D1C3 ) )
        level._id_D06C0DF83859D1C3 = [];
    else if ( isdefined( level._id_D06C0DF83859D1C3[_id_20E7486EFB53100D] ) && level._id_D06C0DF83859D1C3[_id_20E7486EFB53100D] == 1 )
        return;

    _func_702716BC42360FB3( _id_20E7486EFB53100D );
    _id_7835178D37ED4F9E = _func_4B2EEF7AEDA21AB9( _id_20E7486EFB53100D );

    foreach ( _id_E4223248FA0A44F9 in _id_7835178D37ED4F9E )
    {
        while ( !_func_E6865873679E3B6C( _id_E4223248FA0A44F9 ) )
            waitframe();
    }

    foreach ( index, item in level._id_D06C0DF83859D1C3 )
    {
        if ( index != _id_20E7486EFB53100D )
            level._id_D06C0DF83859D1C3[index] = 0;
    }

    level._id_D06C0DF83859D1C3[_id_20E7486EFB53100D] = 1;
}

_id_B919F3D6C1F1F825( _id_20E7486EFB53100D )
{
    if ( isdefined( level._id_D06C0DF83859D1C3 ) )
    {
        if ( isdefined( level._id_D06C0DF83859D1C3[_id_20E7486EFB53100D] ) )
            return level._id_D06C0DF83859D1C3[_id_20E7486EFB53100D];
    }

    return 0;
}

_id_C42FE942FB416AE7()
{
    if ( isdefined( level._id_D06C0DF83859D1C3 ) )
    {
        foreach ( index, item in level._id_D06C0DF83859D1C3 )
        {
            if ( level._id_D06C0DF83859D1C3[index] == 1 )
                return index;
        }
    }

    return undefined;
}

transient_load( name )
{
    if ( _func_E6865873679E3B6C( name ) )
        return;

    if ( !scripts\engine\utility::flag_exist( name + "_loaded" ) )
        scripts\engine\utility::flag_init( name + "_loaded" );

    _func_18B890301C34A185( name );

    while ( !_func_E6865873679E3B6C( name ) )
        waitframe();

    scripts\engine\utility::flag_set( name + "_loaded" );
    level notify( "new_transient_loaded" );
}

transient_unload( name )
{
    if ( !_func_E6865873679E3B6C( name ) )
        return;

    _func_21E058498D263BE0( name );

    while ( _func_E6865873679E3B6C( name ) )
        waitframe();

    scripts\engine\utility::flag_clear( name + "_loaded" );
}

transient_load_array( _id_9D68A5FD6A22178C )
{
    foreach ( name in _id_9D68A5FD6A22178C )
        thread transient_load( name );

    for (;;)
    {
        _id_FF90828C5367C0B8 = 1;

        foreach ( name in _id_9D68A5FD6A22178C )
        {
            if ( !_func_E6865873679E3B6C( name ) )
            {
                _id_FF90828C5367C0B8 = 0;
                break;
            }
        }

        if ( _id_FF90828C5367C0B8 )
            break;

        waitframe();
    }

    level notify( "new_transient_loaded" );
}

transient_unload_array( _id_9D68A5FD6A22178C )
{
    foreach ( name in _id_9D68A5FD6A22178C )
        thread transient_unload( name );

    for (;;)
    {
        _id_FF90828C5367C0B8 = 1;

        foreach ( name in _id_9D68A5FD6A22178C )
        {
            if ( _func_E6865873679E3B6C( name ) )
            {
                _id_FF90828C5367C0B8 = 0;
                break;
            }
        }

        if ( _id_FF90828C5367C0B8 )
            break;

        waitframe();
    }
}

_id_17175F6AF83BAFEA( _id_9D68A5FD6A22178C )
{
    foreach ( name in _id_9D68A5FD6A22178C )
        _func_96FEA909F7BAC977( name, 1 );
}

_id_7DCC5E04AB79399B( _id_9D68A5FD6A22178C )
{
    foreach ( name in _id_9D68A5FD6A22178C )
        _func_96FEA909F7BAC977( name, 0 );
}

transient_init( name )
{
    scripts\engine\utility::flag_init( name + "_loaded" );
}

transient_switch( _id_D4145D9E255225DC, next )
{
    if ( scripts\engine\utility::flag( _id_D4145D9E255225DC + "_loaded" ) )
        transient_unload( _id_D4145D9E255225DC );

    if ( !scripts\engine\utility::flag( next + "_loaded" ) )
        transient_load( next );
}

transient_unloadall_and_load( name )
{
    _func_211173132C90104A();
    transient_load( name );
}

follow_path_and_animate( start_node, _id_89E9707924D46479 )
{
    self endon( "death" );
    self endon( "stop_path" );
    self notify( "stop_going_to_node" );
    self notify( "follow_path" );
    self endon( "follow_path" );
    wait 0.1;
    node = start_node;
    _id_CC66984BDFFD7369 = undefined;
    _id_0A2674252A261CA4 = undefined;

    if ( !isdefined( _id_89E9707924D46479 ) )
        _id_89E9707924D46479 = 300;

    self.current_follow_path = node;
    node scripts\engine\utility::script_delay();

    while ( isdefined( node ) )
    {
        self.current_follow_path = node;

        if ( isdefined( node.lookahead ) )
            break;

        if ( isdefined( level.struct_class_names["targetname"][node.targetname] ) )
            _id_0A2674252A261CA4 = ::follow_path_animate_set_struct;
        else if ( isdefined( node.classname ) )
            _id_0A2674252A261CA4 = ::follow_path_animate_set_ent;
        else
            _id_0A2674252A261CA4 = ::follow_path_animate_set_node;

        if ( isdefined( node.radius ) && node.radius != 0 )
            self.goalradius = node.radius;

        if ( self.goalradius < 16 )
            self.goalradius = 16;

        if ( isdefined( node.height ) && node.height != 0 )
            self.goalheight = node.height;

        _id_3869C92DBF9CC5C2 = self.goalradius;
        self childthread [[ _id_0A2674252A261CA4 ]]( node );

        if ( isdefined( node.animation ) )
            node waittill( node.animation );
        else
        {
            for (;;)
            {
                self waittill( "goal" );

                if ( distance( node.origin, self.origin ) < _id_3869C92DBF9CC5C2 + 10 || self.team != "allies" )
                    break;
            }
        }

        node notify( "trigger", self );

        if ( isdefined( node.script_flag_set ) )
            scripts\engine\utility::flag_set( node.script_flag_set );

        if ( isdefined( node.script_parameters ) )
        {
            _id_93393DA9B3517F66 = strtok( node.script_parameters, " " );

            for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_93393DA9B3517F66.size; _id_AC0E594AC96AA3A8++ )
            {
                if ( isdefined( level.custom_followpath_parameter_func ) )
                    self [[ level.custom_followpath_parameter_func ]]( _id_93393DA9B3517F66[_id_AC0E594AC96AA3A8], node );

                if ( self.type == "dog" )
                    continue;

                switch ( _id_93393DA9B3517F66[_id_AC0E594AC96AA3A8] )
                {
                    case "enable_cqb":
                        scripts\common\utility::enable_cqbwalk();
                        break;
                    case "disable_cqb":
                        scripts\common\utility::disable_cqbwalk();
                        break;
                    case "deleteme":
                        self delete();
                        return;
                }
            }
        }

        if ( !isdefined( node.script_requires_player ) && _id_89E9707924D46479 > 0 && self.team == "allies" )
        {
            while ( isalive( level.player ) )
            {
                if ( follow_path_wait_for_player( node, _id_89E9707924D46479 ) )
                    break;

                if ( isdefined( node.animation ) )
                {
                    self.goalradius = _id_3869C92DBF9CC5C2;
                    self setgoalpos( self.origin );
                }

                wait 0.05;
            }
        }

        if ( !isdefined( node.target ) )
            break;

        if ( isdefined( node.script_flag_wait ) )
            scripts\engine\utility::flag_wait( node.script_flag_wait );

        if ( isdefined( node._id_7FD486C78ED742F7 ) )
            scripts\engine\utility::flag_waitopen( node._id_7FD486C78ED742F7 );

        node scripts\engine\utility::script_delay();
        node = node scripts\engine\utility::get_target_ent();
    }

    self notify( "path_end_reached" );
}

follow_path_wait_for_player( node, dist )
{
    if ( distance( level.player.origin, node.origin ) < distance( self.origin, node.origin ) )
        return 1;

    _id_06A3A1033FFC2699 = undefined;
    _id_06A3A1033FFC2699 = anglestoforward( self.angles );
    _id_9601C525B7890A11 = vectornormalize( level.player.origin - self.origin );

    if ( isdefined( node.target ) )
    {
        temp = scripts\engine\utility::get_target_ent( node.target );
        _id_06A3A1033FFC2699 = vectornormalize( temp.origin - node.origin );
    }
    else if ( isdefined( node.angles ) )
        _id_06A3A1033FFC2699 = anglestoforward( node.angles );
    else
        _id_06A3A1033FFC2699 = anglestoforward( self.angles );

    if ( vectordot( _id_06A3A1033FFC2699, _id_9601C525B7890A11 ) > 0 )
        return 1;

    if ( distance( level.player.origin, self.origin ) < dist )
        return 1;

    return 0;
}

follow_path_animate_set_node( node )
{
    self notify( "follow_path_new_goal" );

    if ( isdefined( node.animation ) )
    {
        node scripts\sp\anim::anim_generic_reach( self, node.animation );
        self notify( "starting_anim", node.animation );

        if ( isdefined( node.script_parameters ) && issubstr( node.script_parameters, "gravity" ) )
            node scripts\sp\anim::anim_generic_gravity( self, node.animation );
        else
            node scripts\common\anim::anim_generic_run( self, node.animation );

        self setgoalpos( self.origin );
    }
    else
        set_goal_node( node );
}

follow_path_animate_set_ent( ent )
{
    self notify( "follow_path_new_goal" );

    if ( isdefined( ent.animation ) )
    {
        ent scripts\sp\anim::anim_generic_reach( self, ent.animation );
        self notify( "starting_anim", ent.animation );

        if ( isdefined( ent.script_parameters ) && issubstr( ent.script_parameters, "gravity" ) )
            ent scripts\sp\anim::anim_generic_gravity( self, ent.animation );
        else
            ent scripts\common\anim::anim_generic_run( self, ent.animation );

        self setgoalpos( self.origin );
    }
    else
        set_goal_ent( ent );
}

follow_path_animate_set_struct( struct )
{
    self notify( "follow_path_new_goal" );

    if ( isdefined( struct.animation ) )
    {
        struct scripts\sp\anim::anim_generic_reach( self, struct.animation );
        self notify( "starting_anim", struct.animation );
        scripts\common\ai::disable_exits();

        if ( isdefined( struct.script_parameters ) && issubstr( struct.script_parameters, "gravity" ) )
            struct scripts\sp\anim::anim_generic_gravity( self, struct.animation );
        else
            struct scripts\common\anim::anim_generic_run( self, struct.animation );

        scripts\engine\utility::delaythread( 0.05, scripts\common\ai::enable_exits );
        self setgoalpos( self.origin );
    }
    else
        set_goal_pos( struct.origin );
}

post_load_precache( function )
{
    if ( !isdefined( level.post_load_funcs ) )
        level.post_load_funcs = [];

    level.post_load_funcs = scripts\engine\utility::array_add( level.post_load_funcs, function );
}

ui_action_slot_force_active_on( slot )
{
    _id_338635CE4E1CA9AF = _func_2EF675C13CA1C4AF( "dvar_D0D5F7F6113A71E8", slot, "_forceActive" );
    setdvar( _id_338635CE4E1CA9AF, "on" );
}

ui_action_slot_force_active_off( slot )
{
    _id_338635CE4E1CA9AF = _func_2EF675C13CA1C4AF( "dvar_D0D5F7F6113A71E8", slot, "_forceActive" );
    setdvar( _id_338635CE4E1CA9AF, "turn_off" );
}

ui_action_slot_force_active_one_time( slot )
{
    _id_338635CE4E1CA9AF = _func_2EF675C13CA1C4AF( "dvar_D0D5F7F6113A71E8", slot, "_forceActive" );
    setdvar( _id_338635CE4E1CA9AF, "onetime" );
}

init_waits()
{
    if ( !scripts\engine\utility::add_init_script( "waits", ::init_waits ) )
        return;

    level.waits = spawnstruct();
    level.waits.wait_any_func_array = [];
    level.waits.run_func_after_wait_array = [];
    level.waits.run_call_after_wait_array = [];
    level.waits.run_noself_call_after_wait_array = [];
    level.waits.do_wait_endons_array = [];
    level.waits.abort_wait_any_func_array = [];
}

set_start_location( val, guys )
{
    nodes = [];

    if ( isstring( val ) )
        nodes = scripts\engine\utility::get_target_array( val );
    else if ( isarray( val ) )
        nodes = val;

    if ( nodes.size == 0 )
        return;

    if ( !isarray( guys ) )
        guys = [ guys ];

    foreach ( guy in guys )
    {
        start_node = undefined;

        foreach ( node in nodes )
        {
            if ( !isdefined( node.angles ) )
                node.angles = ( 0, 0, 0 );

            if ( !isdefined( node.script_noteworthy ) )
                continue;

            if ( isdefined( node.taken ) )
                continue;

            if ( isplayer( guy ) )
            {
                if ( node.script_noteworthy == "player" )
                {
                    start_node = node;
                    break;
                }
            }
            else if ( isdefined( guy.script_noteworthy ) && guy.script_noteworthy == node.script_noteworthy )
            {
                start_node = node;
                break;
            }
        }

        if ( isdefined( start_node ) )
        {
            start_node.taken = 1;
            guy.start_node = start_node;

            if ( isai( guy ) )
                guy setgoalpos( start_node.origin );

            guy teleport_ent( start_node );
        }
    }

    foreach ( guy in guys )
    {
        if ( isdefined( guy.start_node ) )
            continue;

        foreach ( node in nodes )
        {
            if ( !isdefined( node.taken ) )
            {
                node.taken = 1;
                guy.start_node = node;

                if ( isai( guy ) )
                    guy setgoalpos( node.origin );

                guy teleport_ent( node );
                break;
            }
        }
    }

    foreach ( guy in guys )
    {
        if ( isdefined( guy.start_node ) )
            guy.start_node = undefined;
    }

    foreach ( node in nodes )
    {
        if ( isdefined( node.taken ) )
            node.taken = undefined;
    }
}

kleenex_popup( autosave )
{

}

set_nvg_vision( _id_66C1FA3CB97E511D )
{
    level.player scripts\sp\nvg\nvg_player::set_nvg_vision_proc( _id_66C1FA3CB97E511D );
}

set_nvg_light( light )
{
    level.player scripts\sp\nvg\nvg_player::set_nvg_light_proc( light );
}

set_nvg_flir( enable )
{
    level.player scripts\sp\nvg\nvg_player::set_nvg_flir_proc( enable );
}

is_flir_vision_on()
{
    if ( isdefined( self.nvg ) && self.nvg.flir )
        return 1;
    else
        return 0;
}

player_gesture_combat( _id_B03CFAC5EE568943, _id_9BC5CB3240D03C4C )
{
    self endon( "death" );
    _id_447611FD38474E73 = 0;
    _id_D180B535A33B044D = undefined;
    _id_689635FC115B1160 = 0;

    if ( level.player get_player_demeanor() == "safe" )
    {
        _id_D180B535A33B044D = 1.0;
        _id_689635FC115B1160 = 1;
    }

    _id_E3FC3C4AB75476A4 = 0;

    if ( isdefined( _id_9BC5CB3240D03C4C ) )
        _id_447611FD38474E73 = self playgestureviewmodel( _id_B03CFAC5EE568943, _id_9BC5CB3240D03C4C, _id_E3FC3C4AB75476A4, _id_D180B535A33B044D, undefined );
    else
        _id_447611FD38474E73 = self playgestureviewmodel( _id_B03CFAC5EE568943, undefined, _id_E3FC3C4AB75476A4, _id_D180B535A33B044D, undefined );

    return _id_447611FD38474E73;
}

player_gesture_noncombat( _id_B03CFAC5EE568943, _id_9BC5CB3240D03C4C )
{
    self endon( "death" );

    if ( self _meth_D90F68A0167DD7BE() )
        return 0;

    if ( self isreloading() )
        return 0;

    return player_gesture_force( _id_B03CFAC5EE568943, _id_9BC5CB3240D03C4C );
}

player_gesture_force( _id_B03CFAC5EE568943, _id_9BC5CB3240D03C4C )
{
    self endon( "death" );
    _id_447611FD38474E73 = 0;
    _id_D180B535A33B044D = undefined;
    _id_689635FC115B1160 = 0;

    if ( level.player get_player_demeanor() == "safe" )
    {
        _id_D180B535A33B044D = 0.2;
        _id_689635FC115B1160 = 1;
    }

    if ( isdefined( _id_9BC5CB3240D03C4C ) && isent( _id_9BC5CB3240D03C4C ) )
        _id_447611FD38474E73 = self forceplaygestureviewmodel( _id_B03CFAC5EE568943, _id_9BC5CB3240D03C4C, _id_D180B535A33B044D, undefined, undefined );
    else
        _id_447611FD38474E73 = self forceplaygestureviewmodel( _id_B03CFAC5EE568943, undefined, _id_D180B535A33B044D, undefined, undefined );

    if ( _id_447611FD38474E73 )
        thread scripts\sp\player\gestures::player_gestures_input_disable( _id_B03CFAC5EE568943, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, undefined, "gesture" );

    return _id_447611FD38474E73;
}

get_ai_group_count( _id_57F8B4C321038A32 )
{
    return level._ai_group[_id_57F8B4C321038A32].spawnercount + level._ai_group[_id_57F8B4C321038A32].aicount;
}

get_ai_group_sentient_count( _id_57F8B4C321038A32 )
{
    level._ai_group[_id_57F8B4C321038A32].ai = scripts\engine\utility::array_removedead_or_dying( level._ai_group[_id_57F8B4C321038A32].ai );
    level._ai_group[_id_57F8B4C321038A32].ai = scripts\engine\utility::array_removeundefined( level._ai_group[_id_57F8B4C321038A32].ai );
    return level._ai_group[_id_57F8B4C321038A32].aicount;
}

get_ai_group_spawner_count( _id_57F8B4C321038A32 )
{
    return level._ai_group[_id_57F8B4C321038A32].spawnercount;
}

get_ai_group_death_count( _id_57F8B4C321038A32 )
{
    return level._ai_group[_id_57F8B4C321038A32].aideaths;
}

get_ai_group_spawners( _id_57F8B4C321038A32 )
{
    return level._ai_group[_id_57F8B4C321038A32].spawners;
}

get_ai_group_ai( _id_57F8B4C321038A32 )
{
    level._ai_group[_id_57F8B4C321038A32].ai = scripts\engine\utility::array_removedead_or_dying( level._ai_group[_id_57F8B4C321038A32].ai );
    level._ai_group[_id_57F8B4C321038A32].ai = scripts\engine\utility::array_removeundefined( level._ai_group[_id_57F8B4C321038A32].ai );
    return level._ai_group[_id_57F8B4C321038A32].ai;
}

waittill_ai_group_dead( _id_57F8B4C321038A32 )
{
    while ( level._ai_group[_id_57F8B4C321038A32].aicount || level._ai_group[_id_57F8B4C321038A32].spawnercount )
        wait 0.05;
}

fx_playontag_safe( fx, tag, delay, _id_CB2D96186DCCC98B, _id_A6D635CA3756E9D7 )
{
    if ( !isdefined( self.fx_ticket_queue ) )
        fx_regulate_init();

    thread fx_playontag_safe_internal( fx, tag, delay, _id_CB2D96186DCCC98B, _id_A6D635CA3756E9D7 );
}

fx_playontag_safe_internal( fx, tag, delay, _id_CB2D96186DCCC98B, _id_A6D635CA3756E9D7 )
{
    self endon( "death" );
    self endon( "entitydeleted" );

    if ( isdefined( _id_CB2D96186DCCC98B ) )
        self endon( _id_CB2D96186DCCC98B );

    if ( isdefined( delay ) )
        wait( delay );

    fx_regulate();

    if ( !isdefined( _id_A6D635CA3756E9D7 ) || !_id_A6D635CA3756E9D7 )
        test_tag( tag, fx );

    playfxontag( scripts\engine\utility::getfx( fx ), self, tag );
}

fx_stopontag_safe( fx, tag, delay, _id_CB2D96186DCCC98B, _id_A6D635CA3756E9D7 )
{
    if ( !isdefined( self.fx_ticket_queue ) )
        fx_regulate_init();

    thread fx_stopontag_safe_internal( fx, tag, delay, _id_CB2D96186DCCC98B, _id_A6D635CA3756E9D7 );
}

test_tag( tag, fx )
{
    if ( self.model == "" )
    {

    }

    if ( isai( self ) )
    {
        success = 0;
        models = [];

        if ( isdefined( self.headmodel ) && self.headmodel != "" )
            models[models.size] = self.headmodel;

        if ( isdefined( self.hatmodel ) && self.hatmodel != "" )
            models[models.size] = self.hatmodel;

        if ( !isnullweapon( self.weapon ) )
            models[models.size] = getweaponmodel( self.weapon );

        models[models.size] = self.model;

        foreach ( model in models )
        {
            if ( scripts\engine\utility::hastag( model, tag ) )
            {
                success = 1;
                break;
            }
        }

        if ( !success )
            return;
    }
    else if ( !scripts\engine\utility::hastag( self.model, tag ) )
        return;
}

fx_stopontag_safe_internal( fx, tag, delay, _id_CB2D96186DCCC98B, _id_A6D635CA3756E9D7 )
{
    self endon( "death" );
    self endon( "entitydeleted" );

    if ( isdefined( _id_CB2D96186DCCC98B ) )
        self endon( _id_CB2D96186DCCC98B );

    if ( isdefined( delay ) )
        wait( delay );

    fx_regulate();

    if ( !isdefined( _id_A6D635CA3756E9D7 ) || !_id_A6D635CA3756E9D7 )
        test_tag( tag, fx );

    stopfxontag( scripts\engine\utility::getfx( fx ), self, tag );
}

fx_killontag_safe( fx, tag, delay, _id_CB2D96186DCCC98B, _id_A6D635CA3756E9D7 )
{
    if ( !isdefined( self.fx_ticket_queue ) )
        fx_regulate_init();

    thread fx_killontag_safe_internal( fx, tag, delay, _id_CB2D96186DCCC98B, _id_A6D635CA3756E9D7 );
}

fx_killontag_safe_internal( fx, tag, delay, _id_CB2D96186DCCC98B, _id_A6D635CA3756E9D7 )
{
    self endon( "death" );
    self endon( "entitydeleted" );

    if ( isdefined( _id_CB2D96186DCCC98B ) )
        self endon( _id_CB2D96186DCCC98B );

    if ( isdefined( delay ) )
        wait( delay );

    fx_regulate();

    if ( !isdefined( _id_A6D635CA3756E9D7 ) || !_id_A6D635CA3756E9D7 )
        test_tag( tag, fx );

    if ( tag == "tag_flash" && isnullweapon( self.weapon ) )
        return;

    killfxontag( scripts\engine\utility::getfx( fx ), self, tag );
}

get_fx_ticket()
{
    self.fx_ticket++;
    return scripts\engine\utility::string( self.fx_ticket );
}

fx_regulate_init()
{
    if ( isdefined( self.fx_ticket_queue ) )
        return;

    self.fx_ticket_queue = [];
    self.fx_ticket = 0;
    thread fx_regulator();
}

fx_regulator()
{
    self endon( "entitydeleted" );
    _id_AC0E594AC96AA3A8 = 0;

    for (;;)
    {
        self waittill( "new_fx_call" );

        while ( self.fx_ticket_queue.size > 0 )
        {
            ticket = self.fx_ticket_queue[0];
            self.fx_ticket_queue = scripts\engine\utility::array_remove( self.fx_ticket_queue, ticket );
            self notify( ticket );
            _id_AC0E594AC96AA3A8++;

            if ( _id_AC0E594AC96AA3A8 == 3 )
            {
                wait 0.05;
                _id_AC0E594AC96AA3A8 = 0;
            }
        }
    }
}

fx_regulate()
{
    self endon( "death" );
    self endon( "entitydeleted" );
    ticket = get_fx_ticket();
    self.fx_ticket_queue = scripts\engine\utility::array_add( self.fx_ticket_queue, ticket );
    self notify( "new_fx_call" );
    self waittill( ticket );
}

stop_player_gesture( gesture )
{
    if ( isdefined( gesture ) )
        self stopgestureviewmodel( gesture );
    else
        self stopgestureviewmodel();

    self notify( "gesture_stop" );
}

set_player_demeanor( _id_2AC2E047FA8225E9 )
{
    self notify( "entering_new_demeanor" );

    if ( !isdefined( self.gestures ) )
        self.gestures = spawnstruct();

    waittillframeend;

    switch ( _id_2AC2E047FA8225E9 )
    {
        case "green_beam":
            scripts\sp\player\gestures::enter_demeanor_green_beam();
            break;
        case "normal":
            scripts\sp\player\gestures::enter_demeanor_normal();
            break;
        case "relaxed":
            scripts\sp\player\gestures::enter_demeanor_relaxed();
            break;
        case "safe":
            scripts\sp\player\gestures::enter_demeanor_safe();
            break;
        default:
            break;
    }
}

get_player_demeanor()
{
    return level.player getdemeanorviewmodel();
}

init_gravity()
{
    if ( !isdefined( level.gravity_gameplay ) )
    {
        level.gravity_gameplay = getdvarint( "dvar_B5D7D39D32720E78" );
        level.gravity_physics = getomnvar( "physics_gravity_z" );
    }
}

scale_gravity( _id_4BC7AB4F16D366E0, _id_441D643F70DC71E3 )
{
    init_gravity();

    if ( isdefined( _id_4BC7AB4F16D366E0 ) )
        setsaveddvar( "dvar_B5D7D39D32720E78", level.gravity_gameplay * _id_4BC7AB4F16D366E0 );

    if ( isdefined( _id_441D643F70DC71E3 ) )
        _func_879BFA01B3A87609( ( 0, 0, level.gravity_physics * _id_441D643F70DC71E3 ) );
}

atmosphere_enable( enable )
{
    if ( !isdefined( enable ) )
        enable = 1;

    if ( enable && !level.atmosphere )
        level.atmosphere = enable;
    else if ( !enable && level.atmosphere )
        level.atmosphere = enable;
}

set_gravity( _id_50F1F50958156800, _id_1FB3CB1FE0A8C7F3 )
{
    init_gravity();

    if ( isdefined( _id_50F1F50958156800 ) )
        setsaveddvar( "dvar_B5D7D39D32720E78", _id_50F1F50958156800 );

    if ( isdefined( _id_1FB3CB1FE0A8C7F3 ) )
        _func_879BFA01B3A87609( ( 0, 0, _id_1FB3CB1FE0A8C7F3 ) );
}

reset_gravity()
{
    setsaveddvar( "dvar_B5D7D39D32720E78", level.gravity_gameplay );
    _func_879BFA01B3A87609( ( 0, 0, level.gravity_physics ) );
}

gesture_stop( _id_480E0D93B559931C )
{
    if ( isdefined( self.unittype ) && self.unittype == "c6" )
        thread scripts\asm\gesture\script_funcs::ai_gesture_stop_c6( _id_480E0D93B559931C );
    else
    {
        thread scripts\asm\gesture\script_funcs::ai_gesture_eyes_stop( _id_480E0D93B559931C * 0.1 );
        thread scripts\asm\gesture\script_funcs::ai_gesture_stop( _id_480E0D93B559931C );
    }

    self notify( "stop_lookat" );
    self notify( "gesture_natural_stop" );
    self.playing_gesture = undefined;
}

gesture_torso_stop( _id_480E0D93B559931C )
{
    thread scripts\asm\gesture\script_funcs::ai_gesture_torso_stop( _id_480E0D93B559931C );
}

gesture_eyes_stop( _id_480E0D93B559931C )
{
    thread scripts\asm\gesture\script_funcs::ai_gesture_eyes_stop( _id_480E0D93B559931C );
}

gesture_head_stop( _id_480E0D93B559931C )
{
    if ( self.unittype == "c6" )
        thread scripts\asm\gesture\script_funcs::ai_gesture_stop_c6( _id_480E0D93B559931C );
    else
        scripts\asm\gesture\script_funcs::ai_gesture_stop( _id_480E0D93B559931C );

    self notify( "stop_lookat" );
}

gesture_follow_lookat( _id_968583169A58B079, _id_EBC28D027B66FD81, blend_in_time )
{
    self endon( "death" );
    thread scripts\asm\gesture\script_funcs::ai_gesture_lookat( _id_968583169A58B079, _id_EBC28D027B66FD81, blend_in_time );
}

gesture_follow_lookat_natural( _id_968583169A58B079, _id_EBC28D027B66FD81, blend_in_time, _id_1134633B00730D29 )
{
    thread scripts\asm\gesture\script_funcs::ai_gesture_lookat_natural( _id_968583169A58B079, _id_EBC28D027B66FD81, blend_in_time, _id_1134633B00730D29 );
}

gesture_follow_eyes( _id_968583169A58B079, _id_EBC28D027B66FD81, blend_in_time )
{
    thread scripts\asm\gesture\script_funcs::ai_gesture_eyes_lookat( _id_968583169A58B079, _id_EBC28D027B66FD81, blend_in_time );
}

gesture_follow_torso( _id_968583169A58B079, blend_in_time )
{
    thread scripts\asm\gesture\script_funcs::ai_gesture_lookat_torso( _id_968583169A58B079, blend_in_time );
}

gesture_follow_lookat_update( _id_3E53E7E020018FC0, _id_809D5BBB11B6031C )
{
    scripts\asm\gesture\script_funcs::ai_gesture_update_lookat( _id_3E53E7E020018FC0, _id_809D5BBB11B6031C );
}

gesture_follow_eye_update( _id_3E53E7E020018FC0, _id_809D5BBB11B6031C )
{
    scripts\asm\gesture\script_funcs::ai_gesture_update_eyes_lookat( _id_3E53E7E020018FC0, _id_809D5BBB11B6031C );
}

gesture_point( _id_4A32ECBAA6C22F70 )
{
    scripts\asm\gesture\script_funcs::ai_gesture_point( _id_4A32ECBAA6C22F70 );
}

gesture_simple( _id_7CA8D1CE367054F8 )
{
    scripts\asm\gesture\script_funcs::ai_gesture_simple( _id_7CA8D1CE367054F8 );
}

gesture_directional_custom( target, anim_array, _id_4E9E76B78D716037 )
{
    scripts\asm\gesture\script_funcs::ai_gesture_directional_custom( target, anim_array, _id_4E9E76B78D716037 );
}

gesture_custom( _id_4EDB516A81E6B468, _id_4E9E76B78D716037 )
{
    scripts\asm\gesture\script_funcs::ai_custom_gesture( _id_4EDB516A81E6B468, _id_4E9E76B78D716037 );
}

gesture_eye_dart_loop( _id_A9892A7CFB14EA8A, _id_B572592541B23C03 )
{
    self endon( "death" );
    self endon( "stop_lookat" );
    self endon( "eye_gesture_stop" );

    if ( !isdefined( self.is_eye_tracking ) )
        thread gesture_follow_eyes( _id_A9892A7CFB14EA8A, 4.0, 0.1 );

    if ( isdefined( _id_B572592541B23C03 ) && _id_B572592541B23C03 )
        thread gesture_follow_lookat( _id_A9892A7CFB14EA8A, 0.15, 0.7 );

    wait 0.7;

    for (;;)
    {
        thread gesture_follow_eye_update( _id_A9892A7CFB14EA8A, 2.0 );
        wait( randomfloatrange( 3.0, 5.0 ) );
        _id_A113289062B5D506 = _id_A9892A7CFB14EA8A geteye() + ( randomfloatrange( -5, 5 ), randomfloatrange( -5, 5 ), randomfloatrange( -2, 2 ) );
        thread gesture_follow_eye_update( _id_A113289062B5D506, 2.0 );
        wait( randomfloatrange( 0.25, 0.5 ) );

        if ( scripts\engine\utility::cointoss() )
        {
            _id_A113289062B5D506 = _id_A9892A7CFB14EA8A geteye() + ( randomfloatrange( -5, 5 ), randomfloatrange( -5, 5 ), randomfloatrange( -2, 2 ) );
            thread gesture_follow_eye_update( _id_A113289062B5D506, 2.0 );
            wait( randomfloatrange( 0.25, 0.5 ) );
        }
    }
}

gesture_simple_when_close( _id_7CA8D1CE367054F8, dist, _id_DEB1CD851149B0BF, _id_8A65799B42BD1960 )
{
    self endon( "death" );
    self endon( "gesture_stop" );
    _id_ABCCE04725AB3C73 = squared( dist );
    scripts\sp\interaction_manager::add_actor_to_manager();
    _id_30E775ECAE84EB6A = distance2dsquared( self.origin, _id_DEB1CD851149B0BF.origin );

    for (;;)
    {
        if ( _id_30E775ECAE84EB6A < _id_ABCCE04725AB3C73 && scripts\sp\interaction_manager::can_play_nearby_gesture( dist * 3.0 ) )
            break;

        _id_30E775ECAE84EB6A = distance2dsquared( self.origin, _id_DEB1CD851149B0BF.origin );
        waitframe();
    }

    self.playing_gesture = 1;

    if ( isdefined( _id_8A65799B42BD1960 ) )
    {
        thread gesture_simple( _id_7CA8D1CE367054F8 );
        self [[ _id_8A65799B42BD1960 ]]();
    }
    else
        gesture_simple( _id_7CA8D1CE367054F8 );

    wait 2.0;
    scripts\sp\interaction_manager::remove_actor_from_manager();
    self.playing_gesture = 0;
}

get_direction_value( _id_C99A285CABF7EC7B, _id_88DAF353E30ACF25, targetorigin )
{
    _id_87617967D6BB7D22 = vectortoangles( targetorigin - _id_88DAF353E30ACF25 );
    angle = _id_C99A285CABF7EC7B[1] - _id_87617967D6BB7D22[1];
    angle = angle + 360;
    angle = int( angle ) % 360;

    if ( angle > 350 || angle < 10 )
        direction = "8";
    else if ( angle < 60 )
        direction = "9";
    else if ( angle < 120 )
        direction = "6";
    else if ( angle < 150 )
        direction = "3";
    else if ( angle < 210 )
        direction = "2";
    else if ( angle < 240 )
        direction = "1";
    else if ( angle < 300 )
        direction = "4";
    else
        direction = "7";

    return direction;
}

give_melee_weapon( weapon )
{
    take_melee_weapon();
    self giveweapon( weapon );
    self assignweaponmeleeslot( weapon );
}

take_melee_weapon()
{
    meleeweapons = self.meleeweapons;

    foreach ( _id_144130378B339AB7 in meleeweapons )
        self takeweapon( _id_144130378B339AB7 );
}

offhandprecache( _id_D76D57A68DE988CC )
{
    scripts\sp\equipment\offhands::init();
    offhandprecachefuncs = scripts\sp\equipment\offhands::offhandprecachefuncs();

    foreach ( offhand in _id_D76D57A68DE988CC )
    {
        if ( scripts\sp\equipment\offhands::offhandisprecached( offhand ) )
            continue;

        _func_A39466ADC48F650F( offhand );

        if ( scripts\engine\utility::array_contains_key( offhandprecachefuncs, offhand ) )
            [[ offhandprecachefuncs[offhand] ]]( offhand );
        else
        {

        }

        level.offhands.precached = scripts\engine\utility::array_add( level.offhands.precached, offhand );
    }
}

give_offhand( weapon, _id_1C7780CBD65C3C09, _id_36A8844E4A3BA501 )
{
    if ( isplayer( self ) )
        scripts\sp\player::offhandswap( weapon, _id_1C7780CBD65C3C09, _id_36A8844E4A3BA501 );
    else
    {

    }
}

take_offhand( weapon )
{
    if ( isplayer( self ) )
        scripts\sp\player::offhandremove( weapon );
    else
    {

    }
}

get_melee_weapon()
{
    meleeweapons = self.meleeweapons;

    foreach ( _id_144130378B339AB7 in meleeweapons )
    {
        if ( !isnullweapon( _id_144130378B339AB7 ) )
            return _id_144130378B339AB7;
    }

    return undefined;
}

give_action_slot_weapon( objweapon )
{
    self.actionslotweapon = objweapon;
    self giveweapon( objweapon );

    if ( _id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "action_slot_weapon" ) )
        self setactionslot( 1, "weapon", objweapon );
}

take_action_slot_weapon()
{
    self setactionslot( 1, "" );
    self takeweapon( self.actionslotweapon );
    self.actionslotweapon = undefined;
}

get_action_slot_weapon()
{
    if ( isdefined( self.actionslotweapon ) )
        return self.actionslotweapon;
    else
        return "";
}

get_weapons_list_primaries( _id_9B06EFBC2FE3C5D6, _id_CEC1830ED2616F91 )
{
    primaryweapons = level.player.primaryweapons;

    if ( isdefined( _id_9B06EFBC2FE3C5D6 ) && _id_9B06EFBC2FE3C5D6 == 1 )
        primaryweapons = scripts\engine\utility::array_combine( primaryweapons, level.player.alternateweapons );

    _id_208F46D708A99CC3 = [];
    _id_144130378B339AB7 = level.player get_melee_weapon();

    if ( isdefined( _id_144130378B339AB7 ) && ( !isdefined( _id_CEC1830ED2616F91 ) || _id_CEC1830ED2616F91 == 0 ) )
    {
        foreach ( weapon in primaryweapons )
        {
            if ( weapon != _id_144130378B339AB7 )
                _id_208F46D708A99CC3[_id_208F46D708A99CC3.size] = weapon;
        }
    }
    else
        _id_208F46D708A99CC3 = primaryweapons;

    return _id_208F46D708A99CC3;
}

is_primary_equipment_button_down()
{
    return scripts\engine\utility::flag( "primary_equipment_input_down" );
}

wait_primary_equipment_button_up()
{
    scripts\engine\utility::flag_waitopen( "primary_equipment_input_down" );
}

wait_primary_equipment_button_down()
{
    scripts\engine\utility::flag_wait( "primary_equipment_input_down" );
}

wait_primary_equipment_button_pressed()
{
    self waittill( "primary_equipment_pressed" );
    scripts\engine\utility::flag_wait( "primary_equipment_input_down" );
}

is_primary_equipment_in_use()
{
    return scripts\engine\utility::flag( "primary_equipment_in_use" );
}

is_secondary_equipment_button_down()
{
    return scripts\engine\utility::flag( "secondary_equipment_input_down" );
}

wait_secondary_equipment_button_up()
{
    scripts\engine\utility::flag_waitopen( "secondary_equipment_input_down" );
}

wait_secondary_equipment_button_down()
{
    scripts\engine\utility::flag_wait( "secondary_equipment_input_down" );
}

wait_secondary_equipment_button_pressed()
{
    self waittill( "secondary_equipment_pressed" );
    scripts\engine\utility::flag_wait( "secondary_equipment_input_down" );
}

is_secondary_equipment_in_use()
{
    return scripts\engine\utility::flag( "secondary_equipment_in_use" );
}

get_primary_equipment()
{
    return undefined;
}

get_primary_equipment_ammo()
{
    return 0;
}

get_secondary_equipment()
{
    return undefined;
}

get_secondary_equipment_ammo()
{
    return 0;
}

get_stored_primary_equipment()
{
    return undefined;
}

get_stored_primary_equipment_ammo()
{
    return 1;
}

get_stored_secondary_equipment()
{
    return undefined;
}

get_stored_secondary_equipment_ammo()
{
    return 1;
}

get_equipment_ammo( _id_65914EF96F138C42 )
{
    _id_DB58C0AB3E7D1066 = [ ::get_primary_equipment, ::get_stored_primary_equipment, ::get_secondary_equipment, ::get_stored_secondary_equipment ];
    _id_9403124DCDF20FCE = [ ::get_primary_equipment_ammo, ::get_stored_primary_equipment_ammo, ::get_secondary_equipment_ammo, ::get_stored_secondary_equipment_ammo ];

    for ( x = 0; x < _id_DB58C0AB3E7D1066.size; x++ )
    {
        equipment = [[ _id_DB58C0AB3E7D1066[x] ]]();
        ammo = [[ _id_9403124DCDF20FCE[x] ]]();

        if ( isdefined( equipment ) && equipment == _id_65914EF96F138C42 )
            return ammo;
    }
}

get_corpse_origin()
{
    if ( getdvarint( "dvar_32196FA75434C856" ) )
        return self getcorpsephysicsorigin();

    return self.origin;
}

hudoutline_add_channel( channelname, priority, hudoutlinesettings )
{
    scripts\sp\outline::hudoutline_add_channel_internal( channelname, priority, hudoutlinesettings );
}

hudoutline_add_child_channel( channelname, priority, _id_F264487EE10B8AFB )
{
    scripts\sp\outline::hudoutline_add_child_channel_internal( channelname, priority, _id_F264487EE10B8AFB );
}

hudoutline_force_channel( channelname, _id_C3F2838383281C9D )
{
    scripts\sp\outline::hudoutline_force_channel_internal( channelname, _id_C3F2838383281C9D );
}

hudoutline_enable_new( hudoutlineasset, channelname )
{
    scripts\sp\outline::hudoutline_enable_internal( channelname, hudoutlineasset );
}

hudoutline_enable( color_index, _id_AA202F6993CCC074, _id_E1558AF7C1CD5AD2, channelname )
{
    scripts\sp\outline::hudoutline_enable_internal( channelname, "outline_depth_red" );
}

hudoutline_disable( channelname )
{
    scripts\sp\outline::hudoutline_disable_internal( channelname );
}

hudoutline_channel_animation( channelname, _id_4706652761DE8D03 )
{
    scripts\sp\outline::play_animation_on_channel( channelname, _id_4706652761DE8D03 );
    level notify( "hudoutline_anim_complete" );
    level notify( "hudoutline_anim_complete" + channelname );
}

hudoutline_channel_animation_loop( channelname, _id_4706652761DE8D03 )
{
    thread scripts\sp\outline::play_animation_on_channel_loop( channelname, _id_4706652761DE8D03 );
}

hudoutline_vis_enemy_settings( _id_B4C5ADB007BC6A66 )
{
    if ( !isdefined( _id_B4C5ADB007BC6A66 ) )
        _id_B4C5ADB007BC6A66 = 1;

    setsaveddvar( "dvar_5F5C12C95C44F093", 1 );
    _id_2404BA146FCF9C19 = "0.5 0.5 0.5";
    _id_2404B9146FCF99E6 = "1 1 1";

    if ( _id_B4C5ADB007BC6A66 )
    {
        _id_2404BA146FCF9C19 = "0.5 0.5 0.5 1";
        _id_2404B9146FCF99E6 = "0.5 0.5 0.5 0.2";
        _id_D685DFE2E3084122 = "0.5 0.5 0.5 1";
        _id_3237F5D053C238A8 = "0.7 0.7 0.7 1";
        _id_1E261A3DF31DA8ED = "0.5 0.5 0.5 1";
    }
    else
    {
        _id_2404BA146FCF9C19 = "0.5 0.5 0.5 0";
        _id_2404B9146FCF99E6 = "0.5 0.5 0.5 0";
        _id_D685DFE2E3084122 = "0.5 0.5 0.5 1";
        _id_3237F5D053C238A8 = "0.5 0.5 0.5 0.5";
        _id_1E261A3DF31DA8ED = "0.5 0.5 0.5 0.5";
    }

    setsaveddvar( "dvar_4569F157EF7F2410", _id_2404BA146FCF9C19 );
    setsaveddvar( "dvar_4569F257EF7F2643", _id_2404B9146FCF99E6 );
    setsaveddvar( "dvar_9457F5E8293A0C84", _id_D685DFE2E3084122 );
    setsaveddvar( "dvar_AA498F5035D9EF17", _id_3237F5D053C238A8 );
    setsaveddvar( "dvar_5AEB9EF51530DEFC", _id_1E261A3DF31DA8ED );
    setsaveddvar( "dvar_9114F61DDDE3B6A5", 1 );
}

hudoutline_vis_enemy( enabled, _id_B5ECD32577A250AD )
{
    _id_A03351218E3800D5["allies"] = "friendly";
    _id_A03351218E3800D5["axis"] = "enemy";
    _id_A03351218E3800D5["team3"] = "neutral";
    _id_A03351218E3800D5["dead"] = "neutral";

    if ( isdefined( _id_B5ECD32577A250AD ) )
        team = _id_B5ECD32577A250AD;
    else if ( isdefined( self.team ) )
        team = self.team;
    else
        team = "dead";

    if ( enabled && isdefined( _id_A03351218E3800D5[team] ) )
        set_hudoutline( _id_A03351218E3800D5[team], 0 );
    else
        self hudoutlinedisable();
}

hud_bink( _id_22CD6AE7DCAE5E3F )
{
    setomnvar( "ui_show_bink", 1 );
    setsaveddvar( "dvar_D3EE5A6578FE61DE", "0" );
    setsaveddvar( "dvar_B9FF37D084074DF3", "1" );
    _func_1EB3E4964FF5A2EF( _id_22CD6AE7DCAE5E3F );

    while ( !_func_D0860C69E8E4022C() )
        waitframe();

    while ( _func_D0860C69E8E4022C() )
        waitframe();

    _func_ 5770D2EA2D158CF();
    setomnvar( "ui_show_bink", 0 );
    setsaveddvar( "dvar_D3EE5A6578FE61DE", "1" );
    setsaveddvar( "dvar_B9FF37D084074DF3", "1" );
}

hud_fluff_text_message( _id_B20525D46C0361C9, context )
{
    if ( !isdefined( _id_B20525D46C0361C9 ) )
        _id_B20525D46C0361C9 = "fluff_messages_default";

    if ( !isdefined( context ) )
        context = 1;

    setomnvar( "ui_sp_fluff_messaging", _id_B20525D46C0361C9 );
    setomnvar( "ui_sp_fluff_messaging_context", context );
}

_intel_waypoint_button_listener()
{
    level notify( "stopstop_intel_waypoint_int" );
    level endon( "stop_intel_waypoint" );
    self.intel_waypoint_request = undefined;
    self notifyonplayercommand( "set_waypoint", "+weapnext" );
    self waittill( "set_waypoint" );
    self.intel_waypoint_request = 1;
}

_intel_dismiss_button_listener()
{
    self endon( "dismiss_skipped" );
    self notifyonplayercommand( "intel_dismiss", "+gostand" );
    self notifyonplayercommand( "intel_dismiss", "+activate" );
    self notifyonplayercommand( "intel_dismiss", "+usereload" );
    self waittill( "intel_dismiss" );
    self.intel_dismiss_request = 1;
}

init_manipulate_ent()
{
    _id_E0A173ED691689E1 = getentarray( "manipulate_ent", "script_noteworthy" );
    scripts\engine\utility::array_thread( _id_E0A173ED691689E1, ::manipulate_ent_setup );
}

manipulate_ent_setup()
{
    if ( isdefined( self.script_flag_wait ) )
        scripts\engine\utility::flag_init( self.script_flag_wait );

    if ( isdefined( self._id_7FD486C78ED742F7 ) )
        scripts\engine\utility::flag_init( self._id_7FD486C78ED742F7 );

    if ( isdefined( self.script_deathflag ) )
        scripts\engine\utility::flag_init( self.script_deathflag );

    if ( isdefined( self.script_rotation_speed ) )
    {
        self.start_angles = self.angles;

        if ( !isdefined( self.script_rotation_max ) )
            self.script_rotation_max = ( 0, 0, 0 );

        self.rotation_spring_index = [];

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 3; _id_AC0E594AC96AA3A8++ )
        {
            if ( self.script_rotation_max[_id_AC0E594AC96AA3A8] != 0 )
            {
                if ( self.script_rotation_speed[_id_AC0E594AC96AA3A8] > 0 )
                {
                    self.rotation_spring_index[_id_AC0E594AC96AA3A8] = scripts\engine\math::spring_make_under_damped( self.script_rotation_speed[_id_AC0E594AC96AA3A8] * 10, 0, self.start_angles[_id_AC0E594AC96AA3A8] + self.script_rotation_max[_id_AC0E594AC96AA3A8], 0 );
                    continue;
                }
            }
        }

        thread rotate_ent_think();
    }

    if ( isdefined( self.script_translate_speed ) )
    {
        self.start_origin = self.origin;

        if ( !isdefined( self.script_translate_max ) )
            self.script_translate_max = ( 0, 0, 0 );

        self.translate_spring_index = [];

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 3; _id_AC0E594AC96AA3A8++ )
        {
            if ( self.script_translate_max[_id_AC0E594AC96AA3A8] != 0 )
            {
                if ( self.script_translate_speed[_id_AC0E594AC96AA3A8] > 0 )
                {
                    self.translate_spring_index[_id_AC0E594AC96AA3A8] = scripts\engine\math::spring_make_under_damped( self.script_translate_speed[_id_AC0E594AC96AA3A8] * 10, 0, self.start_origin[_id_AC0E594AC96AA3A8] + self.script_translate_max[_id_AC0E594AC96AA3A8], 0 );
                    continue;
                }
            }
        }

        thread translate_ent_think();
    }

    thread manipulate_ent_death_think();
    thread manipulate_ent_cleanup();
}

translate_ent_think()
{
    self endon( "death" );
    self endon( "stop_manipulate_ent" );

    if ( isdefined( self.script_flag_wait ) )
        scripts\engine\utility::flag_wait( self.script_flag_wait );

    if ( isdefined( self._id_7FD486C78ED742F7 ) )
        scripts\engine\utility::flag_waitopen( self._id_7FD486C78ED742F7 );

    for (;;)
    {
        _id_53FD9BCFE97F77D0 = [];

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 3; _id_AC0E594AC96AA3A8++ )
        {
            if ( self.script_translate_speed[_id_AC0E594AC96AA3A8] == 0 )
            {
                _id_53FD9BCFE97F77D0[_id_AC0E594AC96AA3A8] = self.start_origin[_id_AC0E594AC96AA3A8];
                continue;
            }

            if ( self.script_translate_speed[_id_AC0E594AC96AA3A8] != 0 && self.script_translate_max[_id_AC0E594AC96AA3A8] == 0 )
            {
                _id_53FD9BCFE97F77D0[_id_AC0E594AC96AA3A8] = self.origin[_id_AC0E594AC96AA3A8] + self.script_translate_speed[_id_AC0E594AC96AA3A8] / 20;
                continue;
            }

            if ( self.script_translate_speed[_id_AC0E594AC96AA3A8] > 0 && self.script_translate_max[_id_AC0E594AC96AA3A8] != 0 )
                _id_53FD9BCFE97F77D0[_id_AC0E594AC96AA3A8] = scripts\engine\math::spring_update( self.translate_spring_index[_id_AC0E594AC96AA3A8], self.start_origin[_id_AC0E594AC96AA3A8] );
        }

        self.origin = ( _id_53FD9BCFE97F77D0[0], _id_53FD9BCFE97F77D0[1], _id_53FD9BCFE97F77D0[2] );
        waitframe();
    }
}

rotate_ent_think()
{
    self endon( "death" );
    self endon( "stop_manipulate_ent" );

    if ( isdefined( self.script_flag_wait ) )
        scripts\engine\utility::flag_wait( self.script_flag_wait );

    if ( isdefined( self._id_7FD486C78ED742F7 ) )
        scripts\engine\utility::flag_waitopen( self._id_7FD486C78ED742F7 );

    for (;;)
    {
        _id_E8472FBF5C890F3D = [];

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 3; _id_AC0E594AC96AA3A8++ )
        {
            if ( self.script_rotation_speed[_id_AC0E594AC96AA3A8] == 0 )
            {
                _id_E8472FBF5C890F3D[_id_AC0E594AC96AA3A8] = self.start_angles[_id_AC0E594AC96AA3A8];
                continue;
            }

            if ( self.script_rotation_speed[_id_AC0E594AC96AA3A8] != 0 && self.script_rotation_max[_id_AC0E594AC96AA3A8] == 0 )
            {
                _id_E8472FBF5C890F3D[_id_AC0E594AC96AA3A8] = self.angles[_id_AC0E594AC96AA3A8] + self.script_rotation_speed[_id_AC0E594AC96AA3A8] / 20;
                continue;
            }

            if ( self.script_rotation_speed[_id_AC0E594AC96AA3A8] > 0 && self.script_rotation_max[_id_AC0E594AC96AA3A8] != 0 )
                _id_E8472FBF5C890F3D[_id_AC0E594AC96AA3A8] = scripts\engine\math::spring_update( self.rotation_spring_index[_id_AC0E594AC96AA3A8], self.start_angles[_id_AC0E594AC96AA3A8] );
        }

        _id_E8472FBF5C890F3D = ( angleclamp( _id_E8472FBF5C890F3D[0] ), angleclamp( _id_E8472FBF5C890F3D[1] ), angleclamp( _id_E8472FBF5C890F3D[2] ) );
        self.angles = _id_E8472FBF5C890F3D;
        waitframe();
    }
}

manipulate_ent_death_think()
{
    self endon( "death" );

    if ( isdefined( self.script_deathflag ) )
    {
        scripts\engine\utility::flag_wait( self.script_deathflag );

        if ( isdefined( self.script_delete ) && self.script_delete )
            self delete();
        else
            self notify( "stop_manipulate_ent" );
    }
}

manipulate_ent_cleanup()
{
    scripts\engine\utility::waittill_either( "death", "stop_manipulate_ent" );

    if ( isdefined( self.rotation_spring_index ) )
    {
        foreach ( _id_D8A4196AFBA8742B in self.rotation_spring_index )
            scripts\engine\math::spring_delete( _id_D8A4196AFBA8742B );
    }

    if ( isdefined( self.translate_spring_index ) )
    {
        foreach ( _id_D8A4196AFBA8742B in self.translate_spring_index )
            scripts\engine\math::spring_delete( _id_D8A4196AFBA8742B );
    }
}

strip_suffix( _id_A3C267C12168AE42, _id_7C7C8BEF8B9787B0 )
{
    if ( _id_A3C267C12168AE42.size <= _id_7C7C8BEF8B9787B0.size )
        return _id_A3C267C12168AE42;

    if ( getsubstr( _id_A3C267C12168AE42, _id_A3C267C12168AE42.size - _id_7C7C8BEF8B9787B0.size, _id_A3C267C12168AE42.size ) == _id_7C7C8BEF8B9787B0 )
        return getsubstr( _id_A3C267C12168AE42, 0, _id_A3C267C12168AE42.size - _id_7C7C8BEF8B9787B0.size );

    return _id_A3C267C12168AE42;
}

set_exception( type, func )
{
    self.exception[type] = func;
}

set_all_exceptions( _id_CC281DB326FD2A24 )
{
    keys = getarraykeys( self.exception );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < keys.size; _id_AC0E594AC96AA3A8++ )
        self.exception[keys[_id_AC0E594AC96AA3A8]] = _id_CC281DB326FD2A24;
}

waittill_multiple_ents( _id_6848D0559BA20855, _id_0E7865AE7BE35347, _id_6848CD559BA201BC, _id_0E7866AE7BE3557A, _id_6848CE559BA203EF, _id_0E7867AE7BE357AD, _id_6848CB559BA1FD56, _id_0E7860AE7BE34848 )
{
    self endon( "death" );
    ent = spawnstruct();
    ent.threads = 0;

    if ( isdefined( _id_6848D0559BA20855 ) )
    {
        _id_6848D0559BA20855 childthread scripts\engine\utility::waittill_string( _id_0E7865AE7BE35347, ent );
        ent.threads++;
    }

    if ( isdefined( _id_6848CD559BA201BC ) )
    {
        _id_6848CD559BA201BC childthread scripts\engine\utility::waittill_string( _id_0E7866AE7BE3557A, ent );
        ent.threads++;
    }

    if ( isdefined( _id_6848CE559BA203EF ) )
    {
        _id_6848CE559BA203EF childthread scripts\engine\utility::waittill_string( _id_0E7867AE7BE357AD, ent );
        ent.threads++;
    }

    if ( isdefined( _id_6848CB559BA1FD56 ) )
    {
        _id_6848CB559BA1FD56 childthread scripts\engine\utility::waittill_string( _id_0E7860AE7BE34848, ent );
        ent.threads++;
    }

    while ( ent.threads )
    {
        ent waittill( "returned" );
        ent.threads--;
    }

    ent notify( "die" );
}

get_linked_scriptables()
{
    array = [];

    if ( isdefined( self.script_linkto ) )
    {
        _id_B11F91C17FEEAB8F = scripts\engine\utility::get_links();

        if ( _id_B11F91C17FEEAB8F.size == 1 )
            return getscriptablearray( _id_B11F91C17FEEAB8F[0], "script_linkname" );
        else if ( _id_B11F91C17FEEAB8F.size > 1 )
            return _func_10DD8BFAC2862053( _id_B11F91C17FEEAB8F, "script_linkname" );
    }

    if ( !array.size && gettime() <= 300 )
    {

    }

    return array;
}

get_linked_vehicles()
{
    array = [];

    if ( isdefined( self.script_linkto ) )
    {
        _id_B11F91C17FEEAB8F = scripts\engine\utility::get_links();
        _id_4789ACDA6EA1F7B1 = vehicle_getarray();

        foreach ( vehicle in _id_4789ACDA6EA1F7B1 )
        {
            foreach ( name in _id_B11F91C17FEEAB8F )
            {
                if ( scripts\engine\utility::is_equal( vehicle.script_linkname, name ) )
                    array[array.size] = vehicle;
            }
        }
    }

    return array;
}

get_linked_vehicle_spawners()
{
    array = [];

    if ( isdefined( self.script_linkto ) )
    {
        _id_B11F91C17FEEAB8F = scripts\engine\utility::get_links();
        spawners = vehicle_getspawnerarray();

        foreach ( spawner in spawners )
        {
            foreach ( name in _id_B11F91C17FEEAB8F )
            {
                if ( scripts\engine\utility::is_equal( spawner.script_linkname, name ) )
                    array[array.size] = spawner;
            }
        }
    }

    return array;
}

get_linked_spawners()
{
    array = [];

    if ( isdefined( self.script_linkto ) )
    {
        _id_B11F91C17FEEAB8F = scripts\engine\utility::get_links();
        _id_8A0DA49670997C6D = _func_91E8F01DD90DE05A();

        foreach ( spawner in _id_8A0DA49670997C6D )
        {
            foreach ( name in _id_B11F91C17FEEAB8F )
            {
                if ( scripts\engine\utility::is_equal( spawner.script_linkname, name ) )
                    array[array.size] = spawner;
            }
        }
    }

    return array;
}

get_linked_vehicle_nodes()
{
    array = [];

    if ( isdefined( self.script_linkto ) )
    {
        _id_B11F91C17FEEAB8F = scripts\engine\utility::get_links();

        if ( _id_B11F91C17FEEAB8F.size == 1 )
            return getvehiclenodearray( _id_B11F91C17FEEAB8F[0], "script_linkname" );
        else if ( _id_B11F91C17FEEAB8F.size > 1 )
            return _func_DF5A62CB94A82870( _id_B11F91C17FEEAB8F, "script_linkname" );
    }

    return array;
}

run_thread_on_targetname( msg, func, param1, param2, param3 )
{
    array = getentarray( msg, "targetname" );
    scripts\engine\utility::array_thread( array, func, param1, param2, param3 );

    if ( isdefined( level.getspawnerarrayfunction ) )
    {
        all = call [[ level.getspawnerarrayfunction ]]( msg );

        foreach ( s in all )
        {
            if ( _func_5777E76F57915DC7( s ) )
                scripts\engine\utility::array_thread( [ s ], func, param1, param2, param3 );
        }
    }

    array = scripts\engine\utility::getstructarray( msg, "targetname" );
    scripts\engine\utility::array_thread( array, func, param1, param2, param3 );
    array = call [[ level.getnodearrayfunction ]]( msg, "targetname" );
    scripts\engine\utility::array_thread( array, func, param1, param2, param3 );
    array = getvehiclenodearray( msg, "targetname" );
    scripts\engine\utility::array_thread( array, func, param1, param2, param3 );
}

run_thread_on_noteworthy( msg, func, param1, param2, param3 )
{
    array = getentarray( msg, "script_noteworthy" );
    scripts\engine\utility::array_thread( array, func, param1, param2, param3 );

    if ( isdefined( level.getspawnerarrayfunction ) )
    {
        all = call [[ level.getspawnerarrayfunction ]]();

        foreach ( s in all )
        {
            if ( isdefined( s.script_noteworthy ) && s.script_noteworthy == msg && _func_5777E76F57915DC7( s ) )
                scripts\engine\utility::array_thread( [ s ], func, param1, param2, param3 );
        }
    }

    array = scripts\engine\utility::getstructarray( msg, "script_noteworthy" );
    scripts\engine\utility::array_thread( array, func, param1, param2, param3 );
    array = call [[ level.getnodearrayfunction ]]( msg, "script_noteworthy" );
    scripts\engine\utility::array_thread( array, func, param1, param2, param3 );
    array = getvehiclenodearray( msg, "script_noteworthy" );
    scripts\engine\utility::array_thread( array, func, param1, param2, param3 );
}

get_noteworthy_ent( noteworthy )
{
    ent = getent( noteworthy, "script_noteworthy" );

    if ( isdefined( ent ) )
        return ent;

    if ( scripts\common\utility::issp() )
    {
        ent = call [[ level.getnodefunction ]]( noteworthy, "script_noteworthy" );

        if ( isdefined( ent ) )
            return ent;
    }

    ent = scripts\engine\utility::getstruct( noteworthy, "script_noteworthy" );

    if ( isdefined( ent ) )
        return ent;

    ent = getvehiclenode( noteworthy, "script_noteworthy" );

    if ( isdefined( ent ) )
        return ent;
}

is_locked( msg )
{
    lock = level.lock[msg];
    return lock.count > lock.max_count;
}

getfarthest( org, array, maxdist )
{
    if ( !isdefined( maxdist ) )
        maxdist = 500000;

    dist = 0;
    ent = undefined;

    foreach ( item in array )
    {
        _id_5C1EE5AB8012EA11 = distance( item.origin, org );

        if ( _id_5C1EE5AB8012EA11 <= dist || _id_5C1EE5AB8012EA11 >= maxdist )
            continue;

        dist = _id_5C1EE5AB8012EA11;
        ent = item;
    }

    return ent;
}

array_sort_by_handler( array, _id_D35FC50E2F1F14DF )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size - 1; _id_AC0E594AC96AA3A8++ )
    {
        for ( _id_AC0E5C4AC96AAA41 = _id_AC0E594AC96AA3A8 + 1; _id_AC0E5C4AC96AAA41 < array.size; _id_AC0E5C4AC96AAA41++ )
        {
            if ( array[_id_AC0E5C4AC96AAA41] [[ _id_D35FC50E2F1F14DF ]]() < array[_id_AC0E594AC96AA3A8] [[ _id_D35FC50E2F1F14DF ]]() )
            {
                ref = array[_id_AC0E5C4AC96AAA41];
                array[_id_AC0E5C4AC96AAA41] = array[_id_AC0E594AC96AA3A8];
                array[_id_AC0E594AC96AA3A8] = ref;
            }
        }
    }

    return array;
}

monitor_interact_delay( interact, _id_7154510918C87924 )
{
    interact waittill( "trigger", _id_FA8D840338038893 );
    level.player _meth_9163E162C36DBE68( 0.1, 0.1 );
    level.player _id_3B64EB40368C1450::set( "monitor_interact_delay", "ads", 0 );

    while ( !level.player isonground() )
        wait 0.05;

    _id_0E85BB71774631A2 = level.player getstance();

    if ( _id_0E85BB71774631A2 != _id_7154510918C87924 )
    {
        level.player setstance( _id_7154510918C87924 );

        if ( _id_0E85BB71774631A2 == "prone" )
            wait 0.2;
    }

    level.player _meth_62E24429AE4BE81B();
    level.player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "monitor_interact_delay" );
    return _id_FA8D840338038893;
}

ai_create_weapon_stow( weapon )
{
    self.weapon_stow = spawn( "script_model", self gettagorigin( "tag_stowed_back" ) );
    self.weapon_stow setmodel( getweaponmodel( weapon ) );
    self.weapon_stow notsolid();
    self.weapon_stow.angles = self gettagangles( "tag_stowed_back" );
    self.weapon_stow linkto( self, "tag_stowed_back" );
}

countdown_start( time, message )
{
    level notify( "countdown_start" );
    level endon( "countdown_start" );
    level endon( "countdown_end" );
    setomnvar( "ui_countdown_mission_text", message );
    setomnvar( "ui_countdown_timer", gettime() + time * 1000 );
    wait( time );
    level notify( message );
    wait 5;
    setomnvar( "ui_countdown_timer", 0 );
}

countdown_end()
{
    level notify( "countdown_end" );
    setomnvar( "ui_countdown_timer", 0 );
}

setfirstsavetime( time )
{
    time = max( time, 2 );
    level.beginningoflevelsavedelay = time;
}

motion_blur_disable( time )
{
    if ( !isdefined( time ) )
        time = 0;

    thread lerp_saveddvar( "dvar_EA4C44A08CD23D5D", 0, time );
    thread lerp_saveddvar( "dvar_0C7590C5A3289A2D", 0, time );
}

motion_blur_enable( _id_5EC4BE66BD87C8A4, _id_CF9B7C5DC6BA7BB2, time )
{
    if ( !isdefined( _id_5EC4BE66BD87C8A4 ) )
        _id_5EC4BE66BD87C8A4 = scripts\engine\utility::ter_op( isdefined( level.motionblur ), level.motionblur["velocityScaleDefault"], getdvarfloat( "dvar_EA4C44A08CD23D5D" ) );

    if ( !isdefined( _id_CF9B7C5DC6BA7BB2 ) )
        _id_CF9B7C5DC6BA7BB2 = scripts\engine\utility::ter_op( isdefined( level.motionblur ), level.motionblur["velocityScaleViewModelDefault"], getdvarfloat( "dvar_0C7590C5A3289A2D" ) );

    if ( !isdefined( time ) )
        time = 0;

    thread lerp_saveddvar( "dvar_EA4C44A08CD23D5D", _id_5EC4BE66BD87C8A4, time );
    thread lerp_saveddvar( "dvar_0C7590C5A3289A2D", _id_CF9B7C5DC6BA7BB2, time );
}

create_motion_blur_defaults( _id_5EC4BE66BD87C8A4, _id_CF9B7C5DC6BA7BB2 )
{
    if ( !isdefined( _id_5EC4BE66BD87C8A4 ) )
        _id_5EC4BE66BD87C8A4 = getdvarfloat( "dvar_EA4C44A08CD23D5D" );

    if ( !isdefined( _id_CF9B7C5DC6BA7BB2 ) )
        _id_CF9B7C5DC6BA7BB2 = getdvarfloat( "dvar_0C7590C5A3289A2D" );

    level.motionblur = [];
    level.motionblur["velocityScaleDefault"] = _id_5EC4BE66BD87C8A4;
    level.motionblur["velocityScaleViewModelDefault"] = _id_CF9B7C5DC6BA7BB2;
}

actionslotoverride( _id_9910CE2CEEDFD34F, material, ammocount, function, _id_96A185EFC1665BEC )
{
    self _meth_E458BCE4B5CE90DD( "actionslot" + _id_9910CE2CEEDFD34F, material );

    if ( isdefined( ammocount ) )
        setactionslotoverrideammo( _id_9910CE2CEEDFD34F, ammocount );

    if ( isdefined( function ) )
        thread actionslotoverridecallback( _id_9910CE2CEEDFD34F, function, _id_96A185EFC1665BEC );

    level.player thread scripts\sp\player::allow_player_weapon_info( 1 );
}

actionslotoverridecallback( _id_9910CE2CEEDFD34F, function, _id_96A185EFC1665BEC )
{
    self endon( "death" );
    self endon( "removeActionslot" + _id_9910CE2CEEDFD34F );
    self notifyonplayercommand( "actionslot" + _id_9910CE2CEEDFD34F, "+actionslot " + _id_9910CE2CEEDFD34F );

    for (;;)
    {
        self waittill( "actionslot" + _id_9910CE2CEEDFD34F );

        if ( !isdefined( _id_96A185EFC1665BEC ) || !_id_96A185EFC1665BEC || _id_96A185EFC1665BEC && level.player usinggamepad() )
        {
            level.player thread scripts\sp\player::allow_player_weapon_info( 1 );
            self thread [[ function ]]();
        }
    }
}

actionslotoverrideremove( _id_9910CE2CEEDFD34F )
{
    self notify( "removeActionslot" + _id_9910CE2CEEDFD34F );
    self _meth_A600AD03C0F25617( "actionslot" + _id_9910CE2CEEDFD34F, -1 );
    self _meth_E458BCE4B5CE90DD( "actionslot" + _id_9910CE2CEEDFD34F, "none" );
    level.player thread scripts\sp\player::allow_player_weapon_info( 1 );
}

setactionslotoverrideammo( _id_9910CE2CEEDFD34F, ammocount )
{
    self _meth_A600AD03C0F25617( "actionslot" + _id_9910CE2CEEDFD34F, ammocount );
    level.player thread scripts\sp\player::allow_player_weapon_info( 1 );
}

takeallweaponsexcludemelee()
{
    meleeweapons = self.meleeweapons;
    self takeallweapons();

    foreach ( _id_144130378B339AB7 in meleeweapons )
        give_melee_weapon( _id_144130378B339AB7 );

    if ( isdefined( self._id_02A9F3313825D58D ) )
        scripts\sp\utility::give_weapon( self._id_02A9F3313825D58D );
}

giveweaponmaxammo( weapon )
{
    self givemaxammo( weapon );
}

can_trace_to_player( start, _id_2FC7B90001702E5C, contentoverride )
{
    if ( !isdefined( _id_2FC7B90001702E5C ) )
        _id_2FC7B90001702E5C = [];

    if ( !isarray( _id_2FC7B90001702E5C ) )
        _id_2FC7B90001702E5C = [ _id_2FC7B90001702E5C ];

    _id_2FC7B90001702E5C[_id_2FC7B90001702E5C.size] = level.player;

    if ( isent( self ) || isai( self ) )
        _id_2FC7B90001702E5C[_id_2FC7B90001702E5C.size] = self;

    if ( scripts\engine\trace::ray_trace_passed( start, level.player.origin, _id_2FC7B90001702E5C, contentoverride ) )
        return 1;

    if ( scripts\engine\trace::ray_trace_passed( start, level.player.origin + ( 0, 0, 30 ), _id_2FC7B90001702E5C, contentoverride ) )
        return 1;

    if ( scripts\engine\trace::ray_trace_passed( start, level.player geteye(), _id_2FC7B90001702E5C, contentoverride ) )
        return 1;

    return 0;
}

play_footstep_sound( alias, _id_895F3C282BC9FC68 )
{
    if ( scripts\engine\utility::is_dead_sentient() || !soundexists( alias ) )
        return;

    if ( !isdefined( _id_895F3C282BC9FC68 ) )
        _id_895F3C282BC9FC68 = "dirt";

    org = spawn( "script_origin", self.origin );
    org endon( "death" );
    _id_8D6F76E5781C4490 = alias + "_ceiling";

    if ( soundexists( _id_8D6F76E5781C4490 ) )
    {
        org playsurfacesound( alias, _id_895F3C282BC9FC68 );
        org scripts\engine\utility::waittill_notify_or_timeout( "death", 0.05 );
        org.origin = org.origin - ( 0, 0, 12 );
        _id_69861ED01BF0A3CC = getdvarfloat( "dvar_1C9D20BEFC2444F1", 150.0 );
        _id_149BFD43722E9F75 = getdvarfloat( "dvar_5DC5B7CECF9C874C", 360.0 );
        _id_16062DA7C74D1D43 = ( 0, 0, -1 );
        _id_8DB1F601729968B3 = ( 1, 0, 0 );
        _id_E8D40E85838BFA82 = atan( _id_69861ED01BF0A3CC / _id_149BFD43722E9F75 );

        if ( isalive( self ) && scripts\engine\math::pointvscone( level.player.origin, org.origin, _id_16062DA7C74D1D43, _id_8DB1F601729968B3, _id_149BFD43722E9F75, 0.0, _id_E8D40E85838BFA82 ) )
        {
            org playsurfacesound( _id_8D6F76E5781C4490, _id_895F3C282BC9FC68, "sounddone" );
            wait_for_sounddone_or_death( org );
        }
    }
    else
    {
        org playsurfacesound( alias, _id_895F3C282BC9FC68, "sounddone" );
        wait_for_sounddone_or_death( org );
    }

    org delete();
}

wait_for_sounddone_or_death( org, other )
{
    if ( isdefined( other ) )
        other endon( "death" );

    self endon( "death" );
    org waittill( "sounddone" );
    return 1;
}

delete_on_death_wait_sound( ent, _id_AA5DB47ED2478238 )
{
    ent endon( "death" );
    self waittill( "death" );

    if ( isdefined( ent ) )
    {
        if ( ent _meth_2A59DD4B844DF0A4() )
            ent waittill( _id_AA5DB47ED2478238 );

        ent delete();
    }
}

is_touching_any( array )
{
    foreach ( item in array )
    {
        if ( self istouching( item ) )
            return 1;
    }

    return 0;
}

scripter_note( str, duration )
{
    thread scripts\engine\sp\utility_code::scripter_note_proc( str, duration );
}

play_sound_on_tag( alias, tag, _id_49FDBA4C56715050, _id_B426F32755673BA6, _id_510AF7464E264F89 )
{
    if ( scripts\engine\utility::is_dead_sentient() )
        return;

    org = spawn( "script_origin", self.origin );
    org endon( "death" );
    thread delete_on_death_wait_sound( org, "sounddone" );

    if ( isdefined( tag ) )
        org linkto( self, tag, ( 0, 0, 0 ), ( 0, 0, 0 ) );
    else
    {
        org.origin = self.origin;
        org.angles = self.angles;
        org linkto( self );
    }

    org playsound( alias, "sounddone" );

    if ( isdefined( _id_49FDBA4C56715050 ) )
    {
        if ( !isdefined( wait_for_sounddone_or_death( org ) ) )
            org stopsounds();

        wait 0.05;
    }
    else
        org waittill( "sounddone" );

    if ( isdefined( _id_B426F32755673BA6 ) )
        self notify( _id_B426F32755673BA6 );

    org delete();
}

setupglobalcallbackfunctions_sp()
{
    if ( !scripts\engine\utility::add_init_script( "globalCallbacks_SP", ::setupglobalcallbackfunctions_sp ) )
        return;

    level.fnplaysoundonentity = ::play_sound_on_entity;
    level.fnplaysoundontag = ::play_sound_on_tag;
}

get_cover_volume_forward()
{
    if ( isdefined( self.goalvolumecoveryaw ) )
        return anglestoforward( ( 0, self.goalvolumecoveryaw, 0 ) );
    else
        return undefined;
}

_id_1AE8F046DEE579E0( _id_E3108E412AFB3811 )
{
    setomnvar( "ui_cutscene_active", _id_E3108E412AFB3811 );
}

_id_63171981A45B3AD8()
{
    return getomnvar( "ui_cutscene_active" ) > 0;
}
