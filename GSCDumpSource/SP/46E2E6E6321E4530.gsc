// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

red_barrel_init()
{
    level.g_effect["barrel_flame_top"] = loadfx( "vfx/iw7/levels/moon/scripted/scriptables/oxygen_tank/vfx_oxygen_tank_spewing_flames.vfx" );
    level.g_effect["barrel_flame_small"] = loadfx( "vfx/iw8/prop/scriptables/vfx_dest_barrel_fire_sm.vfx" );
    level.g_effect["barrel_explosion"] = loadfx( "vfx/iw8/prop/scriptables/vfx_red_barrel_exp.vfx" );
    level.g_effect["barrel_fire"] = loadfx( "vfx/iw8/prop/scriptables/vfx_dest_barrel_fire.vfx" );
    barrels = getallredbarrels();

    foreach ( _id_DDC4E4BDECFF28CD in barrels )
    {
        if ( _id_DDC4E4BDECFF28CD is_molotov_barrel() )
        {
            _id_DDC4E4BDECFF28CD thread moltovrefillthink();
            continue;
        }

        _id_DDC4E4BDECFF28CD thread red_barrel();
    }
}

red_barrel()
{
    self endon( "barrel_death" );
    self endon( "barrel_delete" );
    scripts\sp\destructibles\barrel_common::barrel_setup( "red", 450, 250, 9100, 15000, 80, 28 );
    thread red_barrel_death();
    _id_DB7EE9ACB96D930D = 999999999;
    timer = 4;
    _id_EE5BBD38E4289372 = 0;
    self.health = 9450;
    damageattacker = undefined;

    for (;;)
    {
        self waittill( "damage", amount, attacker, direction_vec, point, type, modelname, tagname, partname, _id_44E290FB31B85206, objweapon );

        if ( !scripts\sp\destructibles\barrel_common::isvalidbarreldamage( attacker, type ) )
        {
            self.health = self.health + amount;
            continue;
        }

        damageattacker = attacker;
        self.barrel_health = self.health - 9000;

        if ( barrelshouldexplode( attacker, point, type, objweapon ) )
            break;

        if ( self.barrel_health <= 449 )
        {
            if ( !_id_EE5BBD38E4289372 )
            {
                if ( soundexists( "o2_barrel_fire" ) )
                    thread scripts\engine\utility::play_loop_sound_on_entity( "o2_barrel_fire" );

                playfxontag( level.g_effect["barrel_fire"], self, "tag_origin" );

                if ( scripts\engine\utility::hastag( self.model, "tag_valve" ) )
                    playfxontag( level.g_effect["barrel_flame_top"], self, "tag_valve" );
                else
                    playfxontag( level.g_effect["barrel_flame_top"], self, "tag_origin" );

                badplace_cylinder( "barrel_badplace_" + self getentitynumber(), 0, self.origin, 128, 128, "bad_guys" );
                _id_EE5BBD38E4289372 = 1;
                self.onfire = 1;
            }

            _id_8E933DD18CA0781E = self.barrel_health / 449;
            _id_3B5803E733581858 = ( gettime() - _id_DB7EE9ACB96D930D ) / 1000;

            if ( 4 * _id_8E933DD18CA0781E < timer - _id_3B5803E733581858 )
            {
                timer = 4 * _id_8E933DD18CA0781E;
                thread scripts\sp\destructibles\barrel_common::barrel_fusetimer( timer );
                _id_DB7EE9ACB96D930D = gettime();
            }
        }

        if ( isdefined( direction_vec ) )
        {
            velocity = length( direction_vec );

            if ( velocity > 20 )
            {
                _id_62F4DA066051326C = vectornormalize( direction_vec );
                _id_7331D469160F6A41 = 20;

                if ( isdefined( type ) && type == "MOD_IMPACT" )
                    _id_7331D469160F6A41 = 3;

                direction_vec = _id_62F4DA066051326C * _id_7331D469160F6A41;
            }

            self physicslaunchserver( point, direction_vec * 1000 );
        }

        if ( !isdefined( type ) )
            continue;

        _id_5B234F9FF418F161 = strtok( type, "_" );

        if ( !scripts\engine\utility::array_contains( _id_5B234F9FF418F161, "BULLET" ) )
            continue;

        tag = scripts\engine\utility::spawn_tag_origin( point );
        _id_06A3A1033FFC2699 = vectornormalize( self.origin - point );
        _id_A43B0202C06E0907 = vectortoangles( _id_06A3A1033FFC2699 * -1 );
        tag.angles = scripts\engine\utility::flat_angle( _id_A43B0202C06E0907 );
        tag linkto( self );

        if ( soundexists( "o2_barrel_hiss_loop" ) )
            tag thread scripts\engine\utility::play_loop_sound_on_entity( "o2_barrel_hiss_loop" );

        playfxontag( level.g_effect["barrel_flame_small"], tag, "tag_origin" );
        self.spewtags = scripts\engine\utility::array_add( self.spewtags, tag );
    }

    while ( isdefined( self.dont_explode ) )
        waitframe();

    self notify( "barrel_death", damageattacker );
}

barrelshouldexplode( attacker, point, type, objweapon )
{
    if ( self.barrel_health <= 0 )
        return 1;

    if ( scripts\sp\destructibles\barrel_common::isgrenadeinrange( point, type, 80 ) )
        return 1;

    if ( scripts\sp\destructibles\barrel_common::isdirectunderbarrelhit( type ) )
        return 1;

    if ( scripts\sp\destructibles\barrel_common::isplayersniperhit( attacker, objweapon ) )
        return 1;

    return 0;
}

red_barrel_death()
{
    self endon( "barrel_delete" );
    self waittill( "barrel_death", damageattacker );

    if ( soundexists( "o2_barrel_fire" ) && isdefined( self.onfire ) && self.onfire )
        self notify( "stop soundo2_barrel_fire" );

    physicsexplosionsphere( self.origin, self.phys_barrel_radius, 0, 2.0 );
    earthquake( 0.5, 0.8, self.origin, 400 );
    thread scripts\sp\destructibles\barrel_common::barrel_block_gesture( 200, self.origin );
    _id_CE4B47E2A63B34D2 = 0.3;
    barrels = sortbydistance( level.phys_barrels, self.origin );

    foreach ( _id_DDC4E4BDECFF28CD in barrels )
    {
        if ( _id_DDC4E4BDECFF28CD == self )
            continue;

        _id_0D062FA74A20C4A2 = distance( self.origin, _id_DDC4E4BDECFF28CD.origin );

        if ( _id_0D062FA74A20C4A2 > self.phys_barrel_radius )
            continue;

        _id_D43D6364668556C7 = self.phys_barrel_radius - _id_0D062FA74A20C4A2;
        _id_B8B40B55178CC735 = _id_D43D6364668556C7 / self.phys_barrel_radius;
        timer = _id_CE4B47E2A63B34D2 * _id_B8B40B55178CC735;

        if ( _id_0D062FA74A20C4A2 <= self.phys_barrel_radius )
            _id_DDC4E4BDECFF28CD thread scripts\sp\destructibles\barrel_common::barrel_launch( self.origin, _id_0D062FA74A20C4A2, timer );

        if ( _id_0D062FA74A20C4A2 <= 200 )
            _id_DDC4E4BDECFF28CD thread red_barrel_hit( self.origin, _id_0D062FA74A20C4A2, timer );
    }

    _id_06E1C70AF84B1AD5 = scripts\engine\sp\utility::getvehiclearray();

    foreach ( veh in _id_06E1C70AF84B1AD5 )
    {
        damage = 400;
        _id_F5D54F342FB4A774 = 370;

        if ( isdefined( veh.script_team ) && veh.script_team == "allies" )
            continue;

        _id_3A18862E89749191 = distance( self.origin, veh.origin );
        _id_3A18862E89749191 = 0;

        if ( _id_3A18862E89749191 <= 19000 )
        {
            _id_B8B40B55178CC735 = _id_3A18862E89749191 / 190 * 100;
            damage = damage - _id_B8B40B55178CC735 * _id_F5D54F342FB4A774;

            if ( getdvarint( "dvar_0D15DEB4BC845FB2" ) )
                iprintln( "BARREL DID " + damage + " TO VEH" );

            veh scripts\sp\utility::do_damage( damage, self.origin, self, self, "MOD_EXPLOSIVE" );
        }
    }

    _id_E5CFF7E645B201DA = getaiarray();

    foreach ( ai in _id_E5CFF7E645B201DA )
    {
        if ( !istrue( ai.magic_bullet_shield ) )
            _id_E5CFF7E645B201DA = scripts\engine\utility::array_remove( _id_E5CFF7E645B201DA, ai );
    }

    _id_8DC6959569591D12 = scripts\engine\trace::sphere_trace_get_all_results( self.origin, self.origin, 190, _id_E5CFF7E645B201DA, scripts\engine\trace::create_character_contents(), 0 );
    _id_088E03175E378817 = 0;

    foreach ( _id_E5354BE82A7990D5 in _id_8DC6959569591D12 )
    {
        _id_45199ABA739285EE = _id_E5354BE82A7990D5["fraction"];

        if ( isdefined( _id_45199ABA739285EE ) && _id_45199ABA739285EE != 1 )
        {
            _id_88D60D21E004EADF = _id_E5354BE82A7990D5["entity"];

            if ( isai( _id_88D60D21E004EADF ) )
            {
                _id_088E03175E378817++;
                _id_C1E36D012DAD1782 = scripts\engine\utility::is_equal( _id_88D60D21E004EADF.subclass, "juggernaut" );
                _id_D535B42FE89413D7 = scripts\engine\utility::ter_op( _id_C1E36D012DAD1782 == 1, 1000, _id_88D60D21E004EADF.health + 999999 );

                if ( !_id_C1E36D012DAD1782 && randomint( 100 ) < 0 )
                    thread scripts\sp\equipment\molotov::molotovburnenemy( _id_88D60D21E004EADF, 1, self.origin );
                else if ( !_id_C1E36D012DAD1782 && isdefined( level.aigibfunction ) )
                {
                    if ( isdefined( damageattacker ) )
                        damageattacker scripts\engine\utility::delaythread( 0.15, level.aigibfunction, _id_88D60D21E004EADF, self.origin, "MOD_EXPLOSIVE" );
                    else
                        scripts\engine\utility::delaythread( 0.15, level.aigibfunction, _id_88D60D21E004EADF, self.origin, "MOD_EXPLOSIVE" );
                }
                else
                    _id_88D60D21E004EADF scripts\sp\utility::do_damage( _id_D535B42FE89413D7, self.origin, self, self, "MOD_EXPLOSIVE" );
            }
        }
    }

    _id_2D58E8AAE155CC83 = distance( self.origin, level.player.origin );

    if ( _id_2D58E8AAE155CC83 <= 200 )
    {
        _id_B8B40B55178CC735 = _id_2D58E8AAE155CC83 / 200;
        _id_F5D54F342FB4A774 = 420;
        damage = 420 - _id_B8B40B55178CC735 * _id_F5D54F342FB4A774;

        if ( getdvarint( "dvar_0D15DEB4BC845FB2" ) )
            iprintln( "BARREL DID " + damage + " TO PLAYER" );

        level.player scripts\sp\utility::do_damage( damage, self.origin, self, self, "MOD_EXPLOSIVE" );
    }

    level notify( "red_barrel_explosion", self, _id_088E03175E378817 );
    radiusdamage( self.origin, 2, 1, 0, self );
    badplace_delete( "barrel_badplace_" + self getentitynumber() );

    if ( isdefined( self ) )
        self hide();

    waitframe();

    if ( soundexists( "o2_barrel_explode" ) )
        thread scripts\engine\utility::play_sound_in_space( "o2_barrel_explode", self.origin );

    playfx( level.g_effect["barrel_explosion"], self.origin );

    foreach ( _id_F7806D4CF24AACD3 in self.spewtags )
    {
        killfxontag( level.g_effect["barrel_flame_small"], _id_F7806D4CF24AACD3, "tag_origin" );
        waitframe();

        if ( isdefined( _id_F7806D4CF24AACD3 ) )
            _id_F7806D4CF24AACD3 delete();
    }

    killfxontag( level.g_effect["barrel_fire"], self, "tag_origin" );

    if ( scripts\engine\utility::hastag( self.model, "tag_valve" ) )
        killfxontag( level.g_effect["barrel_flame_top"], self, "tag_valve" );
    else
        killfxontag( level.g_effect["barrel_flame_top"], self, "tag_origin" );

    waitframe();

    if ( isdefined( self ) )
        thread delay_delete( 5 );
}

delay_delete( time )
{
    wait( time );

    if ( isdefined( self ) )
        self delete();
}

red_barrel_hit( _id_F3B898B4C1762E04, _id_0D062FA74A20C4A2, timer )
{
    self endon( "barrel_death" );
    self endon( "barrel_delete" );
    wait( timer );

    if ( !isdefined( self ) )
        return;

    if ( isdefined( self.onfire ) )
        return;

    maxdamage = 95;
    maxrange = 200;

    if ( _id_0D062FA74A20C4A2 <= 90 )
    {
        _id_02B308F611603DE0 = 20;
        damagemodifier = ( 90 - _id_0D062FA74A20C4A2 ) / maxrange;
        damage = 1 + damagemodifier * _id_02B308F611603DE0;
    }
    else
    {
        damagemodifier = ( maxrange - _id_0D062FA74A20C4A2 ) / maxrange;
        damage = damagemodifier * maxdamage;
    }

    self notify( "damage", damage, undefined, undefined, undefined, "MOD_EXPLOSIVE", undefined, undefined, undefined, undefined, undefined );
}

moltovrefillthink()
{
    self.molotovs = getentarray( self.target, "targetname" );
    thread createmoltovinteractwhenavailable();

    for (;;)
    {
        result = scripts\engine\utility::waittill_any_return_no_endon_death( "trigger", "barrel_death", "death" );

        if ( result == "trigger" )
        {
            self.interactable = 0;
            molotovrefilltriggerthink();

            if ( level.player getammocount( "molotov" ) == weaponmaxammo( "molotov" ) )
                removeallmolotovinteractsuntilavailable();
        }
        else
        {
            removemoltovinteract();

            foreach ( molotov in self.molotovs )
            {
                if ( isdefined( molotov ) )
                    molotov delete();
            }

            break;
        }

        if ( self.molotovs.size == 0 )
            break;
    }
}

removeallmolotovinteractsuntilavailable()
{
    barrels = getentarray( "phys_barrel_destructible", "targetname" );

    foreach ( _id_DDC4E4BDECFF28CD in barrels )
    {
        if ( _id_DDC4E4BDECFF28CD is_molotov_barrel() )
        {
            _id_DDC4E4BDECFF28CD removemoltovinteract();
            _id_DDC4E4BDECFF28CD thread createmoltovinteractwhenavailable();
        }
    }
}

createmoltovinteract()
{
    if ( isdefined( self.interactable ) && self.interactable )
        return;

    if ( self.molotovs.size == 0 )
        return;

    scripts\sp\player\cursor_hint::create_cursor_hint( undefined, ( 0, 0, 50 ), &"WEAPON/LABEL_MOLOTOV", 55, 400, 55, 1 );
    self.interactable = 1;
}

removemoltovinteract()
{
    if ( !isdefined( self.interactable ) || !self.interactable )
        return;

    scripts\sp\player\cursor_hint::remove_cursor_hint();
    self.interactable = 0;
}

createmoltovinteractwhenavailable()
{
    self notify( "wait_for_interact_available" );
    self endon( "trigger" );
    self endon( "barrel_death" );
    self endon( "wait_for_interact_available" );
    self endon( "death" );
    wait 0.05;
    maxammo = weaponmaxammo( "molotov" );

    for (;;)
    {
        if ( level.player getammocount( "molotov" ) < maxammo && !ishidden() )
            break;

        wait 0.1;
    }

    createmoltovinteract();
}

ishidden()
{
    if ( isdefined( self.hidden ) && self.hidden )
        return 1;

    return 0;
}

molotov_refill_hide()
{
    if ( !is_molotov_barrel() )
        return;

    if ( ishidden() )
        return;

    _id_BF9AA2D910C15A49 = scripts\engine\utility::array_add( self.molotovs, self );

    foreach ( part in _id_BF9AA2D910C15A49 )
    {
        part hide();
        part notsolid();
    }

    removemoltovinteract();
    self.hidden = 1;
}

molotov_refill_show()
{
    if ( !is_molotov_barrel() )
        return;

    if ( !ishidden() )
        return;

    _id_C84BBEEA8480929A = scripts\engine\utility::array_add( self.molotovs, self );

    foreach ( part in _id_C84BBEEA8480929A )
    {
        part show();
        part solid();
    }

    createmoltovinteractwhenavailable();
    self.hidden = 0;
}

is_molotov_barrel()
{
    if ( isdefined( self.script_parameters ) && self.script_parameters == "molotov_refill" )
        return 1;

    return 0;
}

molotovrefilltriggerthink()
{
    offhands = level.player getweaponslistoffhands();

    if ( !playerhasmolotovs( offhands ) )
    {
        level.player scripts\engine\sp\utility::give_offhand( "molotov" );
        level.player setweaponammoclip( "molotov", 0 );
    }

    maxammo = weaponmaxammo( "molotov" );
    _id_5611C229F1727458 = maxammo - level.player getammocount( "molotov" );
    _id_6F2ACDB75545077A = min( self.molotovs.size, _id_5611C229F1727458 );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_6F2ACDB75545077A; _id_AC0E594AC96AA3A8++ )
    {
        lootoffhandhack();
        self.molotovs[self.molotovs.size - 1] delete();
        self.molotovs = scripts\engine\utility::array_remove( self.molotovs, self.molotovs[self.molotovs.size - 1] );
        wait 0.2;
    }
}

playerhasmolotovs( offhands )
{
    foreach ( offhand in offhands )
    {
        if ( offhand.basename == "molotov" )
            return 1;
    }

    return 0;
}

getallredbarrels()
{
    return getentarray( "phys_barrel_destructible", "targetname" );
}

lootoffhandhack()
{
    _id_A1093166DE09E6B8 = "Molotov";
    level.player thread [[ level.loot.types[_id_A1093166DE09E6B8].lootfunc ]]( _id_A1093166DE09E6B8 );
    scripts\sp\loot::playlootsound( _id_A1093166DE09E6B8 );

    if ( level.loot.types[_id_A1093166DE09E6B8].createnotification )
        thread scripts\sp\loot::createnotification( level.loot.types[_id_A1093166DE09E6B8].shader, level.loot.types[_id_A1093166DE09E6B8].loc );
}
