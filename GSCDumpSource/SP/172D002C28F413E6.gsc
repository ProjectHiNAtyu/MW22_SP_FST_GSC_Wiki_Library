// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

nvg_ai_init()
{
    ai = getaiarray();

    foreach ( guy in ai )
        guy thread nvg_ai();

    scripts\engine\sp\utility::add_global_spawn_function( "axis", ::nvg_ai );
    scripts\engine\sp\utility::add_global_spawn_function( "allies", ::nvg_ai );
    scripts\engine\sp\utility::add_global_spawn_function( "neutral", ::nvg_ai );
    scripts\engine\utility::array_thread( getentarray( "dynolight_area", "targetname" ), ::dynolight_area_trigger_logic );
}

nvg_ai()
{
    self endon( "death" );
    wait 0.05;
    local_init();
    ai_nvg_player_update();
    thread nvg_death_cleanup();
}

do_flir_footsteps( _id_D5AA0379E8C758CC )
{

}

dont_do_flir_footsteps()
{

}

local_init()
{
    scripts\engine\utility::ent_flag_init( "react_to_dynolights" );
    scripts\engine\utility::ent_flag_init( "in_the_dark" );

    if ( istrue( level.is_dark ) )
        scripts\engine\utility::ent_flag_set( "in_the_dark" );
}

ai_nvg_player_update()
{
    if ( !should_update_ai_nvg_state() )
        return;

    _id_57B5AB006E388A18 = level.player isnightvisionon();

    if ( isdefined( self.custom_nvg_update_func ) )
        self thread [[ self.custom_nvg_update_func ]]( _id_57B5AB006E388A18 );
}

should_update_ai_nvg_state()
{
    if ( self.classname == "script_vehicle_blackhornet" )
        return 0;

    return 1;
}

dynolight_area_trigger_logic()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", _id_08C251142FC6469A );

        if ( !isai( _id_08C251142FC6469A ) )
            continue;

        if ( !isdefined( _id_08C251142FC6469A.in_dynolight_trigger ) && !isdefined( _id_08C251142FC6469A.nvg_goggles ) )
            _id_08C251142FC6469A childthread dynolight_area_ai( self );
    }
}

dynolight_area_ai( trigger )
{
    self endon( "death" );
    self.in_dynolight_trigger = trigger;
    thread enable_ai_dynolight_behavior();

    while ( self istouching( trigger ) )
        wait 0.05;

    disable_ai_dynolight_behavior();
}

enable_ai_dynolight_behavior()
{
    scripts\engine\utility::ent_flag_set( "react_to_dynolights" );
}

updatelightmeter()
{
    if ( self [[ self.fnisinstealthcombat ]]() || self [[ self.fnisinstealthhunt ]]() && !istrue( self.reacttodynolightsinhunt ) )
    {
        self.lightmeter = undefined;
        return;
    }

    if ( distancesquared( self.origin, level.player.origin ) > 4000000 )
        return;

    if ( !isdefined( level.castingdynolights ) || level.castingdynolights.size == 0 )
    {
        self.lightmeter = scripts\engine\utility::ter_op( istrue( level.is_dark ), 0, 1 );
        return;
    }

    _id_6B7BEE46F2C6DA28 = gettime();

    if ( !isdefined( level.lastdynolightcleantime ) || _id_6B7BEE46F2C6DA28 == level.lastdynolightcleantime )
    {
        level.castingdynolights = scripts\engine\utility::array_removeundefined( level.castingdynolights );
        level.lastdynolightcleantime = _id_6B7BEE46F2C6DA28;
    }

    _id_9D7EB6E3CBC851A6 = sortbydistance( level.castingdynolights, self.origin );
    _id_EB66EBED687542E2 = self getapproxeyepos();
    _id_3DB0657C6E27055B = 9999999;

    if ( isdefined( self.lightmeter_lastcheckpos ) )
        _id_3DB0657C6E27055B = distancesquared( self.lightmeter_lastcheckpos, self.origin );

    if ( !isdefined( self.lightmeter_lastchecktime ) )
        self.lightmeter_lastchecktime = -1000;

    _id_4F65EFCF21F5B553 = [];
    _id_4388BE32BF8E8320 = [];
    _id_56D3F8333ADBCBF1 = [];
    _id_FFA6A55A441D9138 = _id_3DB0657C6E27055B > 900;
    _id_BE525E555B949810 = 998001;
    _id_3FC1A93B7207133E = _id_9D7EB6E3CBC851A6.size;

    for ( _id_18EA2A1964EA249C = 0; _id_18EA2A1964EA249C < _id_3FC1A93B7207133E; _id_18EA2A1964EA249C++ )
    {
        _id_94715B1541BC0E7B = _id_9D7EB6E3CBC851A6[_id_18EA2A1964EA249C];
        _id_ABD9EE4725B96FC2 = distancesquared( _id_EB66EBED687542E2, _id_94715B1541BC0E7B.origin );

        if ( _id_ABD9EE4725B96FC2 > _id_BE525E555B949810 )
            break;

        if ( !_id_FFA6A55A441D9138 && _id_94715B1541BC0E7B.timeoflaststatechange >= self.lightmeter_lastchecktime )
            _id_FFA6A55A441D9138 = 1;

        if ( !_id_94715B1541BC0E7B.alive )
            continue;

        if ( _id_94715B1541BC0E7B getscriptablepartstate( "onoff" ) == "off" )
            continue;

        _id_397EB484DFDDD2DA = 650;

        if ( isdefined( _id_94715B1541BC0E7B.data ) )
        {
            if ( istrue( _id_94715B1541BC0E7B.data.script_ignoreme ) )
                continue;

            if ( istrue( _id_94715B1541BC0E7B.data.script_radius ) )
            {
                _id_397EB484DFDDD2DA = _id_94715B1541BC0E7B.data.script_radius;

                if ( _id_ABD9EE4725B96FC2 > _id_397EB484DFDDD2DA * _id_397EB484DFDDD2DA )
                    continue;
            }

            if ( scripts\engine\utility::is_equal( _id_94715B1541BC0E7B.data.script_type, "light_spot" ) )
            {
                fov = _id_94715B1541BC0E7B.data.script_fov_inner;
                angles = _id_94715B1541BC0E7B.data.angles;
                start = _id_94715B1541BC0E7B.lightpos;

                if ( !scripts\engine\utility::within_fov( start, angles, _id_EB66EBED687542E2, cos( fov ) ) )
                    continue;
            }
        }

        if ( !_id_94715B1541BC0E7B istouching( self.in_dynolight_trigger ) )
            continue;

        _id_4D1FB8FAEDA31CD6 = _id_4F65EFCF21F5B553.size;
        _id_4F65EFCF21F5B553[_id_4D1FB8FAEDA31CD6] = _id_94715B1541BC0E7B;
        _id_56D3F8333ADBCBF1[_id_4D1FB8FAEDA31CD6] = _id_397EB484DFDDD2DA;
        _id_4388BE32BF8E8320[_id_4D1FB8FAEDA31CD6] = _id_ABD9EE4725B96FC2;
    }

    if ( _id_FFA6A55A441D9138 )
    {
        _id_C544587B4F919B5C = 0;
        _id_BDF908D5D1AAE9F2 = spawnstruct();
        _id_29074E84B454250F = self pathdisttogoal();
        _id_46FFBDD31C409329 = 32;
        _id_BDF908D5D1AAE9F2.bmoving = lengthsquared( self.velocity ) > 1 || _id_29074E84B454250F > _id_46FFBDD31C409329;
        _id_5A2EDF4C16153A99 = self getapproxeyepos() - self.origin;

        if ( _id_BDF908D5D1AAE9F2.bmoving )
        {
            _id_BDF908D5D1AAE9F2.pointsonpath = [];
            _id_BDF908D5D1AAE9F2.pointsonpath[0] = self.origin + _id_5A2EDF4C16153A99;
            _id_BDF908D5D1AAE9F2.pointsonpath[1] = self getposonpath( _id_46FFBDD31C409329 ) + _id_5A2EDF4C16153A99;

            if ( _id_29074E84B454250F > _id_46FFBDD31C409329 * 2 )
                _id_BDF908D5D1AAE9F2.pointsonpath[2] = self getposonpath( _id_46FFBDD31C409329 * 2 ) + _id_5A2EDF4C16153A99;
        }

        _id_3FC1A93B7207133E = _id_4F65EFCF21F5B553.size;

        for ( _id_18EA2A1964EA249C = 0; _id_18EA2A1964EA249C < _id_3FC1A93B7207133E; _id_18EA2A1964EA249C++ )
        {
            _id_94715B1541BC0E7B = _id_4F65EFCF21F5B553[_id_18EA2A1964EA249C];
            dist = sqrt( _id_4388BE32BF8E8320[_id_18EA2A1964EA249C] );
            _id_397EB484DFDDD2DA = _id_56D3F8333ADBCBF1[_id_18EA2A1964EA249C];
            _id_D1FBC09D2898A776 = 0;

            if ( isdefined( _id_94715B1541BC0E7B.data ) && isdefined( _id_94715B1541BC0E7B.data.script_percent ) )
                _id_D1FBC09D2898A776 = _id_94715B1541BC0E7B.data.script_percent;
            else if ( isdefined( level.dynolight_falloff_dist ) )
                _id_D1FBC09D2898A776 = level.dynolight_falloff_dist;

            _id_F22120FBFFB96467 = ( 1 - scripts\engine\math::normalize_value( _id_397EB484DFDDD2DA * _id_D1FBC09D2898A776, _id_397EB484DFDDD2DA, dist ) ) * _id_94715B1541BC0E7B.intensity;

            if ( !dynolight_trace_passed( _id_94715B1541BC0E7B, _id_BDF908D5D1AAE9F2 ) )
                continue;

            _id_C544587B4F919B5C = _id_C544587B4F919B5C + _id_F22120FBFFB96467;

            if ( _id_C544587B4F919B5C > 0.5 )
                break;
        }

        self.lightmeter = _id_C544587B4F919B5C;
        self.lightmeter_lastchecktime = gettime();
        self.lightmeter_lastcheckpos = self.origin;
    }
}

dynolight_trace_passed( _id_94715B1541BC0E7B, _id_BDF908D5D1AAE9F2 )
{
    _id_2FC7B90001702E5C = [ level.player ];

    if ( isdefined( _id_94715B1541BC0E7B.linked_ents ) )
        _id_2FC7B90001702E5C = scripts\engine\utility::array_combine( _id_2FC7B90001702E5C, _id_94715B1541BC0E7B.linked_ents );

    if ( istrue( _id_BDF908D5D1AAE9F2.bmoving ) )
    {
        _id_2FC7B90001702E5C = scripts\engine\utility::array_combine( _id_2FC7B90001702E5C, [ _id_94715B1541BC0E7B, self ] );
        _id_E47E37DBC6D59DFE = _id_BDF908D5D1AAE9F2.pointsonpath.size;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_E47E37DBC6D59DFE; _id_AC0E594AC96AA3A8++ )
        {
            _id_28D590E41FC868A0 = _id_BDF908D5D1AAE9F2.pointsonpath[_id_AC0E594AC96AA3A8];

            if ( scripts\engine\trace::ray_trace_passed( _id_94715B1541BC0E7B.lightpos, _id_28D590E41FC868A0, _id_2FC7B90001702E5C, level.dynolight_trace_contents ) )
                return 1;
        }

        return 0;
    }

    return _id_94715B1541BC0E7B scripts\engine\utility::can_trace_to_ai( _id_94715B1541BC0E7B.lightpos, self, _id_2FC7B90001702E5C, level.dynolight_trace_contents );
}

is_gun_raised()
{
    if ( isnullweapon( self.weapon ) )
        return 0;

    return self gettagorigin( "tag_eye" )[2] - self gettagorigin( "tag_flash" )[2] <= 15;
}

draw_spotlight_fov()
{
    _id_73C53EBBA60D01F8 = acos( cos( self.data.script_fov_inner ) );
    _id_20D1CF05AD0B07FE = self.data.angles[1];
    pitch = self.data.angles[0];
    color = ( 1, 0, 0 );
    _id_40948291A02671AC = self.data.script_radius;
    start = self.lightpos;
    _id_8B4C94EE530F045E = 10;
}

draw_flashlight_fov()
{
    dot = cos( 30 );
    color = ( 1, 0, 0 );
    _id_73C53EBBA60D01F8 = acos( dot );
    _id_20D1CF05AD0B07FE = self gettagangles( "tag_flash" )[1];
    _id_40948291A02671AC = 500;
    start = self gettagorigin( "tag_flash" );
    _id_8B4C94EE530F045E = 10;
}

disable_ai_dynolight_behavior()
{
    self.in_dynolight_trigger = undefined;
    self.lightmeter = undefined;
    self.maxsightdistsqrd = 67108864;
    level.player.dontmeleeme = 0;
    scripts\engine\utility::ent_flag_clear( "react_to_dynolights" );

    if ( istrue( level.is_dark ) )
        scripts\engine\utility::ent_flag_set( "in_the_dark" );
    else
        scripts\engine\utility::ent_flag_clear( "in_the_dark" );

    self.threatsightratescale = undefined;
}

nvg_death_cleanup()
{
    self waittill( "death" );

    if ( !isdefined( self ) )
        return;

    if ( is_using_flashlight() )
        kill_flashlight_fx( 0 );
}

flashlight_on( _id_B5214D24F3968B4C )
{
    if ( !can_use_flashlight() )
        return;

    if ( is_using_flashlight() )
        return;

    _id_D73F1B97ACBA6597();
    self.flashlight = 1;
    play_flashlight_fx( _id_B5214D24F3968B4C );

    if ( isdefined( self.flashlightlaserweapon ) )
        flashlight_laser_on();
}

_id_D73F1B97ACBA6597()
{
    _id_C7D735E3522DA00A = [ "flashlight_box01", "flashlight_cyl01", "flashlight_pstl01" ];
    _id_893FF9B814E04F95 = self.weapon;
    _id_DD515FCF025B2E79 = undefined;

    foreach ( _id_93E3B716DC7E83DA in _id_C7D735E3522DA00A )
    {
        if ( _id_893FF9B814E04F95 canuseattachment( _id_93E3B716DC7E83DA ) )
        {
            _id_DD515FCF025B2E79 = _id_893FF9B814E04F95 withattachment( _id_93E3B716DC7E83DA );
            self._id_E0675E48962C6D55 = _id_93E3B716DC7E83DA;
            break;
        }
    }

    if ( !isdefined( _id_DD515FCF025B2E79 ) )
        return;

    slot = "primary";

    if ( self.secondaryweapon == _id_893FF9B814E04F95 )
        slot = "secondary";

    if ( self.lastweapon == _id_893FF9B814E04F95 )
        self.lastweapon = _id_DD515FCF025B2E79;

    self.flashlightfxtag = "tag_laser";
    self.flashlightfxoverridetag = "tag_laser";
    self._id_B5CE31099294CF74 = slot;
    _id_3433EE6B63C7E243::detachweapon( _id_893FF9B814E04F95 );
    _id_3433EE6B63C7E243::forceuseweapon( _id_DD515FCF025B2E79, slot );
}

flashlight_off( _id_B5214D24F3968B4C )
{
    if ( !is_using_flashlight() )
        return;

    self.flashlight = 0;
    kill_flashlight_fx( _id_B5214D24F3968B4C );

    if ( isdefined( self.flashlightlaserweapon ) )
        flashlight_laser_off();
}

flashlight_laser_on()
{
    if ( isdefined( self.flashlightlaser ) )
        return;

    laser = spawn( "script_model", ( 0, 0, 0 ) );
    laser linkto( self, self.flashlightfxtag, ( 0, 0, 0 ), ( 0, 0, 0 ) );
    laser setmodel( "tag_laser" );
    laser setmoverlaserweapon( self.flashlightlaserweapon );
    laser _meth_6F7BE4CB996E4D3E();
    self.flashlightlaser = laser;
    thread flashlight_laser_cleanup();
}

flashlight_laser_cleanup()
{
    self endon( "flashlight_laser_off" );
    self waittill( "death" );
    self.flashlightlaser _meth_9BA253C26D6D6740();
    self.flashlightlaser delete();
}

flashlight_laser_off()
{
    if ( !isdefined( self.flashlightlaser ) )
        return;

    self notify( "flashlight_laser_off" );
    self.flashlightlaser _meth_9BA253C26D6D6740();
    self.flashlightlaser delete();
    self.flashlightlaser = undefined;
}

play_flashlight_fx( _id_B5214D24F3968B4C )
{
    tag = "tag_flash";

    if ( isdefined( self.flashlightfxoverridetag ) )
        tag = self.flashlightfxoverridetag;

    fx = "npc_flashlight";

    if ( isdefined( self.flashlightfxoverride ) )
        fx = self.flashlightfxoverride;

    self.flashlightfx = fx;
    self.flashlightfxtag = tag;

    if ( !isdefined( _id_B5214D24F3968B4C ) )
        _id_B5214D24F3968B4C = 1;

    if ( _id_B5214D24F3968B4C )
        scripts\engine\sp\utility::fx_playontag_safe( self.flashlightfx, self.flashlightfxtag, undefined, undefined, 1 );
    else
        playfxontag( scripts\engine\utility::getfx( self.flashlightfx ), self, self.flashlightfxtag );
}

kill_flashlight_fx( _id_B5214D24F3968B4C )
{
    if ( !isdefined( self.flashlightfxtag ) || self.flashlightfxtag == "tag_flash" || self.flashlightfxtag == "tag_laser" )
    {
        if ( isnullweapon( self.weapon ) )
            return;
    }

    if ( isdefined( self.flashlightfx ) )
    {
        tag = "tag_flash";

        if ( isdefined( self.flashlightfxtag ) )
            tag = self.flashlightfxtag;

        if ( !isdefined( _id_B5214D24F3968B4C ) )
            _id_B5214D24F3968B4C = 1;

        if ( _id_B5214D24F3968B4C )
            scripts\engine\sp\utility::fx_killontag_safe( self.flashlightfx, tag, undefined, undefined, 1 );
        else
            killfxontag( scripts\engine\utility::getfx( self.flashlightfx ), self, tag );
    }

    self.flashlightfx = undefined;
    self.flashlightfxtag = undefined;
}

is_using_flashlight()
{
    if ( istrue( self.flashlight ) )
        return 1;
    else
        return 0;
}

is_using_nvg()
{
    if ( istrue( self.nvg ) )
        return 1;
    else
        return 0;
}

can_use_flashlight()
{
    if ( isdefined( self.noflashlight ) && self.noflashlight )
        return 0;

    if ( !isdefined( self.a ) || !isdefined( self.a.weaponpos ) || isundefinedweapon( self.a.weaponpos["right"] ) )
        return 0;

    return 1;
}
