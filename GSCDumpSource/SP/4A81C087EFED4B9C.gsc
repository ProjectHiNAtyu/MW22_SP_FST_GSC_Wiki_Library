// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_colors()
{
    if ( !scripts\engine\utility::add_init_script( "colors", ::init_colors ) )
        return;

    scripts\engine\utility::flag_init( "respawn_friendlies" );
    thread init_color_grouping();
}

init_color_grouping()
{
    nodes = getallnodes();
    scripts\engine\utility::flag_init( "player_looks_away_from_spawner" );
    scripts\engine\utility::flag_init( "friendly_spawner_locked" );
    level.arrays_of_colorcoded_nodes = [];
    level.arrays_of_colorcoded_nodes["axis"] = [];
    level.arrays_of_colorcoded_nodes["allies"] = [];
    level.arrays_of_colorcoded_volumes = [];
    level.arrays_of_colorcoded_volumes["axis"] = [];
    level.arrays_of_colorcoded_volumes["allies"] = [];
    triggers = [];
    triggers = scripts\engine\utility::array_combine( triggers, getentarray( "trigger_multiple", "code_classname" ) );
    triggers = scripts\engine\utility::array_combine( triggers, getentarray( "trigger_radius", "code_classname" ) );
    triggers = scripts\engine\utility::array_combine( triggers, getentarray( "trigger_once", "code_classname" ) );
    level.color_teams = [];
    level.color_teams["allies"] = "allies";
    level.color_teams["axis"] = "axis";
    level.color_teams["team3"] = "axis";
    level.color_teams["neutral"] = "neutral";
    volumes = getentarray( "info_volume", "code_classname" );

    foreach ( node in nodes )
    {
        if ( isdefined( node.script_color_allies ) )
            node add_node_to_global_arrays( node.script_color_allies, "allies" );

        if ( isdefined( node.script_color_axis ) )
            node add_node_to_global_arrays( node.script_color_axis, "axis" );
    }

    foreach ( volume in volumes )
    {
        if ( isdefined( volume.script_color_allies ) )
            volume add_volume_to_global_arrays( volume.script_color_allies, "allies" );

        if ( isdefined( volume.script_color_axis ) )
            volume add_volume_to_global_arrays( volume.script_color_axis, "axis" );
    }

    foreach ( trigger in triggers )
    {
        if ( isdefined( trigger.script_color_allies ) )
            trigger thread trigger_issues_orders( trigger.script_color_allies, "allies" );

        if ( isdefined( trigger.script_color_axis ) )
            trigger thread trigger_issues_orders( trigger.script_color_axis, "axis" );
    }

    level.color_node_type_function = [];
    add_cover_node( "BAD NODE" );
    add_cover_node( "Cover Stand" );
    add_cover_node( "Cover Crouch" );
    add_cover_node( "Cover Prone" );
    add_cover_node( "Cover Crouch Window" );
    add_cover_node( "Cover Right" );
    add_cover_node( "Cover Left" );
    add_cover_node( "Cover Wide Left" );
    add_cover_node( "Cover Wide Right" );
    add_cover_node( "Conceal Stand" );
    add_cover_node( "Conceal Crouch" );
    add_cover_node( "Conceal Prone" );
    add_cover_node( "Reacquire" );
    add_cover_node( "Balcony" );
    add_cover_node( "Scripted" );
    add_cover_node( "Begin" );
    add_cover_node( "End" );
    add_cover_node( "Turret" );
    add_path_node( "Ambush" );
    add_path_node( "Guard" );
    add_path_node( "Path" );
    add_path_node( "Path 3D" );
    add_path_node( "Exposed" );
    add_path_node( "Exposed 3D" );
    add_path_node( "Cover 3D" );
    add_path_node( "Cover Stand 3D" );
    add_cover_node( "Begin 3D" );
    add_cover_node( "End 3D" );
    level.colorlist = [];
    level.colorlist[level.colorlist.size] = "r";
    level.colorlist[level.colorlist.size] = "b";
    level.colorlist[level.colorlist.size] = "y";
    level.colorlist[level.colorlist.size] = "c";
    level.colorlist[level.colorlist.size] = "g";
    level.colorlist[level.colorlist.size] = "p";
    level.colorlist[level.colorlist.size] = "o";
    level.colorchecklist["red"] = "r";
    level.colorchecklist["r"] = "r";
    level.colorchecklist["blue"] = "b";
    level.colorchecklist["b"] = "b";
    level.colorchecklist["yellow"] = "y";
    level.colorchecklist["y"] = "y";
    level.colorchecklist["cyan"] = "c";
    level.colorchecklist["c"] = "c";
    level.colorchecklist["green"] = "g";
    level.colorchecklist["g"] = "g";
    level.colorchecklist["purple"] = "p";
    level.colorchecklist["p"] = "p";
    level.colorchecklist["orange"] = "o";
    level.colorchecklist["o"] = "o";
    level.currentcolorforced = [];
    level.currentcolorforced["allies"] = [];
    level.currentcolorforced["axis"] = [];
    level.lastcolorforced = [];
    level.lastcolorforced["allies"] = [];
    level.lastcolorforced["axis"] = [];

    foreach ( color in level.colorlist )
    {
        level.arrays_of_colorforced_ai["allies"][color] = [];
        level.arrays_of_colorforced_ai["axis"][color] = [];
        level.currentcolorforced["allies"][color] = undefined;
        level.currentcolorforced["axis"][color] = undefined;
    }

    thread player_color_node();
    spawners = _func_4570A5E1C6E3BDED( "allies" );
    level._color_friendly_spawners = [];

    foreach ( spawner in spawners )
    {
        if ( !isdefined( spawner.script_forcecolor ) )
            continue;

        level._color_friendly_spawners[spawner.classname] = spawner;
    }
}

convert_color_to_short_string()
{
    self.script_forcecolor = level.colorchecklist[self.script_forcecolor];
}

ai_picks_destination( currentcolorcode )
{
    if ( isdefined( self.script_forcecolor ) )
    {
        convert_color_to_short_string();
        self.currentcolorcode = currentcolorcode;
        color = self.script_forcecolor;
        level.arrays_of_colorforced_ai[get_team()][color] = scripts\engine\utility::array_add( level.arrays_of_colorforced_ai[get_team()][color], self );
        thread goto_current_colorindex();
        return;
    }
}

goto_current_colorindex()
{
    if ( !isdefined( self.currentcolorcode ) )
        return;

    nodes = level.arrays_of_colorcoded_nodes[get_team()][self.currentcolorcode];
    left_color_node();

    if ( !isalive( self ) )
        return;

    if ( !scripts\engine\sp\utility::has_color() )
        return;

    if ( !isdefined( nodes ) )
    {
        volume = level.arrays_of_colorcoded_volumes[get_team()][self.currentcolorcode];
        send_ai_to_colorvolume( volume, self.currentcolorcode );
        return;
    }

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < nodes.size; _id_AC0E594AC96AA3A8++ )
    {
        node = nodes[_id_AC0E594AC96AA3A8];

        if ( isalive( node.color_user ) && !isplayer( node.color_user ) )
            continue;

        thread ai_sets_goal_with_delay( node );
        thread decrementcolorusers( node );
        return;
    }

    no_node_to_go_to();
}

no_node_to_go_to()
{
    msg = "AI with export " + self.export + " was told to go to color node but had no node to go to.";

    if ( getdvarint( "dvar_2B581A25764E207A" ) || getdvarint( "dvar_10B43CFCA1168946" ) )
        iprintln( msg );
    else
    {

    }
}

get_color_list()
{
    colorlist = [];
    colorlist[colorlist.size] = "r";
    colorlist[colorlist.size] = "b";
    colorlist[colorlist.size] = "y";
    colorlist[colorlist.size] = "c";
    colorlist[colorlist.size] = "g";
    colorlist[colorlist.size] = "p";
    colorlist[colorlist.size] = "o";
    return colorlist;
}

array_remove_dupes( array )
{
    _id_F2BFBF2B4A95D948 = [];

    foreach ( val in array )
        _id_F2BFBF2B4A95D948[val] = 1;

    _id_055F75D9F16D814F = [];

    foreach ( index, _ in _id_F2BFBF2B4A95D948 )
        _id_055F75D9F16D814F[_id_055F75D9F16D814F.size] = index;

    return _id_055F75D9F16D814F;
}

get_colorcodes_from_trigger( _id_C76F885D94910D90, team )
{
    return get_colorcodes( _id_C76F885D94910D90, team );
}

get_colorcodes( _id_C76F885D94910D90, team )
{
    _id_E659CE0031ADF776 = strtok( _id_C76F885D94910D90, " " );
    _id_E659CE0031ADF776 = array_remove_dupes( _id_E659CE0031ADF776 );
    colors = [];
    _id_041D7E47DF240C92 = [];
    _id_836D14D1B463AF39 = [];
    colorlist = get_color_list();

    foreach ( _id_9AC0213E4B91D0C1 in _id_E659CE0031ADF776 )
    {
        color = undefined;

        foreach ( color in colorlist )
        {
            if ( issubstr( _id_9AC0213E4B91D0C1, color ) )
                break;
        }

        if ( !colorcode_is_used_in_map( team, _id_9AC0213E4B91D0C1 ) )
            continue;

        _id_041D7E47DF240C92[color] = _id_9AC0213E4B91D0C1;
        colors[colors.size] = color;
        _id_836D14D1B463AF39[_id_836D14D1B463AF39.size] = _id_9AC0213E4B91D0C1;
    }

    _id_E659CE0031ADF776 = _id_836D14D1B463AF39;
    array = [];
    array["colorCodes"] = _id_E659CE0031ADF776;
    array["colorCodesByColorIndex"] = _id_041D7E47DF240C92;
    array["colors"] = colors;
    return array;
}

colorcode_is_used_in_map( team, _id_9AC0213E4B91D0C1 )
{
    if ( isdefined( level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1] ) )
        return 1;

    return isdefined( level.arrays_of_colorcoded_volumes[team][_id_9AC0213E4B91D0C1] );
}

trigger_issues_orders( _id_C76F885D94910D90, team )
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger" );

        if ( isdefined( self.activated_color_trigger ) )
        {
            self.activated_color_trigger = undefined;
            continue;
        }

        get_colorcodes_and_activate_trigger( _id_C76F885D94910D90, team );

        if ( isdefined( self.script_oneway ) && self.script_oneway )
            thread trigger_delete_target_chain();
    }
}

trigger_delete_target_chain()
{
    array = [];
    _id_B28E2D4E6A6557F8[0] = self;

    while ( _id_B28E2D4E6A6557F8.size )
    {
        targeting = [];

        foreach ( current in _id_B28E2D4E6A6557F8 )
        {
            array[array.size] = current;

            if ( !isdefined( current.targetname ) )
                continue;

            _id_6D906809844C7CB1 = getentarray( current.targetname, "target" );

            foreach ( temp in _id_6D906809844C7CB1 )
                targeting[targeting.size] = temp;

            _id_6D906809844C7CB1 = undefined;
        }

        _id_B28E2D4E6A6557F8 = [];

        foreach ( target in targeting )
        {
            if ( !isdefined( target.script_color_allies ) && !isdefined( target.script_color_axis ) )
                continue;

            _id_B28E2D4E6A6557F8[_id_B28E2D4E6A6557F8.size] = target;
        }
    }

    scripts\engine\utility::array_delete( array );
}

activate_color_trigger( team )
{
    if ( team == "allies" )
        thread get_colorcodes_and_activate_trigger( self.script_color_allies, team );
    else
        thread get_colorcodes_and_activate_trigger( self.script_color_axis, team );
}

get_colorcodes_and_activate_trigger( _id_C76F885D94910D90, team )
{
    array = get_colorcodes_from_trigger( _id_C76F885D94910D90, team );
    _id_E659CE0031ADF776 = array["colorCodes"];
    _id_041D7E47DF240C92 = array["colorCodesByColorIndex"];
    colors = array["colors"];
    activate_color_code_internal( _id_E659CE0031ADF776, colors, team, _id_041D7E47DF240C92 );
}

activate_color_code_internal( _id_E659CE0031ADF776, colors, team, _id_041D7E47DF240C92 )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_E659CE0031ADF776.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !isdefined( level.arrays_of_colorcoded_spawners[team][_id_E659CE0031ADF776[_id_AC0E594AC96AA3A8]] ) )
            continue;

        level.arrays_of_colorcoded_spawners[team][_id_E659CE0031ADF776[_id_AC0E594AC96AA3A8]] = scripts\engine\utility::array_removeundefined( level.arrays_of_colorcoded_spawners[team][_id_E659CE0031ADF776[_id_AC0E594AC96AA3A8]] );

        for ( _id_AC0E424AC96A7113 = 0; _id_AC0E424AC96A7113 < level.arrays_of_colorcoded_spawners[team][_id_E659CE0031ADF776[_id_AC0E594AC96AA3A8]].size; _id_AC0E424AC96A7113++ )
            level.arrays_of_colorcoded_spawners[team][_id_E659CE0031ADF776[_id_AC0E594AC96AA3A8]][_id_AC0E424AC96A7113].currentcolorcode = _id_E659CE0031ADF776[_id_AC0E594AC96AA3A8];
    }

    foreach ( color in colors )
    {
        level.arrays_of_colorforced_ai[team][color] = scripts\engine\utility::array_removedead( level.arrays_of_colorforced_ai[team][color] );
        level.lastcolorforced[team][color] = level.currentcolorforced[team][color];
        level.currentcolorforced[team][color] = _id_041D7E47DF240C92[color];
    }

    ai_array = [];
    _id_3CA16D8A31AA3006 = 0;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_E659CE0031ADF776.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( same_color_code_as_last_time( team, colors[_id_AC0E594AC96AA3A8] ) )
            continue;

        _id_9AC0213E4B91D0C1 = _id_E659CE0031ADF776[_id_AC0E594AC96AA3A8];

        if ( !isdefined( level.arrays_of_colorcoded_ai[team][_id_9AC0213E4B91D0C1] ) )
            continue;

        ai_array[_id_9AC0213E4B91D0C1] = issue_leave_node_order_to_ai_and_get_ai( _id_9AC0213E4B91D0C1, colors[_id_AC0E594AC96AA3A8], team );
    }

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_E659CE0031ADF776.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_9AC0213E4B91D0C1 = _id_E659CE0031ADF776[_id_AC0E594AC96AA3A8];

        if ( !isdefined( ai_array[_id_9AC0213E4B91D0C1] ) )
            continue;

        if ( same_color_code_as_last_time( team, colors[_id_AC0E594AC96AA3A8] ) )
            continue;

        if ( !isdefined( level.arrays_of_colorcoded_ai[team][_id_9AC0213E4B91D0C1] ) )
            continue;

        _id_3CA16D8A31AA3006 = 1;
        issue_color_order_to_ai( _id_9AC0213E4B91D0C1, colors[_id_AC0E594AC96AA3A8], team, ai_array[_id_9AC0213E4B91D0C1] );
    }

    if ( _id_3CA16D8A31AA3006 )
        level notify( "new_color_trigger", self );
}

same_color_code_as_last_time( team, color )
{
    if ( !isdefined( level.lastcolorforced[team][color] ) )
        return 0;

    return level.lastcolorforced[team][color] == level.currentcolorforced[team][color];
}

process_cover_node_with_last_in_mind_allies( node, _id_3CA71F162CA5C520 )
{
    if ( issubstr( node.script_color_allies, _id_3CA71F162CA5C520 ) )
        self.cover_nodes_last[self.cover_nodes_last.size] = node;
    else
        self.cover_nodes_first[self.cover_nodes_first.size] = node;
}

process_cover_node_with_last_in_mind_axis( node, _id_3CA71F162CA5C520 )
{
    if ( issubstr( node.script_color_axis, _id_3CA71F162CA5C520 ) )
        self.cover_nodes_last[self.cover_nodes_last.size] = node;
    else
        self.cover_nodes_first[self.cover_nodes_first.size] = node;
}

process_cover_node( node, _id_DDD80F5D1DA23C60 )
{
    self.cover_nodes_first[self.cover_nodes_first.size] = node;
}

process_path_node( node, _id_DDD80F5D1DA23C60 )
{
    self.path_nodes[self.path_nodes.size] = node;
}

prioritize_colorcoded_nodes( team, _id_9AC0213E4B91D0C1, color )
{
    nodes = level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1];
    ent = spawnstruct();
    ent.path_nodes = [];
    ent.cover_nodes_first = [];
    ent.cover_nodes_last = [];
    _id_70D10472C1CD384E = isdefined( level.lastcolorforced[team][color] );

    foreach ( node in nodes )
        ent [[ level.color_node_type_function[node.type][_id_70D10472C1CD384E][team] ]]( node, level.lastcolorforced[team][color] );

    ent.cover_nodes_first = scripts\engine\utility::array_randomize( ent.cover_nodes_first );
    _id_DF24538D9D2ADA3A = [];
    nodes = [];

    foreach ( index, node in ent.cover_nodes_first )
    {
        if ( isdefined( node.script_colorlast ) )
        {
            _id_DF24538D9D2ADA3A[_id_DF24538D9D2ADA3A.size] = node;
            nodes[index] = undefined;
            continue;
        }

        nodes[nodes.size] = node;
    }

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ent.cover_nodes_last.size; _id_AC0E594AC96AA3A8++ )
        nodes[nodes.size] = ent.cover_nodes_last[_id_AC0E594AC96AA3A8];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ent.path_nodes.size; _id_AC0E594AC96AA3A8++ )
        nodes[nodes.size] = ent.path_nodes[_id_AC0E594AC96AA3A8];

    foreach ( node in _id_DF24538D9D2ADA3A )
        nodes[nodes.size] = node;

    level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1] = nodes;
}

get_prioritized_colorcoded_nodes( team, _id_9AC0213E4B91D0C1, color )
{
    return level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1];
}

get_colorcoded_volume( team, _id_9AC0213E4B91D0C1 )
{
    return level.arrays_of_colorcoded_volumes[team][_id_9AC0213E4B91D0C1];
}

issue_leave_node_order_to_ai_and_get_ai( _id_9AC0213E4B91D0C1, color, team )
{
    level.arrays_of_colorcoded_ai[team][_id_9AC0213E4B91D0C1] = scripts\engine\utility::array_removedead( level.arrays_of_colorcoded_ai[team][_id_9AC0213E4B91D0C1] );
    ai = level.arrays_of_colorcoded_ai[team][_id_9AC0213E4B91D0C1];
    ai = scripts\engine\utility::array_combine( ai, level.arrays_of_colorforced_ai[team][color] );
    _id_BFC65A378A6D8EFE = [];

    foreach ( guy in ai )
    {
        if ( isdefined( guy.currentcolorcode ) && guy.currentcolorcode == _id_9AC0213E4B91D0C1 )
            continue;

        _id_BFC65A378A6D8EFE[_id_BFC65A378A6D8EFE.size] = guy;
    }

    ai = _id_BFC65A378A6D8EFE;

    if ( !ai.size )
        return;

    scripts\engine\utility::array_thread( ai, ::left_color_node );
    return ai;
}

send_ai_to_colorvolume( volume, _id_9AC0213E4B91D0C1 )
{
    self notify( "stop_color_move" );
    self.currentcolorcode = _id_9AC0213E4B91D0C1;

    if ( !my_current_node_delays() )
        wait( randomfloatrange( 0.1, 0.25 ) );

    if ( isdefined( volume.target ) )
    {
        node = getnode( volume.target, "targetname" );

        if ( isdefined( node ) )
            self setgoalnode( node );
    }

    if ( !isdefined( self.og_color_fixednode ) )
        self.og_color_fixednode = self.fixednode;

    self.fixednode = 0;
    self setgoalvolumeauto( volume, volume scripts\engine\sp\utility::get_cover_volume_forward() );
}

issue_color_order_to_ai( _id_9AC0213E4B91D0C1, color, team, ai )
{
    _id_5931EDA50E9FFB1F = ai;
    _id_9FEFD146C838376B = isdefined( self.script_stack );
    nodes = [];
    volume = undefined;

    if ( isdefined( level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1] ) )
    {
        if ( !_id_9FEFD146C838376B )
            prioritize_colorcoded_nodes( team, _id_9AC0213E4B91D0C1, color );

        nodes = get_prioritized_colorcoded_nodes( team, _id_9AC0213E4B91D0C1, color );

        if ( _id_9FEFD146C838376B )
        {
            _id_BE808154427014B2 = scripts\engine\utility::getstruct( self.target, "targetname" );
            nodes = sortbydistance( nodes, _id_BE808154427014B2.origin );
        }

        counter = 0;
        _id_47C2F291DC4E86B3 = ai.size;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < nodes.size; _id_AC0E594AC96AA3A8++ )
        {
            node = nodes[_id_AC0E594AC96AA3A8];

            if ( isalive( node.color_user ) )
                continue;

            _id_D78A4CA8E4CCA2DE = scripts\engine\utility::getclosest( node.origin, ai );
            ai = scripts\engine\utility::array_remove( ai, _id_D78A4CA8E4CCA2DE );
            _id_D78A4CA8E4CCA2DE take_color_node( node, _id_9AC0213E4B91D0C1, self, counter );
            counter++;

            if ( !ai.size )
                return;
        }
    }
    else
    {
        volume = get_colorcoded_volume( team, _id_9AC0213E4B91D0C1 );
        scripts\engine\utility::array_thread( ai, ::send_ai_to_colorvolume, volume, _id_9AC0213E4B91D0C1 );
    }
}

take_color_node( node, _id_9AC0213E4B91D0C1, trigger, counter )
{
    self notify( "stop_color_move" );
    self.currentcolorcode = _id_9AC0213E4B91D0C1;
    thread process_color_order_to_ai( node, trigger, counter );
}

player_color_node()
{
    for (;;)
    {
        _id_9FCA2EF87A95CE38 = undefined;

        if ( !isdefined( level.player.node ) )
        {
            wait 0.05;
            continue;
        }

        _id_08B85B2B40A7EBB5 = level.player.node.color_user;
        _id_9FCA2EF87A95CE38 = level.player.node;
        _id_9FCA2EF87A95CE38.color_user = level.player;

        for (;;)
        {
            if ( !isdefined( level.player.node ) )
                break;

            if ( level.player.node != _id_9FCA2EF87A95CE38 )
                break;

            wait 0.05;
        }

        _id_9FCA2EF87A95CE38.color_user = undefined;
        _id_9FCA2EF87A95CE38 color_node_finds_a_user();
    }
}

color_node_finds_a_user()
{
    if ( isdefined( self.script_color_allies ) )
        color_node_finds_user_from_colorcodes( self.script_color_allies, "allies" );

    if ( isdefined( self.script_color_axis ) )
        color_node_finds_user_from_colorcodes( self.script_color_axis, "axis" );
}

color_node_finds_user_from_colorcodes( _id_B6579A16542684FC, team )
{
    if ( isdefined( self.color_user ) )
        return;

    _id_E659CE0031ADF776 = strtok( _id_B6579A16542684FC, " " );
    _id_E659CE0031ADF776 = array_remove_dupes( _id_E659CE0031ADF776 );
    scripts\engine\utility::array_levelthread( _id_E659CE0031ADF776, ::color_node_finds_user_for_colorcode, team );
}

color_node_finds_user_for_colorcode( _id_9AC0213E4B91D0C1, team )
{
    color = _id_9AC0213E4B91D0C1[0];

    if ( !isdefined( level.currentcolorforced[team][color] ) )
        return;

    if ( level.currentcolorforced[team][color] != _id_9AC0213E4B91D0C1 )
        return;

    ai = scripts\engine\sp\utility::get_force_color_guys( team, color );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = ai[_id_AC0E594AC96AA3A8];

        if ( guy occupies_colorcode( _id_9AC0213E4B91D0C1 ) )
            continue;

        guy take_color_node( self, _id_9AC0213E4B91D0C1 );
        return;
    }
}

occupies_colorcode( _id_9AC0213E4B91D0C1 )
{
    if ( !isdefined( self.currentcolorcode ) )
        return 0;

    return self.currentcolorcode == _id_9AC0213E4B91D0C1;
}

ai_sets_goal_with_delay( node )
{
    self endon( "death" );
    self endon( "stop_color_move" );
    my_current_node_delays();
    thread ai_sets_goal( node );
}

ai_sets_goal( node )
{
    self notify( "stop_going_to_node" );
    set_goal_and_volume( node );
    volume = level.arrays_of_colorcoded_volumes[get_team()][self.currentcolorcode];

    if ( isdefined( self.script_careful ) )
        thread careful_logic( node, volume );
}

set_goal_and_volume( node )
{
    if ( isdefined( self.colornode_func ) )
        self thread [[ self.colornode_func ]]( node );

    if ( isdefined( self._colors_go_line ) )
    {
        thread scripts\sp\anim::anim_single_queue( self, self._colors_go_line );
        self._colors_go_line = undefined;
    }

    if ( isdefined( self.colornode_setgoal_func ) )
        self thread [[ self.colornode_setgoal_func ]]( node );
    else
        self setgoalnode( node );

    if ( is_using_forcegoal_radius( node ) )
        thread forcegoal_radius( node );
    else if ( isdefined( node.radius ) && node.radius > 0 )
        self.goalradius = node.radius;

    if ( isdefined( self.og_color_fixednode ) )
    {
        self.fixednode = self.og_color_fixednode;
        self.og_color_fixednode = undefined;
    }

    volume = level.arrays_of_colorcoded_volumes[get_team()][self.currentcolorcode];

    if ( isdefined( volume ) )
        self _meth_A047A7B15F626C80( volume );
    else
        self _meth_1CE2B487DF6864F3();

    if ( isdefined( node.fixednodesaferadius ) )
        self.fixednodesaferadius = node.fixednodesaferadius;
    else if ( isdefined( level.fixednodesaferadius_default ) )
        self.fixednodesaferadius = level.fixednodesaferadius_default;
    else
        self.fixednodesaferadius = 64;
}

is_using_forcegoal_radius( node )
{
    if ( !isdefined( self.script_forcegoal ) )
        return 0;

    if ( !self.script_forcegoal )
        return 0;

    if ( !isdefined( node.fixednodesaferadius ) )
        return 0;

    if ( self.fixednode )
        return 0;
    else
        return 1;
}

forcegoal_radius( node )
{
    self endon( "death" );
    self endon( "stop_going_to_node" );
    self.goalradius = node.fixednodesaferadius;
    scripts\engine\utility::waittill_either( "goal", "damage" );

    if ( isdefined( node.radius ) && node.radius > 0 )
        self.goalradius = node.radius;
}

careful_logic( node, volume )
{
    self endon( "death" );
    self endon( "stop_being_careful" );
    self endon( "stop_going_to_node" );
    thread recover_from_careful_disable( node );

    for (;;)
    {
        wait_until_an_enemy_is_in_safe_area( node, volume );
        use_big_goal_until_goal_is_safe( node, volume );
        self.fixednode = 1;
        set_goal_and_volume( node );
    }
}

recover_from_careful_disable( node )
{
    self endon( "death" );
    self endon( "stop_going_to_node" );
    self waittill( "stop_being_careful" );
    self.fixednode = 1;
    set_goal_and_volume( node );
}

use_big_goal_until_goal_is_safe( node, volume )
{
    self setgoalpos( self.origin );
    self.goalradius = 1024;
    self.fixednode = 0;

    if ( isdefined( volume ) )
    {
        for (;;)
        {
            wait 1;

            if ( self isknownenemyinradius( node.origin, self.fixednodesaferadius ) )
                continue;

            if ( self _meth_D07C2BFB56EF016D( volume ) )
                continue;

            return;
        }
    }
    else
    {
        for (;;)
        {
            if ( !isknownenemyinradius_tmp( node.origin, self.fixednodesaferadius ) )
                return;

            wait 1;
        }
    }
}

isknownenemyinradius_tmp( _id_CA5534A90F13A4D4, _id_DAEAD71F4FE29E4F )
{
    ai = getaiarray( "axis" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( distance2d( ai[_id_AC0E594AC96AA3A8].origin, _id_CA5534A90F13A4D4 ) < _id_DAEAD71F4FE29E4F )
            return 1;
    }

    return 0;
}

wait_until_an_enemy_is_in_safe_area( node, volume )
{
    if ( isdefined( volume ) )
    {
        for (;;)
        {
            if ( self isknownenemyinradius( node.origin, self.fixednodesaferadius ) )
                return;

            if ( self _meth_D07C2BFB56EF016D( volume ) )
                return;

            wait 1;
        }
    }
    else
    {
        for (;;)
        {
            if ( isknownenemyinradius_tmp( node.origin, self.fixednodesaferadius ) )
                return;

            wait 1;
        }
    }
}

my_current_node_delays()
{
    if ( !isdefined( self.node ) )
        return 0;

    node = self.node;
    _id_038D31613EE1A416 = 0;

    if ( isdefined( node.script_flag_wait ) )
    {
        scripts\engine\utility::flag_wait( node.script_flag_wait );
        _id_038D31613EE1A416 = 1;
    }

    if ( isdefined( node._id_7FD486C78ED742F7 ) )
    {
        scripts\engine\utility::flag_waitopen( node._id_7FD486C78ED742F7 );
        _id_038D31613EE1A416 = 1;
    }

    if ( isdefined( self.script_color_delay_override ) )
    {
        wait( self.script_color_delay_override );
        _id_038D31613EE1A416 = 1;
    }
    else
        _id_038D31613EE1A416 = node scripts\engine\utility::script_delay() || _id_038D31613EE1A416;

    return _id_038D31613EE1A416;
}

process_color_order_to_ai( node, trigger, counter )
{
    thread decrementcolorusers( node );
    self endon( "stop_color_move" );
    self endon( "death" );

    if ( isdefined( trigger ) )
        trigger scripts\engine\utility::script_delay();

    if ( !my_current_node_delays() )
    {
        if ( isdefined( counter ) )
            wait( counter * randomfloatrange( 0.1, 0.25 ) );
    }

    ai_sets_goal( node );
    self.color_ordered_node_assignment = node;

    for (;;)
    {
        self waittill( "node_bad", _id_401C3A2E68AAB0FD, _id_2AA9D26E953756A0, duration );

        if ( _id_401C3A2E68AAB0FD != "taken" && _id_401C3A2E68AAB0FD != "unusable" && _id_401C3A2E68AAB0FD != "badplace" && _id_401C3A2E68AAB0FD != "path_blocked" && _id_401C3A2E68AAB0FD != "unsafe" )
            continue;

        if ( _id_401C3A2E68AAB0FD == "path_blocked" && isdefined( duration ) && duration < 2000 )
            continue;

        node = get_best_available_new_colored_node();

        if ( isdefined( node ) )
        {
            if ( isalive( self.color_node.color_user ) && self.color_node.color_user == self )
                self.color_node.color_user = undefined;

            self.color_node = node;
            node.color_user = self;
            ai_sets_goal( node );
        }
    }
}

get_best_available_colored_node()
{
    _id_9AC0213E4B91D0C1 = level.currentcolorforced[get_team()][self.script_forcecolor];
    nodes = get_prioritized_colorcoded_nodes( get_team(), _id_9AC0213E4B91D0C1, self.script_forcecolor );

    foreach ( node in nodes )
    {
        if ( self isnodeinbadplace( node ) )
            continue;

        if ( !isalive( node.color_user ) )
            return node;
    }
}

get_best_available_new_colored_node()
{
    _id_9AC0213E4B91D0C1 = level.currentcolorforced[get_team()][self.script_forcecolor];
    nodes = get_prioritized_colorcoded_nodes( get_team(), _id_9AC0213E4B91D0C1, self.script_forcecolor );

    foreach ( node in nodes )
    {
        if ( self isnodeinbadplace( node ) )
            continue;

        if ( node == self.color_node )
            continue;

        if ( !isalive( node.color_user ) )
            return node;
    }
}

process_stop_short_of_node( node )
{
    self endon( "stopScript" );
    self endon( "death" );

    if ( isdefined( self.node ) )
        return;

    if ( distance( node.origin, self.origin ) < 32 )
    {
        reached_node_but_could_not_claim_it( node );
        return;
    }

    currenttime = gettime();
    wait_for_killanimscript_or_time( 1 );
    _id_4046BF37E49E7A5C = gettime();

    if ( _id_4046BF37E49E7A5C - currenttime >= 1000 )
        reached_node_but_could_not_claim_it( node );
}

wait_for_killanimscript_or_time( timer )
{
    self endon( "killanimscript" );
    wait( timer );
}

reached_node_but_could_not_claim_it( node )
{
    ai = getaiarray();
    guy = undefined;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !isdefined( ai[_id_AC0E594AC96AA3A8].node ) )
            continue;

        if ( ai[_id_AC0E594AC96AA3A8].node != node )
            continue;

        ai[_id_AC0E594AC96AA3A8] notify( "eject_from_my_node" );
        wait 1;
        self notify( "eject_from_my_node" );
        return 1;
    }

    return 0;
}

decrementcolorusers( node )
{
    node.color_user = self;
    self.color_node = node;
    self endon( "stop_color_move" );
    self waittill( "death" );
    self.color_node.color_user = undefined;
}

colorislegit( color )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.colorlist.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( color == level.colorlist[_id_AC0E594AC96AA3A8] )
            return 1;
    }

    return 0;
}

add_volume_to_global_arrays( _id_15B3A3397A62E5F3, team )
{
    _id_E659CE0031ADF776 = strtok( _id_15B3A3397A62E5F3, " " );
    _id_E659CE0031ADF776 = array_remove_dupes( _id_E659CE0031ADF776 );

    foreach ( _id_9AC0213E4B91D0C1 in _id_E659CE0031ADF776 )
    {
        level.arrays_of_colorcoded_volumes[team][_id_9AC0213E4B91D0C1] = self;
        level.arrays_of_colorcoded_ai[team][_id_9AC0213E4B91D0C1] = [];
        level.arrays_of_colorcoded_spawners[team][_id_9AC0213E4B91D0C1] = [];
    }
}

add_node_to_global_arrays( _id_15B3A3397A62E5F3, team )
{
    self.color_user = undefined;
    _id_E659CE0031ADF776 = strtok( _id_15B3A3397A62E5F3, " " );
    _id_E659CE0031ADF776 = array_remove_dupes( _id_E659CE0031ADF776 );

    foreach ( _id_9AC0213E4B91D0C1 in _id_E659CE0031ADF776 )
    {
        if ( isdefined( level.arrays_of_colorcoded_nodes[team] ) && isdefined( level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1] ) )
        {
            level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1] = scripts\engine\utility::array_add( level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1], self );
            continue;
        }

        level.arrays_of_colorcoded_nodes[team][_id_9AC0213E4B91D0C1][0] = self;
        level.arrays_of_colorcoded_ai[team][_id_9AC0213E4B91D0C1] = [];
        level.arrays_of_colorcoded_spawners[team][_id_9AC0213E4B91D0C1] = [];
    }
}

left_color_node()
{
    if ( !isdefined( self.color_node ) )
        return;

    if ( isdefined( self.color_node.color_user ) && self.color_node.color_user == self )
        self.color_node.color_user = undefined;

    self.color_node = undefined;
    self notify( "stop_color_move" );
}

getcolornumberarray()
{
    array = [];

    if ( issubstr( self.classname, "axis" ) || issubstr( self.classname, "enemy" ) || issubstr( self.classname, "team3" ) )
    {
        array["team"] = "axis";
        array["colorTeam"] = self.script_color_axis;
    }

    if ( issubstr( self.classname, "ally" ) || self.type == "civilian" )
    {
        array["team"] = "allies";
        array["colorTeam"] = self.script_color_allies;
    }

    if ( !isdefined( array["colorTeam"] ) )
        array = undefined;

    return array;
}

removespawnerfromcolornumberarray()
{
    _id_7C6BB81B76D92C06 = getcolornumberarray();

    if ( !isdefined( _id_7C6BB81B76D92C06 ) )
        return;

    team = _id_7C6BB81B76D92C06["team"];
    _id_0A615D2447EF5635 = _id_7C6BB81B76D92C06["colorTeam"];
    colors = strtok( _id_0A615D2447EF5635, " " );
    colors = array_remove_dupes( colors );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < colors.size; _id_AC0E594AC96AA3A8++ )
        level.arrays_of_colorcoded_spawners[team][colors[_id_AC0E594AC96AA3A8]] = scripts\engine\utility::array_remove( level.arrays_of_colorcoded_spawners[team][colors[_id_AC0E594AC96AA3A8]], self );
}

add_cover_node( type )
{
    level.color_node_type_function[type][1]["allies"] = ::process_cover_node_with_last_in_mind_allies;
    level.color_node_type_function[type][1]["axis"] = ::process_cover_node_with_last_in_mind_axis;
    level.color_node_type_function[type][0]["allies"] = ::process_cover_node;
    level.color_node_type_function[type][0]["axis"] = ::process_cover_node;
}

add_path_node( type )
{
    level.color_node_type_function[type][1]["allies"] = ::process_path_node;
    level.color_node_type_function[type][0]["allies"] = ::process_path_node;
    level.color_node_type_function[type][1]["axis"] = ::process_path_node;
    level.color_node_type_function[type][0]["axis"] = ::process_path_node;
}

colornode_spawn_reinforcement( classname, _id_5E69DDE4EAA5AECC )
{
    level endon( "kill_color_replacements" );
    level endon( "kill_hidden_reinforcement_waiting" );
    _id_BFF0E26F729C5356 = spawn_hidden_reinforcement( classname, _id_5E69DDE4EAA5AECC );

    if ( isdefined( level.friendly_startup_thread ) )
        _id_BFF0E26F729C5356 thread [[ level.friendly_startup_thread ]]();

    _id_BFF0E26F729C5356 thread colornode_replace_on_death();
}

colornode_replace_on_death()
{
    level endon( "kill_color_replacements" );
    self endon( "_disable_reinforcement" );

    if ( isdefined( self.replace_on_death ) )
        return;

    self.replace_on_death = 1;
    classname = self.classname;
    color = self.script_forcecolor;
    waittillframeend;

    if ( isalive( self ) )
        self waittill( "death" );

    _id_D405A6BFA36BE1C3 = level.current_color_order;

    if ( !isdefined( self.script_forcecolor ) )
        return;

    thread colornode_spawn_reinforcement( classname, self.script_forcecolor );

    if ( isdefined( self ) && isdefined( self.script_forcecolor ) )
        color = self.script_forcecolor;

    if ( isdefined( self ) && isdefined( self.origin ) )
        origin = self.origin;

    for (;;)
    {
        if ( get_color_from_order( color, _id_D405A6BFA36BE1C3 ) == "none" )
            return;

        _id_3CBF5695BC45742E = scripts\engine\sp\utility::get_force_color_guys( "allies", _id_D405A6BFA36BE1C3[color] );

        if ( !isdefined( level.color_doesnt_care_about_classname ) )
            _id_3CBF5695BC45742E = scripts\engine\sp\utility::remove_without_classname( _id_3CBF5695BC45742E, classname );

        if ( !_id_3CBF5695BC45742E.size )
        {
            wait 2;
            continue;
        }

        _id_B7F4CD10D3EE7318 = scripts\engine\utility::getclosest( level.player.origin, _id_3CBF5695BC45742E );
        waittillframeend;

        if ( !isalive( _id_B7F4CD10D3EE7318 ) )
            continue;

        _id_B7F4CD10D3EE7318 scripts\engine\sp\utility::set_force_color( color );

        if ( isdefined( level.friendly_promotion_thread ) )
            _id_B7F4CD10D3EE7318 [[ level.friendly_promotion_thread ]]( color );

        color = _id_D405A6BFA36BE1C3[color];
    }
}

get_color_from_order( color, _id_D405A6BFA36BE1C3 )
{
    if ( !isdefined( color ) )
        return "none";

    if ( !isdefined( _id_D405A6BFA36BE1C3 ) )
        return "none";

    if ( !isdefined( _id_D405A6BFA36BE1C3[color] ) )
        return "none";

    return _id_D405A6BFA36BE1C3[color];
}

friendly_spawner_vision_checker()
{
    level.friendly_respawn_vision_checker_thread = 1;
    _id_AA5411BE41E77330 = 0;

    for (;;)
    {
        for (;;)
        {
            if ( !respawn_friendlies_without_vision_check() )
                break;

            wait 0.05;
        }

        wait 1;

        if ( !isdefined( level.respawn_spawner_org ) )
            continue;

        _id_F5244B7B7572887F = level.player.origin - level.respawn_spawner_org;

        if ( length( _id_F5244B7B7572887F ) < 200 )
        {
            player_sees_spawner();
            continue;
        }

        forward = anglestoforward( ( 0, level.player getplayerangles()[1], 0 ) );
        _id_2A83DF6C49112D96 = vectornormalize( _id_F5244B7B7572887F );
        dot = vectordot( forward, _id_2A83DF6C49112D96 );

        if ( dot < 0.2 )
        {
            player_sees_spawner();
            continue;
        }

        _id_AA5411BE41E77330++;

        if ( _id_AA5411BE41E77330 < 3 )
            continue;

        scripts\engine\utility::flag_set( "player_looks_away_from_spawner" );
    }
}

get_color_spawner( classname, _id_5E69DDE4EAA5AECC )
{
    if ( isdefined( self.color_respawn_spawner ) )
        return self.color_respawn_spawner;

    if ( isdefined( classname ) )
    {
        if ( !isdefined( level._color_friendly_spawners[classname] ) )
        {
            spawners = _func_4570A5E1C6E3BDED( "allies" );

            foreach ( spawner in spawners )
            {
                if ( spawner.classname != classname )
                    continue;

                if ( !isdefined( spawner.script_forcecolor ) )
                    continue;

                if ( spawner.script_forcecolor != _id_5E69DDE4EAA5AECC )
                    continue;

                level._color_friendly_spawners[classname] = spawner;
                break;
            }
        }
    }

    if ( !isdefined( classname ) )
    {
        spawners = [];

        foreach ( spawner in level._color_friendly_spawners )
        {
            if ( spawner.script_forcecolor != _id_5E69DDE4EAA5AECC )
                continue;

            spawners[spawners.size] = spawner;
        }

        spawner = scripts\engine\utility::random( spawners );

        if ( !isdefined( spawner ) )
        {
            spawners = [];

            foreach ( index, spawner in level._color_friendly_spawners )
            {
                if ( isdefined( spawner ) )
                    spawners[index] = spawner;
            }

            level._color_friendly_spawners = spawners;
            return scripts\engine\utility::random( level._color_friendly_spawners );
        }

        return spawner;
    }

    return level._color_friendly_spawners[classname];
}

respawn_friendlies_without_vision_check()
{
    if ( isdefined( level.respawn_friendlies_force_vision_check ) )
        return 0;

    return scripts\engine\utility::flag( "respawn_friendlies" );
}

wait_until_vision_check_satisfied_or_disabled()
{
    if ( scripts\engine\utility::flag( "player_looks_away_from_spawner" ) )
        return;

    level endon( "player_looks_away_from_spawner" );

    for (;;)
    {
        if ( respawn_friendlies_without_vision_check() )
            return;

        wait 0.05;
    }
}

spawn_hidden_reinforcement( classname, _id_5E69DDE4EAA5AECC )
{
    level endon( "kill_color_replacements" );
    level endon( "kill_hidden_reinforcement_waiting" );
    spawn = undefined;

    for (;;)
    {
        if ( !respawn_friendlies_without_vision_check() )
        {
            if ( !isdefined( level.friendly_respawn_vision_checker_thread ) )
                thread friendly_spawner_vision_checker();

            for (;;)
            {
                wait_until_vision_check_satisfied_or_disabled();
                scripts\engine\utility::flag_waitopen( "friendly_spawner_locked" );

                if ( scripts\engine\utility::flag( "player_looks_away_from_spawner" ) || respawn_friendlies_without_vision_check() )
                    break;
            }

            scripts\engine\utility::flag_set( "friendly_spawner_locked" );
        }

        spawner = get_color_spawner( classname, _id_5E69DDE4EAA5AECC );
        spawner.count = 1;
        _id_08CD36BD39A56558 = spawner.origin;
        spawner.origin = level.respawn_spawner_org;
        scripts\engine\utility::script_delay();
        spawn = spawner _meth_514FCB5326AE8D5F();
        spawner.origin = _id_08CD36BD39A56558;

        if ( scripts\common\ai::spawn_failed( spawn ) )
        {
            thread lock_spawner_for_awhile();
            wait 1;
            continue;
        }

        level notify( "reinforcement_spawned", spawn );
        break;
    }

    for (;;)
    {
        if ( !isdefined( _id_5E69DDE4EAA5AECC ) )
            break;

        if ( get_color_from_order( _id_5E69DDE4EAA5AECC, level.current_color_order ) == "none" )
            break;

        _id_5E69DDE4EAA5AECC = level.current_color_order[_id_5E69DDE4EAA5AECC];
    }

    if ( isdefined( _id_5E69DDE4EAA5AECC ) )
        spawn scripts\engine\sp\utility::set_force_color( _id_5E69DDE4EAA5AECC );

    thread lock_spawner_for_awhile();
    return spawn;
}

lock_spawner_for_awhile()
{
    scripts\engine\utility::flag_set( "friendly_spawner_locked" );

    if ( isdefined( level.friendly_respawn_lock_func ) )
        [[ level.friendly_respawn_lock_func ]]();
    else
        wait 2;

    scripts\engine\utility::flag_clear( "friendly_spawner_locked" );
}

player_sees_spawner()
{
    _id_AA5411BE41E77330 = 0;
    scripts\engine\utility::flag_clear( "player_looks_away_from_spawner" );
}

kill_color_replacements()
{
    scripts\engine\utility::flag_clear( "friendly_spawner_locked" );
    level notify( "kill_color_replacements" );
    ai = getaiarray();
    scripts\engine\utility::array_thread( ai, ::remove_replace_on_death );
}

remove_replace_on_death()
{
    self.replace_on_death = undefined;
}

get_team( team )
{
    if ( isdefined( self.team ) && !isdefined( team ) )
        team = self.team;

    return level.color_teams[team];
}
