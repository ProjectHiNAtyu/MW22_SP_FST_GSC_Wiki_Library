// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

gunner_think( turret )
{
    if ( !isdefined( level.shared_portable_turrets ) )
        level.shared_portable_turrets = [];

    self endon( "death" );
    self notify( "end_mg_behavior" );
    self endon( "end_mg_behavior" );
    self.can_fire_turret = 1;
    self.wants_to_fire = 0;

    if ( !scripts\sp\mgturret::use_the_turret( turret ) )
    {
        self notify( "continue_cover_script" );
        return;
    }

    self.last_enemy_sighting_position = undefined;
    thread record_enemy_sightings();
    forward = anglestoforward( turret.angles );
    ent = spawn( "script_origin", ( 0, 0, 0 ) );
    thread target_ent_cleanup( ent );
    ent.origin = turret.origin + forward * 500;

    if ( isdefined( self.last_enemy_sighting_position ) )
        ent.origin = self.last_enemy_sighting_position;

    turret settargetentity( ent );
    enemy = undefined;

    for (;;)
    {
        if ( !isalive( self.current_enemy ) )
        {
            stop_firing();
            self waittill( "new_enemy" );
        }

        start_firing();
        shoot_enemy_until_he_hides_then_shoot_wall( ent );

        if ( !isalive( self.current_enemy ) )
            continue;

        if ( self cansee( self.current_enemy ) )
            continue;

        self waittill( "saw_enemy" );
    }
}

target_ent_cleanup( ent )
{
    scripts\engine\utility::waittill_either( "death", "end_mg_behavior" );
    ent delete();
}

shoot_enemy_until_he_hides_then_shoot_wall( ent )
{
    self endon( "death" );
    self endon( "new_enemy" );
    self.current_enemy endon( "death" );
    enemy = self.current_enemy;

    while ( self cansee( enemy ) )
    {
        angles = vectortoangles( enemy geteye() - ent.origin );
        angles = anglestoforward( angles );
        ent moveto( ent.origin + angles * 12, 0.1 );
        wait 0.1;
    }

    if ( isplayer( enemy ) )
    {
        self endon( "saw_enemy" );
        _id_C2F4EC03C9EC610E = enemy geteye();
        angles = vectortoangles( _id_C2F4EC03C9EC610E - ent.origin );
        angles = anglestoforward( angles );
        _id_5E6CE37BB5C4ACD9 = 150;
        timer = distance( ent.origin, self.last_enemy_sighting_position ) / _id_5E6CE37BB5C4ACD9;

        if ( timer > 0 )
        {
            ent moveto( self.last_enemy_sighting_position, timer );
            wait( timer );
        }

        org = ent.origin + angles * 180;
        _id_E5D77BF46A926594 = get_suppress_point( self geteye(), ent.origin, org );

        if ( !isdefined( _id_E5D77BF46A926594 ) )
            _id_E5D77BF46A926594 = ent.origin;

        ent moveto( ent.origin + angles * 80 + ( 0, 0, randomfloatrange( 15, 50 ) * -1 ), 3, 1, 1 );
        wait 3.5;
        ent moveto( _id_E5D77BF46A926594 + angles * -20, 3, 1, 1 );
    }

    wait( randomfloatrange( 2.5, 4 ) );
    stop_firing();
}

set_firing( val )
{
    if ( val )
    {
        self.can_fire_turret = 1;

        if ( self.wants_to_fire )
            self.turret notify( "startfiring" );
    }
    else
    {
        self.can_fire_turret = 0;
        self.turret notify( "stopfiring" );
    }
}

stop_firing()
{
    self.wants_to_fire = 0;
    self.turret notify( "stopfiring" );
}

start_firing()
{
    self.wants_to_fire = 1;

    if ( self.can_fire_turret )
        self.turret notify( "startfiring" );
}

create_mg_team()
{
    if ( isdefined( level.mg_gunner_team ) )
    {
        level.mg_gunner_team[level.mg_gunner_team.size] = self;
        return;
    }

    level.mg_gunner_team = [];
    level.mg_gunner_team[level.mg_gunner_team.size] = self;
    waittillframeend;
    ent = spawnstruct();
    scripts\engine\utility::array_thread( level.mg_gunner_team, ::mg_gunner_death_notify, ent );
    array = level.mg_gunner_team;
    level.mg_gunner_team = undefined;
    ent waittill( "gunner_died" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !isalive( array[_id_AC0E594AC96AA3A8] ) )
            continue;

        array[_id_AC0E594AC96AA3A8] notify( "stop_using_built_in_burst_fire" );
        array[_id_AC0E594AC96AA3A8] thread solo_fires();
    }
}

mg_gunner_death_notify( ent )
{
    self waittill( "death" );
    ent notify( "gunner_died" );
}

solo_firing( _id_4583761E006C72D8 )
{
    _id_EF3A46BA5A537CE6 = undefined;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_4583761E006C72D8.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !isalive( _id_4583761E006C72D8[_id_AC0E594AC96AA3A8] ) )
            continue;

        _id_EF3A46BA5A537CE6 = _id_4583761E006C72D8[_id_AC0E594AC96AA3A8];
        break;
    }

    if ( !isdefined( _id_EF3A46BA5A537CE6 ) )
        return;
}

solo_fires()
{
    self endon( "death" );

    for (;;)
    {
        self.turret startfiring();
        wait( randomfloatrange( 0.3, 0.7 ) );
        self.turret stopfiring();
        wait( randomfloatrange( 0.1, 1.1 ) );
    }
}

dual_firing( _id_4583761E006C72D8 )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_4583761E006C72D8.size; _id_AC0E594AC96AA3A8++ )
        _id_4583761E006C72D8[_id_AC0E594AC96AA3A8] endon( "death" );

    a = 0;
    b = 1;

    for (;;)
    {
        if ( isalive( _id_4583761E006C72D8[a] ) )
            _id_4583761E006C72D8[a] set_firing( 1 );

        if ( isalive( _id_4583761E006C72D8[b] ) )
            _id_4583761E006C72D8[b] set_firing( 0 );

        c = a;
        a = b;
        b = c;
        wait( randomfloatrange( 2.3, 3.5 ) );
    }
}

get_suppress_point( origin, _id_7FE710B31B2B752D, _id_7636B8DC247C7CB4 )
{
    traces = distance( _id_7FE710B31B2B752D, _id_7636B8DC247C7CB4 ) * 0.05;

    if ( traces < 5 )
        traces = 5;

    if ( traces > 20 )
        traces = 20;

    _id_151E2425C0A5F5C9 = _id_7636B8DC247C7CB4 - _id_7FE710B31B2B752D;
    _id_151E2425C0A5F5C9 = ( _id_151E2425C0A5F5C9[0] / traces, _id_151E2425C0A5F5C9[1] / traces, _id_151E2425C0A5F5C9[2] / traces );
    offset = ( 0, 0, 0 );
    _id_D067ACF8720BED6B = undefined;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < traces + 2; _id_AC0E594AC96AA3A8++ )
    {
        trace = scripts\engine\trace::_bullet_trace( origin, _id_7FE710B31B2B752D + offset, 0, undefined );

        if ( trace["fraction"] < 1 )
        {
            _id_D067ACF8720BED6B = trace["position"];
            break;
        }

        offset = offset + _id_151E2425C0A5F5C9;
    }

    return _id_D067ACF8720BED6B;
}

record_enemy_sightings()
{
    self endon( "death" );
    self endon( "end_mg_behavior" );
    self.current_enemy = undefined;

    for (;;)
    {
        record_sighting();
        wait 0.05;
    }
}

record_sighting()
{
    if ( !isalive( self.enemy ) )
        return;

    if ( !self cansee( self.enemy ) )
        return;

    self.last_enemy_sighting_position = self.enemy geteye();
    self notify( "saw_enemy" );

    if ( !isalive( self.current_enemy ) || self.current_enemy != self.enemy )
    {
        self.current_enemy = self.enemy;
        self notify( "new_enemy" );
    }
}
