// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

structarray_swap( _id_DA48C1FC42FA964D, _id_DA48BEFC42FA8FB4 )
{
    _id_5A488D6BAE780D02 = _id_DA48C1FC42FA964D.struct_array_index;
    _id_5A488C6BAE780ACF = _id_DA48BEFC42FA8FB4.struct_array_index;
    self.array[_id_5A488C6BAE780ACF] = _id_DA48C1FC42FA964D;
    self.array[_id_5A488D6BAE780D02] = _id_DA48BEFC42FA8FB4;
    self.array[_id_5A488D6BAE780D02].struct_array_index = _id_5A488D6BAE780D02;
    self.array[_id_5A488C6BAE780ACF].struct_array_index = _id_5A488C6BAE780ACF;
}

wait_until_done_speaking()
{
    self endon( "death" );
    self endon( "removed from battleChatter" );

    while ( self.battlechatter.isspeaking )
        wait 0.05;
}

wait_for_trigger_think( ent )
{
    self endon( "death" );
    ent endon( "trigger" );
    self waittill( "trigger" );
    ent notify( "trigger" );
}

wait_for_trigger( msg, type )
{
    triggers = getentarray( msg, type );
    ent = spawnstruct();
    scripts\engine\utility::array_thread( triggers, ::wait_for_trigger_think, ent );
    ent waittill( "trigger" );
}

ent_waits_for_trigger( trigger )
{
    self endon( "done" );
    trigger waittill( "trigger" );
    self notify( "done" );
}

update_debug_friendlycolor_on_death()
{
    self notify( "debug_color_update" );
    self endon( "debug_color_update" );
    num = self.unique_id;
    self waittill( "death" );
    level.debug_color_friendlies[num] = undefined;
    level notify( "updated_color_friendlies" );
}

update_debug_friendlycolor( num )
{
    thread update_debug_friendlycolor_on_death();

    if ( isdefined( self.script_forcecolor ) )
        level.debug_color_friendlies[num] = self.script_forcecolor;
    else
        level.debug_color_friendlies[num] = undefined;

    level notify( "updated_color_friendlies" );
}

insure_player_does_not_set_forcecolor_twice_in_one_frame()
{

}

new_color_being_set( color )
{
    self notify( "new_color_being_set" );
    self.new_force_color_being_set = 1;
    scripts\sp\colors::left_color_node();
    self endon( "new_color_being_set" );
    self endon( "death" );
    waittillframeend;
    waittillframeend;

    if ( isdefined( self.script_forcecolor ) )
    {
        self.currentcolorcode = level.currentcolorforced[scripts\sp\colors::get_team()][self.script_forcecolor];

        if ( isdefined( self.dontcolormove ) )
            self.dontcolormove = undefined;
        else
            thread scripts\sp\colors::goto_current_colorindex();
    }

    self.new_force_color_being_set = undefined;
    self notify( "done_setting_new_color" );
}

waittill_either_function_internal( ent, func, _id_CB7C0D9EDAF5B753 )
{
    ent endon( "done" );
    [[ func ]]( _id_CB7C0D9EDAF5B753 );
    ent notify( "done" );
}

hintprintbreakout( string, _id_EEE718E33217DC9E )
{
    self endon( "hint_print_timeout" );
    self endon( "hint_print_remove" );
    _id_EEE718E33217DC9E endon( "new_hint" );

    for (;;)
    {
        self.fadeout = 1;

        if ( isdefined( level.hint_breakfunc ) && [[ level.hint_breakfunc ]]() || _id_EEE718E33217DC9E.current_global_hint != string )
            break;

        wait 0.05;
    }
}

hint_timeout( timeout )
{
    wait( timeout );
    self.fadeout = 1;
    self notify( "hint_print_timeout" );
}

destroy_hint_on_endon( _id_D136CF00DA26018C, _id_F63C23B8EC55B127 )
{
    self endon( "removing_hint" );

    if ( isarray( _id_D136CF00DA26018C ) || isarray( _id_F63C23B8EC55B127 ) )
        destroy_hint_on_endon_proc( _id_D136CF00DA26018C, _id_F63C23B8EC55B127 );
    else
        _id_D136CF00DA26018C[0] waittill( _id_F63C23B8EC55B127[0] );

    self.fadeout = 1;
    self notify( "hint_print_remove" );
}

destroy_hint_on_endon_proc( _id_D136CF00DA26018C, _id_F63C23B8EC55B127 )
{
    if ( !isarray( _id_D136CF00DA26018C ) )
        _id_D136CF00DA26018C = [ _id_D136CF00DA26018C ];

    if ( !isarray( _id_F63C23B8EC55B127 ) )
        _id_F63C23B8EC55B127 = [ _id_F63C23B8EC55B127 ];

    foreach ( entity in _id_D136CF00DA26018C )
    {
        foreach ( message in _id_F63C23B8EC55B127 )
            entity endon( message );
    }

    level waittill( "forever" );
}

hint_stick_get_updated( _id_1882AEF40F9667EC, _id_ACAB0EEB825B3104, _id_25539B81D3D13728, _id_F7112F5FE7D7DB66, _id_5DDB198F4A48726F, _id_BC849FB8C8B9C951, _id_77F44FF27B22EAFC )
{
    return _id_1882AEF40F9667EC + _hint_stick_get_config_suffix( _id_ACAB0EEB825B3104, _id_25539B81D3D13728, _id_F7112F5FE7D7DB66, _id_5DDB198F4A48726F, _id_BC849FB8C8B9C951, _id_77F44FF27B22EAFC );
}

_hint_stick_get_config_suffix( _id_ACAB0EEB825B3104, _id_25539B81D3D13728, _id_F7112F5FE7D7DB66, _id_5DDB198F4A48726F, _id_BC849FB8C8B9C951, _id_77F44FF27B22EAFC )
{
    config = _func_1B7EDAC07FDAEA54();

    if ( level.player scripts\engine\utility::is_player_gamepad_enabled() )
    {
        if ( level.player isps4player() )
        {
            if ( issubstr( config, "southpaw" ) || _id_77F44FF27B22EAFC && issubstr( config, "legacy" ) )
                return _id_BC849FB8C8B9C951;
            else
                return _id_5DDB198F4A48726F;
        }
        else if ( issubstr( config, "southpaw" ) || _id_77F44FF27B22EAFC && issubstr( config, "legacy" ) )
            return _id_F7112F5FE7D7DB66;
        else
            return _id_25539B81D3D13728;
    }
    else
        return _id_ACAB0EEB825B3104;
}

_hint_stick_update_breakfunc( config, _id_1882AEF40F9667EC )
{
    _id_69F0D90BF505B731 = _id_1882AEF40F9667EC + config;
    _id_6969C6CEFB309722 = level.trigger_hint_func[_id_69F0D90BF505B731];
    level.hint_breakfunc = _id_6969C6CEFB309722;
}

_hint_stick_update_string( config, _id_1882AEF40F9667EC )
{
    _id_69F0D90BF505B731 = _id_1882AEF40F9667EC + config;
    _id_03B770BC38388A03 = level.trigger_hint_string[_id_69F0D90BF505B731];
    player = scripts\engine\sp\utility::get_player_from_self();
    player sethudtutorialmessage( _id_03B770BC38388A03 );
}

hint_stick_update( _id_1882AEF40F9667EC, _id_ACAB0EEB825B3104, _id_25539B81D3D13728, _id_F7112F5FE7D7DB66, _id_5DDB198F4A48726F, _id_BC849FB8C8B9C951, _id_77F44FF27B22EAFC )
{
    level notify( "hint_change_config" );
    level endon( "hint_change_config" );
    config = _hint_stick_get_config_suffix( _id_ACAB0EEB825B3104, _id_25539B81D3D13728, _id_F7112F5FE7D7DB66, _id_5DDB198F4A48726F, _id_BC849FB8C8B9C951, _id_77F44FF27B22EAFC );

    while ( isdefined( level.current_hint_active ) && level.current_hint_active )
    {
        _id_ACDA5263FC0969E0 = _hint_stick_get_config_suffix( _id_ACAB0EEB825B3104, _id_25539B81D3D13728, _id_F7112F5FE7D7DB66, _id_5DDB198F4A48726F, _id_BC849FB8C8B9C951, _id_77F44FF27B22EAFC );

        if ( _id_ACDA5263FC0969E0 != config )
        {
            config = _id_ACDA5263FC0969E0;
            _hint_stick_update_breakfunc( config, _id_1882AEF40F9667EC );
            _hint_stick_update_string( config, _id_1882AEF40F9667EC );
        }

        waitframe();
    }
}

hintprint( string, _id_6969C6CEFB309722, timeout, mintime, _id_C2B1CAADA7514269, _id_D136CF00DA26018C, _id_F63C23B8EC55B127 )
{
    self notify( "new_hint" );

    if ( getdvarint( "dvar_76AF6BC866243118" ) > 0 )
        return;

    start_time = gettime();

    if ( !isdefined( mintime ) )
        mintime = 0;

    if ( !isalive( self ) )
        return;

    scripts\engine\utility::ent_flag_waitopen( "global_hint_in_use" );

    if ( isdefined( self.current_global_hint ) )
    {
        if ( self.current_global_hint == string )
            return;
        else
        {
            self.current_global_hint = string;
            scripts\engine\utility::ent_flag_set( "global_hint_in_use" );
            wait 0.05;
        }
    }

    self.current_global_hint = string;
    scripts\engine\utility::ent_flag_set( "global_hint_in_use" );
    level.current_hint_active = 1;
    level.hint_breakfunc = _id_6969C6CEFB309722;
    level endon( "friendlyfire_mission_fail" );

    if ( !isdefined( _id_C2B1CAADA7514269 ) )
        _id_C2B1CAADA7514269 = 1;

    self sethudtutorialmessage( string, _id_C2B1CAADA7514269 );
    _id_CC329768A98F8DAD = spawnstruct();
    _id_CC329768A98F8DAD.fadeout = 0;

    if ( isdefined( timeout ) )
        _id_CC329768A98F8DAD thread hint_timeout( timeout );

    _id_CC329768A98F8DAD thread destroy_hint_on_friendlyfire();
    _id_CC329768A98F8DAD thread destroy_hint_on_player_death();

    if ( isdefined( _id_D136CF00DA26018C ) && isdefined( _id_F63C23B8EC55B127 ) )
        _id_CC329768A98F8DAD thread destroy_hint_on_endon( _id_D136CF00DA26018C, _id_F63C23B8EC55B127 );

    _id_CC329768A98F8DAD hintprintbreakout( string, self );

    if ( !istrue( _id_CC329768A98F8DAD.fadeout ) )
        self clearhudtutorialmessage( 1 );

    scripts\engine\sp\utility::wait_for_buffer_time_to_pass( start_time, mintime );
    _id_CC329768A98F8DAD notify( "removing_hint" );
    self.current_global_hint = undefined;

    if ( _id_CC329768A98F8DAD.fadeout )
        self clearhudtutorialmessage();

    level.current_hint_active = 0;
    scripts\engine\utility::ent_flag_clear( "global_hint_in_use" );
}

destroy_hint_on_friendlyfire( hint )
{
    self endon( "removing_hint" );
    level waittill( "friendlyfire_mission_fail" );
    self.fadeout = 1;
    self notify( "hint_print_remove" );
}

destroy_hint_on_player_death( hint )
{
    self endon( "removing_hint" );
    level.player waittill( "death" );
    self.fadeout = 1;
    self notify( "hint_print_remove" );
}

function_stack_wait( _id_090714D802CC091F )
{
    self endon( "death" );
    _id_090714D802CC091F scripts\engine\utility::waittill_either( "function_done", "death" );
}

function_stack_wait_finish( _id_090714D802CC091F )
{
    function_stack_wait( _id_090714D802CC091F );

    if ( !isdefined( self ) )
        return 0;

    if ( !issentient( self ) )
        return 1;

    if ( isalive( self ) )
        return 1;

    return 0;
}

function_stack_proc( caller, func, param1, param2, param3, param4, param5 )
{
    self endon( "death" );

    if ( !isdefined( caller.function_stack ) )
        caller.function_stack = [];

    caller.function_stack[caller.function_stack.size] = self;
    thread function_stack_self_death( caller );
    function_stack_caller_waits_for_turn( caller );

    if ( isdefined( caller ) && isdefined( caller.function_stack ) )
    {
        self.function_stack_func_begun = 1;
        self notify( "function_stack_func_begun" );

        if ( isdefined( param5 ) )
            caller [[ func ]]( param1, param2, param3, param4, param5 );
        else if ( isdefined( param4 ) )
            caller [[ func ]]( param1, param2, param3, param4 );
        else if ( isdefined( param3 ) )
            caller [[ func ]]( param1, param2, param3 );
        else if ( isdefined( param2 ) )
            caller [[ func ]]( param1, param2 );
        else if ( isdefined( param1 ) )
            caller [[ func ]]( param1 );
        else
            caller [[ func ]]();

        if ( isdefined( caller ) && isdefined( caller.function_stack ) )
        {
            caller.function_stack = scripts\engine\utility::array_remove( caller.function_stack, self );
            caller notify( "level_function_stack_ready" );
        }
    }

    if ( isdefined( self ) )
    {
        self.function_stack_func_begun = 0;
        self notify( "function_done" );
    }
}

function_stack_self_death( caller )
{
    self endon( "function_done" );
    self waittill( "death" );

    if ( isdefined( caller ) )
    {
        caller.function_stack = scripts\engine\utility::array_remove( caller.function_stack, self );
        caller notify( "level_function_stack_ready" );
    }
}

function_stack_caller_waits_for_turn( caller )
{
    caller endon( "death" );
    self endon( "death" );
    caller endon( "clear_function_stack" );

    while ( caller.function_stack[0] != self )
        caller waittill( "level_function_stack_ready" );
}

array_waitlogic1( ent, msg, timeout )
{
    array_waitlogic2( ent, msg, timeout );
    self._array_wait = 0;
    self notify( "_array_wait" );
}

array_waitlogic2( ent, msg, timeout )
{
    ent endon( msg );
    ent endon( "death" );

    if ( isdefined( timeout ) )
        wait( timeout );
    else
        ent waittill( msg );
}

exec_call( func )
{
    if ( func.parms.size == 0 )
        func.caller call [[ func.func ]]();
    else if ( func.parms.size == 1 )
        func.caller call [[ func.func ]]( func.parms[0] );
    else if ( func.parms.size == 2 )
        func.caller call [[ func.func ]]( func.parms[0], func.parms[1] );
    else if ( func.parms.size == 3 )
        func.caller call [[ func.func ]]( func.parms[0], func.parms[1], func.parms[2] );

    if ( func.parms.size == 4 )
        func.caller call [[ func.func ]]( func.parms[0], func.parms[1], func.parms[2], func.parms[3] );

    if ( func.parms.size == 5 )
        func.caller call [[ func.func ]]( func.parms[0], func.parms[1], func.parms[2], func.parms[3], func.parms[4] );
}

exec_call_noself( func )
{
    if ( func.parms.size == 0 )
        call [[ func.func ]]();
    else if ( func.parms.size == 1 )
        call [[ func.func ]]( func.parms[0] );
    else if ( func.parms.size == 2 )
        call [[ func.func ]]( func.parms[0], func.parms[1] );
    else if ( func.parms.size == 3 )
        call [[ func.func ]]( func.parms[0], func.parms[1], func.parms[2] );

    if ( func.parms.size == 4 )
        call [[ func.func ]]( func.parms[0], func.parms[1], func.parms[2], func.parms[3] );

    if ( func.parms.size == 5 )
        call [[ func.func ]]( func.parms[0], func.parms[1], func.parms[2], func.parms[3], func.parms[4] );
}

exec_func( func, _id_BA7E8AD2868EF874 )
{
    if ( !isdefined( func.caller ) )
        return;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_BA7E8AD2868EF874.size; _id_AC0E594AC96AA3A8++ )
        _id_BA7E8AD2868EF874[_id_AC0E594AC96AA3A8].caller endon( _id_BA7E8AD2868EF874[_id_AC0E594AC96AA3A8].ender );

    if ( func.parms.size == 0 )
        func.caller [[ func.func ]]();
    else if ( func.parms.size == 1 )
        func.caller [[ func.func ]]( func.parms[0] );
    else if ( func.parms.size == 2 )
        func.caller [[ func.func ]]( func.parms[0], func.parms[1] );
    else if ( func.parms.size == 3 )
        func.caller [[ func.func ]]( func.parms[0], func.parms[1], func.parms[2] );

    if ( func.parms.size == 4 )
        func.caller [[ func.func ]]( func.parms[0], func.parms[1], func.parms[2], func.parms[3] );

    if ( func.parms.size == 5 )
        func.caller [[ func.func ]]( func.parms[0], func.parms[1], func.parms[2], func.parms[3], func.parms[4] );
}

waittill_func_ends( func, _id_BA7E8AD2868EF874 )
{
    self endon( "all_funcs_ended" );
    self endon( "any_funcs_aborted" );
    exec_func( func, _id_BA7E8AD2868EF874 );
    self.count--;
    self notify( "func_ended" );
}

waittill_abort_func_ends( func, _id_BA7E8AD2868EF874 )
{
    self endon( "all_funcs_ended" );
    self endon( "any_funcs_aborted" );
    exec_func( func, _id_BA7E8AD2868EF874 );
    self.abort_count--;
    self notify( "abort_func_ended" );
}

do_abort( array )
{
    self endon( "all_funcs_ended" );

    if ( !array.size )
        return;

    _id_FF009ED2DEBC01C4 = 0;
    self.abort_count = array.size;
    _id_BA7E8AD2868EF874 = [];
    scripts\engine\utility::array_levelthread( array, ::waittill_abort_func_ends, _id_BA7E8AD2868EF874 );

    for (;;)
    {
        if ( self.abort_count <= _id_FF009ED2DEBC01C4 )
            break;

        self waittill( "abort_func_ended" );
    }

    self notify( "any_funcs_aborted" );
}

translate_local_on_ent( entity )
{
    if ( isdefined( self.forward ) )
    {
        forward = anglestoforward( entity.angles );
        entity.origin = entity.origin + forward * self.forward;
    }

    if ( isdefined( self.right ) )
    {
        right = anglestoright( entity.angles );
        entity.origin = entity.origin + right * self.right;
    }

    if ( isdefined( self.up ) )
    {
        up = anglestoup( entity.angles );
        entity.origin = entity.origin + up * self.up;
    }

    if ( isdefined( self.yaw ) )
        entity addyaw( self.yaw );

    if ( isdefined( self.pitch ) )
        entity addpitch( self.pitch );

    if ( isdefined( self.roll ) )
        entity addroll( self.roll );
}

dynamic_run_speed_thread( _id_90F9773EF140E661, minspeed, _id_1B69369ED5CB9124, maxspeed, _id_A765F9B570E8F8CC, _id_81EC67164BE866BD, _id_1124265EE011BB02 )
{
    self endon( "death" );
    self endon( "stop_dynamic_run_speed" );
    _id_90F9773EF140E661 endon( "death" );
    scale = 1;
    dir = anglestoforward( self.angles );
    self._id_12D200F2D1DA993B = 0;

    for (;;)
    {
        goalpos = dynamic_run_speed_goalpos();

        if ( distancesquared( goalpos, self.origin ) > 0 )
        {
            _id_FBBD821088EEBC76 = scripts\engine\utility::flat_origin( goalpos );
            _id_CC168975165B8F05 = scripts\engine\utility::flat_origin( self.origin );

            if ( distancesquared( _id_FBBD821088EEBC76, _id_CC168975165B8F05 ) > 100 )
                dir = vectornormalize( _id_FBBD821088EEBC76 - _id_CC168975165B8F05 );

            midpos = self.origin + dir * _id_81EC67164BE866BD;
            relativedir = vectornormalize( _id_90F9773EF140E661.origin - midpos );
            dot = vectordot( relativedir, dir );

            if ( dot > 0 )
                dynamic_run_speed_set( _id_90F9773EF140E661, _id_A765F9B570E8F8CC, _id_81EC67164BE866BD, dir, maxspeed, _id_1B69369ED5CB9124, 0 );
            else
                dynamic_run_speed_set( _id_90F9773EF140E661, _id_81EC67164BE866BD, _id_1124265EE011BB02, dir, _id_1B69369ED5CB9124, minspeed, 1 );
        }

        waitframe();
    }
}

dynamic_run_speed_set( _id_90F9773EF140E661, _id_F945F5534FFEDF42, _id_1124265EE011BB02, dir, maxspeed, minspeed, _id_CD4C4EE83C320FDD )
{
    _id_2F189297023D95BC = vectortoangles( dir );
    _id_A49AD51491362E06 = anglestoright( _id_2F189297023D95BC );
    _id_B9CE53DAD043E9E4 = self.origin + dir * _id_F945F5534FFEDF42;
    _id_1C3718B75DEF5EA4 = self.origin + dir * _id_1124265EE011BB02;
    _id_1925D24D0AE333E6 = pointonsegmentnearesttopoint( _id_B9CE53DAD043E9E4, _id_1C3718B75DEF5EA4, _id_90F9773EF140E661.origin );
    dist = distance( _id_B9CE53DAD043E9E4, _id_1925D24D0AE333E6 );
    totaldist = _id_F945F5534FFEDF42 - _id_1124265EE011BB02;
    scale = 1 - scripts\engine\math::lerp_fraction( 0, abs( totaldist ), dist );
    speed = scripts\engine\math::lerp( minspeed, maxspeed, scale );
    speed = clamp( speed, 23, 250 );

    if ( _id_CD4C4EE83C320FDD && speed <= 30 )
    {
        if ( !istrue( self._id_12D200F2D1DA993B ) )
        {
            scripts\engine\utility::set_movement_speed( 0 );
            self._id_12D200F2D1DA993B = 1;
        }
    }
    else
    {
        if ( istrue( self._id_12D200F2D1DA993B ) )
        {
            self notify( "stop_dynamicRunSpeedWait" );
            self._id_12D200F2D1DA993B = undefined;
        }

        if ( istrue( self._id_4E81809E9CD9B0B7 ) )
        {
            if ( speed <= 30 )
            {
                if ( !istrue( self._id_E8EEE9E6CF7708E0 ) )
                    self._id_E8EEE9E6CF7708E0 = gettime() + 800;

                speed = 0;
            }

            if ( istrue( self._id_E8EEE9E6CF7708E0 ) )
            {
                if ( gettime() <= self._id_E8EEE9E6CF7708E0 )
                    speed = 0;
                else
                    self._id_E8EEE9E6CF7708E0 = undefined;
            }
        }

        scripts\engine\utility::set_movement_speed( speed );
    }
}

dynamic_run_speed_goalpos()
{
    goalpos = undefined;

    if ( isdefined( self.follow_ent ) )
        goalpos = self.follow_ent.origin;
    else if ( isdefined( self.goalnode ) )
        goalpos = self.goalnode.origin;
    else
        goalpos = self.scriptgoalpos;

    return goalpos;
}

g_speed_get_func( _id_DDD80F5D1DA23C60 )
{
    return int( getdvar( "dvar_11A6AAF18B50047B" ) );
}

g_speed_set_func( _id_AF03A5AC7D47D6CD, _id_DDD80F5D1DA23C60 )
{
    setsaveddvar( "dvar_11A6AAF18B50047B", int( _id_AF03A5AC7D47D6CD ) );
}

g_bob_scale_get_func( _id_DDD80F5D1DA23C60 )
{
    return level.player _meth_C3F3128E07284950();
}

g_bob_scale_set_func( _id_0C943DD9D8F55B20, _id_DDD80F5D1DA23C60 )
{
    level.player _meth_7DC04072FBF20724( _id_0C943DD9D8F55B20 );
}

movespeed_get_func( _id_7148C1A6F25491F8 )
{
    if ( !isdefined( _id_7148C1A6F25491F8 ) )
        _id_7148C1A6F25491F8 = "default";

    if ( !isdefined( self.movespeedscales ) || !isdefined( self.movespeedscales[_id_7148C1A6F25491F8] ) )
        return 1;

    return self.movespeedscales[_id_7148C1A6F25491F8];
}

movespeed_set_func( scale, _id_7148C1A6F25491F8 )
{
    _id_91180BE623F6B59B = 1.0;

    if ( !isdefined( _id_7148C1A6F25491F8 ) )
        _id_7148C1A6F25491F8 = "default";

    self.movespeedscales[_id_7148C1A6F25491F8] = scale;

    foreach ( key, scale in self.movespeedscales )
    {
        if ( scale == 1 )
            self.movespeedscales = scripts\engine\utility::array_remove_key( self.movespeedscales, key );

        _id_91180BE623F6B59B = _id_91180BE623F6B59B * scale;
    }

    self.movespeedscale = _id_91180BE623F6B59B;
    self setmovespeedscale( self.movespeedscale );
}

autosave_tactical_setup()
{
    if ( scripts\engine\utility::flag_exist( "autosave_tactical_player_nade" ) )
        return;

    scripts\engine\utility::flag_init( "autosave_tactical_player_nade" );
    level.autosave_tactical_player_nades = 0;
    _func_DEE20CAEB389BC0E( "autosave_player_nade", "+frag" );
    _func_DEE20CAEB389BC0E( "autosave_player_nade", "-smoke" );
    _func_DEE20CAEB389BC0E( "autosave_player_nade", "+smoke" );
    scripts\engine\utility::array_thread( level.players, ::autosave_tactical_grenade_check );
}

autosave_tactical_grenade_check()
{
    for (;;)
    {
        self waittill( "autosave_player_nade" );
        scripts\engine\utility::flag_set( "autosave_tactical_player_nade" );
        thread autosave_tactical_grenade_check_wait_throw();
        scripts\engine\utility::waittill_any_timeout( 10, "autosave_grenade_thrown" );
        self notify( "autosave_grenade_throw_timeout" );
        autosave_tactical_nade_flag_clear();
    }
}

autosave_tactical_grenade_check_wait_throw()
{
    self endon( "autosave_grenade_throw_timeout" );
    self waittill( "grenade_fire", grenade );
    thread autosave_tactical_grenade_check_dieout( grenade );
    self notify( "autosave_grenade_thrown" );
}

autosave_tactical_nade_flag_clear()
{
    waittillframeend;

    if ( !level.autosave_tactical_player_nades )
        scripts\engine\utility::flag_clear( "autosave_tactical_player_nade" );
}

autosave_tactical_grenade_check_dieout( grenade )
{
    level.autosave_tactical_player_nades++;
    grenade scripts\engine\utility::waittill_notify_or_timeout( "death", 10 );
    level.autosave_tactical_player_nades--;
    autosave_tactical_nade_flag_clear();
}

autosave_tactical_proc()
{
    level notify( "autosave_tactical_proc" );
    level endon( "autosave_tactical_proc" );
    level thread scripts\engine\sp\utility::notify_delay( "kill_save", 5 );
    level endon( "kill_save" );
    level endon( "autosave_tactical_player_nade" );

    if ( scripts\engine\utility::flag( "autosave_tactical_player_nade" ) )
    {
        scripts\engine\utility::flag_waitopen_or_timeout( "autosave_tactical_player_nade", 4 );

        if ( scripts\engine\utility::flag( "autosave_tactical_player_nade" ) )
            return;
    }

    enemies = getaiarray( "axis" );

    foreach ( ai in enemies )
    {
        if ( isdefined( ai.enemy ) && isplayer( ai.enemy ) )
            return;
    }

    waittillframeend;
    scripts\engine\sp\utility::autosave_by_name();
}

doslide( slidemodel, _id_82EBFB9873BEBD03, _id_F8D869E874843E58 )
{
    self endon( "death" );
    self endon( "stop_sliding" );
    player = self;
    entnum = undefined;
    last_pos = slidemodel.origin;
    current_pos = slidemodel.origin;
    _id_3FA79149E2D479D1 = undefined;

    for (;;)
    {
        movement = player getnormalizedmovement();
        forward = anglestoforward( player.angles );
        right = anglestoright( player.angles );
        movement = ( movement[1] * right[0] + movement[0] * forward[0], movement[1] * right[1] + movement[0] * forward[1], 0 );
        slidemodel.slidevelocity = slidemodel.slidevelocity + movement * _id_82EBFB9873BEBD03;
        player.fx_tag.origin = slidemodel.origin + anglestoforward( slidemodel.gesture_target.angles ) * 400;
        wait 0.05;
        slidemodel.slidevelocity = slidemodel.slidevelocity * ( 1 - _id_F8D869E874843E58 );
    }
}

kill_deathflag_proc( time )
{
    self endon( "death" );

    if ( isdefined( time ) )
        wait( randomfloat( time ) );

    playfxontag( scripts\engine\utility::getfx( "flesh_hit" ), self, "tag_eye" );
    self kill( level.player.origin );
}

update_rumble_intensity( player, rumble )
{
    self endon( "death" );
    _id_91AB80BC6772504D = 0;

    for (;;)
    {
        if ( self.intensity > 0.0001 && gettime() > 300 )
        {
            if ( !_id_91AB80BC6772504D )
            {
                self playrumblelooponentity( rumble );
                _id_91AB80BC6772504D = 1;
            }
        }
        else if ( _id_91AB80BC6772504D )
        {
            self stoprumble( rumble );
            _id_91AB80BC6772504D = 0;
        }

        height = 1 - self.intensity;
        height = height * 1000;
        self.origin = player geteye() + ( 0, 0, height );
        wait 0.05;
    }
}

process_blend( func, caller, _id_D2806A25E4C80CB1, _id_D2806725E4C80618, _id_D2806825E4C8084B )
{
    waittillframeend;

    if ( !isdefined( self.start ) )
        self.start = 0;

    if ( !isdefined( self.end ) )
        self.end = 1;

    if ( !isdefined( self.base ) )
        self.base = 0;

    _id_1AAD8F38CB38F703 = self.time * 20;
    range = self.end - self.start;
    self.stop_blend = 0;

    if ( isdefined( _id_D2806825E4C8084B ) )
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 <= _id_1AAD8F38CB38F703 && !self.stop_blend; _id_AC0E594AC96AA3A8++ )
        {
            value = self.base + _id_AC0E594AC96AA3A8 * range / _id_1AAD8F38CB38F703;
            caller thread [[ func ]]( value, _id_D2806A25E4C80CB1, _id_D2806725E4C80618, _id_D2806825E4C8084B );
            wait 0.05;
        }
    }
    else if ( isdefined( _id_D2806725E4C80618 ) )
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 <= _id_1AAD8F38CB38F703 && !self.stop_blend; _id_AC0E594AC96AA3A8++ )
        {
            value = self.base + _id_AC0E594AC96AA3A8 * range / _id_1AAD8F38CB38F703;
            caller thread [[ func ]]( value, _id_D2806A25E4C80CB1, _id_D2806725E4C80618 );
            wait 0.05;
        }
    }
    else if ( isdefined( _id_D2806A25E4C80CB1 ) )
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 <= _id_1AAD8F38CB38F703 && !self.stop_blend; _id_AC0E594AC96AA3A8++ )
        {
            value = self.base + _id_AC0E594AC96AA3A8 * range / _id_1AAD8F38CB38F703;
            caller thread [[ func ]]( value, _id_D2806A25E4C80CB1 );
            wait 0.05;
        }
    }
    else
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 <= _id_1AAD8F38CB38F703 && !self.stop_blend; _id_AC0E594AC96AA3A8++ )
        {
            value = self.base + _id_AC0E594AC96AA3A8 * range / _id_1AAD8F38CB38F703;
            caller thread [[ func ]]( value );
            wait 0.05;
        }
    }
}

get_color_info_from_trigger()
{
    team = "allies";

    if ( isdefined( self.script_color_axis ) )
        team = "axis";

    team = scripts\sp\colors::get_team( team );
    _id_E659CE0031ADF776 = [];

    if ( team == "allies" )
    {
        array = scripts\sp\colors::get_colorcodes_from_trigger( self.script_color_allies, "allies" );
        _id_E659CE0031ADF776 = array["colorCodes"];
    }
    else
    {
        array = scripts\sp\colors::get_colorcodes_from_trigger( self.script_color_axis, "axis" );
        _id_E659CE0031ADF776 = array["colorCodes"];
    }

    info = [];
    info["team"] = team;
    info["codes"] = _id_E659CE0031ADF776;
    return info;
}

delaychildthread_proc( func, timer, param1, param2, param3, param4, param5, param6 )
{
    self endon( "death" );
    self endon( "stop_delay_thread" );
    wait( timer );

    if ( isdefined( param6 ) )
        childthread [[ func ]]( param1, param2, param3, param4, param5, param6 );
    else if ( isdefined( param5 ) )
        childthread [[ func ]]( param1, param2, param3, param4, param5 );
    else if ( isdefined( param4 ) )
        childthread [[ func ]]( param1, param2, param3, param4 );
    else if ( isdefined( param3 ) )
        childthread [[ func ]]( param1, param2, param3 );
    else if ( isdefined( param2 ) )
        childthread [[ func ]]( param1, param2 );
    else if ( isdefined( param1 ) )
        childthread [[ func ]]( param1 );
    else
        childthread [[ func ]]();
}

flagwaitthread_proc( func, flag, param1, param2, param3, param4, param5 )
{
    self endon( "death" );
    scripts\engine\utility::flag_wait( flag[0] );
    scripts\engine\utility::delaythread_proc( func, undefined, flag[1], param1, param2, param3, param4, param5 );
}

waittillthread_proc( func, _id_A234A65C378F3289, param1, param2, param3, param4, param5 )
{
    self endon( "death" );
    self waittill( _id_A234A65C378F3289[0] );
    scripts\engine\utility::delaythread_proc( func, _id_A234A65C378F3289[1], param1, param2, param3, param4, param5 );
}

add_wait_asserter()
{
    level notify( "kill_add_wait_asserter" );
    level endon( "kill_add_wait_asserter" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 20; _id_AC0E594AC96AA3A8++ )
        waittillframeend;
}

update_battlechatter_hud()
{

}

comparesizesfx( org, array, dist, _id_683F60CEFEFA79F6 )
{
    if ( !array.size )
        return undefined;

    if ( isdefined( dist ) )
    {
        struct = undefined;
        keys = getarraykeys( array );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < keys.size; _id_AC0E594AC96AA3A8++ )
        {
            _id_5C1EE5AB8012EA11 = distance( array[keys[_id_AC0E594AC96AA3A8]].v["origin"], org );

            if ( [[ _id_683F60CEFEFA79F6 ]]( _id_5C1EE5AB8012EA11, dist ) )
                continue;

            dist = _id_5C1EE5AB8012EA11;
            struct = array[keys[_id_AC0E594AC96AA3A8]];
        }

        return struct;
    }

    keys = getarraykeys( array );
    struct = array[keys[0]];
    dist = distance( struct.v["origin"], org );

    for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < keys.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_5C1EE5AB8012EA11 = distance( array[keys[_id_AC0E594AC96AA3A8]].v["origin"], org );

        if ( [[ _id_683F60CEFEFA79F6 ]]( _id_5C1EE5AB8012EA11, dist ) )
            continue;

        dist = _id_5C1EE5AB8012EA11;
        struct = array[keys[_id_AC0E594AC96AA3A8]];
    }

    return struct;
}

waittill_triggered_current()
{
    for (;;)
    {
        self waittill( "trigger", other );
        waittillframeend;

        if ( other.currentnode == self )
            return other;
    }
}

add_trigger_func_thread()
{
    self.trigger_functions = [];
    self waittill( "trigger", other );
    trigger_functions = self.trigger_functions;
    self.trigger_functions = undefined;

    foreach ( function in trigger_functions )
        thread [[ function ]]( other );
}

_id_D4C885C9EF5C6BC8()
{
    self endon( "death" );
    self._id_F08830DECD9EB50A = [];

    for (;;)
    {
        self waittill( "trigger", other );

        foreach ( function in self._id_F08830DECD9EB50A )
            thread [[ function ]]( other );
    }
}

add_to_radio( dialogue )
{
    if ( !isdefined( level.scr_radio[dialogue] ) )
        level.scr_radio[dialogue] = dialogue;
}

add_to_player_dialogue( dialogue )
{
    if ( !isdefined( level.scr_plrdialogue[dialogue] ) )
        level.scr_plrdialogue[dialogue] = dialogue;
}

add_to_dialogue( dialogue )
{
    if ( !isdefined( level.scr_anim[self.animname] ) )
        level.scr_anim[self.animname] = [];

    if ( !isdefined( level.scr_sound[self.animname] ) )
        level.scr_sound[self.animname] = [];

    if ( !isdefined( level.scr_sound[self.animname][dialogue] ) )
        level.scr_sound[self.animname][dialogue] = dialogue;
}

add_to_dialogue_generic( dialogue )
{
    if ( !isdefined( level.scr_sound["generic"] ) )
        level.scr_sound["generic"] = [];

    if ( !isdefined( level.scr_sound["generic"][dialogue] ) )
        level.scr_sound["generic"][dialogue] = dialogue;
}

_flag_wait_trigger( message, _id_BB61E30B80CD2DD6 )
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", other );
        scripts\engine\utility::flag_set( message );

        if ( !_id_BB61E30B80CD2DD6 )
            return;

        while ( other istouching( self ) )
            wait 0.05;

        scripts\engine\utility::flag_clear( message );
    }
}

fx_volume_pause( volume, _id_474701AB4C04774E )
{
    volume.fx_paused = 1;

    if ( !isdefined( _id_474701AB4C04774E ) )
        _id_474701AB4C04774E = 0;

    if ( _id_474701AB4C04774E )
        array_thread_mod_delayed( volume.fx, scripts\engine\utility::pauseeffect );
    else
        scripts\engine\utility::array_thread( volume.fx, scripts\engine\utility::pauseeffect );
}

array_thread_mod_delayed( array, _id_7FAB07F784741556, mod )
{
    _id_FE747A03F612E963 = 0;

    if ( !isdefined( mod ) )
        mod = 5;

    _id_7433BB97757C68E9 = [];

    foreach ( object in array )
    {
        _id_7433BB97757C68E9[_id_7433BB97757C68E9.size] = object;
        _id_FE747A03F612E963++;
        _id_FE747A03F612E963 = _id_FE747A03F612E963 % mod;

        if ( mod == 0 )
        {
            scripts\engine\utility::array_thread( _id_7433BB97757C68E9, _id_7FAB07F784741556 );
            wait 0.05;
            _id_7433BB97757C68E9 = [];
        }
    }
}

set_flag_on_spawned( spawners, _id_E617A42386278BB6 )
{
    thread scripts\engine\sp\utility::set_flag_on_func_wait_proc( spawners, _id_E617A42386278BB6, scripts\engine\sp\utility::empty_func, "set_flag_on_spawned" );
}

endondeath()
{
    self waittill( "death" );
    waittillframeend;
    self notify( "end_explode" );
}

waittill_dead_thread( ent )
{
    self waittill( "death" );
    ent.count--;
    ent notify( "waittill_dead guy died" );
}

waittill_dead_or_dying_thread( ent )
{
    scripts\engine\utility::waittill_either( "death", "long_death" );
    ent.count--;
    ent notify( "waittill_dead_guy_dead_or_dying" );
}

waittill_dead_timeout( _id_F6A66E3FC1BF61C0 )
{
    wait( _id_F6A66E3FC1BF61C0 );
    self notify( "thread_timed_out" );
}

scripter_note_proc( str, duration )
{
    if ( getdvarint( "dvar_08496C6305E4B772" ) == 0 || getdvarint( "dvar_72B7DA075887F96F" ) == 1 )
        return;

    duration = scripts\engine\utility::_id_53C4C53197386572( duration, 5 );
    level notify( "new_scripter_note" );

    if ( !isdefined( level.scripternote ) )
    {
        level.scripternote = spawnstruct();
        level.scripternote.width = 200;
    }

    if ( !isdefined( level.scripternote.notes ) )
        level.scripternote.notes = [];

    if ( level.scripternote.notes.size == 5 )
    {
        _id_DE5AAABD1AECB05F = level.scripternote.notes[0];
        level.scripternote.notes = scripts\engine\utility::array_remove_index( level.scripternote.notes, 0 );
        update_scripternote_huds();
        _id_DE5AAABD1AECB05F thread destroy_scripternote();
    }

    if ( !isdefined( level.scripternote.bg ) )
    {
        bg = newhudelem();
        bg.destroying = 0;
        level.scripternote.intro = 1;
        bg.alpha = 0.7;
        bg setshader( "black", level.scripternote.width, 50 );
        title = newhudelem();
        title settext( "Note" );
        level.scripternote.bg = bg;
        level.scripternote.title = title;
        array = [ bg, title ];

        foreach ( hud in array )
        {
            hud.alignx = "left";
            hud.aligny = "top";
            hud.horzalign = "fullscreen";
            hud.vertalign = "fullscreen";
            hud.x = -200;
            hud.y = 120;
            hud moveovertime( 0.2 );
            hud.x = 0;
        }

        wait 0.3;
        level.scripternote.intro = 0;
        level.scripternote notify( "intro_done" );
    }
    else
    {
        bg = level.scripternote.bg;
        bg.alpha = 0.7;
        title = level.scripternote.title;
        title.alpha = 1;
    }

    if ( level.scripternote.intro )
        level.scripternote waittill( "intro_done" );

    _id_A234A65C378F3289 = newhudelem();
    index = level.scripternote.notes.size;
    _id_A234A65C378F3289.fontscale = 1;
    _id_A234A65C378F3289.horzalign = "fullscreen";
    _id_A234A65C378F3289.vertalign = "fullscreen";
    _id_A234A65C378F3289.x = 20;
    _id_A234A65C378F3289.y = 140 + index * 12;
    _id_A234A65C378F3289.width = 0;
    _id_A234A65C378F3289.text = str;
    _id_A234A65C378F3289 settext( str );
    level.scripternote.notes[index] = _id_A234A65C378F3289;
    update_scripternote_width();
    level.scripternote.bg scaleovertime( 0.2, level.scripternote.width, 50 + ( level.scripternote.notes.size - 1 ) * 10 );
    _id_A234A65C378F3289.alpha = 0;
    _id_A234A65C378F3289 fadeovertime( 0.2 );
    _id_A234A65C378F3289.alpha = 1;
    _id_A234A65C378F3289 endon( "death" );
    update_scripternote_huds();
    wait( duration );
    _id_A234A65C378F3289 thread destroy_scripternote();
}

update_scripternote_width()
{
    width = 200;
    count = 0;

    foreach ( n in level.scripternote.notes )
    {
        if ( n.text.size > count )
        {
            count = n.text.size;
            width = n.text.size * 6;
        }
    }

    if ( width < 200 )
        level.scripternote.width = 200;
    else
        level.scripternote.width = width;
}

destroy_scripternote()
{
    self endon( "death" );

    if ( level.scripternote.notes.size == 1 )
        level thread destroy_scripternote_bg();

    level.scripternote.notes = scripts\engine\utility::array_remove( level.scripternote.notes, self );
    update_scripternote_huds();
    self fadeovertime( 0.2 );
    self moveovertime( 0.2 );
    self.y = self.y - 12;
    self.alpha = 0;
    wait 0.2;
    self destroy();
}

destroy_scripternote_bg()
{
    level endon( "new_scripter_note" );
    level.scripternote.bg.destroying = 1;
    huds = [ level.scripternote.bg, level.scripternote.title ];

    foreach ( hud in huds )
    {
        hud fadeovertime( 0.2 );
        hud.alpha = 0;
    }

    wait 0.2;

    foreach ( hud in huds )
        hud destroy();
}

update_scripternote_huds()
{
    foreach ( index, hud in level.scripternote.notes )
    {
        hud moveovertime( 0.2 );
        hud.y = 140 + index * 12;
    }

    update_scripternote_width();
    level.scripternote.bg scaleovertime( 0.2, level.scripternote.width, 50 + ( level.scripternote.notes.size - 1 ) * 10 );
}
