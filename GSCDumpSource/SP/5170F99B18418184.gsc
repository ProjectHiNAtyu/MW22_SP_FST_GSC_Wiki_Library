// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

precache( offhand )
{
    scripts\sp\equipment\offhands::registeroffhandfirefunc( offhand, ::teargasfiremain );
}

teargasfiremain( grenade, weapon )
{
    if ( !isdefined( grenade ) )
        return;

    grenade endon( "end_explode" );
    grenade waittill( "explode", position );
    thread gas_createtrigger( position );
}

gas_createtrigger( position, owner, team, duration, scale )
{
    if ( !isdefined( duration ) )
        duration = 7;

    if ( !isdefined( scale ) )
        scale = 1;

    trigger = spawn( "trigger_radius", position + ( 0, 0, int( -57.75 * scale ) ), 7, int( 256 * scale ), int( 175 * scale ) );
    trigger thread gas_badplace( duration, scale );
    trigger endon( "death" );
    trigger.owner = owner;
    trigger.team = team;
    trigger._id_370A39D48E99D538 = [];
    trigger thread gas_watchtriggerenter();
    trigger thread gas_watchtriggerexit();
    wait( duration );
    trigger thread gas_destroytrigger();
}

gas_badplace( duration, scale )
{
    if ( !isdefined( self ) )
        return;

    _id_E786FA50656BC2FF = 0.66;
    _id_537D92090ED07C1E = duration * 0.15;
    _id_B98C5B49ED782FE5 = duration * 0.25;
    wait( _id_537D92090ED07C1E );
    _id_F369D822D2AF09E5 = 256 * scale * _id_E786FA50656BC2FF;
    _id_DBDBAD4A509C08E8 = 175 * scale * _id_E786FA50656BC2FF;
    navobstacle = createnavbadplacebyshape( self.origin, 8, _id_F369D822D2AF09E5, _id_DBDBAD4A509C08E8 );
    wait( max( 0.05, duration - _id_537D92090ED07C1E - _id_B98C5B49ED782FE5 ) );

    if ( isdefined( navobstacle ) )
        destroynavobstacle( navobstacle );
}

gas_destroytrigger()
{
    foreach ( player in self._id_370A39D48E99D538 )
    {
        if ( !isdefined( player ) )
            continue;

        self._id_370A39D48E99D538[player getentitynumber()] = undefined;
        player thread gas_onexittrigger( self getentitynumber() );
    }

    self delete();
}

gas_onexittrigger( _id_B2907A4520674F1A )
{
    if ( !isdefined( self.gastriggerstouching ) )
        return;

    self.gastriggerstouching[_id_B2907A4520674F1A] = undefined;
    self.lastgastouchtime = gettime();

    if ( self.gastriggerstouching.size == 0 )
    {
        thread gas_removespeedredux();
        thread gas_removeblur();
        disableloopingcoughaudio();
        self notify( "gas_exited" );
    }
}

gas_watchtriggerenter()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", _id_FA8D840338038893 );

        if ( !isalive( _id_FA8D840338038893 ) )
            continue;

        if ( _id_DA8A31143B88E833( _id_FA8D840338038893 ) )
            continue;

        entnum = _id_FA8D840338038893 getentitynumber();

        if ( isdefined( self._id_370A39D48E99D538[entnum] ) )
            continue;

        self._id_370A39D48E99D538[entnum] = _id_FA8D840338038893;
        _id_FA8D840338038893 thread gas_onentertrigger( self );
    }
}

_id_DA8A31143B88E833( player )
{
    if ( isplayer( self ) && player _meth_7EE20CF3C0390E21() )
        return 1;

    return 0;
}

gas_onentertrigger( trigger )
{
    if ( !isdefined( self.gastriggerstouching ) )
        self.gastriggerstouching = [];

    entnum = trigger getentitynumber();
    self.gastriggerstouching[entnum] = trigger;
    self.lastgastouchtime = gettime();

    if ( self.gastriggerstouching.size >= 1 )
    {
        if ( isplayer( self ) )
        {
            thread gas_applyspeedredux();
            thread gas_applyblur();
        }
    }

    if ( self.gastriggerstouching.size == 1 )
    {
        if ( isplayer( self ) )
            thread gas_applycough( trigger.owner, 0 );

        if ( !istrue( self._id_71BAC99803EA4156 ) )
            enableloopingcoughaudio();
    }

    return entnum;
}

gas_watchtriggerexit()
{
    self endon( "death" );

    for (;;)
    {
        foreach ( id, player in self._id_370A39D48E99D538 )
        {
            if ( !isdefined( player ) )
            {
                self._id_370A39D48E99D538[id] = undefined;
                continue;
            }

            if ( !isalive( player ) )
                continue;

            if ( player istouching( self ) && !_id_DA8A31143B88E833( player ) )
                continue;

            self._id_370A39D48E99D538[player getentitynumber()] = undefined;
            player thread gas_onexittrigger( self getentitynumber() );
        }

        waitframe();
    }
}

gas_applyblur()
{
    self endon( "death_or_disconnect" );
    self notify( "gas_modify_blur" );
    self endon( "gas_modify_blur" );
    _id_22F87C8BF7C4616B = "gas_grenade_heavy_mp";

    if ( isdefined( self.gastriggerstouching ) )
    {
        foreach ( trigger in self.gastriggerstouching )
        {
            if ( isdefined( trigger ) && isdefined( trigger.owner ) && trigger.owner == self )
                _id_22F87C8BF7C4616B = "gas_grenade_light_mp";
        }
    }

    for (;;)
    {
        self shellshock( _id_22F87C8BF7C4616B, 0.5, 1, 0 );
        wait 0.2;
    }
}

gas_removeblur()
{
    self notify( "gas_modify_blur" );
}

gas_clearblur( _id_FCEF8D217A441961 )
{
    self notify( "gas_modify_blur" );

    if ( !istrue( _id_FCEF8D217A441961 ) )
        self stopshellshock();
}

gas_applycough( attacker, _id_E81764066EB9BACB )
{
    _id_8907F741F3A7B3F7 = isdefined( attacker ) && self == attacker;

    if ( !_id_8907F741F3A7B3F7 )
        return;

    _id_DD1CF0B2B3066ED4 = 0;

    if ( istrue( _id_E81764066EB9BACB ) )
    {
        _id_DD1CF0B2B3066ED4 = 1;

        if ( _id_8907F741F3A7B3F7 )
            _id_DD1CF0B2B3066ED4 = 0;
    }

    if ( !istrue( self.gascoughinprogress ) || istrue( _id_E81764066EB9BACB ) )
        thread gas_queuecough( _id_DD1CF0B2B3066ED4 );
}

gas_queuecough( _id_DD1CF0B2B3066ED4 )
{
    self endon( "death_or_disconnect" );
    self endon( "gas_clear_cough" );
    self endon( "gas_exited" );
    self notify( "gas_queue_cough" );
    self endon( "gas_queue_cough" );
    _id_FFF525B27A42FC40 = gettime() + 1000;

    while ( gas_coughisblocked() )
        waitframe();

    if ( _id_DD1CF0B2B3066ED4 && gettime() > _id_FFF525B27A42FC40 )
        _id_DD1CF0B2B3066ED4 = 0;

    _id_81B4070B5858078D = getdvarint( "dvar_0827901421AD0679", 1 ) == 1;

    if ( _id_81B4070B5858078D )
        thread gas_begincoughing( _id_DD1CF0B2B3066ED4 );
    else
    {
        self endon( "gas_begin_coughing" );
        self.gascoughinprogress = 1;

        if ( _id_DD1CF0B2B3066ED4 )
        {
            self playgestureviewmodel( "iw9_ges_gas_cough_long" );
            wait 3.33;
        }
        else
        {
            self playgestureviewmodel( "iw9_ges_gas_cough" );
            wait 1.833;
        }

        self.gascoughinprogress = undefined;
    }
}

gas_begincoughing( _id_DD1CF0B2B3066ED4 )
{
    self endon( "death_or_disconnect" );
    self endon( "gas_clear_cough" );
    self notify( "gas_begin_coughing" );
    self endon( "gas_begin_coughing" );

    if ( !isnullweapon( self getheldoffhand() ) )
        childthread gas_takeheldoffhand();

    self.gascoughinprogress = 1;

    if ( self hasweapon( makeweapon( "gas_cough_light_mp" ) ) )
        self takeweapon( "gas_cough_light_mp" );

    if ( self hasweapon( makeweapon( "gas_cough_heavy_mp" ) ) )
        self takeweapon( "gas_cough_heavy_mp" );

    weaponobj = scripts\engine\utility::ter_op( istrue( _id_DD1CF0B2B3066ED4 ), makeweapon( "gas_cough_heavy_mp" ), makeweapon( "gas_cough_light_mp" ) );
    duration = scripts\engine\utility::ter_op( istrue( _id_DD1CF0B2B3066ED4 ), 3.33, 1.833 );
    self giveandfireoffhand( weaponobj );
    childthread gas_monitorcoughweaponfired( weaponobj );
    childthread gas_monitorcoughweapontaken( weaponobj );
    childthread gas_monitorcoughduration( duration );
    scripts\engine\utility::waittill_any_3( "gas_coughWeaponFired", "gas_coughWeaponTaken", "gas_coughDuration" );

    if ( self hasweapon( weaponobj ) )
        self takeweapon( weaponobj );

    self.gascoughinprogress = undefined;
}

gas_removecough( _id_FCEF8D217A441961 )
{
    self notify( "gas_queue_cough" );
    self notify( "gas_begin_coughing" );
    self.gascoughinprogress = undefined;

    if ( !istrue( _id_FCEF8D217A441961 ) )
    {
        if ( isdefined( self.gastakenweaponobj ) )
            gas_restoreheldoffhand();
    }
}

gas_clearcough( _id_FCEF8D217A441961 )
{
    self notify( "gas_queue_cough" );
    self notify( "gas_begin_coughing" );
    self.gascoughinprogress = undefined;

    if ( !istrue( _id_FCEF8D217A441961 ) )
    {
        _id_81B4070B5858078D = getdvarint( "dvar_0827901421AD0679", 1 ) == 1;

        if ( _id_81B4070B5858078D )
        {
            if ( self hasweapon( makeweapon( "gas_cough_light_mp" ) ) )
                self takeweapon( "gas_cough_light_mp" );

            if ( self hasweapon( makeweapon( "gas_cough_heavy_mp" ) ) )
                self takeweapon( "gas_cough_heavy_mp" );

            if ( isdefined( self.gastakenweaponobj ) )
                gas_restoreheldoffhand();
        }
        else
        {
            self stopgestureviewmodel( "iw9_ges_gas_cough" );
            self stopgestureviewmodel( "iw9_ges_gas_cough_long" );
        }
    }
}

gas_monitorcoughweaponfired( _id_33F644489E4F15AE )
{
    self endon( "gas_coughWeaponTaken" );
    self endon( "gas_coughDuration" );

    for (;;)
    {
        self waittill( "offhand_fired", weaponobj );

        if ( issameweapon( weaponobj, _id_33F644489E4F15AE ) )
            break;
    }

    self notify( "gas_coughWeaponFired" );
}

gas_monitorcoughweapontaken( _id_33F644489E4F15AE )
{
    self endon( "gas_coughWeaponFired" );
    self endon( "gas_coughDuration" );

    while ( self hasweapon( _id_33F644489E4F15AE ) )
        waitframe();

    self notify( "gas_coughWeaponTaken" );
}

gas_monitorcoughduration( _id_DC7D7DB6D1535605 )
{
    self endon( "gas_coughWeaponTaken" );
    self endon( "gas_coughWeaponFired" );
    wait( _id_DC7D7DB6D1535605 );
    self notify( "gas_coughDuration" );
}

enableloopingcoughaudio()
{
    if ( !isdefined( self.loopingcoughaudio ) )
        self.loopingcoughaudio = 0;

    self.loopingcoughaudio++;

    if ( self.loopingcoughaudio == 1 )
        thread startloopingcoughaudio();
}

disableloopingcoughaudio()
{
    if ( !isdefined( self.loopingcoughaudio ) )
        return;

    self.loopingcoughaudio--;

    if ( self.loopingcoughaudio == 0 )
    {
        thread stoploopingcoughaudio();
        self.loopingcoughaudio = undefined;
    }
}

startloopingcoughaudio()
{
    self endon( "death_or_disconnect" );
    self endon( "clearLoopingCoughAudio" );

    for (;;)
    {
        if ( !loopingcoughaudioissupressed() )
        {
            if ( isplayer( self ) )
                self playsound( "gas_player_cough" );
            else
                self playsound( "generic_cough_fit_enemy_8" );
        }

        wait( randomfloatrange( 5, 7 ) );
    }
}

stoploopingcoughaudio()
{
    self notify( "clearLoopingCoughAudio" );
}

enableloopingcoughaudiosupression()
{
    if ( !isdefined( self.loopingcoughaudiosupression ) )
        self.loopingcoughaudiosupression = 0;

    self.loopingcoughaudiosupression++;
}

disableloopingcoughaudiosupression()
{
    if ( !isdefined( self.loopingcoughaudiosupression ) )
        return;

    self.loopingcoughaudiosupression--;
}

loopingcoughaudioissupressed()
{
    return isdefined( self.loopingcoughaudiosupression ) && self.loopingcoughaudiosupression > 0;
}

clearloopingcoughaudio()
{
    self notify( "clearLoopingCoughAudio" );
    self.loopingcoughaudio = undefined;
    self.loopingcoughaudiosupression = undefined;
}

gas_takeheldoffhand()
{
    if ( isdefined( self.gastakenweaponobj ) )
        gas_restoreheldoffhand();

    self endon( "gas_restoreHeldOffhand" );
    self.gastakenweaponobj = self getheldoffhand();
    self.gastakenweaponammo = self getammocount( self.gastakenweaponobj );
    self takeweapon( self.gastakenweaponobj );
    waitframe();
    thread gas_restoreheldoffhand();
}

gas_restoreheldoffhand()
{
    self notify( "gas_restoreHeldOffhand" );
    self giveweapon( self.gastakenweaponobj );
    self setweaponammoclip( self.gastakenweaponobj, self.gastakenweaponammo );
    self.gastakenweaponobj = undefined;
    self.gastakenweaponammo = undefined;
}

gas_applyspeedredux()
{
    self endon( "death_or_disconnect" );
    self notify( "gas_modify_speed" );
    self endon( "gas_modify_speed" );

    if ( isdefined( self.gasspeedmod ) )
    {
        if ( self.gasspeedmod < -0.15 )
        {
            if ( isdefined( self.gastriggerstouching ) )
            {
                foreach ( trigger in self.gastriggerstouching )
                {
                    if ( isdefined( trigger ) && isdefined( trigger.owner ) && trigger.owner == self )
                    {
                        self.gasspeedmod = -0.15;
                        updatemovespeedscale();
                        return;
                    }
                }
            }
        }
    }
    else
        self.gasspeedmod = 0;

    _id_D255A8B6D0EF299D = -0.35;

    if ( isdefined( self.gastriggerstouching ) )
    {
        foreach ( trigger in self.gastriggerstouching )
        {
            if ( isdefined( trigger ) && isdefined( trigger.owner ) && trigger.owner == self )
                _id_D255A8B6D0EF299D = -0.15;
        }
    }

    gas_modifyspeed( _id_D255A8B6D0EF299D );
    self.gasspeedmod = _id_D255A8B6D0EF299D;
    updatemovespeedscale();
}

gas_removespeedredux()
{
    self endon( "death_or_disconnect" );
    self notify( "gas_modify_speed" );
    self endon( "gas_modify_speed" );

    if ( !isdefined( self.gasspeedmod ) )
        return;

    gas_modifyspeed( 0 );
}

gas_modifyspeed( _id_D255A8B6D0EF299D )
{
    timeelapsed = 0;

    while ( timeelapsed <= 0.65 )
    {
        timeelapsed = timeelapsed + 0.05;
        self.gasspeedmod = scripts\engine\math::lerp( self.gasspeedmod, _id_D255A8B6D0EF299D, min( 1, timeelapsed / 0.65 ) );
        updatemovespeedscale();
        wait 0.05;
    }

    self.gasspeedmod = undefined;
    updatemovespeedscale();
}

gas_clearspeedredux( _id_FCEF8D217A441961 )
{
    self notify( "gas_modify_speed" );
    self.gasspeedmod = undefined;

    if ( !istrue( _id_FCEF8D217A441961 ) )
        updatemovespeedscale();
}

gas_shouldtakeheldoffhand()
{
    switch ( self getheldoffhand().basename )
    {
        case "super_delay_mp":
            return 0;
        default:
            return 1;
    }

    return 0;
}

gas_coughisblocked()
{
    if ( !_id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "cough_gesture" ) )
        return 1;

    if ( !_id_3B64EB40368C1450::_id_E0751B03DFB9EB43( "offhand_weapons" ) )
        return 1;

    if ( !isnullweapon( self getheldoffhand() ) && !gas_shouldtakeheldoffhand() )
        return 1;

    return 0;
}

gas_isintrigger()
{
    if ( !isdefined( self.gastriggerstouching ) )
        return 0;

    if ( self.gastriggerstouching.size == 0 )
        return 0;

    return 1;
}

gas_updateplayereffects()
{
    if ( gas_isintrigger() )
    {
        thread gas_applyspeedredux();
        thread gas_applyblur();
    }
}

gas_getblurinterruptdelayms( duration )
{
    return 200.0;
}

updatemovespeedscale()
{
    _id_8F053B6F8634C100 = 1.0;

    if ( isdefined( self.gasspeedmod ) )
        _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + self.gasspeedmod;

    _id_8F053B6F8634C100 = clamp( _id_8F053B6F8634C100, 0.1, 1.08 );
    self setmovespeedscale( _id_8F053B6F8634C100 );
}
