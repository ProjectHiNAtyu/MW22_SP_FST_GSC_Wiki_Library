// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

door_post_load()
{
    init_doors();
    thread trace_completion_thread();
}

init_window()
{
    _id_9A01505C5F6B5E0C = getentarray( self.target, "targetname" );

    foreach ( _id_CBD4159EDB5695B7 in _id_9A01505C5F6B5E0C )
    {
        if ( !isdefined( _id_CBD4159EDB5695B7.script_linkto ) )
            continue;

        clip = _id_CBD4159EDB5695B7 scripts\engine\utility::get_linked_ent();
        clip linkto( _id_CBD4159EDB5695B7 );
    }

    _id_789069F44709F226 = scripts\engine\utility::get_linked_nodes();

    foreach ( node in _id_789069F44709F226 )
    {
        if ( scripts\engine\utility::is_equal( node.targetname, "traverse" ) )
        {
            destroynavlink( node );
            continue;
        }

        if ( scripts\engine\utility::is_equal( node.script_noteworthy, "cover" ) )
            node _meth_547AAB3C2787AC87();
    }

    scripts\sp\player\cursor_hint::create_cursor_hint( undefined, ( 0, 0, 0 ), &"GAME/DOOR_OPEN", 55, 135 * level.interactive_doors.hint_dist_scale, 85 * level.interactive_doors.hint_dist_scale, 1 );
    self.cursor_hint_ent setusewhenhandsoccupied( 1 );
    event = waittill_window_event();
    scripts\sp\player\cursor_hint::remove_cursor_hint();

    if ( event == "trigger" )
    {
        thread player_window_gesture( 0.65 );
        _id_96EA77CC1EB9AD7C = 0.8;
        sound = "door_open_ajar";
    }
    else
    {
        door_bash_presentation();
        _id_96EA77CC1EB9AD7C = 0.35;
        sound = "door_open_bash";
    }

    _func_DAF6C5596BB31DFF( "window_open", level.player, level.player.origin, 384, undefined, undefined, 80 );

    foreach ( _id_CBD4159EDB5695B7 in _id_9A01505C5F6B5E0C )
    {
        if ( scripts\engine\utility::is_equal( _id_CBD4159EDB5695B7.script_noteworthy, "delete_on_open" ) )
        {
            _id_CBD4159EDB5695B7 delete();
            continue;
        }

        originalangles = _id_CBD4159EDB5695B7.angles;
        _id_16290C9DDA466BCE = _id_CBD4159EDB5695B7.origin - level.player.origin;
        forward = anglestoforward( originalangles );
        dot = vectordot( _id_16290C9DDA466BCE, forward );
        _id_F25F65666BAB9BCD = scripts\engine\utility::ter_op( dot > 0, anglestoright( originalangles ), anglestoleft( originalangles ) );
        _id_D8BD7D9A61D3C70A = vectortoangles( _id_F25F65666BAB9BCD );
        _id_8003B0D4F9FBEE0E = anglelerpquatfrac( originalangles, _id_D8BD7D9A61D3C70A, randomfloatrange( 1.0, 1.15 ) );
        _id_CBD4159EDB5695B7 rotateto( _id_8003B0D4F9FBEE0E, _id_96EA77CC1EB9AD7C, _id_96EA77CC1EB9AD7C * 0.8, _id_96EA77CC1EB9AD7C * 0.2 );
        _id_CBD4159EDB5695B7 playsound( sound );

        if ( event == "melee_pressed" )
        {
            if ( isdefined( level.stealth ) )
                thread stealth_broadcast( 450, "combat" );
            else
                thread combat_getinfoinradius( 450 );

            _id_CBD4159EDB5695B7 scripts\engine\utility::delaycall( _id_96EA77CC1EB9AD7C, ::rotateto, _id_D8BD7D9A61D3C70A, randomfloatrange( 0.75, 1.25 ) );
            _id_CBD4159EDB5695B7 scripts\engine\utility::delaycall( _id_96EA77CC1EB9AD7C, ::playsound, "door_open_stop" );
            self notify( "trigger" );
        }
    }

    foreach ( node in _id_789069F44709F226 )
    {
        if ( scripts\engine\utility::is_equal( node.targetname, "traverse" ) )
        {
            end_node = getnode( node.target, "targetname" );
            _func_95C8DFF88843E0FE( "window_traversal", node.origin, end_node.origin, node );
            continue;
        }

        if ( scripts\engine\utility::is_equal( node.script_noteworthy, "cover" ) )
            node _meth_4586023ECC3AE8AD();
    }
}

waittill_window_event()
{
    for (;;)
    {
        bashed = waittill_melee_or_interact();

        if ( !isdefined( bashed ) || window_melee_valid( self.origin ) )
            return scripts\engine\utility::ter_op( !isdefined( bashed ), "trigger", "melee_pressed" );
    }
}

waittill_melee_or_interact()
{
    self endon( "trigger" );
    waitframe();

    while ( !level.player ismeleeing() )
        waitframe();

    return 1;
}

window_melee_valid( _id_D32D18DD175F9E43 )
{
    if ( distancesquared( level.player geteye(), _id_D32D18DD175F9E43 ) > 2025 )
        return 0;

    if ( !scripts\engine\utility::within_fov( level.player.origin + anglestoforward( level.player.angles ) * -50, level.player.angles, _id_D32D18DD175F9E43, 0.731353 ) )
        return 0;

    return 1;
}

init_doors()
{
    doors = getentarray( "interactive_door", "script_noteworthy" );

    if ( doors.size > 0 )
        global_door_threads();

    scripts\engine\utility::array_thread( doors, level.interactive_doors.fndoorinit );
}

global_door_threads()
{
    if ( isdefined( level.doors_initialized ) )
        return;

    if ( scripts\sp\starts::is_no_game_start() )
        return;

    level.doors_initialized = 1;
    scripts\engine\utility::array_thread( getaiarray(), scripts\sp\door::ai_monitor_doors );
    scripts\engine\sp\utility::add_global_spawn_function( "allies", scripts\sp\door::ai_monitor_doors );
    scripts\engine\sp\utility::add_global_spawn_function( "axis", scripts\sp\door::ai_monitor_doors );
    scripts\engine\sp\utility::add_global_spawn_function( "neutral", scripts\sp\door::ai_monitor_doors );
    scripts\engine\sp\utility::add_global_spawn_function( "team3", scripts\sp\door::ai_monitor_doors );
}

init_door_internal( reset )
{
    if ( !istrue( reset ) )
    {

    }

    self.pivots = [];
    self.closed_angles = ( 0, 0, 0 );
    self.openers = [];
    self.tryingopener = undefined;
    self.true_start_angles = undefined;
    self.doorid = self getentitynumber();
    self.ai_anim_start = [];
    self.hinge_side = undefined;
    self.breached = 0;
    self.doortype = "wood";
    self.clip = undefined;
    self.linked_ents = undefined;
    self.no_bash = undefined;
    self.current_pivot_struct = undefined;

    if ( scripts\sp\starts::is_no_game_start() )
        return;

    if ( isdefined( self.open_struct ) )
    {
        self.open_struct.custom_hint_text = undefined;
        self.open_struct.no_open_interact = undefined;
    }

    if ( !isdefined( self.locked ) )
        self.locked = 0;

    if ( !scripts\engine\utility::ent_flag_exist( "initialized" ) )
        scripts\engine\utility::ent_flag_init( "initialized" );

    if ( istrue( reset ) )
        self.script_spawn_open_yaw = undefined;
    else
        level.interactive_doors.ents[level.interactive_doors.ents.size] = self;

    ents = scripts\engine\utility::get_linked_ents();
    _id_9E4E1482CB40C9C5 = scripts\engine\utility::get_linked_structs();
    _id_3DD61A6D9013F4C8 = 1;

    if ( isdefined( self.script_parameters ) )
    {
        values = strtok( self.script_parameters, " " );

        foreach ( value in values )
        {
            switch ( value )
            {
                case "locked":
                    if ( !istrue( reset ) )
                        self.locked = 1;

                    break;
                case "no_open":
                    _id_3DD61A6D9013F4C8 = 0;
                    break;
                case "no_bash":
                    self.no_bash = 1;
                    break;
                case "no_handle_ajar":
                    self.no_handle_ajar = 1;
                    break;
                case "double_door":
                    thread scripts\sp\door::_id_89BE9FAC0C81F3AA();
                    break;
                case "open_completely":
                    thread scripts\sp\door::door_open_completely();
                    break;
            }
        }
    }

    foreach ( ent in ents )
    {
        if ( isdefined( ent.script_noteworthy ) )
        {
            ent.door = self;

            switch ( ent.script_noteworthy )
            {
                case "clip":
                    self.clip = ent;
                    ent linkto( self );
                    ent.doorclip = 1;
                    break;
                case "clip_nosight":
                    self.clip_nosight = ent;
                    ent linkto( self );
                    ent.doorclip = 1;
                    break;
                case "unlock_volume":
                    self.unlock_volume = ent;
                    ent thread unlock_volume_logic();
                    break;
                case "link":
                    if ( !isdefined( self.linked_ents ) )
                        self.linked_ents = [];

                    self.linked_ents[self.linked_ents.size] = ent;
                    ent linkto( self );
                    ent.doorclip = 1;
                    break;
            }
        }
    }

    foreach ( struct in _id_9E4E1482CB40C9C5 )
    {
        if ( isdefined( struct.script_noteworthy ) )
        {
            struct.door = self;

            switch ( struct.script_noteworthy )
            {
                case "open_hint":
                    self.true_start_angles = struct.angles;
                    self.open_struct = struct;
                    self.length = distance2d( self.origin, self.open_struct.origin );

                    if ( _id_3DD61A6D9013F4C8 )
                        setup_open_struct( struct );

                    break;
                case "pivot_left":
                    self.pivots["open_left"] = struct;
                    break;
                case "pivot_right":
                    self.pivots["open_right"] = struct;
                    break;
                case "ai_open_walk":
                    self.ai_anim_start["walk"] = rotatevectorinverted( struct.origin - self.origin, self.true_start_angles );
                    break;
                case "ai_open_run":
                    self.ai_anim_start["run"] = rotatevectorinverted( struct.origin - self.origin, self.true_start_angles );
                    break;
            }
        }
    }

    self.forward = anglestoforward( self.true_start_angles );
    self.open_left = scripts\sp\door::should_open_left();
    self.bashed = 0;
    self.bashed_full = 0;
    self.ajar = 0;
    self.open_completely = 0;
    self.was_opened_halfway = 0;
    self.active = 1;
    self.team = scripts\engine\utility::ter_op( isdefined( self.script_team ), self.script_team, "" );
    get_door_bottom_center();
    initlinkednodes();
    updatenodelookpeek();
    scripts\sp\door_scriptable::init_destructible();

    if ( self.classname != "script_model" && !isdefined( self.clip ) && !is_clip_nosight() )
    {
        self.clip = self;
        self.clip.doorclip = 1;
    }

    _id_FFA56999ECA9E0BA = strtok( _id_9E4E1482CB40C9C5[0].script_linkname, "_" )[0];
    createinitialnavmodifier( _id_FFA56999ECA9E0BA );
    self.clip connectpaths();

    if ( self.locked )
        scripts\sp\door::create_navobstacle();

    self.nav_lastupdatetime = gettime();
    self.nav_lastupdateangle = self.true_start_angles[1];

    if ( !isdefined( self.script_spawn_open_yaw ) || istrue( level.interactive_doors.close_prompt ) )
        thread cursor_hint_thread();

    thread scripts\sp\door::init_max_yaws();
    thread door_open_think();

    if ( isdefined( self.doubledoors ) )
        scripts\sp\door::double_doors_init( self.doubledoors[0], self.doubledoors[1] );
}

is_clip_nosight()
{
    return isdefined( self.script_noteworthy ) && self.script_noteworthy == "clip_nosight";
}

cursor_hint_thread( _id_3443EFEDC8B77120 )
{
    self notify( "cursor_hint_thread" );
    self endon( "cursor_hint_thread" );
    self endon( "reset_door" );
    self endon( "entitydeleted" );
    self endon( "stop_cursor_hint_thread" );
    self._id_F2507A3C1B546D7C = -1;
    self._id_6CD0321E55F60F8F = -1;
    self.cursorhintdir = ( 0, 0, 0 );
    _id_53153EAF006F13A9 = isdefined( self.open_struct );

    for (;;)
    {
        waitframe();
        set_player_side();

        if ( !_id_53153EAF006F13A9 && has_cursor_hint( self.open_struct ) || cursor_refresh( self.open_struct ) )
        {
            _id_53153EAF006F13A9 = 1;
            self._id_F2507A3C1B546D7C = -1;
        }

        if ( self._id_F2507A3C1B546D7C != self._id_6CD0321E55F60F8F )
        {
            if ( isdefined( self.open_struct ) )
                adjust_cursor_hint_side( self.open_struct );

            if ( isdefined( self.cam_structs ) )
            {
                foreach ( _id_693EC2852A7DE810 in self.cam_structs )
                    adjust_cursor_hint_side( _id_693EC2852A7DE810 );
            }

            if ( isdefined( self.c4_struct ) )
                adjust_cursor_hint_side( self.c4_struct );
        }

        if ( _id_53153EAF006F13A9 )
            _id_53153EAF006F13A9 = has_cursor_hint( self.open_struct );

        if ( isdefined( _id_3443EFEDC8B77120 ) )
            self [[ _id_3443EFEDC8B77120 ]]();
    }
}

cursor_refresh( struct )
{
    if ( isdefined( struct.refresh ) )
    {
        struct.refresh = undefined;
        return 1;
    }

    return 0;
}

has_cursor_hint( struct )
{
    if ( !isdefined( struct ) )
        return 0;

    if ( isarray( struct ) )
    {
        foreach ( s in struct )
        {
            if ( isdefined( s.cursor_hint_ent ) )
                return 1;
        }
    }
    else
        return isdefined( struct.cursor_hint_ent );

    return 0;
}

adjust_cursor_hint_side( struct )
{
    if ( !isdefined( struct.cursor_hint_ent ) )
        return;

    pos = struct.origin;
    _id_584C82B60D83B68A = scripts\sp\door::get_door_angles() - self.true_start_angles;

    if ( abs( _id_584C82B60D83B68A[1] ) > 0.01 && isdefined( self.pivot_ent ) )
    {
        _id_71ADF63EACEFCCF5 = pos - self.pivot_ent.origin;
        _id_71ADF63EACEFCCF5 = rotatevectorinverted( _id_71ADF63EACEFCCF5, self.true_start_angles );
        _id_71ADF63EACEFCCF5 = rotatevector( _id_71ADF63EACEFCCF5, self.pivot_ent.angles );
        pos = _id_71ADF63EACEFCCF5 + self.pivot_ent.origin;
    }

    pos = pos + self.cursorhintdir * struct.radius;
    struct.cursor_hint_ent dontinterpolate();
    struct.cursor_hint_ent.origin = pos;
}

_id_D6F79A2AA10AFCB1()
{
    angles = vectortoangles( self.forward );

    if ( isdefined( self.pivot_ent ) )
        angles = self.pivot_ent.angles;

    right = anglestoright( angles );
    normal = vectornormalize( level.player.origin - self.origin );
    dot = vectordot( right, normal );

    if ( dot > 0 )
        return [ 1, right ];
    else
        return [ 0, right * -1 ];
}

set_player_side()
{
    _id_6CD0321E55F60F8F = _id_D6F79A2AA10AFCB1();
    self._id_F2507A3C1B546D7C = self._id_6CD0321E55F60F8F;
    self._id_6CD0321E55F60F8F = _id_6CD0321E55F60F8F[0];
    self.cursorhintdir = _id_6CD0321E55F60F8F[1];
}

trace_completion_thread()
{
    for (;;)
    {
        _id_3A72705E2EA7E159 = 0;

        foreach ( door in level.interactive_doors.ents )
        {
            if ( !isdefined( door.max_yaw_left ) || !isdefined( door.max_yaw_right ) )
            {
                _id_3A72705E2EA7E159 = 1;
                break;
            }
        }

        if ( !_id_3A72705E2EA7E159 )
            break;
    }

    if ( !scripts\engine\utility::flag( "scriptables_ready" ) )
        scripts\engine\utility::flag_wait( "scriptables_ready" );

    scripts\engine\utility::flag_set( "interactive_doors_ready_internal" );
    waitframe();
    scripts\engine\utility::flag_set( "interactive_doors_ready" );
}

get_hint_dist( _id_A14D77328BA7E8F1 )
{
    if ( isdefined( level.interactive_doors.hint_dist_scale ) )
        return _id_A14D77328BA7E8F1 * level.interactive_doors.hint_dist_scale;

    return _id_A14D77328BA7E8F1;
}

unlock_volume_logic()
{
    door = self.door;

    if ( isdefined( door.doubledoors ) )
        door = door.doubledoors[0];

    if ( !door.locked )
        return;

    self.active = 1;
    door endon( "first_interact" );
    door endon( "ai_opened" );
    door endon( "bashed" );
    door endon( "detonate" );
    door endon( "unlock_volume_logic" );

    for (;;)
    {
        while ( !level.player istouching( self ) && ( !isdefined( door.doubledoorother ) || !isdefined( door.doubledoorother.unlock_volume ) || !level.player istouching( door.doubledoorother.unlock_volume ) ) )
            waitframe();

        door scripts\sp\door::unlock_door();

        while ( level.player istouching( self ) || isdefined( door.doubledoorother ) && isdefined( door.doubledoorother.unlock_volume ) && level.player istouching( door.doubledoorother.unlock_volume ) )
            waitframe();

        door scripts\sp\door::lock_door();
    }
}

refresh_open_struct()
{
    self.refresh = 1;
}

door_open_think()
{
    self notify( "door_open_think" );
    self endon( "door_open_think" );
    self endon( "reset_door" );
    self endon( "entitydeleted" );
    self endon( "stop_open_ability" );
    self endon( "ai_opened" );

    if ( !isdefined( self.script_spawn_open_yaw ) )
    {
        thread scripts\sp\door::bash_monitor();
        waittill_first_interact_or_bash();
    }
    else
        thread scripts\sp\door::door_ajar();

    if ( !self.bashed_full )
    {
        thread monitor_door_push();
        waittill_second_interact_or_bash();
    }

    scripts\sp\door::remove_open_ability();
}

get_max_yaw( left )
{
    _id_341549370DB541DD = 70;
    _id_A587F10EC210B7F8 = 30;
    _id_1A46B093CA0D8A84 = 5;

    if ( left )
    {
        if ( isdefined( self.script_max_left_angle ) )
        {
            self.max_yaw_left = self.script_max_left_angle;
            return;
        }
    }
    else if ( isdefined( self.script_max_right_angle ) )
    {
        self.max_yaw_right = self.script_max_right_angle;
        return;
    }

    _id_3B95C8B5E7F3B716 = get_max_yaw_internal( _id_341549370DB541DD, _id_A587F10EC210B7F8, left );
    _id_3B95C8B5E7F3B716 = _id_3B95C8B5E7F3B716 + _id_1A46B093CA0D8A84;
    _id_775065760C0FB3BA = get_max_yaw_internal( _id_3B95C8B5E7F3B716, _id_1A46B093CA0D8A84, left );

    if ( left )
        self.max_yaw_left = _id_775065760C0FB3BA;
    else
        self.max_yaw_right = _id_775065760C0FB3BA;
}

get_max_yaw_internal( _id_86E2597CACC185B5, _id_2F977E27FA739602, left )
{
    _id_FC50F7F1EC656B5C = 0;
    _id_0F5E6316C2383F5F = 0;
    contents = scripts\engine\trace::create_default_contents( 1 );

    while ( !_id_0F5E6316C2383F5F )
    {
        if ( _id_86E2597CACC185B5 > 179 )
            return 179;

        _id_0E79F8E052557004 = yaw_collision_check( _id_86E2597CACC185B5, left, contents );

        if ( _id_0E79F8E052557004 )
        {
            if ( _id_FC50F7F1EC656B5C )
                finish = 1;

            _id_86E2597CACC185B5 = _id_86E2597CACC185B5 + _id_2F977E27FA739602;
            continue;
        }

        if ( !_id_FC50F7F1EC656B5C )
            _id_FC50F7F1EC656B5C = 1;

        _id_86E2597CACC185B5 = _id_86E2597CACC185B5 - _id_2F977E27FA739602;
        _id_0F5E6316C2383F5F = 1;
    }

    return _id_86E2597CACC185B5;
}

yaw_collision_check( yaw, left, _id_67DA46A87EEFCE53 )
{
    _id_98EA5AFB293A76A2 = 100;

    if ( left )
        _id_98EA5AFB293A76A2 = _id_98EA5AFB293A76A2 * -1;
    else
        yaw = yaw * -1;

    _id_EB10FFC36A6B4B47 = self.true_start_angles + ( 0, yaw, 0 );

    if ( left )
        _id_29AFC51DB09E2830 = self.pivots["open_left"].origin + ( 0, 0, 2 );
    else
        _id_29AFC51DB09E2830 = self.pivots["open_right"].origin + ( 0, 0, 2 );

    start = _id_29AFC51DB09E2830 + anglestoforward( _id_EB10FFC36A6B4B47 ) * self.length * 0.2;
    end = start + anglestoright( _id_EB10FFC36A6B4B47 ) * _id_98EA5AFB293A76A2;
    trace = scripts\engine\trace::capsule_trace( start, end, 6, 80, _id_EB10FFC36A6B4B47, [ self, self.clip ], _id_67DA46A87EEFCE53, 0 );
    dist = distance2d( start, trace["position"] );

    if ( dist > 3 )
    {
        start = _id_29AFC51DB09E2830 + anglestoforward( _id_EB10FFC36A6B4B47 ) * self.length * 0.9;
        trace = scripts\engine\trace::capsule_trace( start, end, 6, 80, _id_EB10FFC36A6B4B47, [ self, self.clip ], _id_67DA46A87EEFCE53, 0 );
        dist = distance2d( start, trace["position"] );
        return dist > 5;
    }

    return 0;
}

draw_max_yaw( left )
{
    yaw = undefined;

    if ( left )
    {
        yaw = self.max_yaw_left;
        start = self.pivots["open_left"].origin;
    }
    else
    {
        yaw = self.max_yaw_right * -1;
        start = self.pivots["open_right"].origin;
    }

    _id_EB10FFC36A6B4B47 = self.true_start_angles + ( 0, yaw, 0 );
    _id_1BEECE0C72F13CF1 = start + anglestoforward( _id_EB10FFC36A6B4B47 ) * self.length;
}

try_door_hint()
{
    self endon( "door_close" );

    if ( istrue( self.nohint ) )
        return;

    if ( !scripts\engine\utility::flag( "did_door_hint" ) )
    {
        thread display_hint_dist_check();

        while ( level.player usebuttonpressed() || isdefined( level.player getplayeruseentity() ) || isdefined( self.hint_delay_until ) && gettime() < self.hint_delay_until )
            waitframe();

        wait 0.25;

        if ( !scripts\engine\utility::flag( "door_second_interact" ) && !scripts\engine\utility::flag( "door_exceed_hint_dist" ) && !istrue( self.bashed ) )
        {
            scripts\engine\utility::flag_set( "did_door_hint" );
            thread scripts\engine\sp\utility::display_hint( "door_hint_1", undefined, undefined, self, "bashed" );
        }
    }
}

first_hint_func()
{
    if ( scripts\engine\utility::flag( "door_second_interact" ) )
        return 1;

    if ( scripts\engine\utility::flag( "door_exceed_hint_dist" ) )
        return 1;

    if ( isdefined( level.player getplayeruseentity() ) )
        return 1;

    return 0;
}

display_hint_dist_check()
{
    self notify( "display_hint_dist_check" );
    self endon( "display_hint_dist_check" );
    self endon( "death" );
    level.player endon( "death" );
    self endon( "reset_door" );
    scripts\engine\utility::flag_clear( "door_exceed_hint_dist" );

    while ( distancesquared( self.origin, level.player.origin ) < squared( 165 ) )
        wait 0.1;

    scripts\engine\utility::flag_set( "door_exceed_hint_dist" );
}

waittill_first_interact_or_bash()
{
    self endon( "entitydeleted" );
    self endon( "bashed" );
    self endon( "open_completely" );
    self waittill( "first_interact" );
    thread scripts\sp\door::door_ajar();
}

waittill_second_interact_or_bash()
{
    self endon( "bashed" );
    self waittill( "open_completely" );

    if ( getdvarint( "dvar_E76702AF051FCB2B" ) )
    {
        thread player_door_gesture( 1 );
        wait 0.1;
    }

    level.player playrumbleonentity( "damage_light" );
    earthquake( 0.13, 0.2, level.player.origin, 200 );
    thread scripts\sp\door::door_open_completely();
}

can_pivot_change()
{
    if ( isdefined( self.pivot_ent ) && isdefined( self.current_pivot_struct ) && self.pivot_ent.angles != self.current_pivot_struct.angles )
        return 0;

    return 1;
}

set_pivot_point( left )
{
    if ( !can_pivot_change() )
    {
        if ( issubstr( self.current_pivot_struct.script_noteworthy, "pivot_left" ) )
            self.hinge_side = "open_left";
        else
            self.hinge_side = "open_right";

        return;
    }

    if ( left )
        _id_AD485AB13FBE5ADE = "open_left";
    else
        _id_AD485AB13FBE5ADE = "open_right";

    self.hinge_side = _id_AD485AB13FBE5ADE;

    if ( !isdefined( self.current_pivot_struct ) || self.current_pivot_struct != self.pivots[_id_AD485AB13FBE5ADE] )
    {
        self.current_pivot_struct = self.pivots[_id_AD485AB13FBE5ADE];

        if ( self islinked() )
            self unlink();

        if ( !isdefined( self.pivot_ent ) )
            self.pivot_ent = scripts\engine\utility::spawn_script_origin( self.current_pivot_struct.origin, self.true_start_angles );
        else
        {
            self.pivot_ent dontinterpolate();
            self.pivot_ent.origin = self.current_pivot_struct.origin;
        }

        wait 0.05;
        self linkto( self.pivot_ent );
    }
}

monitor_open_completely()
{
    self endon( "open_completely" );
    self endon( "stop_monitoring_open_completely" );
    self endon( "entitydeleted" );
    self endon( "reset_door" );

    while ( level.player usebuttonpressed() )
        wait 0.05;

    for (;;)
    {
        if ( !istrue( self.bashed ) && scripts\sp\door::bash_door_isplayerclose() && level.player usebuttonpressed() && !isdefined( level.player getplayeruseentity() ) && pushents_clear() )
        {
            if ( !scripts\engine\utility::flag( "door_second_interact" ) )
                scripts\engine\utility::flag_set( "door_second_interact" );

            self notify( "open_completely" );
        }

        wait 0.05;
    }
}

pushents_clear()
{
    if ( isdefined( self.pushents ) )
    {
        pushents = self.pushents;
        pushents = sortbydistance( pushents, self.origin );

        if ( distancesquared( self.origin, pushents[0].origin ) < 6400 )
        {
            origin = self.origin;
            angles = vectortoangles( self.forward );
            right = anglestoright( angles );
            normal = vectornormalize( pushents[0].origin - origin );
            dot = vectordot( right, normal );
            self.bashblocked = 1;

            if ( dot > 0 )
                return 0;
        }
    }

    return 1;
}

setup_open_struct( struct )
{
    if ( !isdefined( struct.radius ) )
        struct.radius = 2.5;

    if ( !isdefined( self.script_spawn_open_yaw ) )
        struct thread open_struct_logic();
}

open_struct_logic( _id_CDD584C942093E14 )
{
    self.door endon( "stop_open_ability" );
    self.door endon( "stop_open_interact" );

    if ( !isdefined( self.openinteract ) )
        self.openinteract = 0;

    if ( istrue( _id_CDD584C942093E14 ) && !istrue( self.door.nohint ) )
    {
        scripts\sp\door::remove_open_interact_hint();
        self.no_open_interact = undefined;
        scripts\sp\door::create_open_interact_hint( &"SCRIPT/DOOR_HINT_LOCKED" );

        if ( _id_2998DA25F4D455B1( self.door ) )
            childthread _id_A320F9F9DDA13F8F();
    }
    else
        scripts\sp\door::create_open_interact_hint();

    self.door thread door_open_think();
    self waittill( "trigger" );
    self notify( "stop_cursor_hint_thread" );
    self.door notify( "trigger" );
    level.player notify( "door_trigger", self.door );

    if ( getdvarint( "dvar_E76702AF051FCB2B" ) )
        thread player_door_gesture();

    if ( _id_E0B0300FBF1B645B( self.door ) )
    {
        if ( getdvarint( "dvar_E76702AF051FCB2B" ) )
            wait 0.1;

        if ( isdefined( self.door.script_sound_type ) && self.door.script_sound_type == "metal_heavy" )
            thread scripts\engine\utility::play_sound_in_space( "scrpt_door_metal_open_locked", self.cursor_hint_ent.origin );
        else
            thread scripts\engine\utility::play_sound_in_space( "scrpt_door_wood_open_locked", self.cursor_hint_ent.origin );

        level.player playrumbleonentity( "damage_heavy" );
        earthquake( 0.17, 0.2, level.player.origin, 200 );
        self.door notify( "locked" );
        self.door thread cursor_hint_thread();
        thread open_struct_logic( 1 );
        return;
    }

    scripts\sp\door::remove_open_interact_hint();

    if ( getdvarint( "dvar_E76702AF051FCB2B" ) )
        wait 0.1;
    else if ( isdefined( self.door.destructible ) )
        self.door setscriptablepartstate( "main", "open_handle" );

    self.door notify( "first_interact" );

    if ( !scripts\engine\utility::flag( "door_first_interact" ) )
        scripts\engine\utility::flag_set( "door_first_interact" );
}

_id_A320F9F9DDA13F8F()
{
    self endon( "trigger" );
    _id_D2377E1FA2E404A0 = undefined;

    for (;;)
    {
        hintstring = undefined;

        if ( _id_E0B0300FBF1B645B( self.door ) )
            hintstring = &"SCRIPT/DOOR_HINT_LOCKED";
        else if ( self.door door_bashable_by_player( 1 ) )
            hintstring = &"SCRIPT/DOOR_HINT_USE";
        else
            hintstring = &"SCRIPT/DOOR_HINT_USE_NO_BASH";

        if ( !scripts\engine\utility::is_equal( hintstring, _id_D2377E1FA2E404A0 ) )
            self.cursor_hint_ent sethintstring( hintstring );

        _id_D2377E1FA2E404A0 = hintstring;
        waitframe();
    }
}

_id_2998DA25F4D455B1( door )
{
    return isdefined( door.script_side );
}

_id_E0B0300FBF1B645B( door )
{
    if ( !door.locked )
        return 0;

    if ( !isdefined( door.script_side ) )
        return 1;

    _id_65F355BCEE376AF7 = door _id_D6F79A2AA10AFCB1()[0];

    if ( door.script_side == "right" && _id_65F355BCEE376AF7 )
        return 1;

    if ( door.script_side == "left" && !_id_65F355BCEE376AF7 )
        return 1;

    return 0;
}

should_do_gesture()
{
    return !isnullweapon( level.player getcurrentweapon() );
}

player_door_gesture( _id_846CD8D00B0CE200 )
{
    self notify( "player_door_gesture" );
    self endon( "player_door_gesture" );

    if ( isdefined( _id_846CD8D00B0CE200 ) && _id_846CD8D00B0CE200 )
        gesture = level.interactive_doors.gesture_door_hard;
    else
        gesture = level.interactive_doors.gesture_door;

    thread pushplayertodoor();
    target = scripts\engine\utility::spawn_tag_origin();
    target.origin = self.origin;

    if ( [[ level.interactive_doors.fnshoulddogesture ]]() )
    {
        level.player playgestureviewmodel( gesture, target );
        wait( level.player getgestureanimlength( gesture ) );
    }

    target delete();
}

pushplayertodoor()
{
    _id_D533BFE71A304271 = 0.04;
    _id_039C7CB1B3E7BE92 = 0.2;
    _id_805136F88545A0DB = 0;
    level.player thread scripts\engine\sp\utility::blend_movespeedscale( 0.1, 0.3, "doorOpen" );

    while ( _id_805136F88545A0DB < 0.99 )
    {
        if ( !isdefined( self ) )
            break;

        pushlogic( _id_805136F88545A0DB );
        _id_805136F88545A0DB = _id_805136F88545A0DB + _id_039C7CB1B3E7BE92;
        wait 0.05;
    }

    _id_805136F88545A0DB = 1;
    level.player thread scripts\engine\sp\utility::blend_movespeedscale( 1.0, 0.7, "doorOpen" );

    while ( _id_805136F88545A0DB > 0.01 )
    {
        if ( !isdefined( self ) )
            break;

        pushlogic( _id_805136F88545A0DB );
        _id_805136F88545A0DB = _id_805136F88545A0DB - _id_D533BFE71A304271;
        wait 0.05;
    }

    level.player _meth_96B1C716E98711DB( ( 0, 0, 0 ) );
}

pushlogic( _id_805136F88545A0DB )
{
    _id_06A3A1033FFC2699 = self.origin - level.player geteye();
    dist = length( _id_06A3A1033FFC2699 );
    _id_F040B14F2844EB5F = scripts\engine\math::normalize_value( 20, 50, dist );
    _id_8974DDE492050A44 = scripts\engine\math::factor_value( 5, 11, _id_F040B14F2844EB5F );
    dir = vectornormalize( _id_06A3A1033FFC2699 );
    _id_F8048727716242B0 = _id_805136F88545A0DB * _id_8974DDE492050A44;
    level.player _meth_96B1C716E98711DB( dir * _id_F8048727716242B0 );
}

player_window_gesture( duration )
{
    self notify( "player_window_gesture" );
    self endon( "player_window_gesture" );
    gesture = level.interactive_doors.gesture_window;

    if ( [[ level.interactive_doors.fnshoulddogesture ]]() )
    {
        duration = scripts\engine\utility::ter_op( isdefined( duration ), duration, 1 );
        level.player playgestureviewmodel( gesture );
        wait( duration );
    }

    level.player stopgestureviewmodel( gesture, 2 );
}

door_bashable_by_player( _id_E6934380371D7DD3 )
{
    if ( istrue( self.no_bash ) || istrue( self.was_opened_halfway ) || istrue( self.open_completely ) || istrue( self.bashed ) )
        return 0;

    if ( istrue( _id_E6934380371D7DD3 ) )
        return 1;

    if ( isnullweapon( level.player getcurrentweapon() ) )
        return 0;

    if ( _id_4812CDA9829D627A() )
        return 1;

    return 0;
}

_id_4812CDA9829D627A()
{
    if ( scripts\engine\utility::within_fov( level.player.origin, level.player.angles, get_door_bottom_center(), 0.82 ) )
        return 1;
    else
    {

    }

    if ( scripts\engine\utility::within_fov( level.player.origin, level.player.angles, get_door_bottom_handle(), 0.82 ) )
        return 1;
    else
    {

    }

    if ( scripts\engine\utility::within_fov( level.player.origin, level.player.angles, get_door_bottom_origin(), 0.82 ) )
        return 1;
    else
    {

    }

    return 0;
}

should_bash_open()
{
    thread bash_debug( 1 );

    if ( door_bashable_by_player() )
    {
        if ( level.player ismeleeing() )
        {
            thread bash_debug( 2000 );
            return 1;
        }

        if ( !level.player issprinting() )
            return 0;

        if ( getdvarint( "dvar_0FB93587642C681F" ) )
        {
            if ( !level.player usebuttonpressed() )
                return 0;
        }

        _id_7A50883C31353C77 = length( level.player getvelocity() );

        if ( _id_7A50883C31353C77 < 50 )
            return 0;

        _id_06A3A1033FFC2699 = vectornormalize( level.player geteye() - get_door_center() );
        _id_DADEF0255A662758 = vectordot( _id_06A3A1033FFC2699, anglestoforward( scripts\sp\door::get_door_angles() ) );

        if ( abs( _id_DADEF0255A662758 ) > 0.4 )
            return 0;

        self.bashscale = scripts\engine\math::lerp_fraction( 50, 195, _id_7A50883C31353C77 );
        thread bash_debug( 2000 );
        return 1;
    }

    return 0;
}

bash_debug( duration )
{

}

stealth_broadcast( event, _id_655FF8A25D65DF4B, radius )
{
    if ( !isdefined( radius ) && _func_1C1B9D33706C152D( _id_655FF8A25D65DF4B, event ) )
        return;

    dist = scripts\engine\utility::ter_op( isdefined( radius ), radius, 500 );
    guys = scripts\engine\sp\utility::get_all_closest_living( self.origin, getaiarray( "axis" ), dist, 0 );

    if ( !guys.size )
        return;

    foreach ( g in guys )
    {
        if ( isdefined( g.stealth ) )
            g aieventlistenerevent( event, level.player, self.origin );
    }
}

combat_getinfoinradius( radius )
{
    dist = scripts\engine\utility::ter_op( isdefined( radius ), radius, 500 );
    guys = scripts\engine\sp\utility::get_all_closest_living( self.origin, getaiarray( "axis" ), dist, 0 );

    if ( !guys.size )
        return;

    foreach ( g in guys )
        g getenemyinfo( level.player );
}

get_bash_yaw( scale )
{
    if ( self.open_left )
    {
        _id_766AD0D13D1BBA2C = self.max_yaw_left;

        if ( scale < 1 )
        {
            _id_766AD0D13D1BBA2C = scripts\engine\math::factor_value( 55, 170, scale );
            _id_766AD0D13D1BBA2C = min( _id_766AD0D13D1BBA2C, self.max_yaw_left );
        }

        _id_62ED0570F5E80A07 = self.true_start_angles[1] + _id_766AD0D13D1BBA2C;
    }
    else
    {
        _id_FE1F39249917DF19 = self.max_yaw_right;

        if ( scale < 1 )
        {
            _id_FE1F39249917DF19 = scripts\engine\math::factor_value( 55, 170, scale );
            _id_FE1F39249917DF19 = min( _id_FE1F39249917DF19, self.max_yaw_right );
        }

        _id_62ED0570F5E80A07 = self.true_start_angles[1] - _id_FE1F39249917DF19;
    }

    if ( isdefined( self.pushents ) )
    {
        pushents = self.pushents;
        pushents = sortbydistance( pushents, self.origin );

        if ( distancesquared( self.origin, pushents[0].origin ) < 6400 )
        {
            origin = self.origin;
            angles = vectortoangles( self.forward );
            right = anglestoright( angles );
            normal = vectornormalize( pushents[0].origin - origin );
            dot = vectordot( right, normal );
            self.bashblocked = 1;

            if ( dot > 0 )
                _id_62ED0570F5E80A07 = self.true_start_angles[1] - 4;
            else
                _id_62ED0570F5E80A07 = self.true_start_angles[1] + 4;
        }
    }

    return _id_62ED0570F5E80A07;
}

bashed_locked_door( velocity )
{
    level.player endon( "death" );

    if ( isdefined( self.isbashing ) )
        return;

    self.isbashing = 1;
    thread bashed_locked_door_sfx();
    self notify( "trigger" );
    self notify( "bashing_while_locked" );
    self notify( "locked" );
    level.player viewkick( 10, get_door_center(), 0 );
    earthquake( 1, 0.3, level.player.origin, 75 );
    level.player playrumbleonentity( "heavy_1s" );
    thread cursor_hint_thread();
    self.open_struct thread open_struct_logic( 1 );

    while ( level.player ismeleeing() )
        waitframe();

    self.isbashing = undefined;
}

bashed_locked_door_sfx()
{
    if ( !isdefined( self.bashedsfx ) )
    {
        self.bashedsfx = 1;
        org = spawn( "script_origin", self.origin + ( 0, 0, 42 ) );
        org playsound( "door_locked_bashed", "sounddone" );

        if ( randomint( 100 ) < 40 )
            level.player playsound( "breathing_limp" );

        org waittill( "sounddone" );
        org delete();
        self.bashedsfx = undefined;
    }
}

door_bash_presentation()
{
    _func_8111D316E1958815( level.player.origin, 16, 0, 0, 0.45 );
    level.player playrumbleonentity( "grenade_rumble" );
    earthquake( 0.6, 0.75, level.player.origin, 200 );
}

close_prompt( delay )
{
    self notify( "close_prompt" );
    self endon( "close_prompt" );
    self endon( "reset_door" );
    self endon( "entitydeleted" );

    if ( !istrue( level.interactive_doors.close_prompt ) )
        return;

    scripts\engine\utility::flag_wait( "interactive_doors_ready" );

    if ( isdefined( delay ) )
        wait( delay );

    for (;;)
    {
        self.open_struct.no_open_interact = undefined;
        self.open_struct thread scripts\sp\door::create_open_interact_hint( &"SCRIPT/DOOR_HINT_CLOSE" );
        thread cursor_hint_thread();
        waitframe();
        self.open_struct waittill( "trigger" );

        if ( !close_check() )
        {
            thread scripts\engine\sp\utility::display_hint( "door_hint_obstructed", 1 );
            wait 1;
            continue;
        }

        self notify( "stop_monitoring_open_completely" );

        if ( isdefined( self.doubledoorother ) )
            self.doubledoorother notify( "stop_monitoring_open_completely" );

        if ( getdvarint( "dvar_E76702AF051FCB2B" ) )
            thread player_door_gesture();

        if ( isdefined( self.doubledoorother ) )
        {
            self.doubledoorother thread scripts\sp\door::remove_open_prompts();
            self.doubledoorother thread scripts\sp\door::door_close();
        }

        scripts\sp\door::door_close();
        waitframe();

        if ( isdefined( self.doubledoorother ) )
            self.doubledoorother thread scripts\sp\door::reset_door();

        thread scripts\sp\door::reset_door();
    }
}

close_check()
{
    contents = scripts\engine\trace::create_character_contents();
    _id_D6FA59FC42D17B53 = scripts\sp\door::get_door_angles()[1];
    _id_3E0A8967AE116926 = self.true_start_angles[1];
    _id_A1B6E266BCAD49FE = ceil( abs( _id_3E0A8967AE116926 - _id_D6FA59FC42D17B53 ) / 15 );
    left = self.current_pivot_struct == self.pivots["open_left"];

    for ( trace = 0; trace < _id_A1B6E266BCAD49FE; trace++ )
    {
        angle = _id_D6FA59FC42D17B53 + ( _id_3E0A8967AE116926 - _id_D6FA59FC42D17B53 ) * trace / _id_A1B6E266BCAD49FE;

        if ( !yaw_collision_check( angle, left, contents ) )
            return 0;
    }

    return 1;
}

monitor_door_push( delay )
{
    self notify( "monitor_door_push" );
    self endon( "monitor_door_push" );
    self endon( "reset_door" );
    self endon( "stop_push_open" );
    self endon( "bashed_full" );
    self endon( "entitydeleted" );

    if ( !isdefined( delay ) )
        delay = 0.5;

    if ( self.bashed )
    {
        wait( self.bashtime + 0.05 );
        self.pivot_ent rotateto( self.pivot_ent.angles, 0.05 );
    }
    else if ( delay > 0 )
        wait( delay );

    thread door_ease_in_open_input();

    for (;;)
    {
        if ( scripts\sp\door::interact_door_ispushentclose() )
            push_door();
        else if ( istrue( self.isplayingpushsound ) )
        {
            self.isplayingpushsound = 0;
            self notify( "stop_door_creak" );
        }

        waitframe();
    }
}

door_ease_in_open_input()
{
    maxtime = 1;
    time = maxtime;
    self.masterdoorratescale = 0;

    for (;;)
    {
        if ( !isdefined( self ) || time <= 0 )
            break;

        self.masterdoorratescale = 1 - time / maxtime;
        wait 0.05;
        time = time - 0.05;
    }

    self.masterdoorratescale = 1;
}

get_pushent()
{
    if ( isdefined( self.pushents ) )
        pushents = scripts\engine\utility::array_add( self.pushents, level.player );
    else
        return level.player;

    pushents = sortbydistance( pushents, self.origin );
    return pushents[0];
}

push_door()
{
    if ( self.bashed_full )
        return;

    if ( istrue( self.bash_opening ) )
        return;

    _id_1B7AE3FFB4D76416 = get_pushent();
    _id_21B0311D64CADFA2 = 36;
    _id_76C663E82A2008DC = 0;
    _id_8928780331CE6436 = 25;
    endpoint = interact_door_get_endpoint();
    dist = distance( _id_1B7AE3FFB4D76416.origin, endpoint );
    _id_477C1209E5432ABE = scripts\engine\math::normalize_value( _id_76C663E82A2008DC, _id_21B0311D64CADFA2, dist );
    amount = _id_8928780331CE6436 * ( 1 - _id_477C1209E5432ABE );
    amount = amount * self.masterdoorratescale;
    _id_FE79A915D99A0E77 = scripts\sp\door::should_open_left( self.pivot_ent.angles, _id_1B7AE3FFB4D76416 );

    if ( abs( amount ) < 0.001 )
        return;

    self.open_struct scripts\sp\door::remove_open_interact_hint();
    _id_9DBBC8DD984310F1 = scripts\sp\door::get_door_angles()[1];
    _id_4B77BC67B7834C10 = scripts\engine\utility::ter_op( _id_FE79A915D99A0E77 == 1, 1, -1 );
    _id_91684A9882455754 = _id_9DBBC8DD984310F1 + amount * _id_4B77BC67B7834C10;

    if ( _id_FE79A915D99A0E77 )
    {
        if ( self.hinge_side == "open_left" )
        {
            angle_diff = scripts\sp\door::angle_diff( _id_91684A9882455754, self.true_start_angles[1] );

            if ( angle_diff > self.max_yaw_left )
            {
                self.debug_activity = "Pushed to max left yaw of " + self.max_yaw_left;
                self.open_completely = 1;
                thread scripts\sp\door::updatenavobstacle();
                self notify( "stop_push_open" );
                return;
            }
        }
        else if ( _id_91684A9882455754 > self.true_start_angles[1] )
        {
            self.debug_activity = "Pushed back closed, right hinge";

            if ( !_id_9F4E269E748B55D0() )
            {
                thread scripts\sp\door::reset_door();
                self notify( "stop_push_open" );
                return;
            }
        }
    }
    else if ( self.hinge_side == "open_right" )
    {
        angle_diff = abs( scripts\sp\door::angle_diff( _id_91684A9882455754, self.true_start_angles[1] ) );

        if ( angle_diff > self.max_yaw_right )
        {
            self.debug_activity = "Pushed to max right yaw of " + self.max_yaw_right;
            self.open_completely = 1;
            thread scripts\sp\door::updatenavobstacle();
            self notify( "stop_push_open" );
            return;
        }
    }
    else if ( _id_91684A9882455754 < self.true_start_angles[1] )
    {
        self.debug_activity = "Pushed back closed, left hinge";

        if ( !_id_9F4E269E748B55D0() )
        {
            thread scripts\sp\door::reset_door();
            self notify( "stop_push_open" );
            return;
        }
    }

    if ( amount > 0.4 )
    {
        thread try_push_sound();

        if ( !scripts\engine\utility::flag( "door_second_interact" ) )
            scripts\engine\utility::flag_set( "door_second_interact" );
    }
    else if ( istrue( self.isplayingpushsound ) )
    {
        self.isplayingpushsound = 0;
        self notify( "stop_door_creak" );
    }

    self.pivot_ent.angles = ( self.pivot_ent.angles[0], _id_91684A9882455754, self.pivot_ent.angles[2] );
    self.forward = anglestoforward( self.pivot_ent.angles );

    if ( door_is_half_open() )
    {
        if ( !self.was_opened_halfway )
            thread suspicious_door_stealth_check( 1 );

        self.was_opened_halfway = 1;
        thread close_prompt( 0.25 );
    }

    updatenodelookpeek();
    _id_6B7BEE46F2C6DA28 = gettime();

    if ( abs( angleclamp180( self.pivot_ent.angles[1] - self.nav_lastupdateangle ) ) > 20 && _id_6B7BEE46F2C6DA28 - self.nav_lastupdatetime > 250 || _id_6B7BEE46F2C6DA28 - self.nav_lastupdatetime > 1500 )
        thread scripts\sp\door::updatenavobstacle( 1 );
}

_id_9F4E269E748B55D0()
{
    _id_8DD59109B3CB5E34 = 0;

    if ( istrue( self.destructible ) || self isscriptable() )
    {
        if ( self getscriptablepartstate( "1" ) != "show" )
            _id_8DD59109B3CB5E34 = 1;

        if ( !_id_8DD59109B3CB5E34 )
        {
            _id_9D2E5AB82BC374FF = 0;

            foreach ( part in self.parts )
            {
                if ( part.health <= 0 )
                    _id_9D2E5AB82BC374FF++;
            }

            if ( _id_9D2E5AB82BC374FF / self.parts.size > 0.6 )
                _id_8DD59109B3CB5E34 = 1;
        }
    }

    return _id_8DD59109B3CB5E34;
}

push_door_player_effects()
{
    _id_FE79A915D99A0E77 = scripts\sp\door::should_open_left( self.pivot_ent.angles, level.player );
    _id_53C5FF2101805FA1 = self.pivot_ent;
    _id_7148C1A6F25491F8 = "doorPush" + self.doorid;

    if ( !isdefined( self.dooroffset ) )
    {
        self.dooroffset = ( 0, 0, 0 );
        self.doorrot = ( 0, 0, 0 );
        self.doorspeedscale = 1;
    }

    level.player notify( "newoffset" );
    level.player endon( "newoffset" );

    for (;;)
    {
        _id_D7FB0EA745804AA9 = door_get_pushspot();
        _id_3CB06B55E15364AA = ( _id_D7FB0EA745804AA9[0], _id_D7FB0EA745804AA9[1], level.player.origin[2] ) - level.player.origin;
        _id_1A291042071CA88B = vectornormalize( _id_3CB06B55E15364AA );
        _id_52A4AFA1649778EE = anglestoforward( level.player.angles );
        _id_775361D05A790917 = vectorcross( _id_52A4AFA1649778EE, _id_1A291042071CA88B );
        dot = vectordot( _id_52A4AFA1649778EE, _id_1A291042071CA88B );
        _id_271C6B91E677E543 = length( _id_3CB06B55E15364AA );
        _id_36D594EB592F4121 = level.player getnormalizedmovement();
        _id_36D594EB592F4121 = ( _id_36D594EB592F4121[0], -1 * _id_36D594EB592F4121[1], 0 );
        _id_E08E0AA827953208 = rotatevector( _id_36D594EB592F4121, level.player.angles );
        _id_0E2DF997A605BDBF = vectornormalize( _id_E08E0AA827953208 );
        _id_0E24F397A5FB91DF = vectordot( _id_0E2DF997A605BDBF, _id_1A291042071CA88B );
        _id_A870F5975B6135E7 = clamp( length( _id_E08E0AA827953208 ), 0, 1 );

        if ( _id_775361D05A790917[2] > 0 )
        {
            _id_31FA3CF311E619D3 = ( 0, 4, 0 );
            _id_5BA1A48CE1CFC9AD = ( 0, -5, 0 );
        }
        else
        {
            _id_31FA3CF311E619D3 = ( 0, -2, 0 );
            _id_5BA1A48CE1CFC9AD = ( 0, 2, 0 );
        }

        if ( dot > 0 )
        {
            if ( _id_FE79A915D99A0E77 )
            {
                _id_E094D5D8146B9589 = ( 4, -1.5, 0 );
                _id_81878C0E3B7A387F = ( -6, 5, 1.5 );
            }
            else
            {
                _id_E094D5D8146B9589 = ( 4, -1.5, 0 );
                _id_81878C0E3B7A387F = ( -6, -3, -1.5 );
            }
        }
        else
        {
            _id_E094D5D8146B9589 = ( -3, 0, 0 );
            _id_81878C0E3B7A387F = ( 0, 0, 0 );
        }

        _id_67A920A30DA099A0 = scripts\engine\math::normalize_value( 0.6, 1.0, abs( dot ) );
        _id_67A920A30DA099A0 = scripts\engine\math::normalized_float_smooth_in( _id_67A920A30DA099A0 );
        offset = scripts\engine\math::factor_value( _id_31FA3CF311E619D3, _id_E094D5D8146B9589, _id_67A920A30DA099A0 );
        _id_CB89120314447D62 = scripts\engine\math::factor_value( _id_5BA1A48CE1CFC9AD, _id_81878C0E3B7A387F, _id_67A920A30DA099A0 );
        _id_E36D7712ECD4BE90 = scripts\engine\math::normalize_value( 0, 1, _id_0E24F397A5FB91DF );
        _id_F84A6367DA0E58C8 = scripts\engine\math::normalize_value( 0, 0.5, _id_A870F5975B6135E7 );
        _id_7646A46ABC647F06 = 1 - scripts\engine\math::normalize_value( 20, 50, _id_271C6B91E677E543 );

        if ( level.player _meth_D90F68A0167DD7BE() )
            _id_AF52285632455309 = 0.5;
        else
            _id_AF52285632455309 = 1.0;

        _id_969F06899B0ABB5C = 1.0;
        _id_969F06899B0ABB5C = _id_969F06899B0ABB5C * _id_E36D7712ECD4BE90;
        _id_969F06899B0ABB5C = _id_969F06899B0ABB5C * _id_F84A6367DA0E58C8;
        _id_969F06899B0ABB5C = _id_969F06899B0ABB5C * _id_7646A46ABC647F06;
        _id_969F06899B0ABB5C = _id_969F06899B0ABB5C * _id_AF52285632455309;
        offset = offset * _id_969F06899B0ABB5C;
        _id_CB89120314447D62 = _id_CB89120314447D62 * _id_969F06899B0ABB5C;

        if ( length( offset ) > length( self.dooroffset ) )
            lerp = 0.312;
        else
            lerp = 0.234;

        _id_8B953A03A24F231D = 1 - level.player playerads();

        if ( level.player adsbuttonpressed() )
            _id_8B953A03A24F231D = scripts\engine\math::normalize_value( 0.8, 1.0, _id_8B953A03A24F231D );

        self.dooroffset = scripts\engine\math::lerp( self.dooroffset, offset, lerp );
        self.doorrot = scripts\engine\math::lerp( self.doorrot, _id_CB89120314447D62, lerp );
        _id_8EC01BFDCAFB22F1 = 1;
        _id_E36D7712ECD4BE90 = scripts\engine\math::normalize_value( 0, 1, _id_0E24F397A5FB91DF );
        _id_F84A6367DA0E58C8 = scripts\engine\math::normalize_value( 0, 0.01, _id_A870F5975B6135E7 );
        _id_7646A46ABC647F06 = 1 - scripts\engine\math::normalize_value( 25, 70, _id_271C6B91E677E543 );
        _id_8EC01BFDCAFB22F1 = _id_8EC01BFDCAFB22F1 * _id_E36D7712ECD4BE90;
        _id_8EC01BFDCAFB22F1 = _id_8EC01BFDCAFB22F1 * _id_F84A6367DA0E58C8;
        _id_8EC01BFDCAFB22F1 = _id_8EC01BFDCAFB22F1 * _id_7646A46ABC647F06;
        _id_BFF2A7822F594386 = scripts\engine\math::factor_value( 1, 0.2, _id_8EC01BFDCAFB22F1 );
        lerp = 0.3;
        self.doorspeedscale = scripts\engine\math::lerp( self.doorspeedscale, _id_BFF2A7822F594386, lerp );
        level.player scripts\engine\sp\utility::blend_movespeedscale( self.doorspeedscale, 0, _id_7148C1A6F25491F8 );

        if ( length( self.dooroffset ) < 0.001 && self.doorspeedscale > 0.99 )
            break;

        if ( !isdefined( self ) )
            break;

        wait 0.05;
        offset = ( 0, 0, 0 );
    }

    if ( isdefined( self ) )
    {
        self.dooroffset = ( 0, 0, 0 );
        self.doorrot = ( 0, 0, 0 );
        self.doorspeedscale = 1;
    }

    level.player scripts\engine\sp\utility::blend_movespeedscale( 1, 0, _id_7148C1A6F25491F8 );
}

door_get_pushspot()
{
    _id_93271FE51551B254 = 12;
    _id_88DA70B42BDB91D4 = level.player.origin + anglestoforward( level.player.angles ) * _id_93271FE51551B254;
    endpoint = interact_door_get_endpoint();
    startpoint = self.origin + self.forward * 5;
    _id_D7FB0EA745804AA9 = pointonsegmentnearesttopoint( startpoint, endpoint, _id_88DA70B42BDB91D4 );
    return _id_D7FB0EA745804AA9;
}

initlinkednodes()
{
    _id_29312C830DA81A53 = get_door_bottom_center();
    nodes = getnodesinradius( _id_29312C830DA81A53, self.length * 0.5 + 32, 0, 80, "cover" );

    if ( nodes.size > 0 )
    {
        self.linkednodes_hinge = [];
        self.linkednodes_knob = [];
        _id_6538798BEDE76402 = undefined;

        if ( isdefined( self.pivots["open_left"] ) )
            _id_6538798BEDE76402 = self.pivots["open_left"].origin;
        else if ( isdefined( self.pivots["open_right"] ) )
            _id_6538798BEDE76402 = self.pivots["open_right"].origin;
        else
        {

        }

        _id_73752DB085AA0240 = _id_6538798BEDE76402 - _id_29312C830DA81A53;

        foreach ( node in nodes )
        {
            _id_E86598E262FD7C11 = node.origin - _id_29312C830DA81A53;

            if ( vectordot( _id_E86598E262FD7C11, _id_73752DB085AA0240 ) > 0 )
            {
                self.linkednodes_hinge[self.linkednodes_hinge.size] = node;
                continue;
            }

            self.linkednodes_knob[self.linkednodes_knob.size] = node;
        }
    }
    else
    {
        self.linkednodes_hinge = undefined;
        self.linkednodes_knob = undefined;
    }
}

updatenodelookpeek()
{
    _id_AB6786247C63ACC0 = angleclamp180( scripts\sp\door::get_door_angles()[1] );
    _id_920EF7BDD718653C = abs( angleclamp180( _id_AB6786247C63ACC0 - self.true_start_angles[1] ) );

    if ( isdefined( self.linkednodes_hinge ) )
    {
        _id_807CD8789B963DF2 = anglestoforward( ( 0, _id_AB6786247C63ACC0, 0 ) );

        foreach ( node in self.linkednodes_hinge )
        {
            if ( _id_920EF7BDD718653C > 90 )
                node _meth_E7EC030A6AD3E5F8( 1 );
            else
                node _meth_E7EC030A6AD3E5F8( 0 );

            if ( _id_920EF7BDD718653C > 80 )
            {
                _id_E9CEC583070AF166 = anglestoforward( node.angles );

                if ( vectordot( _id_807CD8789B963DF2, _id_E9CEC583070AF166 ) < 0 )
                    node _meth_547AAB3C2787AC87();
                else
                    node _meth_4586023ECC3AE8AD();

                continue;
            }

            node _meth_4586023ECC3AE8AD();
        }
    }

    if ( isdefined( self.linkednodes_knob ) )
    {
        foreach ( node in self.linkednodes_knob )
        {
            if ( _id_920EF7BDD718653C > 45 )
            {
                node _meth_E7EC030A6AD3E5F8( 1 );
                continue;
            }

            node _meth_E7EC030A6AD3E5F8( 0 );
        }
    }
}

createinitialnavmodifier( _id_FFA56999ECA9E0BA )
{
    if ( !isdefined( self.navmodifier ) )
    {
        _id_F2E2FCFB5787ED46 = _id_FFA56999ECA9E0BA + "_nav_modifier";
        self.navmodifier = _func_ C5C9A79BF64E5CB( _id_F2E2FCFB5787ED46, "script_linkname" );

        if ( !isdefined( self.navmodifier ) )
            iprintln( "Closed door has no nav modifier!" );
        else
        {

        }
    }
}

suspicious_door_stealth_check( _id_B69422D8466298E6 )
{
    if ( !isdefined( level.stealth ) )
        return;

    if ( !getdvarint( "dvar_6109644D57E1122E" ) || !isdefined( level.stealth ) )
        return;

    if ( _id_B69422D8466298E6 )
        level.stealth.suspicious_door.doors[level.stealth.suspicious_door.doors.size] = self;
    else
        level.stealth.suspicious_door.doors = scripts\engine\utility::array_remove( level.stealth.suspicious_door.doors, self );
}

try_push_sound()
{
    if ( !isdefined( self.isplayingpushsound ) )
        self.isplayingpushsound = 0;

    if ( !self.isplayingpushsound )
    {
        self.isplayingpushsound = 1;
        thread door_creak_sound();
    }
}

door_creak_sound()
{
    self notify( "stop stopping door creak" );
    _id_07DA6017ED0AEE8E = get_door_audio_material();
    self _meth_F4604329F388A96F( 1 );
    alias = "scrpt_door_" + _id_07DA6017ED0AEE8E + "_creak_lp";

    if ( soundexists( alias ) )
        self playloopsound( alias );

    scripts\engine\utility::waittill_any( "stop_door_creak", "stop_push_open" );
    thread door_creak_sound_stop();
}

door_creak_sound_stop()
{
    self endon( "stop stopping door creak" );
    self _meth_F4604329F388A96F( 0, 0.5 );
    wait 0.55;
    self stoploopsound();
}

interact_door_get_endpoint()
{
    return self.origin + self.forward * self.length;
}

door_is_at_max_yaw( _id_4C08F529FE76E4A8 )
{
    angle_diff = scripts\sp\door::angle_diff( scripts\sp\door::get_door_angles()[1], self.true_start_angles[1] );

    if ( isdefined( _id_4C08F529FE76E4A8 ) )
        return angle_diff >= self.max_yaw_left || angle_diff <= -1 * self.max_yaw_right;

    if ( self.open_left )
        return angle_diff >= self.max_yaw_left;
    else
        return angle_diff <= -1 * self.max_yaw_right;
}

door_is_half_open()
{
    angle_diff = scripts\sp\door::angle_diff( scripts\sp\door::get_door_angles()[1], self.true_start_angles[1] );

    if ( self.open_left )
        return angle_diff >= self.max_yaw_left / 2;
    else
        return angle_diff <= self.max_yaw_right / -2;
}

door_is_open_at_least( _id_F6047DF4BBAC6212 )
{
    angle_diff = scripts\sp\door::angle_diff( scripts\sp\door::get_door_angles()[1], self.true_start_angles[1] );
    return abs( angle_diff ) >= _id_F6047DF4BBAC6212;
}

get_door_center()
{
    angles = scripts\sp\door::get_door_angles();
    self.doorcenter = self.origin + ( 0, 0, 55 ) + anglestoforward( angles ) * ( self.length * 1.2 ) / 2;
    return self.doorcenter;
}

get_door_bottom_center()
{
    self.doorbottomcenter = get_door_center();
    self.doorbottomcenter = ( self.doorbottomcenter[0], self.doorbottomcenter[1], self.origin[2] );
    return self.doorbottomcenter;
}

get_door_bottom_handle()
{
    angles = scripts\sp\door::get_door_angles();
    self.doorbottomhandle = self.origin + anglestoforward( angles ) * self.length;
    return self.doorbottomhandle;
}

get_door_bottom_origin()
{
    self.doorbottomorigin = self.origin;
    return self.doorbottomorigin;
}

isnavpointaccesiblefrombehinddoor( targetpos, door )
{
    if ( isdefined( door.doorbottomcenter ) )
        _id_0C3EA9B1A20FF199 = door.doorbottomcenter;
    else
        _id_0C3EA9B1A20FF199 = door.origin;

    _id_06A3A1033FFC2699 = vectornormalize( _id_0C3EA9B1A20FF199 - self.origin );
    _id_3E0586184E6FE4D5 = _id_0C3EA9B1A20FF199 + anglestoforward( vectortoangles( _id_06A3A1033FFC2699 ) ) * 7;
    trace = navtrace( _id_3E0586184E6FE4D5, targetpos, self, 1 );
    color = ( 0, 1, 0 );

    if ( trace["fraction"] < 0.88 )
        color = ( 1, 0, 0 );

    iprintln( trace["fraction"] );
    return trace["fraction"] >= 0.9;
}

print_navtrace( point )
{
    self endon( "death" );

    for (;;)
    {
        trace = navtrace( self.origin, point, self, 1 );
        wait 0.05;
    }
}

print3d_on_me( _id_E94B62032A5AE9C3, duration )
{
    self endon( "death" );
    duration = duration * 1000;
    time = gettime();

    while ( gettime() < time + duration )
        wait 0.05;
}

get_door_audio_material()
{
    _id_702D68F1EC16E21C = self.script_sound_type;

    if ( !isdefined( _id_702D68F1EC16E21C ) )
        _id_702D68F1EC16E21C = "wood_heavy";

    return _id_702D68F1EC16E21C;
}

double_doors_init_auto()
{
    foreach ( door in level.interactive_doors.ents )
    {
        _id_1BD9ABF0A34E2AB9 = getentarrayinradius( "interactive_door", "script_noteworthy", door.origin, 150 );
        _id_F85F26257033C0F2 = anglestoforward( door.angles );

        foreach ( otherdoor in _id_1BD9ABF0A34E2AB9 )
        {
            if ( otherdoor == door )
                continue;

            if ( isdefined( otherdoor.doubledoors ) )
                continue;

            if ( vectordot( anglestoforward( otherdoor.angles ), _id_F85F26257033C0F2 ) < -0.99 )
            {
                scripts\sp\door::double_doors_init( door, otherdoor );
                break;
            }
        }
    }
}

double_doors_waittill_interact()
{
    self notify( "double_doors_waittill_interact" );
    self endon( "double_doors_waittill_interact" );
    self endon( "bashed" );
    self endon( "open_completely" );
    self waittill( "first_interact" );
    self.doubledoorother notify( "first_interact" );
}

double_doors_waittill_bashed()
{
    self notify( "double_doors_waittill_bashed" );
    self endon( "double_doors_waittill_bashed" );
    self endon( "first_interact" );
    self endon( "open_completely" );

    for (;;)
    {
        self waittill( "attempt_bash", opener );
        self.doubledoorother thread scripts\sp\door::door_bash_open( opener );

        if ( !self.locked )
            return;
    }
}

double_doors_waittill_open_completely()
{
    self notify( "double_doors_waittill_open_completely" );
    self endon( "double_doors_waittill_open_completely" );
    self endon( "first_interact" );
    self endon( "bashed" );
    self.doubledoorother endon( "open_completely" );
    self.doubledoorother endon( "opened_completely" );
    self waittill( "opened_completely", opener );
    self.doubledoorother thread scripts\sp\door::door_open_completely( opener );
}

double_doors_hint_pos( _id_5C56F786A64D1294 )
{
    scripts\engine\utility::flag_wait( "interactive_doors_ready_internal" );
    struct = spawnstruct();
    struct.origin = scripts\engine\math::get_mid_point( self.open_struct.origin, _id_5C56F786A64D1294.open_struct.origin );
    scripts\sp\door::remove_open_prompts();
    struct.door = self;

    if ( isdefined( self.open_struct ) && isdefined( self.open_struct.radius ) )
        struct.radius = self.open_struct.radius;

    self.open_struct = struct;
    setup_open_struct( struct );
    thread cursor_hint_thread();
}

door_watch_unresolved_collision()
{
    self endon( "death" );

    for (;;)
    {
        if ( isdefined( self.door_unresolved_collision_count ) && self.door_unresolved_collision_count >= 3 )
        {
            if ( !isdefined( self.notsolid ) )
            {
                self notsolid();
                self.notsolid = 1;
                self.door_unresolved_collision_origin = self.origin;
            }
            else if ( isdefined( self.notsolid ) && !level.player istouching( self ) )
            {
                self solid();
                self.notsolid = undefined;
                self.door_unresolved_collision_count = undefined;
                self.door_unresolved_collision_start_time = undefined;
                break;
            }
        }
        else if ( isdefined( self.door_unresolved_collision_count ) && self.door_unresolved_collision_count > 0 && gettime() - self.door_unresolved_collision_start_time > 500 )
        {
            self.door_unresolved_collision_count = undefined;
            self.door_unresolved_collision_start_time = undefined;
            break;
        }

        waitframe();
    }
}

door_watch_unresolved_collision_count()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "unresolved_collision", mover );

        if ( isdefined( mover ) && istrue( mover.doorclip ) )
        {
            if ( !isdefined( mover.door_unresolved_collision_count ) )
            {
                mover.door_unresolved_collision_count = 1;
                mover.door_unresolved_collision_start_time = gettime();
                mover thread door_watch_unresolved_collision();
                continue;
            }

            mover.door_unresolved_collision_count++;
        }
    }
}
