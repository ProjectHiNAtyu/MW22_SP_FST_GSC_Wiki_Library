// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

fakeactor_spawner_init()
{
    if ( isdefined( level._id_7E52ED5E6F4F3456 ) )
        return;

    level._id_7E52ED5E6F4F3456 = 1;
    setdvarifuninitialized( "dvar_19C23C42B928F7E8", 0 );
    setdvarifuninitialized( "dvar_AB259D9B09BAD834", 0 );
    level._effect["fakeactor_muzflash"] = loadfx( "vfx/core/muzflash/ak47_flash_wv" );

    if ( !isdefined( level.max_fakeactors ) )
        level.max_fakeactors = [];

    if ( !isdefined( level.max_fakeactors["allies"] ) )
        level.max_fakeactors["allies"] = 9999;

    if ( !isdefined( level.max_fakeactors["axis"] ) )
        level.max_fakeactors["axis"] = 9999;

    if ( !isdefined( level.max_fakeactors["team3"] ) )
        level.max_fakeactors["team3"] = 9999;

    if ( !isdefined( level.max_fakeactors["neutral"] ) )
        level.max_fakeactors["neutral"] = 9999;

    if ( !isdefined( level.fakeactors ) )
        level.fakeactors = [];

    if ( !isdefined( level.fakeactors["allies"] ) )
        level.fakeactors["allies"] = scripts\engine\sp\utility::struct_arrayspawn();

    if ( !isdefined( level.fakeactors["axis"] ) )
        level.fakeactors["axis"] = scripts\engine\sp\utility::struct_arrayspawn();

    if ( !isdefined( level.fakeactors["team3"] ) )
        level.fakeactors["team3"] = scripts\engine\sp\utility::struct_arrayspawn();

    if ( !isdefined( level.fakeactors["neutral"] ) )
        level.fakeactors["neutral"] = scripts\engine\sp\utility::struct_arrayspawn();

    if ( !isdefined( level.fa_state_machines ) )
    {
        add_state( "default", "anim", ::play_anim_think, ::play_anim_check, 30 );
        add_state( "default", "move", ::move_think, ::move_check, 10 );
        add_state( "default", "traverse", ::traverse_think, ::traverse_check, 20 );
        add_state( "default", "idle", ::idle_think, ::idle_check, 40 );
    }

    level.fakeactor_spawn_func = ::fakeactor_init;

    if ( !isdefined( anim.fa_nodeyaws ) )
    {
        _id_D813083AB2B49B15 = [];
        _id_D813083AB2B49B15["Cover Left"] = 0;
        _id_D813083AB2B49B15["Cover Right"] = -90;
        _id_D813083AB2B49B15["Cover Crouch"] = -90;
        _id_D813083AB2B49B15["Cover Stand"] = -90;
        _id_D813083AB2B49B15["Cover Stand 3D"] = -90;
        anim.fa_nodeyaws = _id_D813083AB2B49B15;
        _id_D813083AB2B49B15 = [];
        _id_D813083AB2B49B15["Cover Left"] = 180;
        _id_D813083AB2B49B15["Cover Left Crouch"] = 0;
        _id_D813083AB2B49B15["Cover Right"] = 180;
        _id_D813083AB2B49B15["Cover Crouch"] = 180;
        _id_D813083AB2B49B15["Cover Stand"] = 180;
        anim.fa_franticnodeyaws = _id_D813083AB2B49B15;
    }
}

get_fakeactors( team )
{
    return level.fakeactors[team].array;
}

is_fakeactor()
{
    return isdefined( self.script_fakeactor ) && self.script_fakeactor;
}

fakeactor_init( _id_3A6FA490549F46D9 )
{
    _id_3A6FA490549F46D9 = scripts\engine\utility::_id_53C4C53197386572( _id_3A6FA490549F46D9, 0 );

    if ( level.fakeactors[self.team].array.size >= level.max_fakeactors[self.team] )
    {
        self delete();
        return;
    }

    thread array_handling( self );
    level notify( "new_fakeactor" );
    self.script_forcespawn = undefined;
    self.flags = 0;
    self.upaimlimit = -89;
    self.downaimlimit = 45;
    self.rightaimlimit = -45;
    self.leftaimlimit = 45;
    self.baseaccuracy = 1;
    self.look_ahead_value = 200;
    self.loop_time = 0.5;
    set_animsets( [ "exposed" ] );

    if ( isdefined( self.script_demeanor ) )
    {
        if ( self.script_demeanor == "frantic" )
            set_frantic( 1 );

        self.script_demeanor = undefined;
    }

    if ( isdefined( self.script_do_arrivals ) )
    {
        set_do_arrivals( self.script_do_arrivals );
        self.script_do_arrivals = undefined;
    }

    if ( isdefined( self.script_do_exits ) )
    {
        set_do_exits( self.script_do_exits );
        self.script_do_exits = undefined;
    }

    if ( isdefined( self.script_ignore_claimed ) )
    {
        set_ignore_claimed( self.script_ignore_claimed );
        self.script_ignore_claimed = undefined;
    }

    if ( isdefined( self.script_use_real_fire ) )
    {
        set_real_fire( self.script_use_real_fire );
        self.script_use_real_fire = undefined;
    }

    if ( isdefined( self.script_use_pain ) )
    {
        set_use_pain( self.script_use_pain );
        self.script_use_pain = undefined;
    }

    if ( isdefined( self.script_animname ) )
    {
        self.animname = self.script_animname;
        self.script_animname = undefined;
    }

    fakeactor_give_soul();
    self hide();
    scripts\engine\utility::delaycall( 0.05, ::show );

    if ( self.team == "axis" && !isdefined( self.script_ignoreme ) )
        self enableaimassist();

    _id_1141363BB50145EB();
    self makeentitysentient( self.team, _id_3A6FA490549F46D9 );
    thread fakeactor_thinks();
}

_id_B247AABD62F70947()
{
    if ( _id_2FDFCAEA9FDF106A() )
        return;

    fakeactor_give_soul();
    set_animsets( [ "exposed" ] );
    _id_1141363BB50145EB();
    self.flags = 4096;
    thread death_think();
}

_id_1141363BB50145EB()
{
    self setcandamage( 1 );
    self.health = 150;

    if ( self.team == "neutral" )
        self.team = "allies";
}

create_state_machine( _id_1AB676B464859DA1 )
{
    if ( !isdefined( level.fa_state_machines ) )
        level.fa_state_machines = [];

    level.fa_state_machines[_id_1AB676B464859DA1] = [];
}

get_state_machine( _id_1AB676B464859DA1 )
{
    return level.fa_state_machines[_id_1AB676B464859DA1];
}

add_state( _id_1AB676B464859DA1, statename, _id_BC3B30DD19E11E1D, _id_F0DBDB38B90C586B, priority )
{
    if ( !isdefined( level.fa_state_machines ) )
        level.fa_state_machines = [];

    if ( !isdefined( level.fa_state_machines[_id_1AB676B464859DA1] ) )
        create_state_machine( _id_1AB676B464859DA1 );

    index = level.fa_state_machines[_id_1AB676B464859DA1].size;
    level.fa_state_machines[_id_1AB676B464859DA1][index] = [];
    level.fa_state_machines[_id_1AB676B464859DA1][index]["priority"] = priority;
    level.fa_state_machines[_id_1AB676B464859DA1][index]["stateName"] = statename;
    level.fa_state_machines[_id_1AB676B464859DA1][index]["thinkFunc"] = _id_BC3B30DD19E11E1D;
    level.fa_state_machines[_id_1AB676B464859DA1][index]["changeFunc"] = _id_F0DBDB38B90C586B;
    level.fa_state_machines[_id_1AB676B464859DA1] = scripts\engine\utility::array_sort_with_func( level.fa_state_machines[_id_1AB676B464859DA1], ::is_higher_priority );
}

remove_state( _id_1AB676B464859DA1, statename )
{
    if ( !isdefined( level.fa_state_machines[_id_1AB676B464859DA1] ) )
        return;

    _id_B3CC118C143C4898 = [];

    foreach ( state in level.fa_state_machines[_id_1AB676B464859DA1] )
    {
        if ( state["stateName"] != statename )
            _id_B3CC118C143C4898[_id_B3CC118C143C4898.size] = state;
    }

    level.fa_state_machines[_id_1AB676B464859DA1] = _id_B3CC118C143C4898;
}

fakeactor_give_soul()
{
    setup_animation();

    if ( self.team == "allies" && isdefined( self.name ) )
    {
        scripts\sp\names::get_name();
        self _meth_407DD8B9E942496A( self.name, &"" );
    }
    else if ( self.team == "axis" )
        self _meth_407DD8B9E942496A( "enemy", &"" );

    if ( isdefined( self.script_moveplaybackrate ) )
        self.moveplaybackrate = self.script_moveplaybackrate;
    else
        self.moveplaybackrate = 1;

    if ( !isdefined( self.script_friendly_fire_disable ) || !self.script_friendly_fire_disable )
        level thread scripts\sp\friendlyfire::friendly_fire_think( self );

    self _meth_4F784BBF1E69DDB3();

    if ( isdefined( self.target ) )
    {
        _id_9CE92D68B26ABBFB = scripts\engine\utility::getstructarray( self.target, "targetname" );
        _id_9CE92D68B26ABBFB = scripts\engine\utility::random( _id_9CE92D68B26ABBFB );

        if ( isdefined( _id_9CE92D68B26ABBFB ) && _id_9CE92D68B26ABBFB scripts\sp\fakeactor_node::is_fakeactor_node() )
            set_current_node( _id_9CE92D68B26ABBFB );
    }
}

fakeactor_thinks()
{
    waittillframeend;
    thread update_state_machine();
    thread move_message_think();
    thread watch_aim_target_think();
    thread make_real_ai_think();
    thread death_think();
}

make_real_ai_think()
{
    self endon( "death" );
    thread real_ai_distance_check();
    self waittill( "make_real_ai" );
    scripts\common\ai::stop_magic_bullet_shield();
    _id_89162A7340BA32F3 = self.weapon;
    _id_79372F4FE4115EF1 = "";

    if ( isdefined( self.current_node ) && isdefined( self.current_node.target ) )
        _id_79372F4FE4115EF1 = self.current_node.target;

    ai = scripts\sp\spawner::spawner_makerealai( self, _id_79372F4FE4115EF1 );
    ai _id_3433EE6B63C7E243::placeweaponon( _id_89162A7340BA32F3, "right" );

    if ( isdefined( self ) )
        self delete();
}

watch_for_obstacles_think()
{
    self endon( "death" );
    self endon( "goal" );
    _id_F3EDCEFBABC5A8F0 = squared( 128 );

    for (;;)
    {
        if ( distancesquared( level.player getorigin(), self.origin ) < _id_F3EDCEFBABC5A8F0 )
            obstacle_in_way( 1 );
        else
            obstacle_in_way( 0 );

        wait 0.05;
    }
}

real_ai_distance_check()
{
    self endon( "death" );
    self endon( "make_real_ai" );

    if ( !isdefined( self.radius ) || self.radius <= 0 )
        return;

    for (;;)
    {
        if ( distancesquared( level.player geteye(), self.origin ) < squared( self.radius ) )
        {
            self notify( "make_real_ai" );
            return;
        }

        wait 0.05;
    }
}

check_node_is_claimed()
{
    if ( is_ignore_claimed() )
        return 0;

    return self.current_node scripts\sp\fakeactor_node::fakeactor_node_is_claimed_by( self );
}

change_state( state )
{
    self.previous_state = self.current_state;
    self notify( "change_state" );
    cleanup_state_ents();
    self.current_state = state["stateName"];
    self thread [[ state["thinkFunc"] ]]();
}

add_state_ent( ent )
{
    if ( !isdefined( self.current_state_ents ) )
        self.current_state_ents = [];

    self.current_state_ents[self.current_state_ents.size] = ent;
}

cleanup_state_ents()
{
    if ( isdefined( self.current_state_ents ) )
    {
        foreach ( ent in self.current_state_ents )
        {
            if ( isdefined( ent ) )
                ent delete();
        }
    }
}

update_state_machine()
{
    self endon( "death" );
    self endon( "make_real_ai" );
    self.previous_state = "";
    state_machine = "default";

    if ( isdefined( self.state_machine ) )
        state_machine = self.state_machine;

    for (;;)
    {
        wait 0.05;

        if ( is_controlled() )
            continue;

        foreach ( state in get_state_machine( state_machine ) )
        {
            if ( isdefined( self.current_state ) && self.current_state == state["stateName"] )
                continue;

            if ( [[ state["changeFunc"] ]]() )
            {
                change_state( state );
                break;
            }
        }
    }
}

idle_check()
{
    if ( !isdefined( self.current_state ) )
        return 1;

    if ( self.current_node scripts\sp\fakeactor_node::fakeactor_node_is_claimed_by( self ) )
        return 1;

    return 0;
}

idle_think()
{
    self endon( "death" );
    self endon( "change_state" );
    fakeactor_check_delete();
    self notify( "goal" );

    while ( isdefined( self ) )
    {
        if ( isdefined( self.idle_anim_override ) )
        {
            play_scripted_anim( get_idle_anim() );
            continue;
        }

        if ( isdefined( self.unittype ) && self.unittype == "civilian" )
        {
            childthread civ_think();
            self waittill( "start_next_fight" );
            continue;
        }

        childthread fight_think();
        self waittill( "start_next_fight" );
    }
}

fight_think()
{
    self endon( "death" );
    self endon( "change_state" );

    if ( !isdefined( self.ignoreall ) )
    {
        if ( isdefined( self.current_node ) )
        {
            _id_9AA018E9E3E2E0AF = self.current_node scripts\engine\utility::get_linked_ents();
            _id_9AA018E9E3E2E0AF = scripts\engine\utility::array_combine( _id_9AA018E9E3E2E0AF, self.current_node scripts\engine\utility::get_linked_structs() );

            if ( _id_9AA018E9E3E2E0AF.size )
            {
                target = scripts\engine\utility::random( _id_9AA018E9E3E2E0AF );
                offset = ( 0, 0, 0 );

                if ( isdefined( target.radius ) )
                {
                    _id_6C05446634714247 = randomfloatrange( target.radius * -1, target.radius );
                    _id_827F335C2225D1EA = randomfloatrange( target.radius * -1, target.radius );
                    offset = ( _id_6C05446634714247, _id_827F335C2225D1EA, 0 );
                }

                set_aim_target( target, offset );
            }
        }

        _id_F813D7AED7E62C23 = get_hide_to_aim_anim();
        _id_7E71E20AAAAB66BD = get_aim_to_hide_anim();
        _id_79D78DD32C9EAA49 = self.origin;

        if ( isdefined( _id_F813D7AED7E62C23 ) && isdefined( _id_7E71E20AAAAB66BD ) )
            play_scripted_anim( _id_F813D7AED7E62C23 );

        self notify( "start_aim" );
        fire_weapon( get_shoot_anim() );
        self notify( "end_aim" );

        if ( isdefined( _id_F813D7AED7E62C23 ) && isdefined( _id_7E71E20AAAAB66BD ) )
            play_scripted_anim( _id_7E71E20AAAAB66BD );

        if ( should_fire() )
        {
            _id_A10E778E2D0220F0 = get_reload_anim();

            if ( isdefined( _id_A10E778E2D0220F0 ) )
                play_scripted_anim( _id_A10E778E2D0220F0 );
        }

        if ( scripts\engine\utility::cointoss() )
        {
            _id_8D7545DFE4E8A3EC = self.animset;
            pick_random_animset();

            if ( self.animset != _id_8D7545DFE4E8A3EC )
                play_scripted_anim( get_stance_change_anim() );
        }
    }

    play_scripted_anim( get_idle_anim() );
    set_wants_to_move( 1 );
    self notify( "start_next_fight" );
}

civ_think()
{
    play_scripted_anim( get_idle_anim() );
    self notify( "start_next_fight" );
}

traverse_check()
{
    if ( isdefined( self.current_node ) && self.current_node scripts\sp\fakeactor_node::fakeactor_node_is_claimed_by( self ) && self.current_node scripts\sp\fakeactor_node::fakeactor_node_is_traverse() )
        return 1;

    return 0;
}

traverse_think()
{
    self endon( "death" );
    set_controlled( 1 );
    animation = do_traverse_anim( self.current_node.traverse_animscript );
    set_controlled( 0 );
    set_wants_to_move( 1 );
}

turn_check()
{
    if ( self.current_node scripts\sp\fakeactor_node::fakeactor_node_is_claimed_by( self ) && self.current_node scripts\sp\fakeactor_node::fakeactor_node_is_turn() )
        return 1;

    return 0;
}

turn_think()
{
    self endon( "death" );
    set_controlled( 1 );
    next_node = self.current_node scripts\sp\fakeactor_node::fakeactor_node_get_next();
    play_scripted_anim( get_turn_anim( self.angles, self.origin, next_node.origin ) );
    set_controlled( 0 );
    set_wants_to_move( 1 );
}

play_anim_check()
{
    if ( isdefined( self.current_node ) && self.current_node scripts\sp\fakeactor_node::fakeactor_node_is_claimed_by( self ) && self.current_node scripts\sp\fakeactor_node::fakeactor_node_is_animation() )
    {
        if ( !isdefined( self.current_node.last_actor ) || self.current_node.last_actor != self )
            return 1;
    }

    return 0;
}

play_anim_think()
{
    self endon( "death" );
    set_controlled( 1 );
    self.current_node.anim_node scripts\common\anim::anim_generic_run( self, self.current_node.animation );
    self.current_node.last_actor = self;
    set_controlled( 0 );
    set_wants_to_move( 1 );
    self notify( "played_anim" );
}

do_traverse_anim( traverse_animscript )
{
    _id_9E20B5E7A72DB036 = get_traverse_anim( traverse_animscript );
    play_scripted_anim( _id_9E20B5E7A72DB036, undefined, _id_1D1C16F25C2BDA5E::handletraversenotetracks, "traverseAnim", self.current_node );
}

move_message_think()
{
    self endon( "death" );
    self endon( "make_real_ai" );

    for (;;)
    {
        self waittill( "move" );
        set_wants_to_move( 1 );
    }
}

move_check()
{
    if ( isdefined( self.forced_node_path ) )
    {
        self.node_path = self.forced_node_path;
        self.forced_node_path = undefined;
        return 1;
    }

    if ( !isdefined( self.current_node ) )
        return 0;

    _id_C3B2A9E2A964C828 = does_want_to_move();
    node_path = undefined;

    if ( !isdefined( self.current_state ) && isdefined( self.current_node ) )
        node_path = scripts\sp\fakeactor_node::fakeactor_node_get_path( self.current_node, self.origin, is_frantic(), _id_C3B2A9E2A964C828 );

    if ( self.current_node scripts\sp\fakeactor_node::fakeactor_node_is_claimed_by( self ) && !self.current_node scripts\sp\fakeactor_node::fakeactor_node_is_end_path( _id_C3B2A9E2A964C828 ) )
    {
        next_node = self.current_node scripts\sp\fakeactor_node::fakeactor_node_get_next();
        node_path = scripts\sp\fakeactor_node::fakeactor_node_get_path( next_node, self.origin, is_frantic(), _id_C3B2A9E2A964C828 );
    }

    if ( isdefined( node_path ) )
    {
        foreach ( node in node_path )
        {
            if ( node["dist"] > 0 )
            {
                self.node_path = node_path;
                return 1;
            }
        }
    }

    return 0;
}

play_running_anim()
{
    self endon( "death" );
    self endon( "change_state" );
    self notify( "stop_running_anim" );
    self endon( "stop_running_anim" );
    _id_63089578B5DBA519 = 1;

    if ( isdefined( self.run_rate_min ) && isdefined( self.run_rate_max ) )
        _id_63089578B5DBA519 = randomfloatrange( self.run_rate_min, self.run_rate_max );

    for (;;)
    {
        _id_7DB030092DDD8A5A = get_movement_anim();
        _id_EFDB0DF9410C1967 = get_anim_data( _id_7DB030092DDD8A5A );
        run_speed = _id_EFDB0DF9410C1967.run_speed;
        anim_relative = _id_EFDB0DF9410C1967.anim_relative;
        play_running_anim_internal( _id_7DB030092DDD8A5A, _id_63089578B5DBA519 );
        wait( getanimlength( _id_7DB030092DDD8A5A ) );
    }
}

move_think()
{
    self endon( "death" );
    self endon( "change_state" );
    self notify( "exit_node" );
    _id_D5685B7BAEE6505E = self.origin;
    _id_C3B2A9E2A964C828 = does_want_to_move();

    if ( self.node_path.size == 0 )
    {

    }

    if ( isdefined( self.current_node ) )
        self.current_node scripts\sp\fakeactor_node::fakeactor_node_remove_claimed( self );

    _id_7DB030092DDD8A5A = get_movement_anim();
    _id_EFDB0DF9410C1967 = get_anim_data( _id_7DB030092DDD8A5A );
    run_speed = _id_EFDB0DF9410C1967.run_speed;
    anim_relative = _id_EFDB0DF9410C1967.anim_relative;

    if ( !anim_relative )
        childthread lock_to_ground( run_speed );

    _id_0EF4E4D85E21B4FA = self.node_path[self.node_path.size - 1];

    if ( self.node_path[0]["total_dist"] < 64 )
    {
        thread play_scripted_anim( get_idle_anim() );
        mover = scripts\engine\utility::spawn_script_origin( self.origin, self.angles );
        add_state_ent( mover );
        self linkto( mover );
        time = 0.2;
        mover moveto( _id_0EF4E4D85E21B4FA["origin"], time );
        mover rotateto( _id_0EF4E4D85E21B4FA["angles"], time );
        scripts\engine\utility::waittill_notify_or_timeout( "death", time );
        self unlink();
        mover delete();

        if ( self.current_node != _id_0EF4E4D85E21B4FA["node"] )
            self.current_node = _id_0EF4E4D85E21B4FA["node"];

        self.current_node scripts\sp\fakeactor_node::fakeactor_node_set_claimed( self );
        fakeactor_check_node( self.current_node );
        set_wants_to_move( 0 );
        self notify( "arrive_node" );
        return;
    }

    _id_5B24559811E24059 = 0;
    _id_C6657E1063ED90C0 = undefined;

    if ( should_do_exits() )
    {
        next_node = 0;

        foreach ( node in self.node_path )
        {
            if ( next_node )
            {
                _id_C6657E1063ED90C0 = node["origin"];
                break;
            }

            if ( node["dist"] > 0 )
                next_node = 1;
        }

        if ( isdefined( _id_C6657E1063ED90C0 ) )
        {
            exit_anim = get_exit_anim( _id_C6657E1063ED90C0 );
            play_scripted_anim( exit_anim );
        }
    }

    _id_765C5D712D141132 = undefined;
    _id_53E1B8BDFF7777E2 = scripts\engine\utility::random( _id_0EF4E4D85E21B4FA["node"] scripts\sp\fakeactor_node::fakeactor_node_get_cover_list() );

    if ( should_do_arrivals() && !_id_0EF4E4D85E21B4FA["node"] scripts\sp\fakeactor_node::fakeactor_node_is_traverse() && !_id_0EF4E4D85E21B4FA["node"] scripts\sp\fakeactor_node::fakeactor_node_is_turn() && _id_0EF4E4D85E21B4FA["node"] scripts\sp\fakeactor_node::fakeactor_node_allow_arrivals() )
    {
        start_node = self;

        if ( isdefined( self.node_path[self.node_path.size - 2]["node"] ) )
            start_node = self.node_path[self.node_path.size - 2]["node"];

        _id_765C5D712D141132 = get_arrival_anim( _id_0EF4E4D85E21B4FA["node"], start_node, _id_53E1B8BDFF7777E2 );

        if ( isdefined( _id_765C5D712D141132 ) )
        {
            _id_703DFD8395B70F99 = getmovedelta( _id_765C5D712D141132, 0, 1 );
            _id_F811D70B56FBFF80 = getangledelta3d( _id_765C5D712D141132, 0, 1 );
            _id_D0C16329C928493D = invertangles( _id_F811D70B56FBFF80 );
            new_angles = combineangles( _id_0EF4E4D85E21B4FA["angles"], _id_D0C16329C928493D );
            _id_53FD9BCFE97F77D0 = _id_0EF4E4D85E21B4FA["origin"] - rotatevector( _id_703DFD8395B70F99, new_angles );
            _id_0EF4E4D85E21B4FA["anim_node"] = scripts\engine\utility::spawn_script_origin( _id_53FD9BCFE97F77D0, new_angles );
            add_state_ent( _id_0EF4E4D85E21B4FA["anim_node"] );
            _id_0EF4E4D85E21B4FA["origin"] = _id_53FD9BCFE97F77D0;
            _id_0EF4E4D85E21B4FA["angles"] = new_angles;
        }
    }

    thread play_running_anim();
    thread watch_for_obstacles_think();
    self.current_node = self.node_path[_id_5B24559811E24059 + 1]["node"];
    move_scale = 1;

    if ( isdefined( self.move_scale ) )
        move_scale = self.move_scale;

    for (;;)
    {
        _id_AF9A86169A742594 = self.node_path[_id_5B24559811E24059]["to_next_node"];
        _id_54CF1C15E3AB960A = self.origin - self.node_path[_id_5B24559811E24059]["origin"];
        _id_E59C6C4E67C2F3C5 = vectordot( _id_AF9A86169A742594, _id_54CF1C15E3AB960A );

        if ( _id_5B24559811E24059 == self.node_path.size )
            break;

        _id_B5B08EAF3FC975BB = _id_E59C6C4E67C2F3C5 + self.look_ahead_value;

        while ( _id_B5B08EAF3FC975BB > self.node_path[_id_5B24559811E24059]["dist"] )
        {
            _id_B5B08EAF3FC975BB = _id_B5B08EAF3FC975BB - self.node_path[_id_5B24559811E24059]["dist"];
            _id_5B24559811E24059++;

            if ( _id_5B24559811E24059 == self.node_path.size )
            {
                if ( self.current_node != _id_0EF4E4D85E21B4FA["node"] )
                    self.current_node = _id_0EF4E4D85E21B4FA["node"];

                time = 0;
                _id_2D189A52DAF6572F = ( 0, 0, 0 );
                _id_76B59FDC0472A656 = ( 0, 0, 0 );
                _id_B2B893575005B08C = ( 0, 0, 0 );
                _id_EAB404ADE8BCB9F6 = _id_0EF4E4D85E21B4FA["origin"] - self.origin;
                _id_2D189A52DAF6572F = vectortoangles( _id_EAB404ADE8BCB9F6 );
                dist = length( _id_EAB404ADE8BCB9F6 );
                time = dist / ( run_speed * move_scale );

                if ( time > 0 )
                {
                    if ( anim_relative )
                    {
                        self moveto( _id_0EF4E4D85E21B4FA["origin"], time );
                        self rotateto( _id_2D189A52DAF6572F, time * 0.25 );
                        wait( time );
                    }
                    else
                    {
                        mover = scripts\engine\utility::spawn_script_origin( self.origin, self.angles );
                        add_state_ent( mover );
                        self linkto( mover );
                        mover moveto( _id_0EF4E4D85E21B4FA["origin"], time );
                        mover rotateto( _id_2D189A52DAF6572F, time * 0.25 );
                        scripts\engine\utility::waittill_notify_or_timeout( "death", time );
                        self unlink();
                        mover delete();
                    }
                }

                if ( isdefined( _id_765C5D712D141132 ) )
                {
                    self notify( "stop_running_anim" );
                    play_scripted_anim( _id_765C5D712D141132, undefined, undefined, undefined, _id_0EF4E4D85E21B4FA["anim_node"], 0 );
                    _id_0EF4E4D85E21B4FA["anim_node"] delete();
                    set_animsets( [ _id_53E1B8BDFF7777E2 ] );
                }
                else
                {
                    self.angles = _id_0EF4E4D85E21B4FA["angles"];
                    set_animsets( self.current_node scripts\sp\fakeactor_node::fakeactor_node_get_cover_list() );
                }

                self.current_node scripts\sp\fakeactor_node::fakeactor_node_set_claimed( self );
                fakeactor_check_node( self.current_node );
                self notify( "stop_running_anim" );
                set_wants_to_move( 0 );
                self notify( "arrive_node" );
                self notify( "reached_path_end" );
                self notify( "goal" );
                return;
            }
            else if ( self.current_node != self.node_path[_id_5B24559811E24059]["node"] )
            {
                self.current_node = self.node_path[_id_5B24559811E24059]["node"];
                set_animsets( self.current_node scripts\sp\fakeactor_node::fakeactor_node_get_cover_list() );
                fakeactor_check_node( self.current_node );
            }
        }

        _id_0D9B283041648368 = self.node_path[_id_5B24559811E24059]["to_next_node"] * _id_B5B08EAF3FC975BB;
        _id_0D9B283041648368 = _id_0D9B283041648368 + self.node_path[_id_5B24559811E24059]["origin"];
        _id_A86AB88612B32CC5 = _id_0D9B283041648368;

        if ( !anim_relative )
            self.look_ahead_point = _id_A86AB88612B32CC5;

        new_angles = vectortoangles( _id_A86AB88612B32CC5 - self.origin );
        childthread fakeactor_rotate_to( new_angles, self.loop_time );

        if ( anim_relative )
        {
            _id_BDEF066B5FCBAE91 = run_speed * self.loop_time * move_scale;
            _id_4249CD81CF09446D = vectornormalize( _id_A86AB88612B32CC5 - self.origin );
            _id_0D9B283041648368 = _id_4249CD81CF09446D * _id_BDEF066B5FCBAE91;
            _id_0D9B283041648368 = _id_0D9B283041648368 + self.origin;
            self moveto( _id_0D9B283041648368, self.loop_time );
        }

        if ( getdvar( "dvar_19C23C42B928F7E8" ) == "1" )
        {

        }

        wait( self.loop_time );
    }

    self.node_path = undefined;
    set_wants_to_move( 0 );
    self notify( "arrive_node" );
    self notify( "reached_path_end" );
    self notify( "goal" );
}

fakeactor_rotate_to( _id_37B788B5F5E40BAD, time )
{
    _id_21678BBD9E8B9039 = anglestoforward( self.angles );
    _id_DE0FADCADA027DAE = anglestoforward( _id_37B788B5F5E40BAD );
    progress = 0;
    _id_B240F32C4DF1C320 = 1 / time;

    for (;;)
    {
        t = progress * _id_B240F32C4DF1C320;
        _id_93D8002C576C2E0B = vectorlerp( _id_21678BBD9E8B9039, _id_DE0FADCADA027DAE, t );
        self.angles = vectortoangles( _id_93D8002C576C2E0B );
        progress = progress + 0.05;
        wait 0.05;

        if ( progress >= time )
            break;
    }

    self.angles = _id_37B788B5F5E40BAD;
}

fakeactor_check_delete()
{
    if ( !isdefined( self ) )
        return;

    if ( !isdefined( self.script_noteworthy ) )
        return;

    switch ( self.script_noteworthy )
    {
        case "delete_on_goal":
            if ( isdefined( self.magic_bullet_shield ) )
                scripts\common\ai::stop_magic_bullet_shield();

            self delete();
            break;
        case "die_on_goal":
            self kill();
            break;
    }
}

fakeactor_check_node( node )
{
    if ( isdefined( node.script_noteworthy ) )
    {
        switch ( node.script_noteworthy )
        {
            case "delete_on_goal":
                if ( isdefined( self.magic_bullet_shield ) )
                    scripts\common\ai::stop_magic_bullet_shield();

                self delete();
                break;
            case "die_on_goal":
                self kill();
                break;
        }
    }

    if ( isdefined( node.script_flag_set ) )
        scripts\engine\utility::flag_set( node.script_flag_set );

    if ( isdefined( node.script_flag_clear ) )
        scripts\engine\utility::flag_clear( node.script_flag_clear );

    if ( isdefined( node.script_ent_flag_set ) )
        scripts\engine\utility::ent_flag_set( node.script_ent_flag_set );

    if ( isdefined( self.script_ent_flag_clear ) )
        scripts\engine\utility::ent_flag_set( node.script_ent_flag_clear );

    if ( isdefined( node.script_demeanor ) )
    {
        if ( node.script_demeanor == "frantic" )
            set_frantic( 1 );
    }

    if ( isdefined( node.script_do_arrival ) )
        set_do_arrivals( node.script_do_arrival );

    if ( isdefined( node.script_do_exits ) )
        set_do_exits( node.script_do_exits );

    if ( isdefined( node.script_use_real_fire ) )
        set_real_fire( node.script_use_real_fire );

    if ( isdefined( node.script_use_pain ) )
        set_use_pain( node.script_use_pain );
}

lock_to_ground( run_speed )
{
    self endon( "death" );
    self endon( "change_state" );
    self notify( "drone_move_z" );
    self endon( "drone_move_z" );
    _id_94228AB58074C00B = 0.05;

    for (;;)
    {
        if ( isdefined( self.look_ahead_point ) && run_speed > 0 )
        {
            z_delta = self.look_ahead_point[2] - self.origin[2];
            _id_59456B1EB55E45CB = distance2d( self.look_ahead_point, self.origin );
            _id_546BDD6F69FD53E0 = _id_59456B1EB55E45CB / run_speed;

            if ( _id_546BDD6F69FD53E0 > 0 && z_delta != 0 )
            {
                _id_B3F7146EFD71904C = abs( z_delta ) / _id_546BDD6F69FD53E0;
                _id_5679EE98E71167A8 = _id_B3F7146EFD71904C * _id_94228AB58074C00B;

                if ( z_delta >= _id_B3F7146EFD71904C )
                    self.origin = ( self.origin[0], self.origin[1], self.origin[2] + _id_5679EE98E71167A8 );
                else if ( z_delta <= _id_B3F7146EFD71904C * -1 )
                    self.origin = ( self.origin[0], self.origin[1], self.origin[2] - _id_5679EE98E71167A8 );
            }
        }

        wait( _id_94228AB58074C00B );
    }
}

set_current_node( _id_D43E0F90CEF74289 )
{
    if ( isdefined( self.current_node ) )
        self.current_node scripts\sp\fakeactor_node::fakeactor_node_remove_claimed( self );

    self.forced_node_path = undefined;
    self.current_node = _id_D43E0F90CEF74289;
    set_animsets( self.current_node scripts\sp\fakeactor_node::fakeactor_node_get_cover_list() );
}

teleport_to_node( _id_D43E0F90CEF74289 )
{
    set_current_node( _id_D43E0F90CEF74289 );
    self.current_node scripts\sp\fakeactor_node::fakeactor_node_set_claimed( self );
    fakeactor_check_node( self.current_node );
    self dontinterpolate();
    self.origin = self.current_node.origin;
    self.angles = self.current_node scripts\sp\fakeactor_node::fakeactor_node_get_angles( is_frantic() );
}

clear_node_path()
{
    if ( isdefined( self.node_path ) )
    {
        foreach ( object in self.node_path )
        {
            if ( isdefined( object["node"] ) )
                object["node"] scripts\sp\fakeactor_node::fakeactor_node_remove_claimed( self );
        }
    }
}

should_fire()
{
    if ( self.animset == "exposed" )
        return 0;

    if ( isdefined( self.aim_target ) )
        return is_target_in_view();

    return 1;
}

fire_weapon( _id_BF031718E33FC247 )
{
    self endon( "death" );
    childthread aim_think();
    wait 0.25;
    _id_163082ABC33A0C44 = weaponclipsize( self.weapon );
    _id_A72249318426523E = weaponfiretime( self.weapon );
    _id_AED09DE616A15798 = weaponburstcount( self.weapon );
    weapon_class = weaponclass( self.weapon );
    _id_4C5E924733819F70 = _id_163082ABC33A0C44;

    if ( weapon_class == "sniper" )
        _id_4C5E924733819F70 = 5;
    else if ( _id_AED09DE616A15798 > 0 )
        _id_4C5E924733819F70 = _id_AED09DE616A15798;

    while ( _id_4C5E924733819F70 > 0 )
    {
        if ( should_fire() )
        {
            _id_0806BF782C463270 = self gettagorigin( "tag_flash" );
            _id_43F1EA38C14BEF2A = self gettagangles( "tag_flash" );
            _id_F42CBC717EBA4198 = anglestoforward( _id_43F1EA38C14BEF2A );
            end_pos = _id_0806BF782C463270 + _id_F42CBC717EBA4198 * 1000;

            if ( isdefined( self.aim_target ) )
            {
                trace = scripts\engine\trace::ray_trace( _id_0806BF782C463270, end_pos, self );

                if ( isdefined( trace["entity"] ) && trace["entity"] == self.aim_target )
                {
                    accuracy = get_accuracy();

                    if ( randomfloat( 1 ) > accuracy )
                    {
                        _id_81F4D36147BE09AB = self.aim_target physics_getcharactercollisioncapsule();
                        _id_730FCF94814A3464 = anglestoup( self.aim_target.angles );
                        _id_068BA7ADE1C7A4BD = randomfloatrange( 0, _id_81F4D36147BE09AB["half_height"] * 2 );
                        _id_56FBFB3F15A4EC39 = anglestoright( self.aim_target.angles );
                        _id_EF8064A1A5B23A8A = _id_81F4D36147BE09AB["radius"] * randomfloatrange( 1, 2 );

                        if ( scripts\engine\utility::cointoss() )
                            _id_EF8064A1A5B23A8A = _id_EF8064A1A5B23A8A * -1;

                        _id_20D7932A634603FD = self.aim_target.origin + _id_730FCF94814A3464 * _id_068BA7ADE1C7A4BD + _id_56FBFB3F15A4EC39 * _id_EF8064A1A5B23A8A;
                        _id_F42CBC717EBA4198 = vectornormalize( _id_20D7932A634603FD - _id_0806BF782C463270 );
                        end_pos = _id_0806BF782C463270 + _id_F42CBC717EBA4198 * 1000;
                    }
                }
            }

            if ( should_real_fire() )
                magicbullet( self.weapon, _id_0806BF782C463270, end_pos );
            else
                fake_bullet( self.weapon, _id_0806BF782C463270, end_pos, self.no_weapon_sound );

            self _meth_95EA04F619AF21B5( _id_BF031718E33FC247, 1, 0.2, 1.0 );
            scripts\engine\utility::delaycall( 0.15, ::clearanim, _id_BF031718E33FC247, 0 );
        }

        _id_4C5E924733819F70--;
        wait( max( _id_A72249318426523E, 0.1 ) );
    }
}

get_accuracy( debug )
{
    _id_2D8083A1D979B57D = self.baseaccuracy;
    _id_37687E97857250EE = 1.0;

    if ( isdefined( self.aim_target ) && isdefined( self.aim_target.attackeraccuracy ) )
        _id_37687E97857250EE = self.aim_target.attackeraccuracy;

    _id_02E892C72CD7EF8D = distance( self.origin, self.aim_target.origin );
    _id_9F021F44C97C9E13 = _func_6ED9CBF2AEF3CEB8( self.weapon, _id_02E892C72CD7EF8D, isplayer( self.aim_target ) );
    _id_5CAA9F9F456B4040 = "stand";

    if ( isplayer( self.aim_target ) )
        _id_5CAA9F9F456B4040 = self.aim_target getstance();
    else if ( isai( self.aim_target ) )
        _id_5CAA9F9F456B4040 = self.aim_target.currentpose;

    _id_9FF65D621EB6D887 = 1;

    if ( _id_5CAA9F9F456B4040 == "crouch" )
        _id_9FF65D621EB6D887 = 0.75;
    else if ( _id_5CAA9F9F456B4040 == "prone" )
        _id_9FF65D621EB6D887 = 0.5;

    _id_397FBB1B4D409D6E = 1;

    if ( isplayer( self.aim_target ) )
    {
        movement = level.player getnormalizedmovement();
        _id_397FBB1B4D409D6E = 1 - length( movement ) * 0.3;
    }
    else if ( isai( self.aim_target ) )
    {

    }

    _id_2052DE76926A0450 = 0.75;
    _id_E9EABE0A71DE37BF = _id_2D8083A1D979B57D * _id_37687E97857250EE * _id_9F021F44C97C9E13 * _id_9FF65D621EB6D887 * _id_397FBB1B4D409D6E * _id_2052DE76926A0450;
    return _id_E9EABE0A71DE37BF;
}

fake_bullet( weapon, start, end, _id_0BA1B8CBBE6A6DCA )
{
    _func_C7D25C900F7335FC( start, end, weapon );
    playfxontag( scripts\engine\utility::getfx( "fakeactor_muzflash" ), self, "tag_flash" );

    if ( !isdefined( _id_0BA1B8CBBE6A6DCA ) || !_id_0BA1B8CBBE6A6DCA )
        return;
}

get_target_point( ent )
{
    if ( isplayer( ent ) )
    {
        if ( is_human() )
            _id_D5D337098EE044D8 = 50;
        else
            _id_D5D337098EE044D8 = 50;

        _id_DEE6508B0BA437C5 = ent getplayerangles();
        _id_EC3A18275B0F901D = ent getorigin() + anglestoup( _id_DEE6508B0BA437C5 ) * _id_D5D337098EE044D8;
        return _id_EC3A18275B0F901D;
    }
    else if ( isai( ent ) )
        return ent gettagorigin( "j_SpineUpper" );
    else
    {
        _id_EC3A18275B0F901D = ent.origin;

        if ( isdefined( self.aim_target_offset ) )
            _id_EC3A18275B0F901D = _id_EC3A18275B0F901D + self.aim_target_offset;

        return _id_EC3A18275B0F901D;
    }
}

aim_think()
{
    self endon( "end_aim" );
    _id_12F792CF249A56D4 = 0.2;
    _id_88DFE311E464EC62 = get_aim_anim( "aim_5" );

    if ( isdefined( _id_88DFE311E464EC62 ) )
        self setanimknoball( _id_88DFE311E464EC62, self.anim_branch["body"], 1, _id_12F792CF249A56D4 );

    self setanimlimited( get_aim_anim( "aim_2" ), 1, _id_12F792CF249A56D4 );
    self setanimlimited( get_aim_anim( "aim_4" ), 1, _id_12F792CF249A56D4 );
    self setanimlimited( get_aim_anim( "aim_6" ), 1, _id_12F792CF249A56D4 );
    self setanimlimited( get_aim_anim( "aim_8" ), 1, _id_12F792CF249A56D4 );
    _id_AAF3547FCB39DA5D = 10;
    prevyawdelta = 0;
    prevpitchdelta = 0;
    _id_DDD3DF8D5EA97F86 = 1;

    while ( isdefined( self.aim_target ) )
    {
        _id_5D8919035BDA9CED = self gettagorigin( "tag_flash" );
        _id_6F5A0897ADB0B19E = get_target_point( self.aim_target );
        _id_0FB38E57CA7EA24D = scripts\engine\sp\utility::worldtolocalcoords( _id_6F5A0897ADB0B19E ) - scripts\engine\sp\utility::worldtolocalcoords( _id_5D8919035BDA9CED );
        _id_41C1E7CD6DBF80F5 = vectortoangles( _id_0FB38E57CA7EA24D );
        pitchdelta = angleclamp180( _id_41C1E7CD6DBF80F5[0] );
        _id_5BABFFA7F03CE512 = angleclamp180( _id_41C1E7CD6DBF80F5[1] );

        if ( pitchdelta < self.upaimlimit || pitchdelta > self.downaimlimit || _id_5BABFFA7F03CE512 < self.rightaimlimit || _id_5BABFFA7F03CE512 > self.leftaimlimit )
        {
            set_target_in_view( 0 );
            pitchdelta = 0;
            _id_5BABFFA7F03CE512 = 0;
        }
        else
            set_target_in_view( 1 );

        if ( getdvar( "dvar_19C23C42B928F7E8" ) == "1" )
        {
            base_angles = self gettagangles( "tag_origin" );
            scripts\engine\utility::draw_angles( base_angles, self gettagorigin( "tag_origin" ) );
        }

        if ( !_id_DDD3DF8D5EA97F86 )
        {
            _id_4142633C790D3AE6 = _id_5BABFFA7F03CE512 - prevyawdelta;

            if ( abs( _id_4142633C790D3AE6 ) > _id_AAF3547FCB39DA5D )
                _id_5BABFFA7F03CE512 = prevyawdelta + clamp( _id_4142633C790D3AE6, -1 * _id_AAF3547FCB39DA5D, _id_AAF3547FCB39DA5D );

            _id_9DEE51F9CC272C49 = pitchdelta - prevpitchdelta;

            if ( abs( _id_9DEE51F9CC272C49 ) > _id_AAF3547FCB39DA5D )
                pitchdelta = prevpitchdelta + clamp( _id_9DEE51F9CC272C49, -1 * _id_AAF3547FCB39DA5D, _id_AAF3547FCB39DA5D );
        }

        pitchdelta = clamp( pitchdelta, self.upaimlimit, self.downaimlimit );
        _id_5BABFFA7F03CE512 = clamp( _id_5BABFFA7F03CE512, self.rightaimlimit, self.leftaimlimit );
        _id_DDD3DF8D5EA97F86 = 0;
        prevyawdelta = _id_5BABFFA7F03CE512;
        prevpitchdelta = pitchdelta;
        aim_weights( self.anim_branch["aim_2"], self.anim_branch["aim_4"], self.anim_branch["aim_6"], self.anim_branch["aim_8"], pitchdelta, _id_5BABFFA7F03CE512 );
        wait 0.05;
    }
}

get_animation_from_alias( archetype, statename, alias, frantic )
{
    _id_42547671DF42D8DB = archetypegetalias( archetype, statename, alias, frantic );

    if ( isdefined( _id_42547671DF42D8DB ) )
    {
        if ( isarray( _id_42547671DF42D8DB.anims ) )
        {
            if ( isdefined( _id_42547671DF42D8DB.weights ) )
            {
                _id_6BFDB1A9E88AFC12 = 0.0;

                foreach ( weight in _id_42547671DF42D8DB.weights )
                    _id_6BFDB1A9E88AFC12 = _id_6BFDB1A9E88AFC12 + weight;

                _id_057BFDD29E55F96A = randomfloat( _id_6BFDB1A9E88AFC12 );
                _id_71419260E68B1F54 = 0;

                for ( _id_73E118EFD1B1C59D = 0; _id_73E118EFD1B1C59D < _id_42547671DF42D8DB.anims.size; _id_73E118EFD1B1C59D++ )
                {
                    _id_71419260E68B1F54 = _id_71419260E68B1F54 + _id_42547671DF42D8DB.weights[_id_73E118EFD1B1C59D];

                    if ( _id_71419260E68B1F54 > _id_057BFDD29E55F96A )
                        return _id_42547671DF42D8DB.anims[_id_73E118EFD1B1C59D];
                }

                return;
            }

            _id_057BFDD29E55F96A = randomint( _id_42547671DF42D8DB.anims.size );
            return _id_42547671DF42D8DB.anims[_id_057BFDD29E55F96A];
            return;
            return;
        }

        return _id_42547671DF42D8DB.anims;
        return;
    }
    else
    {

    }
}

get_animation( statename, alias )
{
    animation = get_animation_from_alias( self.animationarchetype, statename, alias, is_frantic() );

    if ( isarray( animation ) )
        animation = scripts\engine\utility::random( animation );

    return animation;
}

get_idle_anim()
{
    if ( isdefined( self.idle_anim_override ) )
        return self.idle_anim_override;

    if ( self.unittype != "civilian" )
    {
        if ( scripts\engine\utility::cointoss() )
        {
            if ( self.animset == "exposed" )
                return get_animation( "noncombat_stand_idle", "noncombat_stand_idle" );
            else
                return get_animation( self.animset, "hide_loop" );
        }
        else
        {
            switch ( self.animset )
            {
                case "cover_right_crouch":
                case "cover_right":
                case "cover_left":
                    return get_animation( self.animset, "hide_loop" );
                case "exposed":
                    return get_animation( "noncombat_stand_idle", "noncombat_stand_idle_twitch" );
                case "cover_stand":
                case "cover_left_crouch":
                case "cover_crouch":
                    return get_animation( self.animset + "_peek", "peek" );
            }
        }
    }
    else
    {
        switch ( self.animset )
        {
            case "exposed":
                return get_animation( "stand_idle", "civ0" + randomintrange( 1, 7 ) );
        }
    }
}

get_movement_anim()
{
    if ( isdefined( self.run_anim_override ) )
        return self.run_anim_override;

    alias = "default";

    if ( isdefined( self.run_anim_alias ) )
        alias = self.run_anim_alias;

    return get_animation( "stand_run_loop", alias );
}

get_turn_anim( _id_C99A285CABF7EC7B, _id_88DAF353E30ACF25, targetorigin )
{
    _id_87617967D6BB7D22 = vectortoangles( targetorigin - _id_88DAF353E30ACF25 );
    angle = _id_C99A285CABF7EC7B[1] - _id_87617967D6BB7D22[1];
    angle = angle + 360;
    angle = int( angle ) % 360;
    direction = "";

    if ( angle > 315 || angle < 45 )
        return undefined;
    else if ( angle >= 150 && angle <= 210 )
        direction = "2";
    else if ( angle < 90 )
        direction = "9";
    else if ( angle > 270 )
        direction = "7";
    else if ( angle < 135 )
        direction = "6";
    else if ( angle > 225 )
        direction = "4";
    else if ( angle < 150 )
        direction = "3";
    else if ( angle > 210 )
        direction = "1";

    return get_animation( "run_turn", "left" + direction );
}

get_shoot_anim()
{
    switch ( self.animset )
    {
        case "cover_right_crouch":
        case "cover_left_crouch":
        case "cover_crouch":
            return get_animation( "crouch_shoot_full", "fire" );
        case "cover_stand":
        case "cover_right":
        case "cover_left":
            return get_animation( "shoot_full", "fire" );
        case "exposed":
            return get_animation( "shoot_full", "fire" );
    }
}

get_aim_anim( _id_8BAB4003A2676382 )
{
    switch ( self.animset )
    {
        case "cover_crouch":
            return get_animation( "cover_crouch_aim", "rifle_" + _id_8BAB4003A2676382 );
        case "cover_left_crouch":
            if ( _id_8BAB4003A2676382 == "aim_5" )
                return undefined;

            return get_animation( "cover_crouch_exposed_left", "rifle_" + _id_8BAB4003A2676382 );
        case "cover_right_crouch":
            if ( _id_8BAB4003A2676382 == "aim_5" )
                return undefined;

            return get_animation( "cover_crouch_exposed_right", "rifle_" + _id_8BAB4003A2676382 );
        case "cover_stand":
            return get_animation( "cover_stand_exposed", "rifle_" + _id_8BAB4003A2676382 );
        case "cover_left":
            if ( _id_8BAB4003A2676382 == "aim_5" )
                return undefined;

            return get_animation( "cover_left_exposed_B", "rifle_" + _id_8BAB4003A2676382 );
        case "cover_right":
            if ( _id_8BAB4003A2676382 == "aim_5" )
                return undefined;

            return get_animation( "cover_right_exposed_B", "rifle_" + _id_8BAB4003A2676382 );
        case "exposed":
            return get_animation( "exposed_idle", "rifle_" + _id_8BAB4003A2676382 );
    }
}

get_hide_to_aim_anim()
{
    switch ( self.animset )
    {
        case "cover_crouch":
            return get_animation( "cover_crouch_hide_to_aim", "hide_to_aim" );
        case "cover_stand":
            return get_animation( "cover_stand_hide_to_exposed", "hide_to_exposed" );
        case "cover_left":
            return get_animation( "cover_left_hide_to_B", "hide_to_exposed" );
        case "cover_right":
            return get_animation( "cover_right_hide_to_B", "hide_to_exposed" );
        case "cover_left_crouch":
            return get_animation( "cover_left_crouch_hide_to_B", "hide_to_B" );
        case "cover_right_crouch":
            return get_animation( "cover_right_crouch_hide_to_B", "hide_to_B" );
    }

    return undefined;
}

get_aim_to_hide_anim()
{
    switch ( self.animset )
    {
        case "cover_crouch":
            return get_animation( "cover_crouch_aim_to_hide", "aim_to_hide" );
        case "cover_stand":
            return get_animation( "cover_stand_exposed_to_hide", "exposed_to_hide" );
        case "cover_left":
            return get_animation( "cover_left_B_to_hide", "exposed_to_hide" );
        case "cover_right":
            return get_animation( "cover_right_B_to_hide", "exposed_to_hide" );
        case "cover_left_crouch":
            return get_animation( "cover_left_crouch_B_to_hide", "B_to_hide" );
        case "cover_right_crouch":
            return get_animation( "cover_right_crouch_B_to_hide", "B_to_hide" );
    }

    return undefined;
}

get_arrival_anim( _id_AC1089FC2C260DCB, start_node, animset )
{
    if ( !isdefined( animset ) )
        animset = self.animset;

    if ( !isdefined( start_node ) )
        start_node = self;

    _id_53709E15B972FF84 = animset + "_arrival";
    _id_F1C29F2567F28124 = scripts\engine\sp\utility::get_direction_value( _id_AC1089FC2C260DCB.angles, _id_AC1089FC2C260DCB.origin, start_node.origin );

    switch ( animset )
    {
        case "cover_crouch":
            if ( _id_F1C29F2567F28124 == "9" )
                _id_F1C29F2567F28124 = "6";
            else if ( _id_F1C29F2567F28124 == "7" || _id_F1C29F2567F28124 == "8" )
                _id_F1C29F2567F28124 = "4";

            break;
        case "cover_stand":
            if ( _id_F1C29F2567F28124 == "9" )
                _id_F1C29F2567F28124 = "6";
            else if ( _id_F1C29F2567F28124 == "7" || _id_F1C29F2567F28124 == "8" )
                _id_F1C29F2567F28124 = "4";

            break;
        case "cover_left":
            if ( _id_F1C29F2567F28124 == "9" )
                _id_F1C29F2567F28124 = "8";

            break;
        case "cover_right":
            if ( _id_F1C29F2567F28124 == "7" )
                _id_F1C29F2567F28124 = "8";

            break;
        case "cover_left_crouch":
            if ( _id_F1C29F2567F28124 == "9" )
                _id_F1C29F2567F28124 = "8";

            break;
        case "cover_right_crouch":
            if ( _id_F1C29F2567F28124 == "7" )
                _id_F1C29F2567F28124 = "8";

            break;
        case "exposed":
            break;
        default:
            return undefined;
    }

    if ( is_human() )
        alias = "left" + _id_F1C29F2567F28124;
    else
        alias = _id_F1C29F2567F28124;

    return get_animation( _id_53709E15B972FF84, alias );
}

get_exit_anim( _id_2AE01F9836C08415, _id_D5685B7BAEE6505E, start_angles, animset )
{
    if ( !isdefined( _id_D5685B7BAEE6505E ) )
        _id_D5685B7BAEE6505E = self.origin;

    if ( !isdefined( start_angles ) )
        start_angles = self.angles;

    if ( !isdefined( animset ) )
        animset = self.animset;

    _id_53709E15B972FF84 = animset + "_exit";
    alias = scripts\engine\sp\utility::get_direction_value( start_angles, _id_D5685B7BAEE6505E, _id_2AE01F9836C08415 );

    switch ( animset )
    {
        case "cover_crouch":
            if ( alias == "9" )
                alias = "6";
            else if ( alias == "7" || alias == "8" )
                alias = "4";

            return get_animation( _id_53709E15B972FF84, alias );
        case "cover_stand":
            if ( alias == "9" )
                alias = "6";
            else if ( alias == "7" || alias == "8" )
                alias = "4";

            return get_animation( _id_53709E15B972FF84, alias );
        case "cover_left":
            if ( alias == "9" )
                alias = "8";

            return get_animation( _id_53709E15B972FF84, alias );
        case "cover_right":
            if ( alias == "7" )
                alias = "8";

            return get_animation( _id_53709E15B972FF84, alias );
        case "cover_left_crouch":
            if ( alias == "9" )
                alias = "8";

            return get_animation( _id_53709E15B972FF84, alias );
        case "cover_right_crouch":
            if ( alias == "7" )
                alias = "8";

            return get_animation( _id_53709E15B972FF84, alias );
        case "exposed":
            return get_animation( _id_53709E15B972FF84, alias );
        default:
            return undefined;
    }
}

get_reload_anim()
{
    if ( self.animset == "exposed" )
        return get_animation( "Exposed_Reload", "rifle" );
    else
    {
        archetype = self.animset + "_reload";
        return get_animation( archetype, "reload" );
    }
}

get_stance_change_anim()
{
    switch ( self.animset )
    {
        case "cover_crouch":
            return get_animation( "exposed_stand_to_crouch", "stand_to_crouch" );
        case "cover_stand":
            return get_animation( "exposed_crouch_to_stand", "crouch_to_stand" );
        case "cover_left":
            return get_animation( "cover_left_crouch_to_stand", "crouch_to_stand" );
        case "cover_left_crouch":
            return get_animation( "cover_left_stand_to_crouch", "stand_to_crouch" );
        case "cover_right":
            return get_animation( "cover_right_crouch_to_stand", "crouch_to_stand" );
        case "cover_right_crouch":
            return get_animation( "cover_right_stand_to_crouch", "stand_to_crouch" );
    }

    return undefined;
}

get_pain_anim()
{
    if ( is_moving() )
    {
        _id_4BF1BDE22BD9C8A1 = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), "short", "medium" );
        return get_animation( "pain_run_default", _id_4BF1BDE22BD9C8A1 );
    }
    else
    {
        switch ( self.animset )
        {
            case "cover_crouch":
                return get_animation( "pain_cover_crouch_anim", "torso_md_f" );
            case "cover_stand":
                return get_animation( "pain_cover_stand_anim", "torso_md_f" );
            case "cover_left":
                return get_animation( "pain_cover_left_default", "stand" );
            case "cover_right":
                return get_animation( "pain_cover_right_default", "stand" );
            case "cover_left_crouch":
                return get_animation( "pain_cover_left_default", "crouch" );
            case "cover_right_crouch":
                return get_animation( "pain_cover_right_default", "crouch" );
            default:
                return get_animation( "pain_exp_stand", "torso_md_f" );
        }
    }
}

get_death_anim()
{
    if ( self.unittype != "civilian" )
    {
        if ( isdefined( self.last_damage_type ) && self.last_damage_type == "MOD_EXPLOSIVE" )
        {
            _id_243275A04A5860CA = scripts\engine\utility::random( [ "explosive_f", "explosive_l", "explosive_r" ] );

            if ( is_moving() )
            {
                return get_animation( "death_moving_explosive", _id_243275A04A5860CA );
                return;
            }

            return get_animation( "death_explosive", _id_243275A04A5860CA );
            return;
        }
        else if ( is_moving() )
        {
            if ( scripts\engine\utility::cointoss() )
            {
                _id_E54009307FBC2A5E = scripts\engine\utility::random( [ "head", "lowerbody_l", "lowerbody_r", "midbody" ] );
                _id_FAB004A53B365104 = "_md_";
                _id_E3B60F93D16095C2 = scripts\engine\utility::random( [ "2", "4", "6", "8" ] );
                _id_243275A04A5860CA = _id_E54009307FBC2A5E + _id_FAB004A53B365104 + _id_E3B60F93D16095C2;
                return get_animation( "death_exp_stand", _id_243275A04A5860CA );
            }
            else
            {
                _id_E3B60F93D16095C2 = scripts\engine\utility::random( [ "running_forward_2", "running_forward_4", "running_forward_6", "running_forward_8" ] );
                return get_animation( "death_moving_default", _id_E3B60F93D16095C2 );
            }
        }
        else
        {
            switch ( self.animset )
            {
                case "cover_crouch":
                    return get_animation( "death_cover_default", "crouch_default" );
                case "cover_stand":
                    return get_animation( "death_cover_default", "stand" );
                case "cover_left":
                    return get_animation( "death_cover_default", "left_stand" );
                case "cover_right":
                    return get_animation( "death_cover_default", "right_stand" );
                case "cover_left_crouch":
                    return get_animation( "death_cover_default", "left_crouch" );
                case "cover_right_crouch":
                    return get_animation( "death_cover_default", "right_crouch_default" );
                default:
                    _id_E54009307FBC2A5E = scripts\engine\utility::random( [ "head", "lowerbody", "midbody" ] );

                    if ( _id_E54009307FBC2A5E == "lowerbody" )
                        _id_FAB004A53B365104 = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), "_r_md_", "_l_md_" );
                    else
                        _id_FAB004A53B365104 = "_md_";

                    _id_E3B60F93D16095C2 = scripts\engine\utility::random( [ "2", "4", "6", "8" ] );
                    _id_243275A04A5860CA = _id_E54009307FBC2A5E + _id_FAB004A53B365104 + _id_E3B60F93D16095C2;
                    return get_animation( "death_exp_stand", _id_243275A04A5860CA );
            }
        }
    }
    else
        return get_animation( "death_generic", "civ_death_generic" );
}

get_traverse_anim( animscript )
{
    if ( issubstr( animscript, "jumpdown" ) )
        return get_animation( animscript, "jumpdown" );
    else if ( issubstr( animscript, "jumpover" ) )
        return get_animation( animscript, "jumpover" );
    else if ( issubstr( animscript, "jumpup" ) )
        return get_animation( animscript, "jumpup" );
    else
        return get_animation( animscript, animscript );
}

death_think()
{
    self notify( "death_think" );
    self endon( "death_think" );
    self endon( "entitydeleted" );
    damage_think();

    if ( !isdefined( self ) )
        return;

    clear_node_path();

    if ( isdefined( self.deathfunction ) )
    {
        result = self [[ self.deathfunction ]]();

        if ( !isdefined( result ) || result )
            return;
    }

    _id_95002E6CED84067B = self.deathanim;

    if ( !isdefined( _id_95002E6CED84067B ) )
        _id_95002E6CED84067B = get_death_anim();

    self notify( "death" );
    cleanup_state_ents();
    drop_weapon();
    _id_4ADE3AE5C138C8B3::saygenericdialogue( "death" );

    if ( isdefined( self.noragdoll ) && self.noragdoll )
    {
        if ( !isdefined( self.skipdeathanim ) || !self.skipdeathanim )
            play_scripted_anim( _id_95002E6CED84067B, "deathplant" );
    }

    if ( !( isdefined( self.skipdeathanim ) && self.skipdeathanim ) )
        play_scripted_anim( _id_95002E6CED84067B, "deathplant" );

    self freeentitysentient();
    self startragdoll();
    self notsolid();

    if ( isdefined( self ) && isdefined( self.nocorpsedelete ) )
        return;

    wait 10;

    while ( isdefined( self ) )
    {
        self delete();
        wait 5;
    }
}

drop_weapon( limit )
{
    if ( !isdefined( limit ) )
        limit = 1;

    if ( istrue( self.nodrop ) )
        return;

    weapon = self.weapon;
    _id_B8F5AC23CE0DFDE3 = getweaponmodel( weapon );

    if ( isdefined( self.weapon_object ) && ( !isdefined( _id_B8F5AC23CE0DFDE3 ) || _id_B8F5AC23CE0DFDE3 == "" ) )
    {
        weapon = self.weapon_object;
        _id_B8F5AC23CE0DFDE3 = getweaponmodel( weapon );
    }

    if ( isdefined( _id_B8F5AC23CE0DFDE3 ) && _id_B8F5AC23CE0DFDE3 != "" )
    {
        scripts\common\ai::gun_remove();

        if ( !isdefined( self.nodrop ) )
        {
            attachments = scripts\sp\utility::getweapondefaults( weapon.basename );
            _id_87F798FAF85AFB05 = "";

            foreach ( attachment in attachments )
                _id_87F798FAF85AFB05 = _id_87F798FAF85AFB05 + "+" + attachment;

            gun = spawn( "weapon_" + getcompleteweaponname( weapon ) + _id_87F798FAF85AFB05, self gettagorigin( "tag_weapon_right" ) );
            gun.angles = self gettagangles( "tag_weapon_right" );

            if ( istrue( limit ) )
                limit_dropped_weapons( gun );
        }
    }
}

limit_dropped_weapons( _id_DD515FCF025B2E79 )
{
    if ( !isdefined( level.fakeactor_droppedweapons ) )
        level.fakeactor_droppedweapons = [];

    weaponarray = scripts\engine\utility::array_removeundefined( level.fakeactor_droppedweapons );
    num = weaponarray.size;

    if ( weaponarray.size >= 4 )
    {
        weaponarray = sortbydistance( weaponarray, level.player.origin );
        num = num - 1;
        weaponarray[num] delete();
    }

    weaponarray[num] = _id_DD515FCF025B2E79;
    level.fakeactor_droppedweapons = weaponarray;
}

damage_think()
{
    self endon( "entitydeleted" );

    for (;;)
    {
        self waittill( "damage", amount, attacker, direction_vec, point, type );
        self.last_damage_type = type;
        self.lastattacker = attacker;

        if ( isdefined( attacker ) && isplayer( attacker ) )
            attacker setclientomnvar( "damage_feedback_notify", gettime() );

        if ( isdefined( self.damageshield ) && self.damageshield )
        {
            self.health = 100000;
            continue;
        }

        if ( self.health <= 0 )
            break;

        _id_4ADE3AE5C138C8B3::saygenericdialogue( "pain" );

        if ( !was_recent_pain() && should_do_pain_anim() )
            thread do_pain();
    }
}

do_pain()
{
    self notify( "change_state" );
    self notify( "stop_damage_pain_anim" );
    self endon( "stop_damage_pain_anim" );
    self endon( "death" );
    set_recent_pain( 1 );
    scripts\engine\utility::delaythread( 1.5, ::set_recent_pain, 0 );
    clear_node_path();
    play_scripted_anim( get_pain_anim() );
    self.current_state = "";
    self.forced_node_path = scripts\sp\fakeactor_node::fakeactor_node_get_path( self.current_node, self.origin, is_frantic(), 1 );
}

debug_draw()
{

}

array_handling( _id_F585D064A2717B41 )
{
    team = _id_F585D064A2717B41.team;
    scripts\engine\sp\utility::structarray_add( level.fakeactors[team], _id_F585D064A2717B41 );
    _id_F585D064A2717B41 waittill( "death" );
    _id_F585D064A2717B41 cleanup_state_ents();

    if ( isdefined( _id_F585D064A2717B41 ) && isdefined( _id_F585D064A2717B41.struct_array_index ) )
        scripts\engine\sp\utility::structarray_remove_index( level.fakeactors[team], _id_F585D064A2717B41.struct_array_index );
    else
        scripts\engine\sp\utility::structarray_remove_undefined( level.fakeactors[team] );
}

play_running_anim_internal( animation, rate )
{
    if ( !isdefined( rate ) )
        rate = randomfloatrange( 0.85, 1.2 );

    if ( isdefined( self.fakeactor_loop_override ) )
        self [[ self.fakeactor_loop_override ]]( animation, rate );
    else
    {
        self clearanim( self.anim_branch["body"], 0.2 );
        self setflaggedanim( "fakeactor_anim", animation, 1, 0.2, rate );
    }
}

play_scripted_anim( _id_370A66B73EE7BBDA, deathplant, _id_FAEA703CD5C89228, flagname, node, _id_9E8A16D47A03007A )
{
    if ( isdefined( self.fakeactor_scripted_override ) )
        self [[ self.fakeactor_scripted_override ]]( _id_370A66B73EE7BBDA, deathplant );
    else
    {
        self clearanim( self.anim_branch["body"], 0.2 );
        self stopanimscripted();
        mode = "normal";

        if ( isdefined( deathplant ) )
            mode = "deathplant";

        org = self.origin;
        _id_8BC14603A27FA3E7 = self.angles;

        if ( isdefined( node ) )
        {
            org = node.origin;
            _id_8BC14603A27FA3E7 = node.angles;
        }
        else if ( isdefined( self._id_98B372C0F9B463BA ) )
        {
            org = self._id_98B372C0F9B463BA.origin;
            _id_8BC14603A27FA3E7 = self._id_98B372C0F9B463BA.angles;
        }

        if ( !isdefined( _id_9E8A16D47A03007A ) )
            _id_9E8A16D47A03007A = 0.2;

        self animscripted( "fakeactor_anim", org, _id_8BC14603A27FA3E7, _id_370A66B73EE7BBDA, mode );

        if ( isdefined( _id_FAEA703CD5C89228 ) )
            thread _id_357B9A54DFEDBD4A::donotetracks( flagname, _id_FAEA703CD5C89228 );

        _id_53706A74886ACEBC = "end";

        if ( animhasnotetrack( _id_370A66B73EE7BBDA, "finish" ) )
            _id_53706A74886ACEBC = "finish";
        else if ( animhasnotetrack( _id_370A66B73EE7BBDA, "stop anim" ) )
            _id_53706A74886ACEBC = "stop anim";

        _id_3D4EBDD2D6237420 = getanimlength( _id_370A66B73EE7BBDA ) - _id_9E8A16D47A03007A;

        if ( _id_9E8A16D47A03007A > 0 && _id_3D4EBDD2D6237420 > 0 )
            scripts\engine\utility::waittill_match_or_timeout( "fakeactor_anim", _id_53706A74886ACEBC, _id_3D4EBDD2D6237420 );
        else
            self waittillmatch( "fakeactor_anim", _id_53706A74886ACEBC );
    }
}

get_anim_data( _id_F3FD98D5173D8F17 )
{
    anim_struct = spawnstruct();
    anim_struct.anim_time = getanimlength( _id_F3FD98D5173D8F17 );
    _id_2BED0B0A7EC4311D = getmovedelta( _id_F3FD98D5173D8F17, 0, 1 );
    _id_614A3D65E6B2828D = length( _id_2BED0B0A7EC4311D );

    if ( anim_struct.anim_time > 0 && _id_614A3D65E6B2828D > 0 )
    {
        anim_struct.run_speed = _id_614A3D65E6B2828D / anim_struct.anim_time;
        anim_struct.anim_relative = 0;
    }
    else
    {
        anim_struct.run_speed = 170;
        anim_struct.anim_relative = 1;
    }

    return anim_struct;
}

set_aim_target( aim_target, offset )
{
    self.aim_target = aim_target;
    self.aim_target_offset = offset;
}

get_aim_target()
{
    return self.aim_target;
}

watch_aim_target_think()
{
    self endon( "death" );

    for (;;)
    {
        if ( isai( self.aim_target ) && !isalive( self.aim_target ) )
            set_aim_target( undefined );

        wait 0.05;
    }
}

is_human()
{
    return self.unittype == "C6i" || self.unittype == "soldier" || self.unittype == "civilian" || self.unittype == "juggernaut" || self.unittype == "suicidebomber";
}

setup_animation()
{
    scripts\sp\utility::assign_animtree_based_on_unittype();

    switch ( self.unittype )
    {
        case "C6":
            setup_c6();
            break;
        case "C8":
            setup_c8();
            break;
        case "C6i":
        case "soldier":
        case "civilian":
            setup_generic_human();
            break;
        case "C12":
            break;
        default:
            break;
    }
}

#using_animtree("generic_human");

setup_generic_human()
{
    self.anim_branch["root"] = %root;
    self.anim_branch["body"] = %body;
    self.anim_branch["aim_2"] = %aim_2;
    self.anim_branch["aim_4"] = %aim_4;
    self.anim_branch["aim_6"] = %aim_6;
    self.anim_branch["aim_8"] = %aim_8;
}

#using_animtree("c6");

setup_c6()
{
    self.anim_branch["root"] = %root;
    self.anim_branch["body"] = %body;
    self.anim_branch["aim_2"] = %aim_2;
    self.anim_branch["aim_4"] = %aim_4;
    self.anim_branch["aim_6"] = %aim_6;
    self.anim_branch["aim_8"] = %aim_8;
}

#using_animtree("c8");

setup_c8()
{
    self.anim_branch["root"] = %root;
    self.anim_branch["body"] = %body;
    self.anim_branch["aim_2"] = %aim_2;
    self.anim_branch["aim_4"] = %aim_4;
    self.anim_branch["aim_6"] = %aim_6;
    self.anim_branch["aim_8"] = %aim_8;
}

aim_weights( aim_2, aim_4, aim_6, aim_8, pitchdelta, _id_5BABFFA7F03CE512 )
{
    _id_8AF3957B3D71E65A = 0.1;
    anim_weight = 1;

    if ( _id_5BABFFA7F03CE512 < 0 )
    {
        weight = _id_5BABFFA7F03CE512 / self.rightaimlimit * anim_weight;
        self setanimlimited( aim_4, 0, _id_8AF3957B3D71E65A, 1, 1 );
        self setanimlimited( aim_6, weight, _id_8AF3957B3D71E65A, 1, 1 );
    }
    else if ( _id_5BABFFA7F03CE512 > 0 )
    {
        weight = _id_5BABFFA7F03CE512 / self.leftaimlimit * anim_weight;
        self setanimlimited( aim_4, weight, _id_8AF3957B3D71E65A, 1, 1 );
        self setanimlimited( aim_6, 0, _id_8AF3957B3D71E65A, 1, 1 );
    }

    if ( pitchdelta < 0 )
    {
        weight = pitchdelta / self.upaimlimit * anim_weight;
        self setanimlimited( aim_2, 0, _id_8AF3957B3D71E65A, 1, 1 );
        self setanimlimited( aim_8, weight, _id_8AF3957B3D71E65A, 1, 1 );
    }
    else if ( pitchdelta > 0 )
    {
        weight = pitchdelta / self.downaimlimit * anim_weight;
        self setanimlimited( aim_2, weight, _id_8AF3957B3D71E65A, 1, 1 );
        self setanimlimited( aim_8, 0, _id_8AF3957B3D71E65A, 1, 1 );
    }
}

set_animsets( animsets )
{
    self.animsets = animsets;
    pick_random_animset();
}

pick_random_animset()
{
    _id_0F21B8F6440EB48A = randomint( self.animsets.size );
    self.animset = self.animsets[_id_0F21B8F6440EB48A];
}

set_run_anim_override( _id_7DB030092DDD8A5A )
{
    self.run_anim_override = _id_7DB030092DDD8A5A;
}

clear_run_anim_override()
{
    self.run_anim_override = undefined;
}

set_idle_anim_override( idle_anim )
{
    self.idle_anim_override = idle_anim;
}

clear_idle_anim_override()
{
    self.idle_anim_override = undefined;
}

is_idle()
{
    return self.current_state == "idle";
}

is_moving()
{
    return isdefined( self.current_state ) && self.current_state == "move";
}

is_controlled()
{
    return self.flags & 256;
}

set_controlled( _id_E71D7ADD6D0EE193 )
{
    if ( _id_E71D7ADD6D0EE193 )
        self.flags = self.flags | 256;
    else
        self.flags = self.flags & ~256;
}

take_control()
{
    self notify( "change_state" );
    self.prev_node = self.current_node;
    clear_node_path();
    self.node_path = undefined;
    set_controlled( 1 );
}

release_control( next_node )
{
    set_controlled( 0 );
    _id_8D5ECC2922695971 = undefined;

    if ( isdefined( next_node ) )
        _id_8D5ECC2922695971 = next_node;
    else if ( isdefined( self.prev_node ) )
    {
        _id_8D5ECC2922695971 = self.prev_node;
        self.prev_node = undefined;
    }
    else if ( isdefined( self.target ) )
    {
        _id_9CE92D68B26ABBFB = scripts\engine\utility::getstructarray( self.target, "targetname" );
        _id_9CE92D68B26ABBFB = scripts\engine\utility::random( _id_9CE92D68B26ABBFB );

        if ( isdefined( _id_9CE92D68B26ABBFB ) && _id_9CE92D68B26ABBFB scripts\sp\fakeactor_node::is_fakeactor_node() )
            _id_8D5ECC2922695971 = _id_9CE92D68B26ABBFB;
    }

    if ( isdefined( _id_8D5ECC2922695971 ) )
    {
        set_current_node( _id_8D5ECC2922695971 );
        set_wants_to_move( 1 );
    }

    self.current_state = undefined;
}

set_do_arrivals( _id_5A4BD5F8ADEAFF9B )
{
    if ( _id_5A4BD5F8ADEAFF9B )
        self.flags = self.flags | 8;
    else
        self.flags = self.flags & ~8;
}

should_do_arrivals()
{
    return self.flags & 8;
}

set_do_exits( _id_25CAC392318A03BA )
{
    if ( _id_25CAC392318A03BA )
        self.flags = self.flags | 16;
    else
        self.flags = self.flags & ~16;
}

should_do_exits()
{
    if ( isdefined( self.previous_state ) )
    {
        if ( self.previous_state == "traverse" || self.previous_state == "turn" )
            return 0;
    }

    return self.flags & 16;
}

set_wants_to_move( _id_C3B2A9E2A964C828 )
{
    if ( _id_C3B2A9E2A964C828 )
        self.flags = self.flags | 2;
    else
        self.flags = self.flags & ~2;
}

does_want_to_move()
{
    return self.flags & 2;
}

set_target_in_view( _id_1D26DF99263427F2 )
{
    if ( _id_1D26DF99263427F2 )
        self.flags = self.flags | 1;
    else
        self.flags = self.flags & ~1;
}

is_target_in_view()
{
    return self.flags & 1;
}

set_real_fire( _id_C1A7573825858CA6 )
{
    if ( _id_C1A7573825858CA6 )
        self.flags = self.flags | 32;
    else
        self.flags = self.flags & ~32;
}

should_real_fire()
{
    return self.flags & 32;
}

set_ignore_claimed( ignore )
{
    if ( ignore )
        self.flags = self.flags | 64;
    else
        self.flags = self.flags & ~64;
}

is_ignore_claimed()
{
    return self.flags & 64;
}

obstacle_in_way( _id_59898D848DF242DE )
{
    if ( _id_59898D848DF242DE )
        self.flags = self.flags | 128;
    else
        self.flags = self.flags & ~128;
}

is_obstacle_in_way()
{
    return self.flags & 128;
}

should_do_pain_anim()
{
    return self.flags & 512;
}

set_use_pain( _id_AF5877DDE810ED95 )
{
    if ( _id_AF5877DDE810ED95 )
        self.flags = self.flags | 512;
    else
        self.flags = self.flags & ~512;
}

was_recent_pain()
{
    return self.flags & 2048;
}

set_recent_pain( _id_6FAE73089FFFDB9B )
{
    if ( _id_6FAE73089FFFDB9B )
        self.flags = self.flags | 2048;
    else
        self.flags = self.flags & ~2048;
}

is_frantic()
{
    return self.flags & 1024;
}

set_frantic( frantic )
{
    if ( frantic )
        self.flags = self.flags | 1024;
    else
        self.flags = self.flags & ~1024;
}

_id_2FDFCAEA9FDF106A()
{
    return isdefined( self.flags ) && ( self.flags & 4096 ) != 0;
}

trigger_fakeactor_move( trigger )
{
    if ( !isdefined( self.targetname ) )
        return;

    _id_F585D064A2717B41 = getent( "target", self.targetname );

    for (;;)
    {
        trigger waittill( "trigger", other );
        _id_F585D064A2717B41 set_wants_to_move( 1 );
    }
}

trigger_fakeactor_node_disable( trigger )
{
    if ( !isdefined( trigger.targetname ) )
        return;

    _id_4A0043876B52E6E5 = scripts\engine\utility::getstructarray( trigger.targetname, "target" );

    if ( _id_4A0043876B52E6E5.size == 0 )
        return;

    for (;;)
    {
        trigger waittill( "trigger", other );

        foreach ( struct in _id_4A0043876B52E6E5 )
            struct scripts\sp\fakeactor_node::fakeactor_node_set_disabled( 1 );
    }
}

trigger_fakeactor_node_enable( trigger )
{
    if ( !isdefined( trigger.targetname ) )
        return;

    _id_4A0043876B52E6E5 = scripts\engine\utility::getstructarray( trigger.targetname, "target" );

    if ( _id_4A0043876B52E6E5.size == 0 )
        return;

    for (;;)
    {
        trigger waittill( "trigger", other );

        foreach ( struct in _id_4A0043876B52E6E5 )
            struct scripts\sp\fakeactor_node::fakeactor_node_set_disabled( 0 );
    }
}

trigger_fakeactor_node_enablegroup( trigger )
{
    if ( !isdefined( trigger.script_parameters ) )
        return;

    for (;;)
    {
        trigger waittill( "trigger", other );
        scripts\sp\fakeactor_node::fakeactor_node_group_set_disabled( trigger.script_parameters, 0 );
    }
}

trigger_fakeactor_node_disablegroup( trigger )
{
    if ( !isdefined( trigger.script_parameters ) )
        return;

    for (;;)
    {
        trigger waittill( "trigger", other );
        scripts\sp\fakeactor_node::fakeactor_node_group_set_disabled( trigger.script_parameters, 1 );
    }
}

trigger_fakeactor_node_passthrough( trigger )
{
    if ( !isdefined( trigger.targetname ) )
        return;

    _id_4A0043876B52E6E5 = scripts\engine\utility::getstructarray( trigger.targetname, "target" );

    if ( _id_4A0043876B52E6E5.size == 0 )
        return;

    for (;;)
    {
        trigger waittill( "trigger", other );

        foreach ( struct in _id_4A0043876B52E6E5 )
            struct scripts\sp\fakeactor_node::fakeactor_node_set_passthrough();
    }
}

trigger_fakeactor_node_lock( trigger )
{
    if ( !isdefined( trigger.targetname ) )
        return;

    _id_4A0043876B52E6E5 = scripts\engine\utility::getstructarray( trigger.targetname, "target" );

    if ( _id_4A0043876B52E6E5.size == 0 )
        return;

    for (;;)
    {
        trigger waittill( "trigger", other );

        foreach ( struct in _id_4A0043876B52E6E5 )
            struct scripts\sp\fakeactor_node::fakeactor_node_set_locked();
    }
}

is_higher_priority( item, key )
{
    return item["priority"] < key["priority"];
}
