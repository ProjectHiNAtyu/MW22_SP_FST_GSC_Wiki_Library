// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

checkbcstatevalid( asmname, statename, _id_F2B19B25D457C2A6, params )
{
    if ( isdefined( self.enemy ) )
    {
        _id_6F1937277208C460 = distancesquared( self.origin, self.enemy.origin );

        if ( _id_6F1937277208C460 < 65536.0 )
            return 0;

        if ( isai( self.enemy ) )
        {
            if ( !isdefined( self.enemy scripts\asm\asm_bb::bb_getcovernode() ) || self.enemy scripts\asm\asm_bb::bb_getrequestedcoverstate() != "hide" )
                return 0;
        }
        else if ( _id_6F1937277208C460 < 262144 )
            return 0;
    }

    if ( isdefined( self._blackboard.battlechatter_alias ) )
    {
        if ( self._blackboard.battlechatter_alias == params )
            return 1;
        else
            return 0;
    }
    else
        return 0;
}

choosebcdirectionanim( asmname, statename, params )
{
    target_ent = undefined;

    if ( isdefined( self._blackboard.battlechatter_target ) )
        target_ent = self._blackboard.battlechatter_target.origin;
    else
        target_ent = level.player.origin + anglestoforward( level.player.angles ) * 6000;

    if ( isdefined( params ) )
        _id_5442D92E287BFFA2 = params;
    else
    {
        covernode = scripts\asm\asm_bb::bb_getcovernode();

        if ( isdefined( covernode ) )
            _id_4C44BD3C9BAC5AE2 = covernode.angles;
        else
            _id_4C44BD3C9BAC5AE2 = self.angles;

        _id_5442D92E287BFFA2 = get_anim_direction( _id_4C44BD3C9BAC5AE2, self.origin, target_ent );
    }

    _id_961D075B7157661F = scripts\asm\asm::asm_lookupanimfromalias( statename, _id_5442D92E287BFFA2 );

    if ( !isdefined( _id_961D075B7157661F ) )
        _id_961D075B7157661F = scripts\asm\asm::asm_lookupanimfromalias( statename, "8" );

    return _id_961D075B7157661F;
}

playbcanim( asmname, statename, params )
{
    self endon( statename + "_finished" );
    anim_name = scripts\asm\asm::asm_getanim( asmname, statename );
    xanim = scripts\asm\asm::asm_getxanim( statename, anim_name );
    self._blackboard.battlechatter_anim_active = 1;
    self aisetanim( statename, anim_name );
    scripts\asm\asm::asm_playfacialanim( asmname, statename, xanim );
    scripts\asm\asm::asm_donotetracks( asmname, statename, scripts\asm\asm::asm_getnotehandler( asmname, statename ) );
    self._blackboard.battlechatter_alias = undefined;
    self._blackboard.battlechatter_anim_active = undefined;
}

ai_gesture_requested( asmname, statename, _id_F2B19B25D457C2A6, params )
{
    return istrue( self._blackboard.gesture_active );
}

ai_point_gesture_requested( asmname, statename, _id_F2B19B25D457C2A6, params )
{
    return istrue( self._blackboard.point_gesture_active );
}

_is_looking_at_range( _id_8D206297C3CB29D4, range )
{
    _id_70222FBC47330166 = anglestoforward( level.player.angles );
    _id_BAC0559FEED06173 = vectornormalize( _id_8D206297C3CB29D4.origin - level.player.origin );
    _id_FCE87949C9B65851 = vectordot( _id_70222FBC47330166, _id_BAC0559FEED06173 );

    if ( _id_FCE87949C9B65851 >= range )
        return 1;
    else
        return 0;
}

get_anim_direction( _id_4C44BD3C9BAC5AE2, _id_88DAF353E30ACF25, targetorigin )
{
    _id_87617967D6BB7D22 = vectortoangles( targetorigin - _id_88DAF353E30ACF25 );
    _id_077B9E4B599269EB = angleclamp180( _id_87617967D6BB7D22[1] - _id_4C44BD3C9BAC5AE2[1] );
    angleindex = getangleindex( _id_077B9E4B599269EB, 10 );
    _id_84544112C7C95FBA = [ "2", "3", "6", "9", "8", "7", "4", "1", "2" ];
    return _id_84544112C7C95FBA[angleindex];
}

#using_animtree("generic_human");

ai_gesture_stop( _id_480E0D93B559931C )
{
    self notify( "new_gesture_stop_begin" );
    self notify( "gesture_stop" );
    self endon( "death" );
    self endon( "start_gesture_lookat" );
    self endon( "new_gesture_stop_begin" );
    self endon( "entitydeleted" );

    if ( isdefined( self.anim_getrootfunc ) && isdefined( self.old_root ) )
        reset_root();

    if ( isdefined( self.anim_getrootfunc ) && !isdefined( self.old_root ) )
        self.anim_getrootfunc = undefined;

    if ( isdefined( _id_480E0D93B559931C ) )
        _id_D775E14980E96400 = _id_480E0D93B559931C;
    else
        _id_D775E14980E96400 = 0.25;

    if ( !isdefined( self.is_head_tracking ) )
        return;

    start_time = gettime() / 1000;
    _id_CC7D64B564852548 = self _meth_7EDB4DE592626D72( self.head_center_anim );
    _id_920F5E7265D0D6D3 = self _meth_7EDB4DE592626D72( self.head_right_anim );
    _id_EA4FD9D5698BB0DE = self _meth_7EDB4DE592626D72( self.head_left_anim );
    _id_08A36695EA482743 = self _meth_7EDB4DE592626D72( self.head_rightback_anim );
    _id_D94CCC571E35AD74 = self _meth_7EDB4DE592626D72( self.head_leftback_anim );
    _id_F67C766809EC9EB1 = self _meth_7EDB4DE592626D72( %lookat_left_right );
    _id_0FF2B0ADC7F8AB11 = self _meth_7EDB4DE592626D72( %lookat_up_down );
    _id_7261FA6F5015C297 = self _meth_7EDB4DE592626D72( %lookat_head_base_partial );
    _id_BFF9B1C691B8B590 = self _meth_7EDB4DE592626D72( %head_gesture_look_partial );
    _id_F7A05D8D154D1FCA = self _meth_7EDB4DE592626D72( %lookat_head_adds );

    while ( gettime() / 1000 - start_time < _id_480E0D93B559931C )
    {
        _id_79DEC2965739392B = ( gettime() / 1000 - start_time ) / _id_480E0D93B559931C;
        _id_79DEC2965739392B = smoothstep( 0, 1, _id_79DEC2965739392B );
        _id_8EDA33D84E23A48E = lerp_float( _id_CC7D64B564852548, 1, _id_79DEC2965739392B );
        _id_75A6F0398C7CE571 = lerp_float( _id_920F5E7265D0D6D3, 0, _id_79DEC2965739392B );
        _id_A36ADBCA83488924 = lerp_float( _id_EA4FD9D5698BB0DE, 0, _id_79DEC2965739392B );
        _id_3B07618FF6ABC8C9 = lerp_float( _id_08A36695EA482743, 0, _id_79DEC2965739392B );
        _id_AC8AA45EB885E4F2 = lerp_float( _id_D94CCC571E35AD74, 0, _id_79DEC2965739392B );
        _id_F68167872853C4C7 = lerp_float( _id_F67C766809EC9EB1, 0, _id_79DEC2965739392B );
        _id_6F9061194BEC6EA3 = lerp_float( _id_0FF2B0ADC7F8AB11, 0, _id_79DEC2965739392B );
        _id_ACCF346B44A25CFD = lerp_float( _id_7261FA6F5015C297, 0, _id_79DEC2965739392B );
        _id_CDAF7985C83B0386 = lerp_float( _id_BFF9B1C691B8B590, 0, _id_79DEC2965739392B );
        _id_5948B4C152818C80 = lerp_float( _id_F7A05D8D154D1FCA, 0, _id_79DEC2965739392B );
        self setanimlimited( self.head_center_anim, _id_8EDA33D84E23A48E, 0.05 );
        self setanimlimited( self.head_right_anim, _id_75A6F0398C7CE571, 0.05 );
        self setanimlimited( self.head_left_anim, _id_A36ADBCA83488924, 0.05 );
        self setanimlimited( self.head_rightback_anim, _id_3B07618FF6ABC8C9, 0.05 );
        self setanimlimited( self.head_leftback_anim, _id_AC8AA45EB885E4F2, 0.05 );
        self setanimlimited( %lookat_left_right, _id_F68167872853C4C7, 0.05 );
        self setanimlimited( %lookat_up_down, _id_6F9061194BEC6EA3, 0.05 );
        self setanimlimited( %lookat_head_base_partial, _id_ACCF346B44A25CFD, 0.05 );
        self setanimlimited( %head_gesture_look_partial, _id_CDAF7985C83B0386, 0.05 );
        self setanimlimited( %lookat_head_adds, _id_5948B4C152818C80, 0.05 );
        wait 0.05;
    }

    self setanimlimited( self.head_center_anim, 0, 0.05 );
    self setanimlimited( self.head_right_anim, 0, 0.05 );
    self setanimlimited( self.head_left_anim, 0, 0.05 );
    self setanimlimited( self.head_rightback_anim, 0, 0.05 );
    self setanimlimited( self.head_leftback_anim, 0, 0.05 );
    self setanimlimited( %lookat_left_right, 0, 0.05 );
    self setanimlimited( %lookat_up_down, 0, 0.05 );
    self setanimlimited( %lookat_head_base_partial, 0, 0.05 );
    self setanimlimited( %head_gesture_look_partial, 0, 0.05 );
    self setanimlimited( %lookat_head_adds, 0, 0.05 );
    self clearanim( %lookat_left_right, 0.05 );
    self clearanim( %lookat_up_down, 0.05 );
    self.is_head_tracking = undefined;
}

ai_gesture_eyes_stop( _id_480E0D93B559931C )
{
    self endon( "death" );
    self endon( "entitydeleted" );
    self notify( "eye_gesture_stop" );

    if ( isdefined( _id_480E0D93B559931C ) )
        _id_D775E14980E96400 = _id_480E0D93B559931C;
    else
        _id_D775E14980E96400 = 0.25;

    self clearanim( %eyes_look_leftright, _id_D775E14980E96400 );
    self clearanim( %eyes_look_updown, _id_D775E14980E96400 );
    self clearanim( %eyes_lookat_base_partial, _id_D775E14980E96400 );
    self clearanim( %facial_gesture_look_partial, _id_D775E14980E96400 );
    self clearanim( %eyes_blink_base_partial, _id_D775E14980E96400 );
    self clearanim( %facial_gesture_blink_partial, _id_D775E14980E96400 );
    self clearanim( %eyes_blink, _id_D775E14980E96400 );
    self.is_eye_tracking = undefined;
}

ai_gesture_lookat_weight_down( _id_D775E14980E96400 )
{
    self endon( "death" );
    self endon( "gesture_stop" );
    self endon( "head_weight_up" );
    self notify( "head_weight_down" );
    self endon( "entitydeleted" );

    if ( isdefined( self.blend_down_in_progress ) )
        return;

    _id_480E0D93B559931C = _id_D775E14980E96400;
    self.blend_down_in_progress = 1;
    self.blend_up_in_progress = undefined;
    start_time = gettime() / 1000;
    _id_F67C766809EC9EB1 = self _meth_7EDB4DE592626D72( %lookat_left_right );
    _id_0FF2B0ADC7F8AB11 = self _meth_7EDB4DE592626D72( %lookat_up_down );
    _id_7261FA6F5015C297 = self _meth_7EDB4DE592626D72( %lookat_head_base_partial );
    _id_BFF9B1C691B8B590 = self _meth_7EDB4DE592626D72( %head_gesture_look_partial );
    _id_F7A05D8D154D1FCA = self _meth_7EDB4DE592626D72( %lookat_head_adds );

    while ( gettime() / 1000 - start_time < _id_480E0D93B559931C )
    {
        _id_79DEC2965739392B = ( gettime() / 1000 - start_time ) / _id_480E0D93B559931C;
        _id_79DEC2965739392B = smoothstep( 0, 1, _id_79DEC2965739392B );
        _id_F68167872853C4C7 = lerp_float( _id_F67C766809EC9EB1, 0, _id_79DEC2965739392B );
        _id_6F9061194BEC6EA3 = lerp_float( _id_0FF2B0ADC7F8AB11, 0, _id_79DEC2965739392B );
        _id_ACCF346B44A25CFD = lerp_float( _id_7261FA6F5015C297, 0, _id_79DEC2965739392B );
        _id_CDAF7985C83B0386 = lerp_float( _id_BFF9B1C691B8B590, 0, _id_79DEC2965739392B );
        _id_5948B4C152818C80 = lerp_float( _id_F7A05D8D154D1FCA, 0, _id_79DEC2965739392B );
        self setanimlimited( %lookat_left_right, _id_F68167872853C4C7, 0.05 );
        self setanimlimited( %lookat_up_down, _id_6F9061194BEC6EA3, 0.05 );
        self setanimlimited( %lookat_head_base_partial, _id_ACCF346B44A25CFD, 0.05 );
        self setanimlimited( %head_gesture_look_partial, _id_CDAF7985C83B0386, 0.05 );
        self setanimlimited( %lookat_head_adds, _id_5948B4C152818C80, 0.05 );
        wait 0.05;
    }

    self setanimlimited( %lookat_left_right, 0, 0.05 );
    self setanimlimited( %lookat_up_down, 0, 0.05 );
    self setanimlimited( %lookat_head_base_partial, 0, 0.05 );
    self setanimlimited( %head_gesture_look_partial, 0, 0.05 );
    self setanimlimited( %lookat_head_adds, 0, 0.05 );
    self.blend_down_in_progress = undefined;
}

ai_gesture_lookat_weight_up( _id_D775E14980E96400 )
{
    self endon( "death" );
    self endon( "gesture_stop" );
    self endon( "head_weight_down" );
    self notify( "head_weight_up" );
    self endon( "entitydeleted" );

    if ( isdefined( self.blend_up_in_progress ) )
        return;

    _id_480E0D93B559931C = _id_D775E14980E96400;
    self.blend_up_in_progress = 1;
    self.blend_down_in_progress = undefined;
    start_time = gettime() / 1000;
    _id_F67C766809EC9EB1 = self _meth_7EDB4DE592626D72( %lookat_left_right );
    _id_0FF2B0ADC7F8AB11 = self _meth_7EDB4DE592626D72( %lookat_up_down );
    _id_7261FA6F5015C297 = self _meth_7EDB4DE592626D72( %lookat_head_base_partial );
    _id_BFF9B1C691B8B590 = self _meth_7EDB4DE592626D72( %head_gesture_look_partial );
    _id_F7A05D8D154D1FCA = self _meth_7EDB4DE592626D72( %lookat_head_adds );

    while ( gettime() / 1000 - start_time < _id_480E0D93B559931C )
    {
        _id_79DEC2965739392B = ( gettime() / 1000 - start_time ) / _id_480E0D93B559931C;
        _id_79DEC2965739392B = smoothstep( 0, 1, _id_79DEC2965739392B );
        _id_F68167872853C4C7 = lerp_float( _id_F67C766809EC9EB1, 1, _id_79DEC2965739392B );
        _id_6F9061194BEC6EA3 = lerp_float( _id_0FF2B0ADC7F8AB11, 1, _id_79DEC2965739392B );
        _id_ACCF346B44A25CFD = lerp_float( _id_7261FA6F5015C297, 10, _id_79DEC2965739392B );
        _id_CDAF7985C83B0386 = lerp_float( _id_BFF9B1C691B8B590, 10, _id_79DEC2965739392B );
        _id_5948B4C152818C80 = lerp_float( _id_F7A05D8D154D1FCA, 0, _id_79DEC2965739392B );
        self setanimlimited( %lookat_left_right, _id_F68167872853C4C7, 0.05 );
        self setanimlimited( %lookat_up_down, _id_6F9061194BEC6EA3, 0.05 );
        self setanimlimited( %lookat_head_base_partial, _id_ACCF346B44A25CFD, 0.05 );
        self setanimlimited( %head_gesture_look_partial, _id_CDAF7985C83B0386, 0.05 );
        self setanimlimited( %lookat_head_adds, _id_5948B4C152818C80, 0.05 );
        wait 0.05;
    }

    self setanimlimited( %lookat_left_right, 1, 0.05 );
    self setanimlimited( %lookat_up_down, 1, 0.05 );
    self setanimlimited( %lookat_head_base_partial, 10, 0.05 );
    self setanimlimited( %head_gesture_look_partial, 10, 0.05 );
    self setanimlimited( %lookat_head_adds, 1, 0.05 );
    self.blend_up_in_progress = undefined;
}

ai_gesture_torso_stop( _id_480E0D93B559931C )
{
    self endon( "death" );
    self endon( "start_gesture_torso_lookat" );
    self endon( "entitydeleted" );
    self notify( "gesture_stop_torso" );

    if ( !isdefined( self.is_torso_tracking ) )
        return;

    if ( isdefined( _id_480E0D93B559931C ) )
        _id_D775E14980E96400 = _id_480E0D93B559931C;
    else
        _id_D775E14980E96400 = 0.25;

    start_time = gettime() / 1000;
    _id_CC7D64B564852548 = self _meth_7EDB4DE592626D72( self.torso_center_anim );
    _id_920F5E7265D0D6D3 = self _meth_7EDB4DE592626D72( self.torso_right_anim );
    _id_EA4FD9D5698BB0DE = self _meth_7EDB4DE592626D72( self.torso_left_anim );
    _id_08A36695EA482743 = self _meth_7EDB4DE592626D72( self.torso_rightback_anim );
    _id_D94CCC571E35AD74 = self _meth_7EDB4DE592626D72( self.torso_leftback_anim );

    while ( gettime() / 1000 - start_time < _id_480E0D93B559931C )
    {
        _id_79DEC2965739392B = ( gettime() / 1000 - start_time ) / _id_480E0D93B559931C;
        _id_79DEC2965739392B = smoothstep( 0, 1, _id_79DEC2965739392B );
        _id_8EDA33D84E23A48E = lerp_float( _id_CC7D64B564852548, 1, _id_79DEC2965739392B );
        _id_75A6F0398C7CE571 = lerp_float( _id_920F5E7265D0D6D3, 0, _id_79DEC2965739392B );
        _id_A36ADBCA83488924 = lerp_float( _id_EA4FD9D5698BB0DE, 0, _id_79DEC2965739392B );
        _id_3B07618FF6ABC8C9 = lerp_float( _id_08A36695EA482743, 0, _id_79DEC2965739392B );
        _id_AC8AA45EB885E4F2 = lerp_float( _id_D94CCC571E35AD74, 0, _id_79DEC2965739392B );
        self setanimlimited( self.torso_center_anim, _id_8EDA33D84E23A48E, 0.05 );
        self setanimlimited( self.torso_right_anim, _id_75A6F0398C7CE571, 0.05 );
        self setanimlimited( self.torso_left_anim, _id_A36ADBCA83488924, 0.05 );
        self setanimlimited( self.torso_rightback_anim, _id_3B07618FF6ABC8C9, 0.05 );
        self setanimlimited( self.torso_leftback_anim, _id_AC8AA45EB885E4F2, 0.05 );
        wait 0.05;
    }

    self setanimlimited( self.torso_center_anim, 1, 0.05 );
    self setanimlimited( self.torso_right_anim, 0, 0.05 );
    self setanimlimited( self.torso_left_anim, 0, 0.05 );
    self setanimlimited( self.torso_rightback_anim, 0, 0.05 );
    self setanimlimited( self.torso_leftback_anim, 0, 0.05 );
    self clearanim( %torso_tracking_anims, _id_480E0D93B559931C );
    self.is_torso_tracking = undefined;
}

ai_lookat_hold()
{
    self.hold_lookat = 1;
}

ai_lookat_release()
{
    self.hold_lookat = undefined;
}

ai_can_lookat()
{
    if ( isdefined( self.hold_lookat ) )
        return 0;
    else
        return 1;
}

ai_gesture_lookat( _id_968583169A58B079, _id_EBC28D027B66FD81, blend_in_time )
{
    self endon( "entitydeleted" );

    if ( !isdefined( self ) )
        return;

    if ( isdefined( self.is_head_tracking ) )
    {
        ai_gesture_stop( 0.25 );
        wait 0.25;
    }

    self endon( "death" );
    self endon( "gesture_stop" );
    self notify( "start_gesture_lookat" );

    if ( isai( self ) )
        state = scripts\asm\asm::asm_getcurrentstate( self.asmname );
    else
        state = undefined;

    if ( isdefined( self.anim_getrootfunc ) )
        store_old_root();

    if ( !isdefined( self.anim_getrootfunc ) )
        self.anim_getrootfunc = ::set_root;

    if ( isdefined( blend_in_time ) )
        self.blend_in_time = blend_in_time;
    else
        self.blend_in_time = 0.7;

    self.look_leftright_anim = undefined;
    self.look_updown_anim = undefined;
    self.lookat_aquired = 0;

    if ( isdefined( _id_EBC28D027B66FD81 ) )
        self.gesture_catchup_speed = clamp( _id_EBC28D027B66FD81, 0.25, 4.0 );
    else
        self.gesture_catchup_speed = 0.5;

    if ( self.unittype == "c6" )
        use_c6_animtree();
    else
    {
        self.look_leftright_anim = %prototype_gesture_look_rightleft;
        self.look_updown_anim = %prototype_gesture_look_updwn;
        self.head_center_anim = %gesture_head_fwd;
        self.head_right_anim = %gesture_head_right;
        self.head_left_anim = %gesture_head_left;
        self.head_rightback_anim = %gesture_head_rightback;
        self.head_leftback_anim = %gesture_head_leftback;
    }

    self.gesture_lookat = _id_968583169A58B079;

    if ( self.unittype == "c6" )
    {
        thread ai_gesture_head_leftright_c6();
        thread ai_gesture_head_updown_c6();
    }
    else
    {
        thread ai_gesture_head_leftright();
        thread ai_gesture_head_updown();
    }

    self.is_head_tracking = 1;
}

ai_gesture_eyes_lookat( _id_968583169A58B079, _id_EBC28D027B66FD81, blend_in_time )
{
    self endon( "death" );
    self endon( "entitydeleted" );

    if ( isdefined( self.is_eye_tracking ) )
    {
        ai_gesture_eyes_stop( 0.25 );
        wait 0.25;
    }

    if ( isdefined( self.anim_getrootfunc ) )
        store_old_root();

    if ( !isdefined( self.anim_getrootfunc ) )
        self.anim_getrootfunc = ::set_root;

    if ( isdefined( blend_in_time ) )
        self.eye_blend_in_time = blend_in_time;
    else
        self.eye_blend_in_time = 0.3;

    self.eyes_leftright_anim = undefined;
    self.eyes_updown_anim = undefined;
    self.lookat_aquired = 0;

    if ( isdefined( _id_EBC28D027B66FD81 ) )
        self.eye_catchup_speed = clamp( _id_EBC28D027B66FD81, 0.25, 4.0 );
    else
        self.eye_catchup_speed = 2.0;

    self.eyes_leftright_anim = %facial_gesture_look_rightleft;
    self.eyes_updown_anim = %facial_gesture_look_updwn;
    self.eyes_lookat = _id_968583169A58B079;
    thread ai_gesture_eyes_leftright();
    thread ai_gesture_eyes_updown();
    self.is_eye_tracking = 1;
}

ai_gesture_lookat_torso( _id_968583169A58B079, blend_in_time )
{
    self endon( "death" );
    self endon( "entitydeleted" );
    self notify( "start_gesture_torso_lookat" );

    if ( isai( self ) )
        state = scripts\asm\asm::asm_getcurrentstate( self.asmname );
    else
        state = undefined;

    if ( !isdefined( state ) )
        return;

    if ( isdefined( self.is_torso_tracking ) )
    {
        ai_gesture_torso_stop( 0.25 );
        wait 0.25;
    }

    if ( isdefined( blend_in_time ) )
        self.blend_in_time = blend_in_time;
    else
        self.blend_in_time = 0.7;

    self.torso_leftright_anim = undefined;
    self.lookat_aquired = 0;
    self.torso_center_anim = %hm_grnd_grn_casual_stand_center_idle;
    self.torso_left_anim = %hm_grnd_grn_casual_stand_left_idle;
    self.torso_leftback_anim = %hm_grnd_grn_casual_stand_leftback_idle;
    self.torso_right_anim = %hm_grnd_grn_casual_stand_right_idle;
    self.torso_rightback_anim = %hm_grnd_grn_casual_stand_rightback_idle;
    self.gesture_lookat = _id_968583169A58B079;
    thread ai_gesture_torso_leftright();
    self.is_torso_tracking = 1;
}

set_root()
{
    return %body;
}

store_old_root()
{
    self.old_root = self.anim_getrootfunc;
}

reset_root()
{
    self.anim_getrootfunc = self.old_root;
}

ai_gesture_update_lookat( _id_3E53E7E020018FC0, _id_809D5BBB11B6031C )
{
    self endon( "death" );
    self endon( "entitydeleted" );
    self.gesture_lookat = _id_3E53E7E020018FC0;
    self.is_head_tracking = 1;

    if ( isdefined( _id_809D5BBB11B6031C ) )
    {
        _id_37015ADA8160570C = self.gesture_catchup_speed;
        self.gesture_catchup_speed = _id_809D5BBB11B6031C;
        wait( _id_809D5BBB11B6031C * 2 );
        self.gesture_catchup_speed = _id_37015ADA8160570C;
    }
}

ai_gesture_lookat_natural( _id_968583169A58B079, _id_EBC28D027B66FD81, blend_in_time, _id_1134633B00730D29 )
{
    self endon( "gesture_natural_stop" );
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "entitydeleted" );

    while ( !ai_can_lookat() )
        wait 0.05;

    while ( distance2d( self.origin, _id_968583169A58B079.origin ) > _id_1134633B00730D29 )
        wait 0.05;

    thread ai_gesture_lookat( _id_968583169A58B079, _id_EBC28D027B66FD81, blend_in_time );
    wait( blend_in_time );

    for (;;)
    {
        wait( randomfloatrange( 4.0, 5.0 ) );

        if ( distance2d( self.origin, _id_968583169A58B079.origin ) <= _id_1134633B00730D29 )
        {
            thread ai_gesture_lookat_weight_down( 1.0 );
            thread ai_gesture_eyes_stop();
        }

        wait( randomfloatrange( 4.0, 6.0 ) );

        while ( !ai_can_lookat() )
            wait 0.05;

        if ( distance2d( self.origin, _id_968583169A58B079.origin ) <= _id_1134633B00730D29 )
        {
            thread ai_gesture_lookat_weight_up( 0.5 );
            thread ai_gesture_eyes_lookat( _id_968583169A58B079, 1.0, 0.2 );
        }
    }
}

ai_gesture_update_eyes_lookat( _id_3E53E7E020018FC0, _id_809D5BBB11B6031C )
{
    self endon( "death" );
    self endon( "entitydeleted" );
    self.eyes_lookat = _id_3E53E7E020018FC0;
    self.is_eye_tracking = 1;

    if ( isdefined( _id_809D5BBB11B6031C ) )
    {
        _id_37015ADA8160570C = self.eye_catchup_speed;
        self.eye_catchup_speed = _id_809D5BBB11B6031C;
        wait( _id_809D5BBB11B6031C * 2 );
        self.eye_catchup_speed = _id_37015ADA8160570C;
    }
}

ai_gesture_head_leftright()
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "entitydeleted" );
    _id_480E0D93B559931C = self.blend_in_time;
    start_time = gettime() / 1000;
    _id_837C12743AB916FE = undefined;
    _id_4BD24ADAF2AC4E79 = %lookat_left_right;
    fwd_anim = self.head_center_anim;
    right_anim = self.head_right_anim;
    left_anim = self.head_left_anim;
    _id_BE663F999979EACD = self.head_rightback_anim;
    _id_3DB053C7D0933EF6 = self.head_leftback_anim;
    thread _ai_head_weight_blend_in();
    _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );
    self setanimlimited( fwd_anim, 1.0, self.blend_in_time );
    self setanimlimited( right_anim, 0.005, self.blend_in_time );
    self setanimlimited( left_anim, 0.005, self.blend_in_time );
    self setanimlimited( _id_BE663F999979EACD, 0.005, self.blend_in_time );
    self setanimlimited( _id_3DB053C7D0933EF6, 0.005, self.blend_in_time );
    _id_9E41F6B2A5FDFA6C = 0;
    _id_3A58E25D07FA8963 = 0;

    for (;;)
    {
        if ( !isdefined( self ) )
            return;

        if ( !isdefined( self.gesture_lookat ) )
        {
            thread ai_gesture_stop( 0.7 );
            break;
        }

        if ( isplayer( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = level.player geteye();
        else if ( isai( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = self.gesture_lookat geteye();
        else if ( isvector( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = self.gesture_lookat;
        else
            _id_9523E27B0F4FE3AF = self.gesture_lookat.origin;

        _id_F8018EDE9BC535EE = self gettagangles( "J_Spine4" ) + ( 0, 0, 0 );
        _id_7AC7A365A6AEE172 = self gettagorigin( "J_Spine4" );
        _id_518C6A4B170E645D = vectornormalize( _id_9523E27B0F4FE3AF - _id_7AC7A365A6AEE172 );
        _id_C9056E1AFE1AB9D7 = anglestoright( _id_F8018EDE9BC535EE );
        _id_AB61652EE01B3D08 = anglestoup( _id_F8018EDE9BC535EE );
        _id_8FC912A946A93A31 = anglestoup( _id_F8018EDE9BC535EE ) * -1;
        _id_E0E29F268E2B6297 = anglestoright( _id_F8018EDE9BC535EE ) * -1;
        _id_195A2ED93E9EAEF9 = anglestoforward( _id_F8018EDE9BC535EE );
        _id_E32C0E4A71D1793E = clamp( vectordot( _id_518C6A4B170E645D, _id_C9056E1AFE1AB9D7 ), 0.005, 1 );
        _id_87D553E2E44D7001 = clamp( vectordot( _id_518C6A4B170E645D, _id_AB61652EE01B3D08 ), 0.005, 1 );
        _id_EC8D74CDA15D5374 = clamp( vectordot( _id_518C6A4B170E645D, _id_8FC912A946A93A31 ), 0.005, 1 );
        _id_B0B9A45F796B1296 = clamp( vectordot( _id_518C6A4B170E645D, _id_E0E29F268E2B6297 ), 0.005, 1 );
        _id_D7199CF973E1AF07 = 1;

        if ( scripts\engine\math::anglebetweenvectorssigned( _id_C9056E1AFE1AB9D7, _id_518C6A4B170E645D, _id_195A2ED93E9EAEF9 ) > 0 )
            _id_D7199CF973E1AF07 = 0;

        self setanimlimited( right_anim, _id_87D553E2E44D7001, self.gesture_catchup_speed );
        self setanimlimited( left_anim, _id_EC8D74CDA15D5374, self.gesture_catchup_speed );
        self setanimlimited( fwd_anim, _id_E32C0E4A71D1793E + 0.005, self.gesture_catchup_speed );

        if ( _id_D7199CF973E1AF07 )
        {
            _id_9E41F6B2A5FDFA6C = scripts\engine\math::lerp( _id_9E41F6B2A5FDFA6C, _id_B0B9A45F796B1296, 0.1 );
            _id_3A58E25D07FA8963 = scripts\engine\math::lerp( _id_3A58E25D07FA8963, 0.005, 0.1 );
        }
        else
        {
            _id_9E41F6B2A5FDFA6C = scripts\engine\math::lerp( _id_9E41F6B2A5FDFA6C, 0.005, 0.1 );
            _id_3A58E25D07FA8963 = scripts\engine\math::lerp( _id_3A58E25D07FA8963, _id_B0B9A45F796B1296, 0.1 );
        }

        self setanimlimited( _id_BE663F999979EACD, _id_9E41F6B2A5FDFA6C, self.gesture_catchup_speed );
        self setanimlimited( _id_3DB053C7D0933EF6, _id_3A58E25D07FA8963, self.gesture_catchup_speed );
        waitframe();
    }
}

_ai_head_weight_blend_in()
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "entitydeleted" );
    start_time = gettime() / 1000;
    self.blend_up_in_progress = 1;

    while ( gettime() / 1000 - start_time < self.blend_in_time * 2 )
    {
        _id_79DEC2965739392B = ( gettime() / 1000 - start_time ) / ( self.blend_in_time * 2 );
        _id_2D2B457AA37DB993 = smoothstep( 0, 1, _id_79DEC2965739392B );
        _id_1253D54849FC8641 = smoothstep( 0, 10, _id_79DEC2965739392B );
        weight = lerp_float( 0, 1, _id_2D2B457AA37DB993 );
        _id_9145E17C603344A9 = lerp_float( 0, 10, _id_2D2B457AA37DB993 );
        self setanimlimited( %lookat_left_right, weight, 0.2 );
        self setanimlimited( %lookat_up_down, weight, 0.2 );
        self setanimlimited( %lookat_head_base_partial, _id_9145E17C603344A9, 0.2 );
        self setanimlimited( %head_gesture_look_partial, _id_9145E17C603344A9, 0.2 );
        wait 0.05;
    }

    self setanimlimited( %lookat_left_right, 1.0, 0.2 );
    self setanimlimited( %lookat_up_down, 1.0, 0.2 );
    self setanimlimited( %lookat_head_base_partial, 10.0, 0.2 );
    self setanimlimited( %head_gesture_look_partial, 10.0, 0.2 );
    wait 0.05;
    self.blend_up_in_progress = undefined;
}

ai_gesture_head_updown()
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "entitydeleted" );
    self setanimlimited( %lookat_up_down, 1, self.blend_in_time );
    self setanimlimited( self.look_updown_anim, 1, self.blend_in_time );
    self setanimtime( self.look_updown_anim, 0.5 );
    _id_8BC1A6A78E77C5D1 = 0.5;

    for (;;)
    {
        if ( !isdefined( self ) )
            break;

        if ( isplayer( self.gesture_lookat ) )
        {
            offset = 0;

            if ( level.player getdemeanorviewmodel() == "safe" )
                offset = 4.62;

            _id_9523E27B0F4FE3AF = level.player geteye() + anglestoup( self.angles ) * offset;
        }
        else if ( isai( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = self.gesture_lookat geteye();
        else if ( isvector( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = self.gesture_lookat;
        else
            _id_9523E27B0F4FE3AF = self.gesture_lookat.origin;

        _id_F8018EDE9BC535EE = self gettagangles( "J_Spine4" ) + ( 0, 0, 0 );
        _id_7AC7A365A6AEE172 = self gettagorigin( "J_Spine4" );
        _id_E5D33DF33698A4F5 = undefined;

        if ( isai( self ) )
            _id_E5D33DF33698A4F5 = self geteye();
        else
            _id_E5D33DF33698A4F5 = self gettagorigin( "J_Head" );

        _id_518C6A4B170E645D = vectornormalize( _id_9523E27B0F4FE3AF - _id_E5D33DF33698A4F5 );
        _id_295EC4AA62F17342 = anglestoforward( _id_F8018EDE9BC535EE );
        _id_BDBF163E071652F8 = vectordot( _id_295EC4AA62F17342, _id_518C6A4B170E645D );
        _id_E7E7DF501885A8B7 = float_remap( _id_BDBF163E071652F8, 1, -1, 0.0, 1.0 );
        _id_8BC1A6A78E77C5D1 = _id_8BC1A6A78E77C5D1 + ( _id_E7E7DF501885A8B7 - _id_8BC1A6A78E77C5D1 ) * self.gesture_catchup_speed * 0.3;
        _id_8BC1A6A78E77C5D1 = clamp( _id_8BC1A6A78E77C5D1, 0.1, 0.65 );
        set_time_via_rate( self.look_updown_anim, _id_8BC1A6A78E77C5D1 );
        waitframe();
    }
}

_ai_gesture_head_additives()
{
    self endon( "death" );
    self endon( "gesture_stop" );
    self endon( "entitydeleted" );
    self setanimlimited( %lookat_head_adds, 1, 0.5 );

    for (;;)
    {
        self setanimlimited( %shipcrib_gst_head_idle_01, 0.25, 0.5 );
        wait( getanimlength( %shipcrib_gst_head_idle_01 ) * randomfloatrange( 1, 3 ) );
    }
}

ai_gesture_eyes_leftright()
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "eye_gesture_stop" );
    self endon( "entitydeleted" );
    self setanimlimited( %eyes_lookat_base_partial, 10, self.eye_blend_in_time * 2 );
    self setanimlimited( %facial_gesture_look_partial, 10, self.eye_blend_in_time * 2 );
    self setanimlimited( %eyes_look_leftright, 1, self.eye_blend_in_time );
    self setanimlimited( self.eyes_leftright_anim, 1, self.eye_blend_in_time );
    self setanimtime( self.eyes_leftright_anim, 0.5 );
    self setanimrate( self.eyes_leftright_anim, 0.0 );
    _id_8BC1A6A78E77C5D1 = 0.0;

    for (;;)
    {
        if ( !isdefined( self ) )
            return;

        if ( !isdefined( self.eyes_lookat ) )
        {
            ai_gesture_eyes_stop( 0.25 );
            break;
        }

        if ( isplayer( self.eyes_lookat ) )
            _id_9523E27B0F4FE3AF = level.player geteye();
        else if ( isai( self.eyes_lookat ) )
            _id_9523E27B0F4FE3AF = self.eyes_lookat geteye();
        else if ( isvector( self.eyes_lookat ) )
            _id_9523E27B0F4FE3AF = self.eyes_lookat;
        else
            _id_9523E27B0F4FE3AF = self.eyes_lookat.origin;

        _id_22768C2B78F15EB0 = self gettagangles( "j_head" );
        _id_E630138E877B75B0 = self gettagorigin( "j_head" );
        _id_F8018EDE9BC535EE = self gettagangles( "J_Spine4" ) + ( 0, 90, 0 );
        _id_518C6A4B170E645D = vectornormalize( _id_9523E27B0F4FE3AF - _id_E630138E877B75B0 );
        _id_73FFCAB9352F4558 = anglestoup( _id_22768C2B78F15EB0 );
        _id_8A2A8DFDEF9C641D = scripts\engine\utility::flatten_vector( _id_518C6A4B170E645D );
        _id_818E7DCBFE8C45C9 = scripts\engine\utility::flatten_vector( _id_73FFCAB9352F4558 );
        _id_F750BC72C7DCA1A0 = vectordot( _id_818E7DCBFE8C45C9, _id_8A2A8DFDEF9C641D );
        _id_E7E7DF501885A8B7 = float_remap( _id_F750BC72C7DCA1A0, 1.0, -1.0, 0.0, 1.0 );
        _id_A5148760D51EB926 = clamp( _id_E7E7DF501885A8B7, 0, 1 );
        self setanimtime( self.eyes_leftright_anim, _id_A5148760D51EB926 );
        waitframe();
    }
}

ai_gesture_eyes_updown()
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "eye_gesture_stop" );
    self endon( "entitydeleted" );
    self setanimlimited( %eyes_look_updown, 1, self.eye_blend_in_time );
    self setanimlimited( self.eyes_updown_anim, 1, self.eye_blend_in_time );
    self setanimtime( self.eyes_updown_anim, 0.5 );
    _id_8BC1A6A78E77C5D1 = 0.5;

    for (;;)
    {
        if ( !isdefined( self ) )
            break;

        if ( isplayer( self.eyes_lookat ) )
            _id_9523E27B0F4FE3AF = level.player geteye();
        else if ( isai( self.eyes_lookat ) )
            _id_9523E27B0F4FE3AF = self.eyes_lookat geteye();
        else if ( isvector( self.eyes_lookat ) )
            _id_9523E27B0F4FE3AF = self.eyes_lookat;
        else
            _id_9523E27B0F4FE3AF = self.eyes_lookat.origin;

        _id_22768C2B78F15EB0 = self gettagangles( "j_head" );
        _id_E630138E877B75B0 = self gettagorigin( "j_head" );
        _id_F8018EDE9BC535EE = self gettagangles( "J_Spine4" );
        _id_96685D578C819929 = anglestoforward( _id_22768C2B78F15EB0 );
        _id_518C6A4B170E645D = vectornormalize( _id_9523E27B0F4FE3AF - _id_E630138E877B75B0 );
        _id_FCE87949C9B65851 = vectordot( _id_96685D578C819929, _id_518C6A4B170E645D );
        _id_E7E7DF501885A8B7 = float_remap( _id_FCE87949C9B65851, 1.0, -1.0, 0.3, 0.7 );
        _id_A5148760D51EB926 = clamp( _id_E7E7DF501885A8B7, 0, 1 );
        _id_8BC1A6A78E77C5D1 = _id_8BC1A6A78E77C5D1 + ( _id_A5148760D51EB926 - _id_8BC1A6A78E77C5D1 ) * self.eye_catchup_speed * 0.3;
        _id_8BC1A6A78E77C5D1 = clamp( _id_8BC1A6A78E77C5D1, 0.1, 0.9 );
        set_time_via_rate( self.eyes_updown_anim, _id_8BC1A6A78E77C5D1 );
        waitframe();
    }
}

ai_gesture_torso_leftright()
{
    self endon( "gesture_stop_torso" );
    self endon( "death" );
    self endon( "entitydeleted" );
    _id_837C12743AB916FE = undefined;
    _id_4BD24ADAF2AC4E79 = %torso_tracking_anims;
    fwd_anim = self.torso_center_anim;
    right_anim = self.torso_right_anim;
    left_anim = self.torso_left_anim;
    _id_BE663F999979EACD = self.torso_rightback_anim;
    _id_3DB053C7D0933EF6 = self.torso_leftback_anim;
    childthread _ai_torso_weight_blend_in();
    _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );
    self setanimlimited( fwd_anim, 1.0, 0.05 );
    self setanimlimited( right_anim, 0.0, 0.05 );
    self setanimlimited( left_anim, 0.0, 0.05 );
    self setanimlimited( _id_BE663F999979EACD, 0.0, 0.05 );
    self setanimlimited( _id_3DB053C7D0933EF6, 0.0, 0.05 );
    _id_9E41F6B2A5FDFA6C = 0;
    _id_3A58E25D07FA8963 = 0;

    for (;;)
    {
        if ( !isdefined( self ) )
            break;

        if ( isplayer( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = level.player geteye();
        else if ( isai( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = self.gesture_lookat geteye();
        else if ( isvector( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = self.gesture_lookat;
        else
            _id_9523E27B0F4FE3AF = self.gesture_lookat.origin;

        _id_518C6A4B170E645D = vectornormalize( _id_9523E27B0F4FE3AF - self.origin );
        _id_C9056E1AFE1AB9D7 = anglestoforward( self.angles );
        _id_AB61652EE01B3D08 = anglestoright( self.angles );
        _id_8FC912A946A93A31 = anglestoright( self.angles ) * -1;
        _id_E0E29F268E2B6297 = anglestoforward( self.angles ) * -1;
        _id_195A2ED93E9EAEF9 = anglestoup( self.angles );
        _id_E32C0E4A71D1793E = clamp( vectordot( _id_518C6A4B170E645D, _id_C9056E1AFE1AB9D7 ), 0, 1 );
        _id_87D553E2E44D7001 = clamp( vectordot( _id_518C6A4B170E645D, _id_AB61652EE01B3D08 ), 0, 1 );
        _id_EC8D74CDA15D5374 = clamp( vectordot( _id_518C6A4B170E645D, _id_8FC912A946A93A31 ), 0, 1 );
        _id_B0B9A45F796B1296 = clamp( vectordot( _id_518C6A4B170E645D, _id_E0E29F268E2B6297 ), 0, 1 );
        _id_D7199CF973E1AF07 = 1;

        if ( scripts\engine\math::anglebetweenvectorssigned( _id_C9056E1AFE1AB9D7, _id_518C6A4B170E645D, _id_195A2ED93E9EAEF9 ) > 0 )
            _id_D7199CF973E1AF07 = 0;

        self setanimlimited( right_anim, _id_87D553E2E44D7001, 0.2 );
        self setanimlimited( left_anim, _id_EC8D74CDA15D5374, 0.2 );
        self setanimlimited( fwd_anim, _id_E32C0E4A71D1793E + 0.005, 0.2 );

        if ( _id_D7199CF973E1AF07 )
        {
            _id_9E41F6B2A5FDFA6C = scripts\engine\math::lerp( _id_9E41F6B2A5FDFA6C, _id_B0B9A45F796B1296, 0.1 );
            _id_3A58E25D07FA8963 = scripts\engine\math::lerp( _id_3A58E25D07FA8963, 0, 0.1 );
        }
        else
        {
            _id_9E41F6B2A5FDFA6C = scripts\engine\math::lerp( _id_9E41F6B2A5FDFA6C, 0, 0.1 );
            _id_3A58E25D07FA8963 = scripts\engine\math::lerp( _id_3A58E25D07FA8963, _id_B0B9A45F796B1296, 0.1 );
        }

        self setanimlimited( _id_BE663F999979EACD, _id_9E41F6B2A5FDFA6C, 0.2 );
        self setanimlimited( _id_3DB053C7D0933EF6, _id_3A58E25D07FA8963, 0.2 );
        waitframe();
    }
}

_ai_torso_weight_blend_in()
{
    start_time = gettime() / 1000;

    while ( gettime() / 1000 - start_time < self.blend_in_time )
    {
        _id_79DEC2965739392B = ( gettime() / 1000 - start_time ) / self.blend_in_time;
        _id_79DEC2965739392B = smoothstep( 0, 1, _id_79DEC2965739392B );
        weight = lerp_float( 0, 1, _id_79DEC2965739392B );
        self setanimlimited( %torso_tracking_anims, weight, 0.05 );
        wait 0.05;
        waittillframeend;
    }

    self setanimlimited( %torso_tracking_anims, 1.0, 0.05 );
}

ai_gesture_blink_loop( _id_25362A792B0E1353 )
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "entitydeleted" );
    ai_gesture_single_blink();

    for (;;)
    {
        wait( randomfloatrange( _id_25362A792B0E1353 * 0.5, _id_25362A792B0E1353 ) );
        self clearanim( %facial_gesture_blink_1, 0.0 );
        wait 0.05;
        self setanimlimited( %facial_gesture_blink_1, 1, 0.0 );
        waitframe();
    }
}

ai_gesture_single_blink()
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "entitydeleted" );

    if ( !isdefined( self ) )
        return;

    self setanimlimited( %eyes_blink, 1, 0.0 );
    self clearanim( %facial_gesture_blink_1, 0.0 );
    wait 0.05;
    self setanimlimited( %facial_gesture_blink_1, 1, 0.0 );
}

ai_gesture_point( _id_4A32ECBAA6C22F70 )
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "entitydeleted" );
    self.point_center_anim = undefined;
    self.point_left_anim = undefined;
    self.point_right_anim = undefined;
    self.point_up_anim = undefined;
    self.point_down_anim = undefined;
    self.no_point_defined = 0;
    self._blackboard.point_gesture_active = 1;
    _id_F7EE87DC76B45E62 = scripts\asm\asm::asm_getdemeanor();
    state = scripts\asm\asm::asm_getcurrentstate( self.asmname );
    scripts\asm\asm_sp::asm_setupgesture( self.asmname, state );

    if ( _id_F7EE87DC76B45E62 != "casual" && _id_F7EE87DC76B45E62 != "casual_gun" )
        self.gesture_point_parent = %gesture_partials;
    else
        self.gesture_point_parent = %point_at_without_head;

    if ( !scripts\asm\asm::asm_currentstatehasflag( self.asmname, "gesture" ) )
        return;
    else if ( _id_F7EE87DC76B45E62 == "casual" || _id_F7EE87DC76B45E62 == "combat" || _id_F7EE87DC76B45E62 == "casual_gun" || _id_F7EE87DC76B45E62 == "frantic" )
    {
        self.point_center_anim = self.asm.gestures.gesture_point_center;
        self.point_left_anim = self.asm.gestures.gesture_point_left;
        self.point_right_anim = self.asm.gestures.gesture_point_right;
        self.point_up_anim = self.asm.gestures.gesture_point_up;
        self.point_down_anim = self.asm.gestures.gesture_point_down;
        self.gesture_body_knob = scripts\asm\asm::asm_getbodyknob();
    }
    else
        return;

    if ( isplayer( _id_4A32ECBAA6C22F70 ) )
        _id_9523E27B0F4FE3AF = level.player geteye();
    else if ( !isdefined( _id_4A32ECBAA6C22F70 ) )
    {
        _id_9523E27B0F4FE3AF = self.origin;
        self.no_point_defined = 1;
    }
    else if ( isai( _id_4A32ECBAA6C22F70 ) )
        _id_9523E27B0F4FE3AF = _id_4A32ECBAA6C22F70 geteye();
    else if ( isvector( _id_4A32ECBAA6C22F70 ) )
        _id_9523E27B0F4FE3AF = _id_4A32ECBAA6C22F70;
    else
        _id_9523E27B0F4FE3AF = _id_4A32ECBAA6C22F70.origin;

    _id_148C7412FDE9224D = self gettagangles( "J_Spine4" ) + ( 0, 90, 0 );
    _id_B65A151051532493 = self gettagorigin( "J_Spine4" );
    _id_84DEBF527911A15D = anglestoright( _id_148C7412FDE9224D );
    _id_4BD579FA63EB0ED2 = anglestoup( _id_148C7412FDE9224D );
    _id_53B34AADF7B8E731 = vectornormalize( _id_9523E27B0F4FE3AF - _id_B65A151051532493 );
    _id_B4291343F067BB1D = scripts\engine\utility::flatten_vector( _id_84DEBF527911A15D );
    _id_EBF67E00F0184992 = scripts\engine\utility::flatten_vector( _id_4BD579FA63EB0ED2 );
    _id_AF48FC7D3DF203F1 = scripts\engine\utility::flatten_vector( _id_53B34AADF7B8E731 );
    _id_FCE87949C9B65851 = vectordot( _id_B4291343F067BB1D, _id_AF48FC7D3DF203F1 ) * -1;
    _id_8E8C89B2CBB6BC04 = _id_FCE87949C9B65851 * -1.0;
    _id_2208A80DC5F47661 = clamp( float_remap( _id_FCE87949C9B65851, 0.2, 1.0, 0, 1 ), 0, 1 );
    _id_824C03276D8CDCEC = clamp( float_remap( _id_8E8C89B2CBB6BC04, 0.2, 1, 0, 1 ), 0, 1 );
    _id_9088CBA4A109B331 = self gettagorigin( "J_Spine4" );
    _id_20F493DCA3C1483F = vectornormalize( _id_9523E27B0F4FE3AF - _id_9088CBA4A109B331 );
    _id_0CA399D17885E392 = anglestoforward( _id_148C7412FDE9224D );
    _id_2CB0644208843C51 = vectordot( _id_20F493DCA3C1483F, _id_0CA399D17885E392 );
    _id_2E436EF195C55994 = _id_2CB0644208843C51 * -1.0;
    _id_F25CC6D803539F37 = vectordot( _id_4BD579FA63EB0ED2, _id_20F493DCA3C1483F );
    _id_7BA291BB89A5D6DD = clamp( float_remap( _id_F25CC6D803539F37, 0.2, 1, 0, 1 ), 0, 1 );
    _id_BED61D13BD0FE46F = clamp( float_remap( _id_2CB0644208843C51, 0.2, 1, 0, 1 ), 0, 1 );
    _id_BD630759847E7B0C = clamp( float_remap( _id_2E436EF195C55994, 0.2, 1, 0, 1 ), 0, 1 );

    if ( !self.no_point_defined )
    {
        if ( _id_F25CC6D803539F37 < -0.9 )
            ai_gesture_simple( "fallback_up" );
        else
        {
            if ( _id_F7EE87DC76B45E62 != "casual" && _id_F7EE87DC76B45E62 != "casual_gun" )
                self setanimlimited( self.gesture_point_parent, 10.0, 0.25 );
            else
                self setanimlimited( self.gesture_point_parent, 1.0, 0.25 );

            if ( _id_7BA291BB89A5D6DD < 0.3 )
                self setanimlimited( self.point_center_anim, 0, 0, 0.85 );
            else
                self setanimlimited( self.point_center_anim, _id_7BA291BB89A5D6DD, 0.25, 0.85 );

            if ( isdefined( self.point_up_anim ) )
                self setanimlimited( self.point_up_anim, _id_BED61D13BD0FE46F, 0.25, 0.85 );

            if ( isdefined( self.point_down_anim ) )
                self setanimlimited( self.point_down_anim, _id_BD630759847E7B0C, 0.2, 0.85 );

            self setanimlimited( self.point_left_anim, _id_824C03276D8CDCEC, 0.25, 0.85 );
            self setanimlimited( self.point_right_anim, _id_2208A80DC5F47661, 0.25, 0.85 );
        }
    }
    else
    {
        if ( _id_F7EE87DC76B45E62 != "casual" && _id_F7EE87DC76B45E62 != "casual_gun" )
            self setanimlimited( self.gesture_point_parent, 10.0, 0.2 );
        else
            self setanimlimited( self.gesture_point_parent, 1.0, 0.2 );

        self setanimlimited( self.point_center_anim, 1, 0.2, 0.85 );
    }

    wait_time = getanimlength( %prototype_gesture_point_center ) * 0.85;
    wait( wait_time );
    self clearanim( self.gesture_point_parent, 0.25 );
    self setanimlimited( self.gesture_body_knob, 1.0, 0.25 );
    self._blackboard.point_gesture_active = 0;
}

ai_gesture_simple( _id_7CA8D1CE367054F8 )
{
    self endon( "death" );
    self endon( "entitydeleted" );
    self.point_center_anim = undefined;
    self.gesture_body_knob = undefined;
    self.is_partial = 0;
    _id_F7EE87DC76B45E62 = "casual";
    state = undefined;

    if ( isai( self ) )
    {
        self._blackboard.gesture_active = 1;
        _id_F7EE87DC76B45E62 = scripts\asm\asm::asm_getdemeanor();
        state = scripts\asm\asm::asm_getcurrentstate( self.asmname );
    }

    _id_3B61FB88F64B3755 = [ "shrug", "cross", "nod", "salute", "wave", "wait", "fallback_up" ];
    _id_A534BBF61C8C91AF = [ "move_up", "on_me", "hold", "fallback_up", "fallback_down", "arm_up" ];
    _id_337FD93417B7BCBD = [ "move_up", "on_me", "hold", "fallback_up", "fallback_down", "arm_up" ];
    _id_684250E83139A238 = [ "shrug", "cross", "nod", "salute", "wave", "wait", "move_up", "on_me", "hold", "fallback_up", "fallback_down", "arm_up" ];

    if ( !scripts\engine\utility::array_contains( _id_3B61FB88F64B3755, _id_7CA8D1CE367054F8 ) && !scripts\engine\utility::array_contains( _id_A534BBF61C8C91AF, _id_7CA8D1CE367054F8 ) )
        return;

    if ( !isdefined( self ) )
        return;

    if ( isai( self ) && !scripts\asm\asm::asm_currentstatehasflag( self.asmname, "gesture" ) )
        return;
    else if ( isai( self ) )
    {
        self.gesture_body_knob = scripts\asm\asm::asm_getbodyknob();

        if ( _id_F7EE87DC76B45E62 == "casual" )
        {
            if ( scripts\engine\utility::array_contains( _id_3B61FB88F64B3755, _id_7CA8D1CE367054F8 ) )
            {
                self.gesture_shrug_anim = self.asm.gestures.gesture_shrug_anim;
                self.gesture_cross_anim = self.asm.gestures.gesture_cross_anim;
                self.gesture_nod_anim = self.asm.gestures.gesture_nod_anim;
                self.gesture_salute_anim = self.asm.gestures.gesture_salute_anim;
                self.gesture_wave_anim = self.asm.gestures.gesture_wave_anim;
                self.gesture_wait_anim = self.asm.gestures.gesture_wait_anim;
                self.gesture_fallback_up_anim = self.asm.gestures.gesture_fallback_up_anim;
            }
            else
                return;
        }
        else if ( _id_F7EE87DC76B45E62 == "casual_gun" )
        {
            if ( scripts\engine\utility::array_contains( _id_684250E83139A238, _id_7CA8D1CE367054F8 ) )
            {
                self.gesture_shrug_anim = self.asm.gestures.gesture_shrug_anim;
                self.gesture_cross_anim = self.asm.gestures.gesture_cross_anim;
                self.gesture_nod_anim = self.asm.gestures.gesture_nod_anim;
                self.gesture_salute_anim = self.asm.gestures.gesture_salute_anim;
                self.gesture_wave_anim = self.asm.gestures.gesture_wave_anim;
                self.gesture_wait_anim = self.asm.gestures.gesture_wait_anim;
                self.gesture_moveup_anim = self.asm.gestures.gesture_moveup_anim;
                self.gesture_onme_anim = self.asm.gestures.gesture_onme_anim;
                self.gesture_hold_anim = self.asm.gestures.gesture_hold_anim;
                self.gesture_fallback_up_anim = self.asm.gestures.gesture_fallback_up_anim;
                self.gesture_fallback_down_anim = self.asm.gestures.gesture_fallback_down_anim;
                self.gesture_armup_anim = self.asm.gestures.gesture_armup_anim;
            }
            else
                return;
        }
        else if ( _id_F7EE87DC76B45E62 == "combat" )
        {
            if ( scripts\engine\utility::array_contains( _id_A534BBF61C8C91AF, _id_7CA8D1CE367054F8 ) )
            {
                self.gesture_moveup_anim = self.asm.gestures.gesture_moveup_anim;
                self.gesture_onme_anim = self.asm.gestures.gesture_onme_anim;
                self.gesture_hold_anim = self.asm.gestures.gesture_hold_anim;
                self.gesture_fallback_up_anim = self.asm.gestures.gesture_fallback_up_anim;
                self.gesture_fallback_down_anim = self.asm.gestures.gesture_fallback_down_anim;
                self.gesture_armup_anim = self.asm.gestures.gesture_armup_anim;
            }
            else
                return;
        }
        else if ( _id_F7EE87DC76B45E62 == "cqb" )
        {
            if ( scripts\engine\utility::array_contains( _id_337FD93417B7BCBD, _id_7CA8D1CE367054F8 ) )
            {
                self.gesture_moveup_anim = self.asm.gestures.gesture_moveup_anim;
                self.gesture_onme_anim = self.asm.gestures.gesture_onme_anim;
                self.gesture_hold_anim = self.asm.gestures.gesture_hold_anim;
                self.gesture_fallback_up_anim = self.asm.gestures.gesture_fallback_up_anim;
                self.gesture_fallback_down_anim = self.asm.gestures.gesture_fallback_down_anim;
                self.gesture_armup_anim = self.asm.gestures.gesture_armup_anim;
            }
            else
                return;
        }
        else if ( _id_F7EE87DC76B45E62 == "frantic" )
        {
            if ( scripts\engine\utility::array_contains( _id_A534BBF61C8C91AF, _id_7CA8D1CE367054F8 ) )
            {
                self.gesture_moveup_anim = self.asm.gestures.gesture_moveup_anim;
                self.gesture_onme_anim = self.asm.gestures.gesture_onme_anim;
                self.gesture_hold_anim = self.asm.gestures.gesture_hold_anim;
                self.gesture_fallback_up_anim = self.asm.gestures.gesture_fallback_up_anim;
                self.gesture_fallback_down_anim = self.asm.gestures.gesture_fallback_down_anim;
                self.gesture_armup_anim = self.asm.gestures.gesture_armup_anim;
            }
            else
                return;
        }
        else
            return;
    }
    else
    {
        self.gesture_shrug_anim = %shipcrib_gst_body_shrug_01;
        self.gesture_cross_anim = %shipcrib_gst_body_cross_01;
        self.gesture_nod_anim = %shipcrib_gst_head_nod_01;
        self.gesture_salute_anim = %shipcrib_gst_head_salute_01;
        self.gesture_wave_anim = %shipcrib_gst_body_wave_01;
        self.gesture_wait_anim = %shipcrib_gst_body_wait_01;
        self.gesture_fallback_up_anim = %hm_grnd_org_gest_fallback_up;
    }

    _id_D36C326E46C200A3 = undefined;

    switch ( _id_7CA8D1CE367054F8 )
    {
        case "shrug":
            _id_D36C326E46C200A3 = self.gesture_shrug_anim;
            break;
        case "cross":
            _id_D36C326E46C200A3 = self.gesture_cross_anim;
            break;
        case "nod":
            _id_D36C326E46C200A3 = self.gesture_nod_anim;
            break;
        case "salute":
            _id_D36C326E46C200A3 = self.gesture_salute_anim;
            break;
        case "wave":
            _id_D36C326E46C200A3 = self.gesture_wave_anim;
            break;
        case "wait":
            _id_D36C326E46C200A3 = self.gesture_wait_anim;
            break;
        case "hold":
            self.is_partial = 1;
            _id_D36C326E46C200A3 = self.gesture_hold_anim;
            break;
        case "on_me":
            self.is_partial = 1;
            _id_D36C326E46C200A3 = self.gesture_onme_anim;
            break;
        case "move_up":
            self.is_partial = 1;
            _id_D36C326E46C200A3 = self.gesture_moveup_anim;
            break;
        case "fallback_up":
            self.is_partial = 1;
            _id_D36C326E46C200A3 = self.gesture_fallback_up_anim;
            break;
        case "fallback_down":
            self.is_partial = 1;
            _id_D36C326E46C200A3 = self.gesture_fallback_down_anim;
            break;
        case "arm_up":
            self.is_partial = 1;
            _id_D36C326E46C200A3 = self.gesture_armup_anim;
            break;
    }

    if ( self.is_partial )
        self.simple_gesture_parent = %gesture_partials;
    else
        self.simple_gesture_parent = %add_gesture;

    if ( self.is_partial )
        thread blend_partial_in( self.simple_gesture_parent, _id_D36C326E46C200A3, 0.5 );
    else
    {
        self setanimlimited( self.simple_gesture_parent, 1.0, 0.5 );
        self setanimlimited( _id_D36C326E46C200A3, 1.0, 0.5, 0.75 );
    }

    wait_time = getanimlength( _id_D36C326E46C200A3 ) * 0.85;
    wait( wait_time );

    if ( self.is_partial )
        thread blend_partial_out( self.simple_gesture_parent, _id_D36C326E46C200A3, 0.5 );
    else
    {
        self clearanim( self.simple_gesture_parent, 0.5 );
        self clearanim( _id_D36C326E46C200A3, 0.5 );
    }

    self.is_partial = 0;

    if ( isai( self ) )
        self._blackboard.gesture_active = undefined;
}

blend_partial_in( _id_10C67B12BE486D55, animation, _id_D775E14980E96400, notetrack )
{
    _id_245DC63EC7CE506C = _id_D775E14980E96400 * 0.5;
    self setanimlimited( _id_10C67B12BE486D55, 1.0, _id_245DC63EC7CE506C );
    self setanimlimited( animation, 1.0, _id_245DC63EC7CE506C, 0.75 );
    wait( _id_D775E14980E96400 * 0.5 );
    self setanimlimited( animation, 10.0, _id_245DC63EC7CE506C, 0.75 );
    self setanimlimited( _id_10C67B12BE486D55, 10.0, _id_245DC63EC7CE506C );
}

blend_partial_out( _id_10C67B12BE486D55, animation, _id_6E2597877D503152 )
{
    _id_75EDE4D5E4FB6BA6 = _id_6E2597877D503152 * 0.5;
    self setanimlimited( _id_10C67B12BE486D55, 1.0, _id_75EDE4D5E4FB6BA6 );
    self setanimlimited( animation, 1.0, _id_75EDE4D5E4FB6BA6 );
    wait( _id_75EDE4D5E4FB6BA6 );
    self clearanim( _id_10C67B12BE486D55, _id_75EDE4D5E4FB6BA6 );
    self clearanim( animation, _id_75EDE4D5E4FB6BA6 );
}

float_remap( value, _id_CFFD6E654A5673E8, _id_E9731D032A86C293, _id_CFFD71654A567A81, _id_E9731E032A86C4C6 )
{
    return ( value - _id_CFFD6E654A5673E8 ) / ( _id_E9731D032A86C293 - _id_CFFD6E654A5673E8 ) * ( _id_E9731E032A86C4C6 - _id_CFFD71654A567A81 ) + _id_CFFD71654A567A81;
}

lerp_float( from, to, _id_3777ECE6A73EADA5 )
{
    return from + _id_3777ECE6A73EADA5 * ( to - from );
}

smoothstep( start, end, _id_3777ECE6A73EADA5 )
{
    _id_3777ECE6A73EADA5 = clamp( ( _id_3777ECE6A73EADA5 - start ) / ( end - start ), 0.0, 1.0 );
    return _id_3777ECE6A73EADA5 * _id_3777ECE6A73EADA5 * ( 3 - 2 * _id_3777ECE6A73EADA5 );
}

set_time_via_rate( anime, time, weight, _id_D775E14980E96400 )
{
    if ( !isdefined( weight ) )
        weight = 1;

    if ( !isdefined( _id_D775E14980E96400 ) )
        _id_D775E14980E96400 = 0.25;

    prev_time = self getanimtime( anime );
    duration = getanimlength( anime );
    rate = ( time - prev_time ) * duration / 0.05;

    if ( self.unittype == "c6" )
        use_c6_animtree();

    self setanimlimited( anime, weight, _id_D775E14980E96400, rate );
}

ai_gesture_directional_custom( target, anim_array, _id_4E9E76B78D716037 )
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "entitydeleted" );
    anims = anim_array;
    _id_5286DE9BCE84F2C4 = anim_array[0];
    _id_18E5B6B83A6361C0 = anim_array[1];
    _id_B849486170A283FF = anim_array[2];
    _id_DC7D859AAB697700 = anim_array[3];
    _id_E990BEBF600B1C9F = anim_array[4];
    _id_8BC1A08153E71AF8 = 0;
    gesture_body_knob = undefined;
    self.no_point_defined = 0;
    _id_10C67B12BE486D55 = undefined;

    if ( isdefined( _id_4E9E76B78D716037 ) )
    {
        gesture_body_knob = scripts\asm\asm::asm_getbodyknob();
        _id_10C67B12BE486D55 = %gesture_partials;
    }
    else
        _id_10C67B12BE486D55 = %add_gesture;

    if ( !isdefined( self ) )
        return;

    if ( isplayer( target ) )
        _id_9523E27B0F4FE3AF = level.player geteye();
    else if ( !isdefined( target ) )
    {
        _id_9523E27B0F4FE3AF = self.origin;
        _id_8BC1A08153E71AF8 = 1;
    }
    else if ( isai( target ) )
        _id_9523E27B0F4FE3AF = target geteye();
    else if ( isvector( target ) )
        _id_9523E27B0F4FE3AF = target;
    else
        _id_9523E27B0F4FE3AF = target.origin;

    _id_148C7412FDE9224D = self gettagangles( "tag_origin" );
    _id_B65A151051532493 = self gettagorigin( "tag_origin" );
    _id_84DEBF527911A15D = anglestoright( _id_148C7412FDE9224D );
    _id_4BD579FA63EB0ED2 = anglestoforward( _id_148C7412FDE9224D );
    _id_53B34AADF7B8E731 = vectornormalize( _id_9523E27B0F4FE3AF - _id_B65A151051532493 );
    _id_B4291343F067BB1D = scripts\engine\utility::flatten_vector( _id_84DEBF527911A15D );
    _id_EBF67E00F0184992 = scripts\engine\utility::flatten_vector( _id_4BD579FA63EB0ED2 );
    _id_AF48FC7D3DF203F1 = scripts\engine\utility::flatten_vector( _id_53B34AADF7B8E731 );
    _id_FCE87949C9B65851 = vectordot( _id_B4291343F067BB1D, _id_AF48FC7D3DF203F1 );
    _id_8E8C89B2CBB6BC04 = _id_FCE87949C9B65851 * -1.0;
    _id_2208A80DC5F47661 = clamp( float_remap( _id_FCE87949C9B65851, 0.2, 1.0, 0, 1 ), 0, 1 );
    _id_824C03276D8CDCEC = clamp( float_remap( _id_8E8C89B2CBB6BC04, 0.2, 1, 0, 1 ), 0, 1 );
    _id_9088CBA4A109B331 = self gettagorigin( "J_Spine4" );
    _id_20F493DCA3C1483F = vectornormalize( _id_9523E27B0F4FE3AF - _id_9088CBA4A109B331 );
    _id_0CA399D17885E392 = anglestoup( _id_148C7412FDE9224D );
    _id_2CB0644208843C51 = vectordot( _id_20F493DCA3C1483F, _id_0CA399D17885E392 );
    _id_2E436EF195C55994 = _id_2CB0644208843C51 * -1.0;
    _id_F25CC6D803539F37 = vectordot( _id_EBF67E00F0184992, _id_20F493DCA3C1483F );
    _id_7BA291BB89A5D6DD = clamp( float_remap( _id_F25CC6D803539F37, 0.2, 1, 0, 1 ), 0, 1 );
    _id_BED61D13BD0FE46F = clamp( float_remap( _id_2CB0644208843C51, 0.2, 1, 0, 1 ), 0, 1 );
    _id_BD630759847E7B0C = clamp( float_remap( _id_2E436EF195C55994, 0.2, 1, 0, 1 ), 0, 1 );

    if ( !self.no_point_defined )
    {
        if ( isdefined( _id_4E9E76B78D716037 ) )
            self setanimlimited( _id_10C67B12BE486D55, 10.0, 0.25 );
        else
            self setanimlimited( _id_10C67B12BE486D55, 1.0, 0.25 );

        if ( _id_7BA291BB89A5D6DD < 0.3 )
            self setanimlimited( _id_5286DE9BCE84F2C4, 0, 0, 1 );
        else
            self setanimlimited( _id_5286DE9BCE84F2C4, _id_7BA291BB89A5D6DD, 0.25, 1 );

        if ( isdefined( _id_DC7D859AAB697700 ) )
            self setanimlimited( _id_DC7D859AAB697700, _id_BED61D13BD0FE46F, 0.25, 1 );

        if ( isdefined( _id_E990BEBF600B1C9F ) )
            self setanimlimited( _id_E990BEBF600B1C9F, _id_BD630759847E7B0C, 0.25, 1 );

        self setanimlimited( _id_18E5B6B83A6361C0, _id_824C03276D8CDCEC, 0.25, 1 );
        self setanimlimited( _id_B849486170A283FF, _id_2208A80DC5F47661, 0.25, 1 );
    }
    else
    {
        if ( isdefined( _id_4E9E76B78D716037 ) )
            self setanimlimited( gesture_body_knob, 0.001, 0.1 );

        self setanimlimited( _id_10C67B12BE486D55, 1.0, 0.25 );
        self setanimlimited( _id_5286DE9BCE84F2C4, 1, 0.25 );
    }

    wait_time = getanimlength( _id_5286DE9BCE84F2C4 );
    wait( wait_time );
    self clearanim( _id_10C67B12BE486D55, 0.25 );
    self setanimlimited( gesture_body_knob, 1.0, 0.25 );
}

ai_custom_gesture( _id_4EDB516A81E6B468, _id_4E9E76B78D716037 )
{
    self endon( "death" );
    self endon( "gesture_stop" );
    self endon( "entitydeleted" );
    _id_FEAA792B9588834D = %add_gesture;
    _id_E97EC92EAF750B95 = 0;
    _id_EA3E3B2121E6713A = "single anim";
    thread scripts\common\notetrack::start_notetrack_wait( self, _id_EA3E3B2121E6713A, undefined, undefined, _id_4EDB516A81E6B468 );

    if ( isdefined( _id_4E9E76B78D716037 ) && _id_4E9E76B78D716037 )
    {
        _id_FEAA792B9588834D = %gesture_partials;
        _id_E97EC92EAF750B95 = 1;
    }

    if ( _id_E97EC92EAF750B95 )
        thread blend_partial_in( _id_FEAA792B9588834D, _id_4EDB516A81E6B468, 0.2 );
    else
    {
        self setanimlimited( _id_FEAA792B9588834D, 1.0, 0.1 );
        self setanimlimited( _id_4EDB516A81E6B468, 1.0, 0.1 );
    }

    wait_time = getanimlength( _id_4EDB516A81E6B468 ) * 0.75 - 0.2;
    wait( wait_time );

    if ( _id_E97EC92EAF750B95 )
        thread blend_partial_out( _id_FEAA792B9588834D, _id_4EDB516A81E6B468, 0.2 );
    else
    {
        self clearanim( _id_FEAA792B9588834D, 0.2 );
        self clearanim( _id_4EDB516A81E6B468, 0.2 );
    }
}

#using_animtree("c6");

use_c6_animtree()
{
    self.look_leftright_anim = %prototype_gesture_look_rightleft;
    self.look_updown_anim = %prototype_gesture_look_updwn;
}

ai_gesture_head_leftright_c6()
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "entitydeleted" );
    _id_480E0D93B559931C = self.blend_in_time;
    start_time = gettime() / 1000;

    while ( gettime() / 1000 - start_time < _id_480E0D93B559931C )
    {
        _id_79DEC2965739392B = ( gettime() / 1000 - start_time ) / _id_480E0D93B559931C;
        _id_79DEC2965739392B = smoothstep( 0, 1, _id_79DEC2965739392B );
        _id_964F9C930BE8C038 = lerp_float( 0, 1, _id_79DEC2965739392B );
        _id_F68167872853C4C7 = lerp_float( 0, 1, _id_79DEC2965739392B );
        _id_ACCF346B44A25CFD = lerp_float( 0, 5, _id_79DEC2965739392B );
        _id_CDAF7985C83B0386 = lerp_float( 0, 5, _id_79DEC2965739392B );
        self setanimlimited( %lookat_left_right, _id_964F9C930BE8C038, 0.05 );
        self setanimlimited( self.look_leftright_anim, _id_F68167872853C4C7, 0.05 );
        self setanimlimited( %lookat_head_base_partial, _id_ACCF346B44A25CFD, 0.05 );
        self setanimlimited( %head_gesture_look_partial, _id_CDAF7985C83B0386, 0.05 );
        self setanimtime( self.look_leftright_anim, 0.5 );
        wait 0.05;
        waittillframeend;
    }

    self setanimlimited( %lookat_left_right, 1, 0.05 );
    self setanimlimited( self.look_leftright_anim, 1, 0.05 );
    self setanimlimited( %lookat_head_base_partial, 5, 0.05 );
    self setanimlimited( %head_gesture_look_partial, 5, 0.05 );
    _id_8BC1A6A78E77C5D1 = 0.5;

    for (;;)
    {
        if ( !isdefined( self ) )
            break;

        if ( isplayer( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = level.player geteye();
        else if ( isai( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = self.gesture_lookat geteye();
        else if ( isvector( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = self.gesture_lookat;
        else
            _id_9523E27B0F4FE3AF = self.gesture_lookat.origin;

        _id_22768C2B78F15EB0 = self gettagangles( "J_Head" );
        _id_E630138E877B75B0 = self gettagorigin( "J_Head" );
        _id_F8018EDE9BC535EE = self gettagangles( "J_Spine4" ) + ( 0, 90, 0 );
        _id_7AC7A365A6AEE172 = self gettagorigin( "J_Spine4" );
        _id_518C6A4B170E645D = vectornormalize( _id_9523E27B0F4FE3AF - _id_7AC7A365A6AEE172 );
        _id_0E99E0547B4C92A5 = anglestoright( _id_F8018EDE9BC535EE );
        _id_6F23641A55419207 = scripts\engine\utility::flatten_vector( _id_0E99E0547B4C92A5 );
        _id_8A2A8DFDEF9C641D = scripts\engine\utility::flatten_vector( _id_518C6A4B170E645D );
        _id_FCE87949C9B65851 = vectordot( _id_6F23641A55419207, _id_8A2A8DFDEF9C641D );
        _id_E7E7DF501885A8B7 = float_remap( _id_FCE87949C9B65851, -1.0, 1.0, 0.0, 1.0 );
        _id_E7E7DF501885A8B7 = clamp( _id_E7E7DF501885A8B7, 0.0, 1.0 );
        _id_8BC1A6A78E77C5D1 = _id_8BC1A6A78E77C5D1 + ( _id_E7E7DF501885A8B7 - _id_8BC1A6A78E77C5D1 ) * self.gesture_catchup_speed;
        _id_8BC1A6A78E77C5D1 = clamp( _id_8BC1A6A78E77C5D1, 0.1, 0.9 );
        set_time_via_rate( self.look_leftright_anim, _id_8BC1A6A78E77C5D1, 1 );
        waitframe();
    }
}

ai_gesture_head_updown_c6()
{
    self endon( "gesture_stop" );
    self endon( "death" );
    self endon( "entitydeleted" );
    self setanimlimited( %lookat_up_down, 1, self.blend_in_time );
    self setanimlimited( self.look_updown_anim, 1, self.blend_in_time );
    self setanimtime( self.look_updown_anim, 0.5 );
    _id_8BC1A6A78E77C5D1 = 0.5;

    for (;;)
    {
        if ( !isdefined( self ) )
            break;

        if ( isplayer( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = level.player geteye();
        else if ( isai( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = self.gesture_lookat geteye();
        else if ( isvector( self.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = self.gesture_lookat;
        else
            _id_9523E27B0F4FE3AF = self.gesture_lookat.origin;

        _id_F8018EDE9BC535EE = self gettagangles( "J_Spine4" ) + ( 0, 0, 0 );
        _id_7AC7A365A6AEE172 = self gettagorigin( "J_Spine4" );
        _id_E5D33DF33698A4F5 = undefined;

        if ( isai( self ) )
            _id_E5D33DF33698A4F5 = self geteye();
        else
            _id_E5D33DF33698A4F5 = self gettagorigin( "J_Head" );

        _id_518C6A4B170E645D = vectornormalize( _id_9523E27B0F4FE3AF - _id_E5D33DF33698A4F5 );
        _id_295EC4AA62F17342 = anglestoforward( _id_F8018EDE9BC535EE );
        _id_BDBF163E071652F8 = vectordot( _id_295EC4AA62F17342, _id_518C6A4B170E645D );
        _id_E7E7DF501885A8B7 = float_remap( _id_BDBF163E071652F8, 1, -1, 0.0, 1.0 );
        _id_8BC1A6A78E77C5D1 = _id_8BC1A6A78E77C5D1 + ( _id_E7E7DF501885A8B7 - _id_8BC1A6A78E77C5D1 ) * self.gesture_catchup_speed * 0.3;
        _id_8BC1A6A78E77C5D1 = clamp( _id_8BC1A6A78E77C5D1, 0.1, 0.65 );
        set_time_via_rate( self.look_updown_anim, _id_8BC1A6A78E77C5D1 );
        waitframe();
    }
}

ai_gesture_stop_c6( _id_480E0D93B559931C )
{
    self endon( "death" );
    self endon( "entitydeleted" );
    self notify( "gesture_stop" );

    if ( isdefined( _id_480E0D93B559931C ) )
        _id_D775E14980E96400 = _id_480E0D93B559931C;
    else
        _id_D775E14980E96400 = 0.25;

    self setanimlimited( %lookat_left_right, 1.0, _id_D775E14980E96400 * 0.15 );
    self setanimlimited( %lookat_up_down, 1.0, _id_D775E14980E96400 * 0.15 );
    self setanimlimited( %lookat_head_base_partial, 1.0, _id_D775E14980E96400 * 0.15 );
    self setanimlimited( %head_gesture_look_partial, 1.0, _id_D775E14980E96400 * 0.15 );
    wait( _id_D775E14980E96400 * 0.15 );
    self clearanim( %lookat_left_right, _id_D775E14980E96400 * 0.85 );
    self clearanim( %lookat_up_down, _id_D775E14980E96400 * 0.85 );
    self clearanim( %lookat_head_base_partial, _id_D775E14980E96400 * 0.85 );
    self clearanim( %head_gesture_look_partial, _id_D775E14980E96400 * 0.85 );
    self.is_head_tracking = undefined;
}

#using_animtree("generic_human");

blended_loop_anim()
{
    guy = self;
    self endon( self.ender );
    guy.fwd_anim = undefined;
    guy.right_anim = undefined;
    guy.left_anim = undefined;
    guy.leftback_anim = undefined;
    guy.rightback_anim = undefined;

    foreach ( _id_A0DDCCC8DA0CA6AB in guy.anim_array )
    {
        if ( issubstr( _id_A0DDCCC8DA0CA6AB, "forward" ) )
        {
            if ( isdefined( level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB] ) )
                guy.fwd_anim = level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB];

            continue;
        }

        if ( issubstr( _id_A0DDCCC8DA0CA6AB, "right" ) && !issubstr( _id_A0DDCCC8DA0CA6AB, "back" ) )
        {
            if ( isdefined( level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB] ) )
                guy.right_anim = level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB];

            continue;
        }

        if ( issubstr( _id_A0DDCCC8DA0CA6AB, "left" ) && !issubstr( _id_A0DDCCC8DA0CA6AB, "back" ) )
        {
            if ( isdefined( level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB] ) )
                guy.left_anim = level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB];

            continue;
        }

        if ( issubstr( _id_A0DDCCC8DA0CA6AB, "leftback" ) )
        {
            if ( isdefined( level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB] ) )
                guy.leftback_anim = level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB];

            continue;
        }

        if ( issubstr( _id_A0DDCCC8DA0CA6AB, "rightback" ) )
        {
            if ( isdefined( level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB] ) )
                guy.rightback_anim = level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB];
        }
    }

    org = getstartorigin( self.animnode.origin, self.animnode.angles, guy.fwd_anim );
    _id_8BC14603A27FA3E7 = getstartangles( self.animnode.origin, self.animnode.angles, guy.fwd_anim );

    if ( isai( guy ) )
        guy forceteleport( org, _id_8BC14603A27FA3E7, 10000 );
    else
    {
        guy.origin = org;
        guy.angles = _id_8BC14603A27FA3E7;
    }

    _id_837C12743AB916FE = vectortoangles( level.player.origin - guy.origin );
    guy setanimknoball( guy.fwd_anim, %root, 1.0, 0.2 );

    if ( isdefined( guy.right_anim ) )
        guy setanimlimited( guy.right_anim, 0.0, 0.2 );

    if ( isdefined( guy.left_anim ) )
        guy setanimlimited( guy.left_anim, 0.0, 0.2 );

    if ( isdefined( guy.leftback_anim ) )
        guy setanimlimited( guy.leftback_anim, 0.0, 0.2 );

    if ( isdefined( guy.rightback_anim ) )
        guy setanimlimited( guy.rightback_anim, 0.0, 0.2 );

    _id_9E41F6B2A5FDFA6C = 0;
    _id_3A58E25D07FA8963 = 0;
    guy pushplayer( 1 );

    for (;;)
    {
        if ( !isdefined( guy ) )
            break;

        if ( isplayer( guy.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = level.player geteye();
        else if ( isai( guy.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = guy.gesture_lookat geteye();
        else if ( isvector( guy.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = guy.gesture_lookat;
        else
            _id_9523E27B0F4FE3AF = guy.gesture_lookat.origin;

        _id_F8018EDE9BC535EE = guy gettagangles( "tag_origin" );
        _id_7AC7A365A6AEE172 = guy gettagorigin( "tag_origin" );
        _id_518C6A4B170E645D = scripts\engine\utility::flatten_vector( vectornormalize( _id_9523E27B0F4FE3AF - _id_7AC7A365A6AEE172 ) );
        _id_C9056E1AFE1AB9D7 = anglestoforward( _id_F8018EDE9BC535EE );
        _id_AB61652EE01B3D08 = anglestoright( _id_F8018EDE9BC535EE );
        _id_8FC912A946A93A31 = anglestoright( _id_F8018EDE9BC535EE ) * -1;
        _id_E0E29F268E2B6297 = anglestoforward( _id_F8018EDE9BC535EE ) * -1;
        _id_195A2ED93E9EAEF9 = anglestoup( _id_F8018EDE9BC535EE );
        _id_E32C0E4A71D1793E = clamp( vectordot( _id_518C6A4B170E645D, _id_C9056E1AFE1AB9D7 ), 0, 1 );
        _id_87D553E2E44D7001 = clamp( vectordot( _id_518C6A4B170E645D, _id_AB61652EE01B3D08 ), 0, 1 );
        _id_EC8D74CDA15D5374 = clamp( vectordot( _id_518C6A4B170E645D, _id_8FC912A946A93A31 ), 0, 1 );
        _id_B0B9A45F796B1296 = clamp( vectordot( _id_518C6A4B170E645D, _id_E0E29F268E2B6297 ), 0, 1 );
        _id_D7199CF973E1AF07 = 1;

        if ( scripts\engine\math::anglebetweenvectorssigned( _id_C9056E1AFE1AB9D7, _id_518C6A4B170E645D, _id_195A2ED93E9EAEF9 ) > 0 )
            _id_D7199CF973E1AF07 = 0;

        if ( isdefined( guy.right_anim ) )
            guy setanimlimited( guy.right_anim, _id_87D553E2E44D7001, 0.2 );

        if ( isdefined( guy.left_anim ) )
            guy setanimlimited( guy.left_anim, _id_EC8D74CDA15D5374, 0.2 );

        guy setanimlimited( guy.fwd_anim, _id_E32C0E4A71D1793E + 0.005, 0.2 );

        if ( _id_D7199CF973E1AF07 )
        {
            _id_9E41F6B2A5FDFA6C = scripts\engine\math::lerp( _id_9E41F6B2A5FDFA6C, _id_B0B9A45F796B1296, 0.1 );
            _id_3A58E25D07FA8963 = scripts\engine\math::lerp( _id_3A58E25D07FA8963, 0, 0.1 );
        }
        else
        {
            _id_9E41F6B2A5FDFA6C = scripts\engine\math::lerp( _id_9E41F6B2A5FDFA6C, 0, 0.1 );
            _id_3A58E25D07FA8963 = scripts\engine\math::lerp( _id_3A58E25D07FA8963, _id_B0B9A45F796B1296, 0.1 );
        }

        if ( isdefined( guy.rightback_anim ) )
            guy setanimlimited( guy.rightback_anim, _id_9E41F6B2A5FDFA6C + 0.005, 0.2 );

        if ( isdefined( guy.leftback_anim ) )
            guy setanimlimited( guy.leftback_anim, _id_3A58E25D07FA8963 + 0.005, 0.2 );

        waitframe();
        waittillframeend;
    }
}

blended_loop_cleanup()
{
    guy = self;

    if ( isdefined( guy.ender ) )
        guy notify( guy.ender );

    guy clearanim( guy.fwd_anim, 0.2 );

    if ( isdefined( guy.right_anim ) )
        guy clearanim( guy.right_anim, 0.2 );

    if ( isdefined( guy.left_anim ) )
        guy clearanim( guy.left_anim, 0.2 );

    if ( isdefined( guy.leftback_anim ) )
        guy clearanim( guy.leftback_anim, 0.2 );

    if ( isdefined( guy.rightback_anim ) )
        guy clearanim( guy.rightback_anim, 0.2 );

    guy pushplayer( 0 );
    guy.fwd_anim = undefined;
    guy.right_anim = undefined;
    guy.left_anim = undefined;
    guy.leftback_anim = undefined;
    guy.rightback_anim = undefined;
    guy.anim_array = undefined;
    guy.ender = undefined;
    guy.gesture_lookat = undefined;
}

blended_anim()
{
    guy = self;
    guy.fwd_anim = undefined;
    guy.right_anim = undefined;
    guy.left_anim = undefined;
    guy.leftback_anim = undefined;
    guy.rightback_anim = undefined;

    foreach ( _id_A0DDCCC8DA0CA6AB in guy.anim_array )
    {
        if ( issubstr( _id_A0DDCCC8DA0CA6AB, "forward" ) )
        {
            if ( isdefined( level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB] ) )
                guy.fwd_anim = level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB];

            continue;
        }

        if ( issubstr( _id_A0DDCCC8DA0CA6AB, "right" ) && !issubstr( _id_A0DDCCC8DA0CA6AB, "back" ) )
        {
            if ( isdefined( level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB] ) )
                guy.right_anim = level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB];

            continue;
        }

        if ( issubstr( _id_A0DDCCC8DA0CA6AB, "left" ) && !issubstr( _id_A0DDCCC8DA0CA6AB, "back" ) )
        {
            if ( isdefined( level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB] ) )
                guy.left_anim = level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB];

            continue;
        }

        if ( issubstr( _id_A0DDCCC8DA0CA6AB, "leftback" ) )
        {
            if ( isdefined( level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB] ) )
                guy.leftback_anim = level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB];

            continue;
        }

        if ( issubstr( _id_A0DDCCC8DA0CA6AB, "rightback" ) )
        {
            if ( isdefined( level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB] ) )
                guy.rightback_anim = level.scr_anim[guy.animname][_id_A0DDCCC8DA0CA6AB];
        }
    }

    org = getstartorigin( self.animnode.origin, self.animnode.angles, guy.fwd_anim );
    _id_8BC14603A27FA3E7 = getstartangles( self.animnode.origin, self.animnode.angles, guy.fwd_anim );

    if ( isai( guy ) )
        guy forceteleport( org, _id_8BC14603A27FA3E7, 10000 );
    else
    {
        guy.origin = org;
        guy.angles = _id_8BC14603A27FA3E7;
    }

    _id_837C12743AB916FE = vectortoangles( level.player.origin - guy.origin );
    guy setanimknoball( guy.fwd_anim, %root, 1.0, 0.2 );

    if ( isdefined( guy.right_anim ) )
        guy setanimlimited( guy.right_anim, 0.0, 0.2 );

    if ( isdefined( guy.left_anim ) )
        guy setanimlimited( guy.left_anim, 0.0, 0.2 );

    if ( isdefined( guy.leftback_anim ) )
        guy setanimlimited( guy.leftback_anim, 0.0, 0.2 );

    if ( isdefined( guy.rightback_anim ) )
        guy setanimlimited( guy.rightback_anim, 0.0, 0.2 );

    _id_9E41F6B2A5FDFA6C = 0;
    _id_3A58E25D07FA8963 = 0;
    start_time = gettime() / 1000;
    wait_time = getanimlength( guy.fwd_anim );

    while ( gettime() / 1000 - start_time < wait_time )
    {
        if ( !isdefined( guy ) )
            break;

        if ( isplayer( guy.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = level.player geteye();
        else if ( isai( guy.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = guy.gesture_lookat geteye();
        else if ( isvector( guy.gesture_lookat ) )
            _id_9523E27B0F4FE3AF = guy.gesture_lookat;
        else
            _id_9523E27B0F4FE3AF = guy.gesture_lookat.origin;

        _id_F8018EDE9BC535EE = guy gettagangles( "tag_origin" );
        _id_7AC7A365A6AEE172 = guy gettagorigin( "tag_origin" );
        _id_518C6A4B170E645D = scripts\engine\utility::flatten_vector( vectornormalize( _id_9523E27B0F4FE3AF - _id_7AC7A365A6AEE172 ) );
        _id_C9056E1AFE1AB9D7 = anglestoforward( _id_F8018EDE9BC535EE );
        _id_AB61652EE01B3D08 = anglestoright( _id_F8018EDE9BC535EE );
        _id_8FC912A946A93A31 = anglestoright( _id_F8018EDE9BC535EE ) * -1;
        _id_E0E29F268E2B6297 = anglestoforward( _id_F8018EDE9BC535EE ) * -1;
        _id_195A2ED93E9EAEF9 = anglestoup( _id_F8018EDE9BC535EE );
        _id_E32C0E4A71D1793E = clamp( vectordot( _id_518C6A4B170E645D, _id_C9056E1AFE1AB9D7 ), 0, 1 );
        _id_87D553E2E44D7001 = clamp( vectordot( _id_518C6A4B170E645D, _id_AB61652EE01B3D08 ), 0, 1 );
        _id_EC8D74CDA15D5374 = clamp( vectordot( _id_518C6A4B170E645D, _id_8FC912A946A93A31 ), 0, 1 );
        _id_B0B9A45F796B1296 = clamp( vectordot( _id_518C6A4B170E645D, _id_E0E29F268E2B6297 ), 0, 1 );
        _id_D7199CF973E1AF07 = 1;

        if ( scripts\engine\math::anglebetweenvectorssigned( _id_C9056E1AFE1AB9D7, _id_518C6A4B170E645D, _id_195A2ED93E9EAEF9 ) > 0 )
            _id_D7199CF973E1AF07 = 0;

        if ( isdefined( guy.right_anim ) )
            guy setanimlimited( guy.right_anim, _id_87D553E2E44D7001, 0.2 );

        if ( isdefined( guy.left_anim ) )
            guy setanimlimited( guy.left_anim, _id_EC8D74CDA15D5374, 0.2 );

        guy setanimlimited( guy.fwd_anim, _id_E32C0E4A71D1793E + 0.005, 0.2 );

        if ( _id_D7199CF973E1AF07 )
        {
            _id_9E41F6B2A5FDFA6C = scripts\engine\math::lerp( _id_9E41F6B2A5FDFA6C, _id_B0B9A45F796B1296, 0.1 );
            _id_3A58E25D07FA8963 = scripts\engine\math::lerp( _id_3A58E25D07FA8963, 0, 0.1 );
        }
        else
        {
            _id_9E41F6B2A5FDFA6C = scripts\engine\math::lerp( _id_9E41F6B2A5FDFA6C, 0, 0.1 );
            _id_3A58E25D07FA8963 = scripts\engine\math::lerp( _id_3A58E25D07FA8963, _id_B0B9A45F796B1296, 0.1 );
        }

        if ( isdefined( guy.rightback_anim ) )
            guy setanimlimited( guy.rightback_anim, _id_9E41F6B2A5FDFA6C + 0.005, 0.2 );

        if ( isdefined( guy.leftback_anim ) )
            guy setanimlimited( guy.leftback_anim, _id_3A58E25D07FA8963 + 0.005, 0.2 );

        waitframe();
        waittillframeend;
    }

    guy thread blended_loop_cleanup();
}
