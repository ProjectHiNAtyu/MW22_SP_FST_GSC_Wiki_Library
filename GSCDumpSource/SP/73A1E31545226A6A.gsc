// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

setparent( _id_F7806D4CF24AACD3 )
{
    if ( isdefined( self.parent ) && self.parent == _id_F7806D4CF24AACD3 )
        return;

    if ( isdefined( self.parent ) )
        self.parent removechild( self );

    self.parent = _id_F7806D4CF24AACD3;
    self.parent addchild( self );

    if ( isdefined( self.point ) )
        setpoint( self.point, self.relativepoint, self.xoffset, self.yoffset );
    else
        setpoint( "TOPLEFT" );
}

getparent()
{
    return self.parent;
}

removedestroyedchildren()
{
    if ( isdefined( self.childchecktime ) && self.childchecktime == gettime() )
        return;

    self.childchecktime = gettime();
    _id_3DDCDB8C8D35246A = [];

    foreach ( _id_AC0E594AC96AA3A8, child in self.children )
    {
        if ( !isdefined( child ) )
            continue;

        child.index = _id_3DDCDB8C8D35246A.size;
        _id_3DDCDB8C8D35246A[_id_3DDCDB8C8D35246A.size] = child;
    }

    self.children = _id_3DDCDB8C8D35246A;
}

addchild( _id_F7806D4CF24AACD3 )
{
    _id_F7806D4CF24AACD3.index = self.children.size;
    self.children[self.children.size] = _id_F7806D4CF24AACD3;
    removedestroyedchildren();
}

removechild( _id_F7806D4CF24AACD3 )
{
    _id_F7806D4CF24AACD3.parent = undefined;

    if ( self.children[self.children.size - 1] != _id_F7806D4CF24AACD3 )
    {
        self.children[_id_F7806D4CF24AACD3.index] = self.children[self.children.size - 1];
        self.children[_id_F7806D4CF24AACD3.index].index = _id_F7806D4CF24AACD3.index;
    }

    self.children[self.children.size - 1] = undefined;
    _id_F7806D4CF24AACD3.index = undefined;
}

setpoint( point, relativepoint, xoffset, yoffset, movetime )
{
    if ( !isdefined( movetime ) )
        movetime = 0;

    _id_F7806D4CF24AACD3 = getparent();

    if ( movetime )
        self moveovertime( movetime );

    if ( !isdefined( xoffset ) )
        xoffset = 0;

    self.xoffset = xoffset;

    if ( !isdefined( yoffset ) )
        yoffset = 0;

    self.yoffset = yoffset;
    self.point = point;
    self.alignx = "center";
    self.aligny = "middle";

    if ( issubstr( point, "TOP" ) )
        self.aligny = "top";

    if ( issubstr( point, "BOTTOM" ) )
        self.aligny = "bottom";

    if ( issubstr( point, "LEFT" ) )
        self.alignx = "left";

    if ( issubstr( point, "RIGHT" ) )
        self.alignx = "right";

    if ( !isdefined( relativepoint ) )
        relativepoint = point;

    self.relativepoint = relativepoint;
    _id_32149D41AB89B2CB = "center";
    _id_32149C41AB89B098 = "middle";

    if ( issubstr( relativepoint, "TOP" ) )
        _id_32149C41AB89B098 = "top";

    if ( issubstr( relativepoint, "BOTTOM" ) )
        _id_32149C41AB89B098 = "bottom";

    if ( issubstr( relativepoint, "LEFT" ) )
        _id_32149D41AB89B2CB = "left";

    if ( issubstr( relativepoint, "RIGHT" ) )
        _id_32149D41AB89B2CB = "right";

    if ( _id_F7806D4CF24AACD3 == level.uiparent )
    {
        self.horzalign = _id_32149D41AB89B2CB;
        self.vertalign = _id_32149C41AB89B098;
    }
    else
    {
        self.horzalign = _id_F7806D4CF24AACD3.horzalign;
        self.vertalign = _id_F7806D4CF24AACD3.vertalign;
    }

    if ( _id_32149D41AB89B2CB == _id_F7806D4CF24AACD3.alignx )
    {
        offsetx = 0;
        _id_D92133D2D7B55484 = 0;
    }
    else if ( _id_32149D41AB89B2CB == "center" || _id_F7806D4CF24AACD3.alignx == "center" )
    {
        offsetx = int( _id_F7806D4CF24AACD3.width / 2 );

        if ( _id_32149D41AB89B2CB == "left" || _id_F7806D4CF24AACD3.alignx == "right" )
            _id_D92133D2D7B55484 = -1;
        else
            _id_D92133D2D7B55484 = 1;
    }
    else
    {
        offsetx = _id_F7806D4CF24AACD3.width;

        if ( _id_32149D41AB89B2CB == "left" )
            _id_D92133D2D7B55484 = -1;
        else
            _id_D92133D2D7B55484 = 1;
    }

    self.x = _id_F7806D4CF24AACD3.x + offsetx * _id_D92133D2D7B55484;

    if ( _id_32149C41AB89B098 == _id_F7806D4CF24AACD3.aligny )
    {
        offsety = 0;
        _id_F28981E9D5FBE3EB = 0;
    }
    else if ( _id_32149C41AB89B098 == "middle" || _id_F7806D4CF24AACD3.aligny == "middle" )
    {
        offsety = int( _id_F7806D4CF24AACD3.height / 2 );

        if ( _id_32149C41AB89B098 == "top" || _id_F7806D4CF24AACD3.aligny == "bottom" )
            _id_F28981E9D5FBE3EB = -1;
        else
            _id_F28981E9D5FBE3EB = 1;
    }
    else
    {
        offsety = _id_F7806D4CF24AACD3.height;

        if ( _id_32149C41AB89B098 == "top" )
            _id_F28981E9D5FBE3EB = -1;
        else
            _id_F28981E9D5FBE3EB = 1;
    }

    self.y = _id_F7806D4CF24AACD3.y + offsety * _id_F28981E9D5FBE3EB;
    self.x = self.x + self.xoffset;
    self.y = self.y + self.yoffset;

    switch ( self.elemtype )
    {
        case "bar":
            setpointbar( point, relativepoint, xoffset, yoffset );
            break;
    }

    updatechildren( movetime );
}

setpointbar( point, relativepoint, xoffset, yoffset )
{
    self.bar.horzalign = self.horzalign;
    self.bar.vertalign = self.vertalign;
    self.bar.alignx = "left";
    self.bar.aligny = self.aligny;
    self.bar.y = self.y;

    if ( self.alignx == "left" )
        self.bar.x = self.x + self.xpadding;
    else if ( self.alignx == "right" )
        self.bar.x = self.x - ( self.width - self.xpadding );
    else
        self.bar.x = self.x - int( ( self.width - self.xpadding * 2 ) / 2 );

    updatebar( self.bar.frac );
}

updatebar( _id_144981CC6EB4B07A )
{
    _id_9017AC78A8DCE9DA = int( ( self.width - self.xpadding * 2 ) * _id_144981CC6EB4B07A );

    if ( !_id_9017AC78A8DCE9DA )
        _id_9017AC78A8DCE9DA = 1;

    self.bar.frac = _id_144981CC6EB4B07A;
    self.bar setshader( self.bar.shader, _id_9017AC78A8DCE9DA, self.height - self.ypadding * 2 );
}

hidebar( _id_E3108E412AFB3811 )
{
    _id_E3108E412AFB3811 = scripts\engine\utility::ter_op( isdefined( _id_E3108E412AFB3811 ), _id_E3108E412AFB3811, 1 );

    if ( _id_E3108E412AFB3811 || !isdefined( self.orig_alpha ) || !isdefined( self.bar.orig_alpha ) )
    {
        self.orig_alpha = self.alpha;
        self.bar.orig_alpha = self.bar.alpha;
    }

    self.alpha = scripts\engine\utility::ter_op( _id_E3108E412AFB3811, 0, self.orig_alpha );
    self.bar.alpha = scripts\engine\utility::ter_op( _id_E3108E412AFB3811, 0, self.bar.orig_alpha );
}

createfontstring( font, fontscale )
{
    _id_372B658AEA9D2487 = newhudelem();
    _id_372B658AEA9D2487.elemtype = "font";
    _id_372B658AEA9D2487.font = font;
    _id_372B658AEA9D2487.fontscale = fontscale;
    _id_372B658AEA9D2487.x = 0;
    _id_372B658AEA9D2487.y = 0;
    _id_372B658AEA9D2487.width = 0;
    _id_372B658AEA9D2487.height = int( level.fontheight * fontscale );
    _id_372B658AEA9D2487.xoffset = 0;
    _id_372B658AEA9D2487.yoffset = 0;
    _id_372B658AEA9D2487.children = [];
    _id_372B658AEA9D2487 setparent( level.uiparent );
    return _id_372B658AEA9D2487;
}

createclientfontstring( font, fontscale )
{
    _id_372B658AEA9D2487 = newclienthudelem( self );
    _id_372B658AEA9D2487.elemtype = "font";
    _id_372B658AEA9D2487.font = font;
    _id_372B658AEA9D2487.fontscale = fontscale;
    _id_372B658AEA9D2487.x = 0;
    _id_372B658AEA9D2487.y = 0;
    _id_372B658AEA9D2487.width = 0;
    _id_372B658AEA9D2487.height = int( level.fontheight * fontscale );
    _id_372B658AEA9D2487.xoffset = 0;
    _id_372B658AEA9D2487.yoffset = 0;
    _id_372B658AEA9D2487.children = [];
    _id_372B658AEA9D2487 setparent( level.uiparent );
    return _id_372B658AEA9D2487;
}

createclienttimer( font, fontscale )
{
    _id_4908CA330BDC48D1 = newclienthudelem( self );
    _id_4908CA330BDC48D1.elemtype = "timer";
    _id_4908CA330BDC48D1.font = font;
    _id_4908CA330BDC48D1.fontscale = fontscale;
    _id_4908CA330BDC48D1.x = 0;
    _id_4908CA330BDC48D1.y = 0;
    _id_4908CA330BDC48D1.width = 0;
    _id_4908CA330BDC48D1.height = int( level.fontheight * fontscale );
    _id_4908CA330BDC48D1.xoffset = 0;
    _id_4908CA330BDC48D1.yoffset = 0;
    _id_4908CA330BDC48D1.children = [];
    _id_4908CA330BDC48D1 setparent( level.uiparent );
    return _id_4908CA330BDC48D1;
}

createservertimer( font, fontscale )
{
    _id_4908CA330BDC48D1 = newhudelem();
    _id_4908CA330BDC48D1.elemtype = "timer";
    _id_4908CA330BDC48D1.font = font;
    _id_4908CA330BDC48D1.fontscale = fontscale;
    _id_4908CA330BDC48D1.x = 0;
    _id_4908CA330BDC48D1.y = 0;
    _id_4908CA330BDC48D1.width = 0;
    _id_4908CA330BDC48D1.height = int( level.fontheight * fontscale );
    _id_4908CA330BDC48D1.xoffset = 0;
    _id_4908CA330BDC48D1.yoffset = 0;
    _id_4908CA330BDC48D1.children = [];
    _id_4908CA330BDC48D1 setparent( level.uiparent );
    return _id_4908CA330BDC48D1;
}

createicon( shader, width, height )
{
    _id_5B6A2597D526BD27 = newhudelem();
    return createicon_hudelem( _id_5B6A2597D526BD27, shader, width, height );
}

createclienticon( shader, width, height )
{
    _id_5B6A2597D526BD27 = newclienthudelem( self );
    return createicon_hudelem( _id_5B6A2597D526BD27, shader, width, height );
}

createicon_hudelem( _id_5B6A2597D526BD27, shader, width, height )
{
    _id_5B6A2597D526BD27.elemtype = "icon";
    _id_5B6A2597D526BD27.x = 0;
    _id_5B6A2597D526BD27.y = 0;
    _id_5B6A2597D526BD27.width = width;
    _id_5B6A2597D526BD27.height = height;
    _id_5B6A2597D526BD27.xoffset = 0;
    _id_5B6A2597D526BD27.yoffset = 0;
    _id_5B6A2597D526BD27.children = [];
    _id_5B6A2597D526BD27 setparent( level.uiparent );

    if ( isdefined( shader ) )
        _id_5B6A2597D526BD27 setshader( shader, width, height );

    return _id_5B6A2597D526BD27;
}

createbar( shader, _id_DAD8EF17D0E384A3, width, height, flashfrac )
{
    if ( !isdefined( shader ) )
        shader = "white";

    if ( !isdefined( _id_DAD8EF17D0E384A3 ) )
        _id_DAD8EF17D0E384A3 = "black";

    if ( !isdefined( width ) )
        width = 100;

    if ( !isdefined( height ) )
        height = 9;

    barelem = newhudelem();
    barelem.x = 2;
    barelem.y = 2;
    barelem.frac = 0.25;
    barelem.shader = shader;
    barelem.sort = -1;
    barelem setshader( shader, width - 2, height - 2 );

    if ( isdefined( flashfrac ) )
    {
        barelem.flashfrac = flashfrac;
        barelem thread flashthread();
    }

    _id_B27D6AD98ACD05BA = newhudelem();
    _id_B27D6AD98ACD05BA.elemtype = "bar";
    _id_B27D6AD98ACD05BA.x = 0;
    _id_B27D6AD98ACD05BA.y = 0;
    _id_B27D6AD98ACD05BA.width = width;
    _id_B27D6AD98ACD05BA.height = height;
    _id_B27D6AD98ACD05BA.xoffset = 0;
    _id_B27D6AD98ACD05BA.yoffset = 0;
    _id_B27D6AD98ACD05BA.bar = barelem;
    _id_B27D6AD98ACD05BA.children = [];
    _id_B27D6AD98ACD05BA.padding = 2;
    _id_B27D6AD98ACD05BA.sort = -2;
    _id_B27D6AD98ACD05BA.alpha = 0.5;
    _id_B27D6AD98ACD05BA setparent( level.uiparent );
    _id_B27D6AD98ACD05BA setshader( _id_DAD8EF17D0E384A3, width, height );
    return _id_B27D6AD98ACD05BA;
}

createclientprogressbar( player, _id_827F335C2225D1EA, shader, _id_DAD8EF17D0E384A3, width, height, xpadding, ypadding )
{
    player = scripts\engine\utility::ter_op( isdefined( player ), player, level.player );
    _id_827F335C2225D1EA = scripts\engine\utility::ter_op( isdefined( _id_827F335C2225D1EA ), _id_827F335C2225D1EA, 90 );
    shader = scripts\engine\utility::ter_op( isdefined( shader ), shader, "white" );
    _id_DAD8EF17D0E384A3 = scripts\engine\utility::ter_op( isdefined( _id_DAD8EF17D0E384A3 ), _id_DAD8EF17D0E384A3, "black" );
    width = scripts\engine\utility::ter_op( isdefined( width ), width, 100 );
    height = scripts\engine\utility::ter_op( isdefined( height ), height, 9 );
    xpadding = scripts\engine\utility::ter_op( isdefined( xpadding ), xpadding, 2 );
    ypadding = scripts\engine\utility::ter_op( isdefined( ypadding ), ypadding, 2 );
    bar = player createclientbar( shader, _id_DAD8EF17D0E384A3, width, height, undefined, xpadding, ypadding );
    bar setpoint( "CENTER", undefined, 0, _id_827F335C2225D1EA );
    return bar;
}

createclientbar( shader, _id_DAD8EF17D0E384A3, width, height, flashfrac, xpadding, ypadding )
{
    if ( !isdefined( xpadding ) )
        xpadding = 2;

    if ( !isdefined( ypadding ) )
        ypadding = 2;

    barelem = newclienthudelem( self );
    barelem.x = 0 - xpadding;
    barelem.y = 0 - ypadding;
    barelem.frac = 0.25;
    barelem.shader = shader;
    barelem.sort = -1;
    barelem setshader( shader, width - xpadding * 2, height - ypadding * 2 );

    if ( isdefined( flashfrac ) )
    {
        barelem.flashfrac = flashfrac;
        barelem thread flashthread();
    }

    _id_B27D6AD98ACD05BA = newclienthudelem( self );
    _id_B27D6AD98ACD05BA.elemtype = "bar";
    _id_B27D6AD98ACD05BA.x = 0;
    _id_B27D6AD98ACD05BA.y = 0;
    _id_B27D6AD98ACD05BA.width = width;
    _id_B27D6AD98ACD05BA.height = height;
    _id_B27D6AD98ACD05BA.xoffset = -1 * xpadding;
    _id_B27D6AD98ACD05BA.yoffset = 0;
    _id_B27D6AD98ACD05BA.bar = barelem;
    _id_B27D6AD98ACD05BA.children = [];
    _id_B27D6AD98ACD05BA.xpadding = xpadding;
    _id_B27D6AD98ACD05BA.ypadding = ypadding;
    _id_B27D6AD98ACD05BA.sort = -2;
    _id_B27D6AD98ACD05BA.alpha = 0.5;
    _id_B27D6AD98ACD05BA setparent( level.uiparent );
    _id_B27D6AD98ACD05BA setshader( _id_DAD8EF17D0E384A3, width, height );
    return _id_B27D6AD98ACD05BA;
}

setflashfrac( flashfrac )
{
    self.bar.flashfrac = flashfrac;
}

fade_over_time( _id_6B214C71049955E7, fade_time )
{
    if ( isdefined( fade_time ) && fade_time > 0 )
        self fadeovertime( fade_time );

    self.alpha = _id_6B214C71049955E7;

    if ( isdefined( fade_time ) && fade_time > 0 )
        wait( fade_time );
}

flashthread()
{
    self endon( "death" );
    self.alpha = 1;

    for (;;)
    {
        if ( self.frac >= self.flashfrac )
        {
            self fadeovertime( 0.3 );
            self.alpha = 0.2;
            wait 0.35;
            self fadeovertime( 0.3 );
            self.alpha = 1;
            wait 0.7;
            continue;
        }

        self.alpha = 1;
        wait 0.05;
    }
}

destroyelem()
{
    if ( isdefined( self.children ) && self.children.size )
    {
        _id_3D3334E0AD5D51F4 = [];

        for ( index = 0; index < self.children.size; index++ )
            _id_3D3334E0AD5D51F4[index] = self.children[index];

        for ( index = 0; index < _id_3D3334E0AD5D51F4.size; index++ )
            _id_3D3334E0AD5D51F4[index] setparent( getparent() );
    }

    if ( isdefined( self.elemtype ) && self.elemtype == "bar" )
        self.bar destroy();

    self destroy();
}

seticonshader( shader )
{
    self setshader( shader, self.width, self.height );
}

setwidth( width )
{
    self.width = width;
}

setheight( height )
{
    self.height = height;
}

setsize( width, height )
{
    self.width = width;
    self.height = height;
}

updatechildren( movetime )
{
    for ( index = 0; index < self.children.size; index++ )
    {
        child = self.children[index];
        child setpoint( child.point, child.relativepoint, child.xoffset, child.yoffset, movetime );
    }
}

stance_carry_icon_enable( _id_E3108E412AFB3811 )
{
    if ( isdefined( _id_E3108E412AFB3811 ) && _id_E3108E412AFB3811 == 0 )
    {
        stance_carry_icon_disable();
        return;
    }

    if ( isdefined( level.stance_carry ) )
        level.stance_carry destroy();

    setsaveddvar( "dvar_4E8225C28298A6AD", "0" );
    level.stance_carry = newhudelem();
    level.stance_carry.x = -75;

    if ( _func_AFE76380661D5C7F() )
        level.stance_carry.y = -20;
    else
        level.stance_carry.y = -10;

    level.stance_carry setshader( "stance_carry", 64, 64 );
    level.stance_carry.alignx = "right";
    level.stance_carry.aligny = "bottom";
    level.stance_carry.horzalign = "right";
    level.stance_carry.vertalign = "bottom";
    level.stance_carry.foreground = 1;
    level.stance_carry.alpha = 0;
    level.stance_carry fadeovertime( 0.5 );
    level.stance_carry.alpha = 1;
}

stance_carry_icon_disable()
{
    if ( isdefined( level.stance_carry ) )
    {
        level.stance_carry fadeovertime( 0.5 );
        level.stance_carry.alpha = 0;
        level.stance_carry destroy();
    }

    setsaveddvar( "dvar_4E8225C28298A6AD", "1" );
}

create_mantle_hint()
{
    hud = createfontstring( "default", 1.0 );
    hud setpoint( "CENTER", undefined, 0, 80 );
    hud settext( &"PLATFORM/MANTLE" );
    return hud;
}

get_countdown_hud( x, y, player, _id_4742040A99DA27D2 )
{
    if ( !isdefined( _id_4742040A99DA27D2 ) )
        _id_4742040A99DA27D2 = 0;

    _id_81954D580B24281B = undefined;

    if ( !_func_AFE76380661D5C7F() )
        _id_81954D580B24281B = -250;
    else if ( !isdefined( x ) )
        _id_81954D580B24281B = -225;
    else
        _id_81954D580B24281B = x;

    if ( _id_4742040A99DA27D2 )
        _id_81954D580B24281B = x;

    if ( !isdefined( y ) )
        _id_E4F34F3A01C6FFF2 = 100;
    else
        _id_E4F34F3A01C6FFF2 = y;

    if ( isdefined( player ) )
        _id_94480E1669B7FF0D = newclienthudelem( player );
    else
        _id_94480E1669B7FF0D = newhudelem();

    _id_94480E1669B7FF0D.alignx = "left";
    _id_94480E1669B7FF0D.aligny = "middle";
    _id_94480E1669B7FF0D.horzalign = "right";
    _id_94480E1669B7FF0D.vertalign = "top";
    _id_94480E1669B7FF0D.x = _id_81954D580B24281B;
    _id_94480E1669B7FF0D.y = _id_E4F34F3A01C6FFF2;
    _id_94480E1669B7FF0D.fontscale = 1.6;
    _id_94480E1669B7FF0D.color = ( 0.8, 1, 0.8 );
    _id_94480E1669B7FF0D.font = "objective";
    _id_94480E1669B7FF0D.glowcolor = ( 0.3, 0.6, 0.3 );
    _id_94480E1669B7FF0D.glowalpha = 1;
    _id_94480E1669B7FF0D.foreground = 1;
    _id_94480E1669B7FF0D.hidewheninmenu = 1;
    _id_94480E1669B7FF0D.hidewhendead = 1;
    return _id_94480E1669B7FF0D;
}

get_download_state_hud( x, y, player, _id_4742040A99DA27D2 )
{
    if ( !isdefined( _id_4742040A99DA27D2 ) )
        _id_4742040A99DA27D2 = 0;

    _id_81954D580B24281B = undefined;

    if ( !_func_AFE76380661D5C7F() )
        _id_81954D580B24281B = -250;
    else if ( !isdefined( x ) )
        _id_81954D580B24281B = -170;
    else
        _id_81954D580B24281B = x;

    if ( _id_4742040A99DA27D2 )
        _id_81954D580B24281B = x;

    if ( !isdefined( y ) )
        _id_E4F34F3A01C6FFF2 = 100;
    else
        _id_E4F34F3A01C6FFF2 = y;

    if ( isdefined( player ) )
        _id_94480E1669B7FF0D = newclienthudelem( player );
    else
        _id_94480E1669B7FF0D = newhudelem();

    _id_94480E1669B7FF0D.alignx = "right";
    _id_94480E1669B7FF0D.aligny = "middle";
    _id_94480E1669B7FF0D.horzalign = "right";
    _id_94480E1669B7FF0D.vertalign = "top";
    _id_94480E1669B7FF0D.x = _id_81954D580B24281B;
    _id_94480E1669B7FF0D.y = _id_E4F34F3A01C6FFF2;
    _id_94480E1669B7FF0D.fontscale = 1.6;
    _id_94480E1669B7FF0D.color = ( 0.8, 1, 0.8 );
    _id_94480E1669B7FF0D.font = "objective";
    _id_94480E1669B7FF0D.glowcolor = ( 0.3, 0.6, 0.3 );
    _id_94480E1669B7FF0D.glowalpha = 1;
    _id_94480E1669B7FF0D.foreground = 1;
    _id_94480E1669B7FF0D.hidewheninmenu = 1;
    _id_94480E1669B7FF0D.hidewhendead = 1;
    return _id_94480E1669B7FF0D;
}

create_client_overlay( _id_2193FDE10BF4B43A, _id_2A423FC276D9F388, player )
{
    if ( isdefined( player ) )
        overlay = newclienthudelem( player );
    else
        overlay = newhudelem();

    overlay.x = 0;
    overlay.y = 0;
    overlay setshader( _id_2193FDE10BF4B43A, 640, 480 );
    overlay.alignx = "left";
    overlay.aligny = "top";
    overlay.sort = 1;
    overlay.horzalign = "fullscreen";
    overlay.vertalign = "fullscreen";
    overlay.alpha = _id_2A423FC276D9F388;
    overlay.foreground = 1;
    return overlay;
}

create_client_overlay_custom_size( _id_2193FDE10BF4B43A, _id_2A423FC276D9F388, x, y, scale )
{
    player = scripts\engine\sp\utility::get_player_from_self();
    overlay = newclienthudelem( player );

    if ( !isdefined( scale ) )
        scale = 1;

    if ( !isdefined( x ) )
        x = 0;

    if ( !isdefined( y ) )
        y = 0;

    overlay.x = x;
    overlay.y = y;
    overlay setshader( _id_2193FDE10BF4B43A, int( 640 * scale ), int( 480 * scale ) );
    overlay.alignx = "center";
    overlay.aligny = "middle";
    overlay.sort = 1;
    overlay.horzalign = "center";
    overlay.vertalign = "middle";
    overlay.alpha = _id_2A423FC276D9F388;
    overlay.foreground = 1;
    return overlay;
}

create_client_overlay_fullscreen( shader, _id_2A423FC276D9F388, x, y, scale )
{
    player = scripts\engine\sp\utility::get_player_from_self();
    overlay = newclienthudelem( player );

    if ( !isdefined( scale ) )
        scale = 1;

    overlay.x = x;
    overlay.y = y;
    overlay setshader( shader, int( 640 * scale ), int( 480 * scale ) );
    overlay.alignx = "center";
    overlay.aligny = "middle";
    overlay.sort = 1;
    overlay.horzalign = "fullscreen";
    overlay.vertalign = "fullscreen";
    overlay.alpha = _id_2A423FC276D9F388;
    overlay.foreground = 1;
    return overlay;
}

fade_in( time, shader )
{
    if ( level.missionfailed )
        return;

    if ( !isdefined( time ) )
        time = 0.3;

    overlay = get_optional_overlay( shader );

    if ( time > 0 )
        overlay fadeovertime( time );

    overlay.alpha = 0;

    if ( time > 0 )
        wait( time );
}

get_optional_overlay( shader )
{
    if ( !isdefined( shader ) )
        shader = "black";

    return get_overlay( shader );
}

fade_out( time, shader )
{
    if ( !isdefined( time ) )
        time = 0.3;

    overlay = get_optional_overlay( shader );

    if ( time > 0 )
        overlay fadeovertime( time );

    overlay.alpha = 1;

    if ( time > 0 )
        wait( time );
}

start_overlay( shader )
{
    overlay = get_optional_overlay( shader );
    overlay.alpha = 1;
}

get_overlay( shader )
{
    if ( isplayer( self ) )
        guy = self;
    else
        guy = level.player;

    if ( !isdefined( guy.overlay ) )
        guy.overlay = [];

    if ( !isdefined( guy.overlay[shader] ) )
        guy.overlay[shader] = create_client_overlay( shader, 0, guy );

    guy.overlay[shader].sort = 0;
    guy.overlay[shader].foreground = 1;
    return guy.overlay[shader];
}

screen_detailed_alpha()
{
    fade_in_time = 0.2;
    self.alpha = 0.7;
    self fadeovertime( fade_in_time );
    self.alpha = 0;
    wait( fade_in_time );
    self destroy();
}
