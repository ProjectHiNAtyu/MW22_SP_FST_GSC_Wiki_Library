// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main( defaultnvgvision )
{
    level.player nvg_init( defaultnvgvision );
    level.player thread player_nvg_watcher();
}

nvg_init( defaultnvgvision )
{
    if ( !isdefined( defaultnvgvision ) )
        defaultnvgvision = "nvg_base_sp";

    self.nvg = spawnstruct();
    self.nvg.lightmeter = 1;
    self.nvg.flir = 0;
    self.nvg._id_F4B7250E0B02733A = 1;
    self.nvg.defaultnvgvision = defaultnvgvision;
    self.nvg.light_model = spawn( "script_model", ( 0, 0, 0 ) );
    self.nvg.light_model setmodel( "tag_origin" );
    self.nvg.light_model _meth_A783F8C0603B0844( self, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ), 1 );
    scripts\engine\utility::ent_flag_init( "nightvision_disabled" );
    level._effect["player_nvg_light"] = loadfx( "vfx/iw8/core/nvg/vfx_nvg_light_player.vfx" );
    level._effect["player_nvg_light_ext"] = loadfx( "vfx/iw8/core/nvg/vfx_nvg_light_player_ext.vfx" );
    _func_B9DF0ABA29891072();
    setomnvar( "ui_nvg_equipped", 1 );
    thread track_player_light_meter();
    scripts\engine\sp\utility::add_hint_string( "nvg_on", &"SCRIPT/NIGHTVISION_USE", ::is_nvg_on );
    scripts\engine\sp\utility::add_hint_string( "nvg_off", &"SCRIPT/NIGHTVISION_STOP_USE", ::is_nvg_off );
    scripts\engine\utility::delaythread( 0.1, ::update_visionsetnight_for_nvg_type );
}

_id_674BFE1E4A640C10( _id_B96D126FC701024B )
{
    self.nvg._id_F4B7250E0B02733A = _id_B96D126FC701024B;
    setomnvar( "ui_nvg_equipped", _id_B96D126FC701024B );

    if ( _id_B96D126FC701024B )
        self setactionslot( 2, "nightvision" );
    else
        self setactionslot( 2, "" );
}

player_nvg_watcher()
{
    self endon( "death" );
    self setactionslot( 2, "nightvision" );

    for (;;)
    {
        scripts\engine\utility::waittill_either( "night_vision_on", "night_vision_off" );

        if ( !self.nvg._id_F4B7250E0B02733A )
            continue;

        if ( self isnightvisionon() )
        {
            if ( isdefined( self.nvg.on_func ) )
                self thread [[ self.nvg.on_func ]]();

            player_nvg_on();
        }
        else
        {
            if ( isdefined( self.nvg.off_func ) )
                self thread [[ self.nvg.off_func ]]();

            player_nvg_off();
        }

        scripts\engine\utility::array_thread( getaiarray(), scripts\sp\nvg\nvg_ai::ai_nvg_player_update );
        scripts\sp\player::updatedeathsdoorvisionset();
        _func_E0392F9961A02820( self, gettime() + 1750 );
    }
}

is_nvg_on()
{
    return level.player isnightvisionon();
}

is_nvg_off()
{
    return !level.player isnightvisionon();
}

nvg_on_hint( timeout, delay, _id_D136CF00DA26018C, _id_F63C23B8EC55B127 )
{
    scripts\engine\sp\utility::display_hint_forced( "nvg_on", timeout, delay, _id_D136CF00DA26018C, _id_F63C23B8EC55B127 );
}

nvg_off_hint( timeout, delay, _id_D136CF00DA26018C, _id_F63C23B8EC55B127 )
{
    scripts\engine\sp\utility::display_hint_forced( "nvg_off", timeout, delay, _id_D136CF00DA26018C, _id_F63C23B8EC55B127 );
}

disable_nvg_proc( _id_92E4DA462F736A2F, immediate )
{
    if ( !isdefined( self.nvg ) )
        return;

    self notify( "kill_nvg_after_gesture" );
    self endon( "kill_nvg_after_gesture" );

    if ( _id_92E4DA462F736A2F )
    {
        if ( self isnightvisionon() )
        {
            if ( immediate )
                self _meth_ B2B409A0D3A40E3();
            else
            {
                self nightvisionviewoff();
                wait 0.05;
            }
        }

        self setactionslot( 2, "" );
    }
    else
        self setactionslot( 2, "nightvision" );

    if ( !_id_92E4DA462F736A2F )
        return;

    self endon( "kill_nvg_after_gesture" );

    if ( self isgestureplaying( "ges_equip_nvg_puton" ) )
        self stopgestureviewmodel( "ges_equip_nvg_puton", 0.1 );

    timer = 1.5;

    for (;;)
    {
        if ( self isnightvisionon() )
            break;
        else
        {
            wait 0.05;
            timer = timer - 0.05;
        }

        if ( timer <= 0 )
            return;
    }

    if ( immediate )
    {
        if ( immediate )
            self _meth_ B2B409A0D3A40E3();
        else
            self nightvisionviewoff();
    }
}

set_nvg_flir_proc( enable )
{
    if ( !isdefined( enable ) )
        enable = 1;

    if ( self.nvg.flir == enable )
        return;

    self.nvg.flir = enable;
    self.nvg.origviewmodel = self _meth_9FA568CC66605BB3();

    if ( enable )
        anim.flirfootprinteffects = 1;
    else
        anim.flirfootprinteffects = 0;

    if ( !isdefined( anim.flirfootprints ) )
        anim.flirfootprints = [];

    setomnvar( "ui_nvg_flir", enable );
    update_visionsetnight_for_nvg_type();
}

set_nvg_light_proc( light )
{
    self.nvg.lightoverride = light;
    update_nvg_light();
}

set_nvg_vision_proc( _id_66C1FA3CB97E511D )
{
    self.nvg.visionoverride = _id_66C1FA3CB97E511D;
    update_visionsetnight_for_nvg_type();
}

remove_exotic_nvg_types()
{
    if ( self.nvg.flir )
        scripts\engine\sp\utility::set_nvg_flir( 0 );
}

update_nvg_light()
{
    if ( isdefined( self.nvg.lightoverride ) )
        light = self.nvg.lightoverride;
    else
        light = "player_nvg_light";

    if ( level.player isnightvisionon() )
    {
        if ( isdefined( self.nvg.currentlight ) && self.nvg.currentlight != light )
        {
            killfxontag( level._effect[self.nvg.currentlight], self.nvg.light_model, "tag_origin" );
            self.nvg.currentlight = undefined;
        }

        if ( !isdefined( self.nvg.currentlight ) )
        {
            playfxontag( level._effect[light], self.nvg.light_model, "tag_origin" );
            self.nvg.currentlight = light;
        }
    }
    else if ( isdefined( self.nvg.currentlight ) )
    {
        stopfxontag( level._effect[self.nvg.currentlight], self.nvg.light_model, "tag_origin" );
        self.nvg.currentlight = undefined;
    }
}

update_visionsetnight_for_nvg_type()
{
    if ( isdefined( self.nvg.visionoverride ) )
        _id_66C1FA3CB97E511D = self.nvg.visionoverride;
    else if ( self.nvg.flir )
        _id_66C1FA3CB97E511D = "nvg_flir";
    else
        _id_66C1FA3CB97E511D = self.nvg.defaultnvgvision;

    visionsetnight( _id_66C1FA3CB97E511D, 0.1 );
}

get_nvg_bar_level()
{
    if ( self.nvg.power > 0.9 )
        return 6;
    else if ( self.nvg.power > 0.72 )
        return 5;
    else if ( self.nvg.power > 0.54 )
        return 4;
    else if ( self.nvg.power > 0.36 )
        return 3;
    else if ( self.nvg.power > 0.18 )
        return 2;
    else if ( self.nvg.power > 0 )
        return 1;
    else
        return 0;
}

player_nvg_on()
{
    earthquake( 0.1, 0.35, level.player.origin, 1000 );
    level.player playrumbleonentity( "damage_heavy" );
    nvg_mb_on( 0.05 );
    nvg_flir_on();

    if ( isdefined( self.nvg._id_E29AC796D39377EA ) )
        self [[ self.nvg._id_E29AC796D39377EA ]]();
    else
        update_nvg_light();

    level.player enablephysicaldepthoffieldscripting( 1 );
    level.player setphysicaldepthoffield( 22.0, 1800.0 );
    self setdepthoffield( 1, 200, 5000, 10000, 10, 0 );
    self setviewmodeldepthoffield( 4, 45, 6 );
}

player_nvg_off()
{
    earthquake( 0.07, 0.25, level.player.origin, 1000 );
    level.player playrumbleonentity( "damage_light" );
    killfxontag( level._effect["player_nvg_light"], self.nvg.light_model, "tag_origin" );
    nvg_mb_off();
    nvg_flir_off();

    if ( isdefined( self.nvg._id_81ADA7AC82BF15F6 ) )
        self [[ self.nvg._id_81ADA7AC82BF15F6 ]]();
    else
        update_nvg_light();

    self setdepthoffield( 1, 200, 5000, 10000, 3.9, 0 );
    self setviewmodeldepthoffield( 4, 30, 0 );
    level.player disablephysicaldepthoffieldscripting();
}

nvg_mb_on( time )
{
    if ( self.nvg.flir )
        return;

    if ( isdefined( self.nvg.no_rblur ) && self.nvg.no_rblur )
        return;

    thread scripts\engine\sp\utility::lerp_saveddvar( "dvar_83BBE73116F488D6", 10.5, time );
    thread scripts\engine\sp\utility::lerp_saveddvar( "dvar_ED28298C207316AE", 0.025, time );
    thread scripts\engine\sp\utility::lerp_saveddvar( "dvar_979B5474BE3B9B47", 0.8, time );
    thread scripts\engine\sp\utility::lerp_saveddvar( "dvar_960EF00238357BBC", 0.006, time );
    level.player _meth_4C6D577FC0C1F5FB( "compact portable", 0.0, 0.0, 0.9, 0.93 );
}

nvg_mb_off()
{
    time = 0.1;
    thread scripts\engine\sp\utility::lerp_saveddvar( "dvar_83BBE73116F488D6", 0, time );
    thread scripts\engine\sp\utility::lerp_saveddvar( "dvar_ED28298C207316AE", 0, time );
    thread scripts\engine\sp\utility::lerp_saveddvar( "dvar_979B5474BE3B9B47", 0, time );
    thread scripts\engine\sp\utility::lerp_saveddvar( "dvar_960EF00238357BBC", 0, time );
    level.player _meth_4C6D577FC0C1F5FB( "none" );
}

nvg_flir_on()
{
    if ( !self.nvg.flir )
        return;

    if ( !isdefined( self.nvg.ogsunintensity ) )
    {
        _id_21C2A73FEFCDF586 = getmapsuncolorandintensity();
        self.nvg.ogsunintensity = _id_21C2A73FEFCDF586[3];
    }

    scripts\sp\nvg\nvg_ai::do_flir_footsteps();
    self setviewmodel( "viewmodel_base_viewhands_iw7_flir" );

    foreach ( _id_A5745AF8A4B6CD28 in anim.flirfootprints )
        _id_A5745AF8A4B6CD28 _id_55B3046625FB79B6::play_flir_footstep_fx();

    lerp_sunintensity( self.nvg.ogsunintensity, 0, 0.2 );
}

nvg_flir_off()
{
    if ( !self.nvg.flir )
        return;

    self setviewmodel( self.nvg.origviewmodel );
    scripts\sp\nvg\nvg_ai::dont_do_flir_footsteps();

    foreach ( _id_A5745AF8A4B6CD28 in anim.flirfootprints )
        _id_A5745AF8A4B6CD28 _id_55B3046625FB79B6::kill_flir_footstep_fx();

    lerp_sunintensity( 0, self.nvg.ogsunintensity, 0.2 );
}

lerp_sunintensity( current, target, time )
{
    thread lerp_sunintensity_internal( current, target, time );
}

lerp_sunintensity_internal( curr, intensity, time )
{
    level notify( "lerp_sunintensity" );
    level endon( "lerp_sunintensity" );
    range = intensity - curr;
    interval = 0.05;
    count = int( time / interval );

    if ( count > 0 )
    {
        for ( _id_3777ECE6A73EADA5 = range / count; count; count-- )
        {
            curr = curr + _id_3777ECE6A73EADA5;
            setsuncolorandintensity( curr );
            wait( interval );
        }
    }

    setsuncolorandintensity( intensity );
}

track_player_light_meter()
{
    self endon( "stop_tracking_dynolights" );

    if ( !scripts\engine\utility::ent_flag_exist( "in_the_dark" ) )
        scripts\engine\utility::ent_flag_init( "in_the_dark" );

    self.nvg.prevlightmeter = 1;
    self.nvg.lightmeter = 1;
    _id_67E5C1D8A5710F95 = 1;
    _id_D21883E6746EBA1C = 0;
    thread light_meter_hud();
    _id_F22120FBFFB96467 = 0;
    start = ( 0, 0, 0 );
    _id_CBBFB154C6F4FFFB = 0.45;

    for (;;)
    {
        _id_CBBFB154C6F4FFFB = 0.1;
        _id_67E5C1D8A5710F95 = self getplayerlightlevel();
        lightmeter_lerp_lightmeter( _id_67E5C1D8A5710F95, _id_CBBFB154C6F4FFFB );

        if ( self.nvg.lightmeter < 0.5 && !_id_D21883E6746EBA1C )
        {
            scripts\engine\utility::ent_flag_set( "in_the_dark" );
            _id_D21883E6746EBA1C = 1;
            continue;
        }

        if ( self.nvg.lightmeter >= 0.5 && _id_D21883E6746EBA1C )
        {
            scripts\engine\utility::ent_flag_clear( "in_the_dark" );
            _id_D21883E6746EBA1C = 0;
        }
    }
}

light_meter_hud()
{
    noise = spawnstruct();
    noise.mag = 0.02;
    noise.period_min = 0.05;
    noise.period_max = 0.15;
    noise.data = [];
    noise.data["old"] = 0;
    noise.data["period"] = 0;
    noise.data["target"] = 0;
    noise.data["val"] = 0;
    noise.data["time"] = 0;
    _id_E7C9C132EE82AD4F = 0;

    for (;;)
    {
        self.nvg waittill( "update_nvg_hud" );
        noise needle_noise();
        _id_F665C97965854720 = self.nvg.lightmeter;
        _id_F665C97965854720 = clamp( _id_F665C97965854720, noise.mag, 1 - noise.mag );
        _id_F665C97965854720 = _id_F665C97965854720 + noise.data["val"];
        setomnvar( "ui_nvg_light_meter_needle", _id_F665C97965854720 );

        if ( _id_F665C97965854720 >= 0.9 && is_nvg_on() && !_id_E7C9C132EE82AD4F )
        {
            self playsound( "item_nightvision_lightmeter_warning" );
            _id_E7C9C132EE82AD4F = 1;
            continue;
        }

        if ( _id_F665C97965854720 < 0.9 && is_nvg_on() && _id_E7C9C132EE82AD4F )
            _id_E7C9C132EE82AD4F = 0;
    }
}

needle_noise()
{
    if ( self.data["time"] >= self.data["period"] )
    {
        self.data["period"] = randomfloatrange( self.period_min, self.period_max );
        self.data["old"] = self.data["target"];
        self.data["time"] = 0;
        self.data["target"] = randomfloatrange( self.mag * -1, self.mag );
    }

    _id_2E95586C3F064A36 = scripts\engine\math::normalize_value( 0, self.data["period"], self.data["time"] );
    _id_2E95586C3F064A36 = scripts\engine\math::_id_889BEF0AD1600791( _id_2E95586C3F064A36 );
    self.data["val"] = self.data["old"] * ( 1 - _id_2E95586C3F064A36 ) + self.data["target"] * _id_2E95586C3F064A36;
    self.data["time"] = self.data["time"] + 0.05;
}

lightmeter_lerp_lightmeter( value, time )
{
    curr = self.nvg.lightmeter;
    range = value - curr;
    interval = 0.05;
    count = int( time / interval );

    for ( _id_3777ECE6A73EADA5 = range / count; count; count-- )
    {
        self.nvg.prevlightmeter = self.nvg.lightmeter;
        self.nvg.lightmeter = self.nvg.lightmeter + _id_3777ECE6A73EADA5;
        self.nvg notify( "update_nvg_hud" );
        wait( interval );
    }

    self.nvg.prevlightmeter = self.nvg.lightmeter;
    self.nvg.lightmeter = value;
}

_id_63CD796E95F7DBFC()
{
    scripts\engine\sp\utility::display_hint( "nvg_on" );

    while ( !level.player isnightvisionon() )
        waitframe();
}
