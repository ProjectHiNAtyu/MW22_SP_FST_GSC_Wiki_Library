// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

stayahead_thread( _id_90F9773EF140E661 )
{
    self endon( "death" );
    self endon( "stop_stayahead" );

    if ( !isdefined( self.stayahead ) )
        self.stayahead = spawnstruct();

    if ( !scripts\engine\utility::ent_flag_exist( "stayahead_pause" ) )
        scripts\engine\utility::ent_flag_init( "stayahead_pause" );

    thread stayahead_watch_end();
    childthread pause_flag_monitor();
    dir = anglestoforward( self.angles );
    _id_B0E4B46B0830AAD8 = anglestoforward( self.angles );
    _id_23C058E984C5A869 = "";
    _id_182038C1B0416C06 = "";
    goalpos = get_goalpos();
    _id_3EDC51C8CA0A8407 = [ self.origin ];
    _id_7CCAEA7A1FC7DE36 = undefined;
    _id_C4A56500E4186FA6 = undefined;
    self.stayahead.lookat_last = gettime();
    self.stayahead.exit_speed = undefined;
    self.stayahead.exit_finish_time = undefined;
    self.stayahead.exit_last_finish_time = undefined;
    self.stayahead.wait_node_radius = 400;
    self.stayahead.dir = anglestoforward( self.angles );

    if ( !isdefined( self.stayahead.p1 ) )
        self.stayahead.p1 = [];

    for (;;)
    {
        if ( isdefined( self.stayahead.team ) && !isdefined( self.stayahead.team_thinking ) )
            thread stayahead_team_think();

        _id_A1E0771FA720725C = goalpos;
        goalpos = get_goalpos();

        if ( _id_A1E0771FA720725C[0] != goalpos[0] )
            _id_3EDC51C8CA0A8407 = _id_A1E0771FA720725C;

        if ( isdefined( self.stayahead.turbo ) )
        {
            _id_CC3AF13504EB08F9 = self.stayahead.turbo;
            _id_014BE1B3C18AF36E = self.stayahead.turbo;
            _id_8067D7E2D70301EB = self.stayahead.turbo;
            _id_DF3E2BB9678CA1E0 = self.stayahead.turbo;
            _id_B22F6A0AA883E403 = 0;
            _id_0B37C9F7963FD038 = 0;
            _id_A48079D9B2E6A9D1 = 0;
            _id_A6C9CA7FC80223DE = 0;
        }
        else
        {
            _id_CC3AF13504EB08F9 = self.stayahead.p1["speed"];
            _id_014BE1B3C18AF36E = self.stayahead.p2["speed"];
            _id_8067D7E2D70301EB = self.stayahead.p3["speed"];
            _id_DF3E2BB9678CA1E0 = self.stayahead.p4["speed"];
            _id_B22F6A0AA883E403 = scripts\engine\utility::ter_op( isdefined( self.stayahead.p1["variance"] ), self.stayahead.p1["variance"], 0.2 );
            _id_0B37C9F7963FD038 = scripts\engine\utility::ter_op( isdefined( self.stayahead.p2["variance"] ), self.stayahead.p2["variance"], 0.2 );
            _id_A48079D9B2E6A9D1 = scripts\engine\utility::ter_op( isdefined( self.stayahead.p3["variance"] ), self.stayahead.p3["variance"], 0.2 );
            _id_A6C9CA7FC80223DE = scripts\engine\utility::ter_op( isdefined( self.stayahead.p4["variance"] ), self.stayahead.p4["variance"], 0.2 );
        }

        _id_EB24CD241C8955BA = self.stayahead.p1["distance"];
        _id_93C57F222846FE43 = self.stayahead.p2["distance"];
        _id_008B8721B280E290 = self.stayahead.p3["distance"];
        _id_0E326D62CB2E2289 = self.stayahead.p4["distance"];
        _id_67B98CAC565E94AC = undefined;
        _id_A123517D91404D87 = undefined;
        _id_758352390ECD5826 = undefined;

        if ( isdefined( self.stayahead.pw ) )
        {
            _id_67B98CAC565E94AC = self.stayahead.pw["distance"];
            _id_A123517D91404D87 = self.stayahead.pw["speed"];
            _id_758352390ECD5826 = scripts\engine\utility::ter_op( isdefined( self.stayahead.pw["buffer"] ), self.stayahead.pw["buffer"], 1.5 );
            _id_758352390ECD5826 = _id_758352390ECD5826 * 20;
        }

        _id_5C8527B79F02EC6C = scripts\engine\utility::flat_origin( self getposonpath( 32 ) );
        _id_FBBD821088EEBC76 = scripts\engine\utility::flat_origin( goalpos[0] );
        _id_C64B9437370844D1 = scripts\engine\utility::flat_origin( _id_3EDC51C8CA0A8407[0] );
        _id_CC168975165B8F05 = scripts\engine\utility::flat_origin( self.origin );

        if ( self isinscriptedstate() )
        {
            if ( isdefined( self.stayahead.exit_speed ) && !isdefined( self.stayahead.exit_finish_time ) )
            {
                self.stayahead.exit_finish_time = gettime();
                self.stayahead.exit_last_finish_time = self.stayahead.exit_finish_time;
            }
            else
            {
                self.stayahead.exit_speed = undefined;
                self.stayahead.exit_finish_time = undefined;
            }

            print2d3d_debug( self.origin + ( 0, 0, 30 ), "dir: SCRIPTED ANIM: " + gettime(), ( 0.9, 0.9, 0.9 ), 0.9, 0.3, 1, 0, "right", 4 );
        }
        else if ( self.arriving || distancesquared( _id_FBBD821088EEBC76, _id_CC168975165B8F05 ) < 1024 )
        {
            if ( isdefined( self.stayahead.exit_speed ) && !isdefined( self.stayahead.exit_finish_time ) )
            {
                self.stayahead.exit_finish_time = gettime();
                self.stayahead.exit_last_finish_time = self.stayahead.exit_finish_time;
            }
            else
            {
                self.stayahead.exit_speed = undefined;
                self.stayahead.exit_finish_time = undefined;
            }

            if ( isdefined( self.goalnode ) && istrue( self.goalnode.script_useangles ) )
            {
                print2d3d_debug( self.origin + ( 0, 0, 30 ), "dir: arriving/close USEANGLES OVERRIDE vector: " + gettime(), ( 0.9, 0.9, 0.9 ), 0.9, 0.3, 1, 0, "right", 4 );
                dir = lerp_plane_vector( dir, anglestoforward( self.goalnode.angles ) );
            }
            else if ( isdefined( goalpos[1] ) )
            {
                print2d3d_debug( self.origin + ( 0, 0, 30 ), "dir: arriving/close GOAL vector: " + gettime(), ( 0.9, 0.9, 0.9 ), 0.9, 0.3, 1, 0, "right", 4 );
                _id_FBBD821088EEBC76 = scripts\engine\utility::flat_origin( goalpos[1] );
                dir = lerp_plane_vector( dir, vectornormalize( _id_FBBD821088EEBC76 - _id_CC168975165B8F05 ) );
            }
            else
            {
                print2d3d_debug( self.origin + ( 0, 0, 30 ), "dir: arriving/close FWD vector: " + gettime(), ( 0.9, 0.9, 0.9 ), 0.9, 0.3, 1, 0, "right", 4 );
                dir = lerp_plane_vector( dir, anglestoforward( self.angles ) );
            }
        }
        else if ( istrue( self._blackboard._id_9FBDCE5FA10F8964 ) || distancesquared( _id_C64B9437370844D1, _id_CC168975165B8F05 ) < 1024 )
        {
            if ( istrue( self._blackboard._id_9FBDCE5FA10F8964 ) && !isdefined( self.stayahead.exit_speed ) )
                self.stayahead.exit_speed = -1;

            if ( isdefined( self.using_goto_node ) )
            {
                print2d3d_debug( self.origin + ( 0, 0, 30 ), "dir: exiting GOTO vector: " + gettime(), ( 0.9, 0.9, 0.9 ), 0.9, 0.3, 1, 0, "right", 4 );
                _id_FBBD821088EEBC76 = scripts\engine\utility::flat_origin( goalpos[0] );
                dir = lerp_plane_vector( dir, vectornormalize( _id_FBBD821088EEBC76 - _id_C64B9437370844D1 ) );
            }
            else if ( isdefined( goalpos[1] ) )
            {
                print2d3d_debug( self.origin + ( 0, 0, 30 ), "dir: exiting GOAL vector: " + gettime(), ( 0.9, 0.9, 0.9 ), 0.9, 0.3, 1, 0, "right", 4 );
                _id_FBBD821088EEBC76 = scripts\engine\utility::flat_origin( goalpos[1] );
                dir = lerp_plane_vector( dir, vectornormalize( _id_FBBD821088EEBC76 - _id_C64B9437370844D1 ) );
            }
            else
            {
                print2d3d_debug( self.origin + ( 0, 0, 30 ), "dir: exiting FWD vector: " + gettime(), ( 0.9, 0.9, 0.9 ), 0.9, 0.3, 1, 0, "right", 4 );
                dir = lerp_plane_vector( dir, anglestoforward( self.angles ) );
            }
        }
        else
        {
            if ( isdefined( self.stayahead.exit_speed ) && !isdefined( self.stayahead.exit_finish_time ) )
            {
                self.stayahead.exit_finish_time = gettime();
                self.stayahead.exit_last_finish_time = self.stayahead.exit_finish_time;
            }
            else
            {
                self.exit_speed = undefined;
                self.exit_finish_time = undefined;
            }

            print2d3d_debug( self.origin + ( 0, 0, 30 ), "dir: stopped or moving to new goal: " + gettime(), ( 0.9, 0.9, 0.9 ), 0.9, 0.3, 1, 0, "right", 4 );

            if ( distance( _id_5C8527B79F02EC6C, _id_CC168975165B8F05 ) < 1 )
            {
                print_debug( "STAYAHEAD: segments are colliding! " + gettime() );
                dir = lerp_plane_vector( dir, vectornormalize( _id_FBBD821088EEBC76 - _id_5C8527B79F02EC6C ) );
            }
            else
                dir = lerp_plane_vector( dir, vectornormalize( _id_5C8527B79F02EC6C - _id_CC168975165B8F05 ) );
        }

        _id_ED1068F77FBA5D23 = self.origin + dir * _id_93C57F222846FE43;
        _id_4FE18AD975C2297A = self.origin + dir * _id_008B8721B280E290;
        _id_C4AB0D7FDE3AC589 = self.origin + dir * _id_0E326D62CB2E2289;
        _id_3400CDBFF0926F4E = distance( _id_ED1068F77FBA5D23, _id_4FE18AD975C2297A ) * 0.25;
        _id_B8B793C95B3A1C2D = distance( _id_ED1068F77FBA5D23, _id_4FE18AD975C2297A ) * 0.6;
        _id_9150F3B2E4BD88FD = distance( _id_ED1068F77FBA5D23, _id_4FE18AD975C2297A ) * 0.25;
        _id_80104DF680745372 = distance( _id_4FE18AD975C2297A, _id_C4AB0D7FDE3AC589 ) * 0.6;
        _id_43D709D52BAF035C = distance( _id_4FE18AD975C2297A, _id_C4AB0D7FDE3AC589 ) * 0.25;
        _id_BFCF85B13BBB58C7 = distance( _id_4FE18AD975C2297A, _id_C4AB0D7FDE3AC589 ) * 0.6;
        _id_EFD33CFB668C5FE2 = vectordot( vectornormalize( _id_90F9773EF140E661.origin - _id_ED1068F77FBA5D23 ), dir );
        _id_EFD33DFB668C6215 = vectordot( vectornormalize( _id_90F9773EF140E661.origin - _id_4FE18AD975C2297A ), dir );
        _id_EFD336FB668C52B0 = vectordot( vectornormalize( _id_90F9773EF140E661.origin - _id_C4AB0D7FDE3AC589 ), dir );
        _id_0736670AE619274C = undefined;
        _id_EFD33BFB668C5DAF = undefined;
        _id_E70B4C0F0605AA9F = undefined;
        _id_F3C6D14C9C4B01A8 = undefined;

        if ( isdefined( _id_EB24CD241C8955BA ) )
        {
            _id_0736670AE619274C = self.origin + dir * _id_EB24CD241C8955BA;
            _id_EFD33BFB668C5DAF = vectordot( vectornormalize( _id_90F9773EF140E661.origin - _id_0736670AE619274C ), dir );
            _id_E70B4C0F0605AA9F = distance( _id_0736670AE619274C, _id_ED1068F77FBA5D23 ) * 0.25;
            _id_F3C6D14C9C4B01A8 = distance( _id_0736670AE619274C, _id_ED1068F77FBA5D23 ) * 0.6;
            _id_3400CDBFF0926F4E = distance( _id_0736670AE619274C, _id_ED1068F77FBA5D23 ) * 0.25;
        }

        _id_7CC6511024B99736 = undefined;
        _id_EFD379FB668CE609 = undefined;

        if ( isdefined( _id_67B98CAC565E94AC ) )
        {
            _id_7CC6511024B99736 = self.origin + dir * _id_67B98CAC565E94AC;
            _id_EFD379FB668CE609 = vectordot( vectornormalize( _id_90F9773EF140E661.origin - _id_7CC6511024B99736 ), dir );
        }

        if ( scripts\engine\utility::ent_flag( "stayahead_pause" ) )
        {
            waitframe();
            continue;
        }

        if ( isdefined( _id_EFD379FB668CE609 ) )
        {
            if ( !isdefined( self.stayahead.pw_behind_buffer ) )
                self.stayahead.pw_behind_buffer = 0;

            if ( !isdefined( self.stayahead.pw_infront_buffer ) )
                self.stayahead.pw_infront_buffer = 0;

            if ( _id_EFD379FB668CE609 < 0 )
            {
                self.stayahead.pw_infront_buffer = 0;

                if ( !isdefined( self.stayahead.goalnode ) )
                {
                    if ( isdefined( self.using_goto_node ) )
                        self.stayahead.goalnode = self.patharray[self.patharray.size - 1];
                    else if ( isdefined( self.goalnode ) )
                        self.stayahead.goalnode = self.goalnode;
                    else
                        print3d_debug( self.origin, "pw no goalnode, goalpos?", ( 1, 0, 0 ), 1, 0.5, 200, 1 );
                }

                if ( isdefined( self.stayahead.goalnode ) && !isdefined( self.stayahead.goalnode_pw ) && self.stayahead.pw_behind_buffer > _id_758352390ECD5826 )
                {
                    _id_6EC7AD100BA120AA = get_wait_node();

                    if ( isdefined( _id_6EC7AD100BA120AA ) && distance( self.origin, _id_6EC7AD100BA120AA.origin ) <= self.stayahead.wait_node_radius && distance( self.origin, _id_6EC7AD100BA120AA.origin ) > 32 && stayahead_goal_is_far_enough( _id_6EC7AD100BA120AA ) )
                    {
                        self.stayahead.goalnode_pw = _id_6EC7AD100BA120AA;
                        line_debug( self.origin, self.origin + dir * -100, ( 1, 1, 1 ), 1, 0, 500 );
                        line_debug( self.origin, _id_6EC7AD100BA120AA.origin, ( 1, 0, 0 ), 1, 0, 500 );
                        print3d_debug( self.origin, "going to pW node: " + distance( self.origin, _id_6EC7AD100BA120AA.origin ) + " GoalRadius: " + self.goalradius, ( 1, 1, 0 ), 1, 0.3, 500, 1 );
                        childthread stayahead_wait_set_goal_or_path();
                        childthread stayahead_set_goalnode( _id_6EC7AD100BA120AA, 1 );
                    }
                    else if ( !isdefined( _id_6EC7AD100BA120AA ) )
                        print2d3d_debug( self.origin + ( 0, 0, 16 ), "pW fail no wait nodes", ( 1, 0, 0 ), 1, 0.3, 1, 0, "right", 6 );
                    else if ( distance( self.origin, _id_6EC7AD100BA120AA.origin ) >= self.stayahead.wait_node_radius )
                    {
                        line_debug( self.origin, _id_6EC7AD100BA120AA.origin, ( 1, 0, 0 ), 1, 0, 1 );
                        print2d3d_debug( self.origin + ( 0, 0, 16 ), "pW fail wait node too far: " + distance( self.origin, _id_6EC7AD100BA120AA.origin ), ( 1, 0, 0 ), 1, 0.3, 1, 0, "right", 6 );
                    }
                    else if ( distance( self.origin, _id_6EC7AD100BA120AA.origin ) < 32 )
                    {
                        line_debug( self.origin, _id_6EC7AD100BA120AA.origin, ( 1, 0, 0 ), 1, 0, 1 );
                        print2d3d_debug( self.origin + ( 0, 0, 16 ), "pW fail wait node too close: " + distance( self.origin, _id_6EC7AD100BA120AA.origin ), ( 1, 0, 0 ), 1, 0.3, 1, 0, "right", 6 );
                    }
                }
                else if ( !isdefined( self.stayahead.goalnode ) )
                    print2d3d_debug( self.origin + ( 0, 0, 16 ), "pW fail no goalnode or goto", ( 1, 0, 0 ), 1, 0.3, 1, 0, "right", 6 );
                else if ( isdefined( self.stayahead.goalnode_pw ) )
                    print2d3d_debug( self.origin + ( 0, 0, 16 ), "pW fail already have wait node", ( 1, 0, 0 ), 1, 0.3, 1, 0, "right", 6 );
                else if ( self.stayahead.pw_behind_buffer < _id_758352390ECD5826 )
                    print2d3d_debug( self.origin + ( 0, 0, 16 ), "pW fail buffer too small", ( 1, 0, 0 ), 1, 0.3, 1, 0, "right", 6 );
                else
                    print2d3d_debug( self.origin + ( 0, 0, 16 ), "pW fail uh oh!", ( 1, 0, 0 ), 1, 0.3, 1, 0, "right", 6 );

                self.stayahead.pw_behind_buffer = self.stayahead.pw_behind_buffer + 1;

                if ( self.stayahead.pw_behind_buffer > _id_758352390ECD5826 )
                    print2d3d_debug( self.origin + ( 0, 0, 12 ), "pW behind buffer: " + self.stayahead.pw_behind_buffer, ( 1, 0, 0 ), 1, 0.3, 1, 0, "right", 7 );
                else
                    print2d3d_debug( self.origin + ( 0, 0, 12 ), "pW behind buffer: " + self.stayahead.pw_behind_buffer, ( 0, 0, 1 ), 1, 0.3, 1, 0, "right", 7 );
            }
            else if ( isdefined( self.stayahead.goalnode ) && isdefined( self.stayahead.goalnode_pw ) )
            {
                self.stayahead.pw_behind_buffer = 0;

                if ( _id_EFD336FB668C52B0 > 0 && self.stayahead.pw_infront_buffer > _id_758352390ECD5826 * 0.4 || _id_EFD33DFB668C6215 > 0 )
                {
                    print3d_debug( self.origin, "going to OG goal: " + distance( self.origin, self.stayahead.goalnode.origin ), ( 0, 1, 0 ), 1, 0.3, 500, 1 );
                    self.stayahead.goalnode_pw = undefined;
                    childthread stayahead_set_goalnode( self.stayahead.goalnode, 0 );
                    self.stayahead.goalnode = undefined;
                }

                self.stayahead.pw_infront_buffer = self.stayahead.pw_infront_buffer + 1;
                print2d3d_debug( self.origin + ( 0, 0, 12 ), "pW infront buffer: " + self.stayahead.pw_infront_buffer, ( 0, 1, 0 ), 1, 0.3, 1, 0, "right", 7 );
            }
            else
            {
                self notify( "stop_stayahead_wait_func" );
                self.stayahead.pw_behind_buffer = 0;
                print2d3d_debug( self.origin + ( 0, 0, 12 ), "pW failing???", ( 1, 0, 0 ), 1, 0.3, 1, 0, "right", 5 );
            }
        }

        if ( isdefined( _id_EFD33BFB668C5DAF ) && _id_EFD33BFB668C5DAF > 0 )
        {
            if ( _id_23C058E984C5A869 != "p1Front" )
            {
                _id_182038C1B0416C06 = _id_23C058E984C5A869;
                _id_23C058E984C5A869 = "p1Front";
            }

            stayahead_set_speed( 1, _id_90F9773EF140E661, _id_EB24CD241C8955BA + _id_E70B4C0F0605AA9F, _id_EB24CD241C8955BA, dir, _id_CC3AF13504EB08F9, _id_CC3AF13504EB08F9 + _id_CC3AF13504EB08F9 * _id_B22F6A0AA883E403, 1 );
        }
        else if ( _id_EFD33CFB668C5FE2 > 0 )
        {
            if ( _id_23C058E984C5A869 != "p2Front" )
            {
                _id_182038C1B0416C06 = _id_23C058E984C5A869;
                _id_23C058E984C5A869 = "p2Front";
            }

            if ( _id_182038C1B0416C06 == "p3Front" || _id_182038C1B0416C06 == "" )
                stayahead_set_speed( 2, _id_90F9773EF140E661, _id_93C57F222846FE43 + _id_3400CDBFF0926F4E, _id_93C57F222846FE43, dir, _id_014BE1B3C18AF36E, _id_014BE1B3C18AF36E + _id_014BE1B3C18AF36E * _id_0B37C9F7963FD038 );
            else if ( isdefined( _id_EFD33BFB668C5DAF ) )
                stayahead_set_speed( 1, _id_90F9773EF140E661, _id_EB24CD241C8955BA, _id_EB24CD241C8955BA - _id_F3C6D14C9C4B01A8, dir, _id_CC3AF13504EB08F9 + _id_CC3AF13504EB08F9 * _id_B22F6A0AA883E403 * -1, _id_CC3AF13504EB08F9, 1 );
            else
                stayahead_set_speed( 2, _id_90F9773EF140E661, _id_93C57F222846FE43 + _id_3400CDBFF0926F4E, _id_93C57F222846FE43, dir, _id_014BE1B3C18AF36E, _id_014BE1B3C18AF36E + _id_014BE1B3C18AF36E * _id_0B37C9F7963FD038 );
        }
        else if ( _id_EFD33DFB668C6215 > 0 )
        {
            if ( _id_23C058E984C5A869 != "p3Front" )
            {
                _id_182038C1B0416C06 = _id_23C058E984C5A869;
                _id_23C058E984C5A869 = "p3Front";
                stayahead_lookat( _id_90F9773EF140E661 );
            }

            if ( _id_182038C1B0416C06 == "p4Front" || _id_182038C1B0416C06 == "" )
                stayahead_set_speed( 3, _id_90F9773EF140E661, _id_008B8721B280E290 + _id_9150F3B2E4BD88FD, _id_008B8721B280E290, dir, _id_8067D7E2D70301EB, _id_8067D7E2D70301EB + _id_8067D7E2D70301EB * _id_A48079D9B2E6A9D1 );
            else
                stayahead_set_speed( 2, _id_90F9773EF140E661, _id_93C57F222846FE43, _id_93C57F222846FE43 - _id_B8B793C95B3A1C2D, dir, _id_014BE1B3C18AF36E + _id_014BE1B3C18AF36E * _id_0B37C9F7963FD038 * -1, _id_014BE1B3C18AF36E );
        }
        else if ( _id_EFD336FB668C52B0 > 0 )
        {
            if ( _id_23C058E984C5A869 != "p4Front" )
            {
                _id_182038C1B0416C06 = _id_23C058E984C5A869;
                _id_23C058E984C5A869 = "p4Front";
                stayahead_lookat( _id_90F9773EF140E661 );
            }

            if ( _id_182038C1B0416C06 == "p4Back" || _id_182038C1B0416C06 == "" )
                stayahead_set_speed( 4, _id_90F9773EF140E661, _id_0E326D62CB2E2289 + _id_43D709D52BAF035C, _id_0E326D62CB2E2289, dir, _id_DF3E2BB9678CA1E0, _id_DF3E2BB9678CA1E0 + _id_DF3E2BB9678CA1E0 * _id_A6C9CA7FC80223DE );
            else
                stayahead_set_speed( 3, _id_90F9773EF140E661, _id_008B8721B280E290, _id_008B8721B280E290 - _id_80104DF680745372, dir, _id_8067D7E2D70301EB + _id_8067D7E2D70301EB * _id_A48079D9B2E6A9D1 * -1, _id_8067D7E2D70301EB );
        }
        else if ( _id_EFD336FB668C52B0 < 0 )
        {
            if ( isdefined( _id_EFD379FB668CE609 ) && _id_EFD379FB668CE609 < 0 )
            {

            }

            if ( _id_23C058E984C5A869 != "p4Back" )
            {
                _id_182038C1B0416C06 = _id_23C058E984C5A869;
                _id_23C058E984C5A869 = "p4Back";
                stayahead_lookat( _id_90F9773EF140E661 );
            }

            stayahead_set_speed( "W", _id_90F9773EF140E661, _id_0E326D62CB2E2289, _id_0E326D62CB2E2289 - _id_BFCF85B13BBB58C7, dir, _id_DF3E2BB9678CA1E0 + _id_DF3E2BB9678CA1E0 * _id_A6C9CA7FC80223DE * -1, _id_DF3E2BB9678CA1E0 );
        }
        else
            print2d3d_debug( self.origin + ( 0, 0, 30 ), "uh oh!", ( 0.9, 0, 0 ), 0.9, 0.3, 250, 0, "right", 4 );

        waitframe();
    }
}

stayahead_lookat( _id_90F9773EF140E661 )
{
    if ( !istrue( self.stayahead.lookat_allowed ) )
        return;

    if ( istrue( self.lookingatent ) )
    {
        print3d_debug( self.origin + ( 0, 0, 50 ), "look skipped, already looking", ( 0.9, 0, 0 ), 0.9, 0.3, 250 );
        return;
    }

    if ( gettime() - self.stayahead.lookat_last < 3000 )
    {
        print3d_debug( self.origin + ( 0, 0, 50 ), "look skipped, too soon", ( 0.9, 0, 0 ), 0.9, 0.3, 250 );
        return;
    }

    self notify( "stop_stayahead_lookat" );
    self endon( "death" );
    self endon( "stop_stayahead_lookat" );
    _id_E12B2113162EE01E = 0.5;
    self.stayahead.lookat_last = gettime();
    childthread stayahead_lookat_debug( _id_E12B2113162EE01E );
    scripts\common\utility::lookatentity( _id_90F9773EF140E661 );
    scripts\engine\utility::delaythread( _id_E12B2113162EE01E, scripts\common\utility::lookatentity );
    wait( _id_E12B2113162EE01E * 0.6 );
}

stayahead_lookat_far( _id_90F9773EF140E661 )
{
    self endon( "death" );
    _id_E69C9FC8BC540C6E = randomfloatrange( 6000, 11000 );

    if ( gettime() > self.stayahead.lookat_last + _id_E69C9FC8BC540C6E )
        stayahead_lookat( _id_90F9773EF140E661 );
}

stayahead_lookat_debug( _id_E12B2113162EE01E )
{

}

stayahead_set_speed( plane, _id_90F9773EF140E661, _id_F945F5534FFEDF42, _id_1124265EE011BB02, dir, minspeed, maxspeed, catchup )
{
    print2d3d_debug( self.origin, "Plane: " + plane, ( 0.9, 0.9, 0.9 ), 0.9, 0.3, 1, 0, "right", 1 );
    _id_B9CE53DAD043E9E4 = self.origin + dir * _id_F945F5534FFEDF42;
    _id_1C3718B75DEF5EA4 = self.origin + dir * _id_1124265EE011BB02;

    if ( distance( _id_B9CE53DAD043E9E4, _id_1C3718B75DEF5EA4 ) < 1 )
        print_debug( "segments are colliding, not setting speed! " + gettime() );
    else
    {
        _id_1925D24D0AE333E6 = pointonsegmentnearesttopoint( _id_B9CE53DAD043E9E4, _id_1C3718B75DEF5EA4, _id_90F9773EF140E661.origin );
        dist = distance( _id_B9CE53DAD043E9E4, _id_1925D24D0AE333E6 );
        totaldist = _id_F945F5534FFEDF42 - _id_1124265EE011BB02;
        scale = 1 - scripts\engine\math::lerp_fraction( 0, abs( totaldist ), dist );
        _id_7F826B90C59B211F = 250;

        if ( isdefined( self.stayahead.turbo ) || istrue( catchup ) )
            _id_7F826B90C59B211F = 300;

        if ( !isdefined( self.stayahead.exit_last_finish_time ) || gettime() > self.stayahead.exit_last_finish_time + 1000 )
        {
            speed = scripts\engine\math::lerp( minspeed, maxspeed, scale );
            speed = clamp( speed, 23, _id_7F826B90C59B211F );
            _id_C63CAEFABA806BCC = self aigetdesiredspeed();
            _id_4573A8725DD3748E = speed - _id_C63CAEFABA806BCC;

            if ( istrue( catchup ) || _id_4573A8725DD3748E > 50 )
            {
                if ( !istrue( catchup ) && !isdefined( self.stayahead.last_speed_set_time ) )
                {
                    speed = _id_C63CAEFABA806BCC + clamp( _id_4573A8725DD3748E, -2, 2 );
                    self.stayahead.last_speed_set_time = undefined;
                    print3d_debug( self.origin + ( 0, 0, 32 ), "StayAhead STARTUP! plane: " + plane + " diff: " + _id_4573A8725DD3748E + " curSpeed: " + _id_C63CAEFABA806BCC + " speed: " + speed, ( 1, 1, 1 ), 1, 0.1, 100, 1 );
                    print_console_debug( "StayAhead STARTUP! plane: " + plane + " diff: " + _id_4573A8725DD3748E + " curSpeed: " + _id_C63CAEFABA806BCC + " speed: " + speed );
                }
                else
                {
                    speed = _id_C63CAEFABA806BCC + clamp( _id_4573A8725DD3748E, -10, 10 );
                    self.stayahead.last_speed_set_time = gettime();
                    print3d_debug( self.origin + ( 0, 0, 32 ), "StayAhead CATCHUP! plane: " + plane + " diff: " + _id_4573A8725DD3748E + " curSpeed: " + _id_C63CAEFABA806BCC + " speed: " + speed, ( 1, 1, 1 ), 1, 0.1, 100, 1 );
                    print_console_debug( "StayAhead CATCHUP! plane: " + plane + " diff: " + _id_4573A8725DD3748E + " curSpeed: " + _id_C63CAEFABA806BCC + " speed: " + speed );
                }
            }
            else if ( isdefined( self.stayahead_accel ) )
            {
                speed = _id_C63CAEFABA806BCC + clamp( _id_4573A8725DD3748E, -1 * self.stayahead_accel, self.stayahead_accel );
                self.stayahead.last_speed_set_time = gettime();
            }
            else
            {
                speed = _id_C63CAEFABA806BCC + clamp( _id_4573A8725DD3748E, -3.5, 3.5 );
                self.stayahead.last_speed_set_time = gettime();
            }

            scripts\engine\utility::set_movement_speed( speed );

            if ( isdefined( self.stayahead.exit_speed ) && self.stayahead.exit_speed == -1 )
                self.stayahead.exit_speed = speed;

            line_debug( _id_90F9773EF140E661.origin, _id_1925D24D0AE333E6 );
            print2d3d_debug( self.origin + ( 0, 0, 8 ), "speed: " + speed, ( 0.9, 0.9, 0.9 ), 0.9, 0.3, 1, 0, "right", 2 );
            print3d_debug( _id_1925D24D0AE333E6 + ( 0, 0, 8 ), speed, ( 0.9, 0.9, 0.9 ), 0.9, 0.3 );
            return;
        }

        print3d_debug( self.origin + ( 0, 0, 8 ), "IsExiting, not setting speed: " + gettime(), ( 0.9, 0, 0 ), 0.9, 0.3, 1 );
    }
}

get_best_goto_node( path, _id_1CA496D6095A0025 )
{
    _id_EFCDA7721F8E993D = [];
    _id_56120302DFEE9EED = 0;
    _id_F7405C867EE4E0C8 = undefined;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_1CA496D6095A0025; _id_AC0E594AC96AA3A8++ )
    {
        if ( !isdefined( path[_id_AC0E594AC96AA3A8] ) )
            break;

        _id_EFCDA7721F8E993D[_id_AC0E594AC96AA3A8] = vectordot( vectornormalize( path[_id_AC0E594AC96AA3A8].origin - self.origin ), self.stayahead.dir );

        if ( _id_EFCDA7721F8E993D[_id_AC0E594AC96AA3A8] < 0 )
        {
            _id_1CA496D6095A0025 = _id_1CA496D6095A0025 + 1;
            continue;
        }

        if ( _id_EFCDA7721F8E993D[_id_AC0E594AC96AA3A8] > 0.5 )
        {
            print3d_debug( path[_id_AC0E594AC96AA3A8].origin, "GOTO GOOD ENOUGH re-start: " + _id_EFCDA7721F8E993D[_id_AC0E594AC96AA3A8], ( 0, 1, 0 ), 1, 0.3, 200, 1 );
            _id_F7405C867EE4E0C8 = 1;
            _id_56120302DFEE9EED = _id_AC0E594AC96AA3A8;
            break;
        }

        if ( _id_EFCDA7721F8E993D[_id_AC0E594AC96AA3A8] > _id_EFCDA7721F8E993D[_id_56120302DFEE9EED] )
            _id_56120302DFEE9EED = _id_AC0E594AC96AA3A8;
    }

    return path[_id_56120302DFEE9EED];
}

get_goto_nodes( nodes )
{
    if ( isdefined( self.patharray ) )
        nodes = scripts\engine\utility::array_combine( nodes, self.patharray );

    return nodes;
}

get_goalpos()
{
    goalpos = [];

    if ( isdefined( self.goalnode ) )
    {
        goalpos[0] = self.goalnode.origin;

        if ( isdefined( self.goalnode.target ) )
        {
            _id_AE9271000F62CBA8 = self.goalnode get_node_or_struct();

            if ( isdefined( _id_AE9271000F62CBA8 ) )
                goalpos[1] = _id_AE9271000F62CBA8.origin;
        }
        else if ( isdefined( self.stayahead.goalnode ) && isdefined( self.stayahead.goalnode_pw ) && self.goalnode == self.stayahead.goalnode_pw )
            goalpos[1] = self.stayahead.goalnode.origin;
    }
    else
        goalpos[0] = self.scriptgoalpos;

    return goalpos;
}

get_node_or_struct()
{
    _id_AE9271000F62CBA8 = getnode( self.target, "targetname" );

    if ( isdefined( _id_AE9271000F62CBA8 ) )
        return _id_AE9271000F62CBA8;
    else
        _id_AE9271000F62CBA8 = scripts\engine\utility::getstruct( self.target, "targetname" );

    return _id_AE9271000F62CBA8;
}

get_wait_node( dir )
{
    nodes = [];

    if ( isdefined( self.stayahead.wait_nodes ) )
    {
        nodes = self.stayahead.wait_nodes;
        nodes = sortbydistance( nodes, self.origin );
    }
    else if ( !isdefined( self.stayahead.use_goto_wait ) )
        nodes = getnodesinradiussorted( self.origin, self.stayahead.wait_node_radius, 0, 64, "cover" );

    if ( isdefined( self.using_goto_node ) && istrue( self.stayahead.use_goto_wait ) )
    {
        nodes = scripts\engine\utility::array_combine( nodes, get_goto_nodes( nodes ) );
        nodes = sortbydistance( nodes, self.origin );
    }

    _id_1DF8C3F02E584E8F = 0.75;

    foreach ( _id_AC0E594AC96AA3A8, node in nodes )
    {
        _id_C259D082033E76A4 = vectordot( vectornormalize( node.origin - self.origin ), self.stayahead.dir );
        _id_87014A763DBEE513 = scripts\engine\utility::ter_op( isdefined( self.goalnode ) && node == self.goalnode, 0, 1 );
        _id_8F05AF16D81FA32D = scripts\engine\utility::ter_op( isdefined( self.goalpos ) && node.origin == self.goalpos, 0, 1 );

        if ( !isdefined( node.stayahead_wait_used ) && !isdefined( node.script_dontremove ) && _id_C259D082033E76A4 >= _id_1DF8C3F02E584E8F && _id_87014A763DBEE513 && _id_8F05AF16D81FA32D )
        {
            if ( isdefined( self.script_forcecolor ) && isdefined( node.script_color_allies ) && issubstr( node.script_color_allies, self.script_forcecolor ) )
            {
                line_debug( self.origin, node.origin, ( 0, 1, 0 ), 1, 0, 1 );
                node thread node_display_debug( node.origin, node.script_color_allies, ( 0, 1, 0 ), 1, 0.2, 1000, 1 );
            }
            else if ( isdefined( self.script_forcecolor ) && !isdefined( self.stayahead.use_goto_wait ) )
            {
                if ( !isdefined( node.script_color_allies ) )
                {
                    if ( isdefined( self.stayahead.wait_nodes ) && !isdefined( scripts\engine\utility::array_find( self.stayahead.wait_nodes, node ) ) )
                    {
                        node thread node_display_debug( node.origin, "invalid: no color, removing", ( 1, 0, 1 ), 1, 0.2, 1000, 1 );
                        nodes = scripts\engine\utility::array_remove( nodes, node );
                    }
                }
                else if ( !issubstr( node.script_color_allies, self.script_forcecolor ) )
                {
                    node thread node_display_debug( node.origin, "invalid: wrong color, removing", ( 1, 0, 1 ), 1, 0.2, 1000, 1 );
                    nodes = scripts\engine\utility::array_remove( nodes, node );
                }
            }

            continue;
        }

        if ( !isdefined( node.script_dontremove ) )
        {
            if ( isdefined( node.stayahead_wait_used ) )
                node thread node_display_debug( node.origin, "invalid: used", ( 1, 0, 1 ), 1, 0.2, 1000, 1 );
            else if ( _id_C259D082033E76A4 < 0 )
                node thread node_display_debug( node.origin, "removed: behind", ( 0, 0, 1 ), 1, 0.2, 1000, 1 );
            else if ( _id_C259D082033E76A4 < _id_1DF8C3F02E584E8F )
                node thread node_display_debug( node.origin, "removed: bad angle: " + _id_C259D082033E76A4, ( 1, 0, 0 ), 1, 0.2, 1000, 1 );
            else if ( !_id_87014A763DBEE513 )
                node thread node_display_debug( node.origin, "removed: IS goalNode", ( 1, 0, 0 ), 1, 0.2, 1000, 1 );
            else if ( !_id_8F05AF16D81FA32D )
                node thread node_display_debug( node.origin, "removed: IS goalPos", ( 1, 0, 0 ), 1, 0.2, 1000, 1 );
            else
                node thread node_display_debug( node.origin, "invalid???", ( 1, 0, 1 ), 1, 0.2, 1000, 1 );

            nodes = scripts\engine\utility::array_remove( nodes, node );
        }
    }

    if ( getdvarint( "dvar_3D6AEC1E7192648B" ) )
    {
        foreach ( _id_AC0E594AC96AA3A8, node in nodes )
            node thread node_display_debug( node.origin, "wait node: " + _id_AC0E594AC96AA3A8, ( 0, 1, 0 ), 1, 0.2, 1000, 1 );
    }

    _id_6EC7AD100BA120AA = undefined;

    if ( nodes.size > 0 )
    {
        _id_7FC5F3A6E1F2F335 = undefined;

        foreach ( node in nodes )
        {
            if ( isnode( node ) )
            {
                _id_7FC5F3A6E1F2F335 = node;
                break;
            }
        }

        _id_6EC7AD100BA120AA = nodes[0];

        if ( isstruct( nodes[0] ) && isdefined( _id_7FC5F3A6E1F2F335 ) )
        {
            if ( distance( nodes[0].origin, _id_7FC5F3A6E1F2F335.origin ) < 128 )
            {
                if ( node_within_fov( _id_7FC5F3A6E1F2F335 ) )
                {
                    print3d_debug( _id_7FC5F3A6E1F2F335.origin, "NEAREST NODE", ( 1, 1, 1 ), 1, 0.3, 1, 1 );
                    print3d_debug( self.origin, "STAYAHEAD: using closest 'node' bc it's not a struct!", ( 1, 1, 1 ), 1, 0.3, 100, 1 );
                    _id_6EC7AD100BA120AA = _id_7FC5F3A6E1F2F335;
                }
            }
        }
    }
    else
        print3d_debug( self.origin, "STAYAHEAD: NO BEST WAIT NODE, RETURNING UNDEFINED!", ( 1, 0, 0 ), 1, 0.3, 100, 1 );

    return _id_6EC7AD100BA120AA;
}

pause_flag_monitor()
{
    for (;;)
    {
        scripts\engine\utility::ent_flag_wait( "stayahead_pause" );
        print3d_debug( self.origin + ( 0, 0, 16 ), "PAUSING stayahead", ( 0, 1, 1 ), 1, 0.3, 1000, 1 );
        scripts\engine\utility::ent_flag_waitopen( "stayahead_pause" );
        print3d_debug( self.origin + ( 0, 0, 16 ), "UNpausing stayahead", ( 0, 1, 1 ), 1, 0.3, 1000, 1 );
        self.stayahead.pw_behind_buffer = 0;
    }
}

waitnode_trigger_think( node, trigger )
{
    thread delay_endon( 0.05, "goal_changed" );
    self waittill( "goal" );
    thread scripts\sp\utility::stayahead_pause( 1 );
    childthread waitnode_trigger_debug( node, trigger );
    childthread waitnode_trigger_delay_speed_clear();
    msg = trigger scripts\engine\utility::waittill_any_return( "trigger", "death" );
    thread scripts\sp\utility::stayahead_pause( 0 );
    childthread stayahead_set_goalnode( self.stayahead.goalnode, 0 );
}

waitnode_trigger_delay_speed_clear()
{
    waittillframeend;
    self.stayahead.last_speed_set_time = undefined;
}

waitnode_trigger_debug( node, trigger )
{
    trigger endon( "death" );
    trigger endon( "trigger" );
}

stayahead_watch_end()
{
    self endon( "death" );

    if ( !isdefined( self.stayahead ) )
        self.stayahead = spawnstruct();

    self.stayahead.active = 1;
    self waittill( "stop_stayahead" );

    if ( isdefined( self.stayahead ) )
    {
        if ( isdefined( self.stayahead.active ) )
            self.stayahead.active = undefined;

        if ( isdefined( self.stayahead.team_thinking ) )
            self.stayahead.team_thinking = undefined;
    }
}

stayahead_wait_func( node )
{
    self endon( "death" );
    self endon( "stop_stayahead" );
    self notify( "stop_stayahead_wait_func" );
    self endon( "stop_stayahead_wait_func" );
    thread delay_endon( 0.05, "goal_changed" );
    stayahead_at_waitnode( node );
    self [[ self.stayahead.wait_func ]]();
}

stayahead_wait_set_goal_or_path()
{
    if ( isdefined( self.using_goto_node ) )
    {
        self.stayahead.goto_patharray = self.patharray;
        self.stayahead.using_goto_node = 1;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 <= self.patharrayindex; _id_AC0E594AC96AA3A8++ )
        {
            if ( self.stayahead.goto_patharray.size > 1 )
            {
                print_console_debug( "Removing go_to_node num: " + _id_AC0E594AC96AA3A8 );
                self.stayahead.goto_patharray = scripts\engine\utility::array_remove_index( self.stayahead.goto_patharray, 0 );
            }
        }
    }
    else if ( isdefined( self.goalnode ) )
        self.stayahead.goalnode = self.goalnode;
}

stayahead_at_waitnode( node )
{
    thread delay_endon( 0.05, "goal_changed" );

    while ( distance2dsquared( self.origin, node.origin ) > 64 )
    {
        print3d_debug( self.origin, "distanceSQ to waitnode: " + distance2dsquared( self.origin, node.origin ), ( 1, 1, 1 ), 1, 0.3, 1, 1 );
        waitframe();
    }
}

stayahead_goal_is_far_enough( _id_6EC7AD100BA120AA )
{
    if ( node_within_fov( self.stayahead.goalnode ) )
    {
        if ( distance( self.origin, self.stayahead.goalnode.origin ) - distance( self.origin, _id_6EC7AD100BA120AA.origin ) < 128 )
        {
            print2d3d_debug( self.origin + ( 0, 0, 16 ), "pW fail goalnode too close: " + distance( self.origin, self.stayahead.goalnode.origin ) + " Waitnode: " + distance( self.origin, _id_6EC7AD100BA120AA.origin ), ( 1, 0, 0 ), 1, 0.3, 1, 0, "right", 5 );
            return 0;
        }
    }
    else
        print2d3d_debug( self.origin + ( 0, 0, 16 ), "pW fail goalnode not within FOV.", ( 0, 1, 0 ), 1, 0.3, 1, 0, "right", 5 );

    return 1;
}

node_within_fov( node )
{
    if ( isdefined( self.stayahead ) && isdefined( self.stayahead.dir ) )
        forward = self.stayahead.dir;
    else
        forward = anglestoforward( self.angles );

    dot = vectordot( forward, vectornormalize( node.origin - self.origin ) );

    if ( dot >= 0.9 )
        return 1;

    return 0;
}

delay_endon( delay, ender )
{
    wait( delay );
    self endon( ender );
}

stayahead_goto_can_use_wait( wait_nodes )
{
    if ( isdefined( self.using_goto_node ) )
    {
        if ( isdefined( self.stayahead.goto_nextnode ) && distance( self.origin, self.stayahead.goto_nextnode.origin ) > distance( self.origin, wait_nodes[0].origin ) )
            return 1;
        else
            return 0;
    }
    else
        return 1;
}

stayahead_set_goalnode( node, _id_9C5B0A5EEA5B3998 )
{
    if ( isdefined( self.stayahead.spawned_wait_node ) )
        despawncovernode( self.stayahead.spawned_wait_node );

    if ( !isdefined( node ) )
        return;

    if ( istrue( _id_9C5B0A5EEA5B3998 ) )
    {
        if ( isstruct( node ) )
        {
            angles = vectortoangles( self.stayahead.dir );
            node = spawncovernode( node.origin, angles, "Exposed", 1 );

            if ( !isdefined( node ) )
            {
                print3d_debug( self.origin + ( 0, 0, 8 ), "UNABLE TO SPAWN COVER NODE!", ( 1, 0, 0 ), 1, 0.3, 500, 1 );
                return;
            }

            self.stayahead.spawned_wait_node = node;
        }

        node.stayahead_wait_used = 1;
        self notify( "stayahead_going_to_wait_node" );
        self notify( "stop_going_to_node" );
        scripts\engine\sp\utility::set_goal_node( node );

        if ( isdefined( self.stayahead.goto_patharray ) && node == self.stayahead.goto_patharray[self.stayahead.goto_patharray.size - 1] )
            self.stayahead.goto_finished = 1;

        if ( isdefined( self.stayahead.wait_func ) )
            childthread stayahead_wait_func( node );

        linked_ents = node scripts\engine\utility::get_linked_ents();

        if ( linked_ents.size > 0 )
        {
            foreach ( ent in linked_ents )
            {
                if ( issubstr( ent.code_classname, "trigger" ) )
                    childthread waitnode_trigger_think( node, ent );
            }

            return;
        }
    }
    else if ( isdefined( self.stayahead.using_goto_node ) )
    {
        self notify( "stop_stayahead_wait_func" );
        self notify( "stayahead_leaving_wait_node" );

        if ( istrue( self.stayahead.goto_finished ) )
        {
            print3d_debug( self.origin + ( 0, 0, 8 ), "last node wait node; go_to_node() path done!", ( 0, 1, 0 ), 1, 0.3, 500, 1 );
            self.stayahead.goto_finished = undefined;
            self notify( "reached_path_end" );
        }
        else
        {
            print3d_debug( self.origin + ( 0, 0, 8 ), "going BACK to goto patharray", ( 0, 1, 0 ), 1, 0.3, 500, 1 );
            node = get_best_goto_node( self.stayahead.goto_patharray, 2 );
            thread scripts\sp\spawner::go_to_node( node );
            self.stayahead.using_goto_node = 1;
        }
    }
    else
    {
        self notify( "stop_stayahead_wait_func" );
        self notify( "stayahead_leaving_wait_node" );
        self notify( "stop_going_to_node" );
        scripts\engine\sp\utility::set_goal_node( node );
    }
}

stayahead_team_think()
{
    self.stayahead.team_thinking = 1;
    self endon( "death" );
    self endon( "stop_stayahead" );
    _id_BFF2A7822F594386 = 0.8;
    _id_CC3AF13504EB08F9 = self.stayahead.p1["speed"];
    _id_014BE1B3C18AF36E = self.stayahead.p2["speed"];
    _id_8067D7E2D70301EB = self.stayahead.p3["speed"];
    _id_DF3E2BB9678CA1E0 = self.stayahead.p4["speed"];
    _id_EB24CD241C8955BA = self.stayahead.p1["distance"];
    _id_93C57F222846FE43 = self.stayahead.p2["distance"];
    _id_008B8721B280E290 = self.stayahead.p3["distance"];
    _id_0E326D62CB2E2289 = self.stayahead.p4["distance"];
    childthread stayahead_team_debug();

    for (;;)
    {
        foreach ( _id_AC0E594AC96AA3A8, guy in self.stayahead.team )
        {
            if ( !isdefined( guy.stayahead.dynamic_frontdist ) )
                guy.stayahead.dynamic_frontdist = 200;

            if ( !isdefined( guy.stayahead.dynamic_middist ) )
                guy.stayahead.dynamic_middist = 125;

            if ( !isdefined( guy.stayahead.dynamic_backdist ) )
                guy.stayahead.dynamic_backdist = 50;

            guy childthread scripts\engine\sp\utility::enable_dynamic_run_speed( self, _id_DF3E2BB9678CA1E0 * _id_BFF2A7822F594386, _id_8067D7E2D70301EB * _id_BFF2A7822F594386, _id_014BE1B3C18AF36E * _id_BFF2A7822F594386, guy.stayahead.dynamic_frontdist, guy.stayahead.dynamic_middist, guy.stayahead.dynamic_backdist );

            if ( !isdefined( guy.stayahead.dir ) )
                guy.stayahead.dir = anglestoforward( self.angles );

            if ( !isdefined( guy.stayahead.wait_node_radius ) )
                guy.stayahead.wait_node_radius = self.stayahead.wait_node_radius;
        }

        self waittill( "stayahead_going_to_wait_node" );

        foreach ( guy in self.stayahead.team )
        {
            guy childthread stayahead_wait_set_goal_or_path();
            guy scripts\engine\sp\utility::disable_dynamic_run_speed( _id_DF3E2BB9678CA1E0 );
            _id_6EC7AD100BA120AA = guy get_wait_node( vectortoangles( guy.angles ) );

            if ( isdefined( _id_6EC7AD100BA120AA ) )
                guy childthread stayahead_set_goalnode( _id_6EC7AD100BA120AA, 1 );
        }

        self waittill( "stayahead_leaving_wait_node" );

        foreach ( guy in self.stayahead.team )
        {
            guy.stayahead.dir = anglestoforward( guy.angles );
            guy.stayahead.using_goto_node = 1;
            guy childthread stayahead_set_goalnode( guy.stayahead.goto_patharray[0], 0 );
        }
    }
}

stayahead_team_debug()
{
    self endon( "stop_stayahead" );

    for (;;)
    {
        foreach ( guy in self.stayahead.team )
        {
            guy thread display_goto_path( ( 1, 0, 1 ) );
            line_debug( self.origin, guy.origin, ( 1, 0, 1 ), 1, 0, 1 );
        }

        waitframe();
    }
}

lerp_plane_vector( _id_B0E4B46B0830AAD8, _id_947ED2246787DEF9 )
{
    _id_BB3A4ED149FCAF82 = 0.03;
    _id_18103624C85733BE = ( _id_947ED2246787DEF9 - _id_B0E4B46B0830AAD8 ) * _id_BB3A4ED149FCAF82;
    dir = _id_B0E4B46B0830AAD8 + _id_18103624C85733BE;
    self.stayahead.dir = dir;
    return dir;
}

print_debug( string )
{

}

print_console_debug( string )
{

}

print3d_debug( origin, text, color, alpha, scale, duration, _id_CCC9EEDFE7FE8BA1 )
{

}

print2d3d_debug( origin, text, color, alpha, scale, duration, _id_CCC9EEDFE7FE8BA1, _id_A66BA9B157533F5A, line )
{

}

create_2d_background()
{

}

create_2d_text( string, color, _id_A66BA9B157533F5A, line, duration )
{

}

line_debug( start, end, color, alpha, _id_FFB74DFE2FDAD3BE, duration )
{

}

sphere_debug( origin, radius, color, _id_FFB74DFE2FDAD3BE, duration )
{
    if ( getdvarint( "dvar_3D6AEC1E7192648B" ) )
        return;
}

node_display_debug( origin, text, color, alpha, scale, duration, _id_CCC9EEDFE7FE8BA1, _id_E2BE8EFF78F97351 )
{
    if ( isstruct( self ) || isnode( self ) && isdefined( self.targetname ) && !isdefined( _id_E2BE8EFF78F97351 ) )
    {
        level notify( self.targetname );
        level endon( self.targetname );
    }

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < duration; _id_AC0E594AC96AA3A8++ )
    {
        print3d_debug( origin + ( 0, 0, 6 ), text, color, alpha, scale, 1, _id_CCC9EEDFE7FE8BA1 );
        sphere_debug( origin, 6, color, 0, 1 );
        waitframe();
    }
}

display_goto_path( color )
{
    _id_EB99FBEA3747C2DF = color;

    if ( getdvarint( "dvar_3D6AEC1E7192648B" ) )
    {
        if ( isdefined( self.using_goto_node ) && isdefined( self.patharray ) )
        {
            foreach ( _id_AC0E594AC96AA3A8, node in self.patharray )
            {
                if ( isdefined( self.patharrayindex ) && _id_AC0E594AC96AA3A8 < self.patharrayindex )
                    color = ( 1, 0, 0 );
                else
                    color = _id_EB99FBEA3747C2DF;

                node thread node_display_debug( node.origin, "goto: " + _id_AC0E594AC96AA3A8, color, 1, 0.2, 100, 1 );

                if ( isdefined( node.target ) )
                {
                    if ( isdefined( scripts\engine\utility::getstruct( node.target, "targetname" ) ) )
                    {
                        line_debug( node.origin, scripts\engine\utility::getstruct( node.target, "targetname" ).origin, color, 1, 0, 1 );
                        continue;
                    }

                    if ( isdefined( getnode( node.target, "targetname" ) ) )
                        line_debug( node.origin, getnode( node.target, "targetname" ).origin, color, 1, 0, 1 );
                }
            }
        }
    }
}
