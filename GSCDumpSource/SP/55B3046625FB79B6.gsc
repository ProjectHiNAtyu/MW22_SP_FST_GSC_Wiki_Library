// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

registernotetracksifnot()
{
    if ( isdefined( anim.notetracks ) )
        return;

    anim.notetracks = [];
    registernotetracks();
}

registernotetracks()
{
    level._defaultnotetrackhandler = ::handlenotetrack;
    level.fnnotetrackprefixhandler = ::notetrack_prefix_handler_sp;
    level.fnnotetrackmodeltranslate = ::notetrack_model_translate;
    _id_357B9A54DFEDBD4A::registernotetracks();
    anim.notetracks["fingers_out_start_left_hand"] = ::notetrackfingerposeoffleft;
    anim.notetracks["fingers_out_start_right_hand"] = ::notetrackfingerposeoffright;
    anim.notetracks["fingers_in_start_left_hand"] = ::notetrackfingerposeonleft;
    anim.notetracks["fingers_in_start_right_hand"] = ::notetrackfingerposeonright;
    anim.notetracks["anim_facial = idle"] = ::notetrackfacialidle;
    anim.notetracks["anim_facial = run"] = ::notetrackfacialrun;
    anim.notetracks["anim_facial = pain"] = ::notetrackfacialpain;
    anim.notetracks["anim_facial = death"] = ::notetrackfacialdeath;
    anim.notetracks["anim_facial = talk"] = ::_id_B07ADB5F9D4BB4EE;
    anim.notetracks["anim_facial = talk_lg"] = ::_id_B090D15F9D63D223;
    anim.notetracks["anim_facial = talk_md"] = ::_id_B094C05F9D67A297;
    anim.notetracks["anim_facial = talk_sm"] = ::_id_B07ADB5F9D4BB4EE;
    anim.notetracks["anim_facial = cheer"] = ::notetrackfacialcheer;
    anim.notetracks["anim_facial = happy"] = ::notetrackfacialhappy;
    anim.notetracks["anim_facial = angry"] = ::notetrackfacialangry;
    anim.notetracks["anim_facial = scared"] = ::notetrackfacialscared;
    anim.notetracks["anim_facial = gas_death"] = ::notetrackfacialgasdeath;
    anim.notetracks["visor_raise"] = ::notetrackvisorraise;
    anim.notetracks["visor_lower"] = ::notetrackvisorlower;
    anim.notetracks["visor_lower_instant"] = ::notetrackvisorlower_instant;
    anim.notetracks["visor_raise_instant"] = ::notetrackvisorraise_instant;
    anim.notetracks["visor_lower_price_instant"] = ::notetrackvisorpricelower_instant;
    anim.notetracks["visor_raise_price_instant"] = ::notetrackvisorpriceraise_instant;
    anim.notetracks["visor_clearanim"] = ::notetrackvisorraise_clear;
    anim.notetracks["bloodpool"] = _id_3AEB9F02DE401A76::play_blood_pool;
    anim.notetracks["footstep_right_large"] = ::notetrackfootstep;
    anim.notetracks["footstep_right_small"] = ::notetrackfootstep;
    anim.notetracks["footstep_left_large"] = ::notetrackfootstep;
    anim.notetracks["footstep_left_small"] = ::notetrackfootstep;
    anim.notetracks["footstep_right_large_vfxonly"] = ::notetrackfootstep;
    anim.notetracks["footstep_right_small_vfxonly"] = ::notetrackfootstep;
    anim.notetracks["footstep_left_large_vfxonly"] = ::notetrackfootstep;
    anim.notetracks["footstep_left_small_vfxonly"] = ::notetrackfootstep;
    anim.notetracks["mvmt_step_pre"] = ::notetrackmovement;
    anim.notetracks["mvmt_step_post"] = ::notetrackmovement;
    anim.notetracks["bodyfall_limb_small"] = ::notetrackbodyfall;
    anim.notetracks["bodyfall_limb_large"] = ::notetrackbodyfall;
    anim.notetracks["bodyfall_head"] = ::notetrackbodyfall;
    anim.notetracks["bodyfall_torso"] = ::notetrackbodyfall;
    anim.notetracks["footscrape"] = ::notetrackfootscrape;
    anim.notetracks["land"] = ::notetrackland;
    anim.notetracks["handstep_left"] = ::notetrackhandstep;
    anim.notetracks["handstep_right"] = ::notetrackhandstep;
    anim.notetracks["laser_on"] = ::notetracklaser;
    anim.notetracks["laser_off"] = ::notetracklaser;
    anim.notetracks["start_ragdoll"] = ::notetrackstartragdoll;
    anim.notetracks["ragdollblendinit"] = ::notetrackragdollblendinit;
    anim.notetracks["ragdollblendstart"] = ::notetrackragdollblendstart;
    anim.notetracks["ragdollblendend"] = ::notetrackragdollblendend;
    anim.notetracks["ragdollblendrootanim"] = ::notetrackragdollblendrootanim;
    anim.notetracks["ragdollblendrootragdoll"] = ::notetrackragdollblendrootragdoll;
    anim.notetracks["drop clip"] = ::notetrackdropclip;
    anim.notetracks["helmet_pop"] = ::notetrackhelmetpop;
    anim.notetracks["gun drop"] = ::notetrackgundrop;
    anim.notetracks["dropgun"] = ::notetrackgundrop;
    anim.notetracks["gunhand = (gunhand)_left"] = ::notetrackgunhand;
    anim.notetracks["anim_gunhand = left"] = ::notetrackgunhand;
    anim.notetracks["gunhand = (gunhand)_right"] = ::notetrackgunhand;
    anim.notetracks["anim_gunhand = right"] = ::notetrackgunhand;
    anim.notetracks["anim_gunhand = none"] = ::notetrackgunhand;
    anim.notetracks["anim_pose = \"stand\""] = ::notetrackposestand;
    anim.notetracks["anim_pose = \"crouch\""] = ::notetrackposecrouch;
    anim.notetracks["anim_pose = \"prone\""] = ::notetrackposeprone;
    anim.notetracks["anim_pose = \"crawl\""] = ::notetrackposecrawl;
    anim.notetracks["anim_pose = \"back\""] = ::notetrackposeback;
    anim.notetracks["anim_gunhand = \"left\""] = ::notetrackgunhand;
    anim.notetracks["anim_gunhand = \"right\""] = ::notetrackgunhand;
    anim.notetracks["anim_gunhand = \"none\""] = ::notetrackgunhand;
    anim.notetracks["anim_pose = stand"] = ::notetrackposestand;
    anim.notetracks["anim_pose = crouch"] = ::notetrackposecrouch;
    anim.notetracks["anim_pose = prone"] = ::notetrackposeprone;
    anim.notetracks["anim_pose = crawl"] = ::notetrackposecrawl;
    anim.notetracks["anim_pose = back"] = ::notetrackposeback;
    anim.notetracks["eyes_on"] = ::eyeonnotehandler;
    anim.notetracks["eyes_off"] = ::eyeoffnotehandler;
    anim.notetracks["enable_weapons"] = ::_id_78D07EAE81B909A4;
    anim.notetracks["disable_weapons"] = ::_id_F60A480F6D11B189;
    anim.notetracks["linkmodel"] = ::_id_DECD3A8E9E64EC1D;
}

handlenotetrack( _id_A234A65C378F3289, flagname, _id_ED9FB5D37A4C823E, _id_35CE7799B701C978 )
{
    if ( _id_357B9A54DFEDBD4A::hascustomnotetrackhandler( _id_A234A65C378F3289 ) )
        return _id_357B9A54DFEDBD4A::handlecustomnotetrackhandler( _id_A234A65C378F3289, flagname, _id_ED9FB5D37A4C823E, _id_35CE7799B701C978 );

    _id_EAABF9463637080F = _id_357B9A54DFEDBD4A::handlecommonnotetrack( _id_A234A65C378F3289, flagname, _id_ED9FB5D37A4C823E, _id_35CE7799B701C978 );

    if ( isdefined( _id_EAABF9463637080F ) && _id_EAABF9463637080F == "__unhandled" )
    {
        _id_EAABF9463637080F = undefined;

        switch ( _id_A234A65C378F3289 )
        {
            case "stop anim":
                scripts\engine\sp\utility::anim_stopanimscripted();
                return _id_A234A65C378F3289;
            case "rechamber":
                if ( _id_2B79931B08683E0A::weapon_pump_action_shotgun() )
                    self playsound( "weap_reload_shotgun_pump_npc" );

                break;
            case "attach_clip_left":
                if ( _id_2B79931B08683E0A::usingrocketlauncher() )
                    notetrackrocketlauncherammoattach();

                break;
            default:
                if ( isdefined( _id_ED9FB5D37A4C823E ) )
                {
                    if ( isdefined( _id_35CE7799B701C978 ) )
                        return [[ _id_ED9FB5D37A4C823E ]]( _id_A234A65C378F3289, _id_35CE7799B701C978 );
                    else
                        return [[ _id_ED9FB5D37A4C823E ]]( _id_A234A65C378F3289 );
                }

                break;
        }

        if ( scripts\engine\utility::string_starts_with( _id_A234A65C378F3289, "pla_" ) )
        {
            if ( !isai( self ) )
                return 1;

            data = strtok( tolower( _id_A234A65C378F3289 ), "," );
            data[0] = getsubstr( data[0], 4 );
            _id_4C5F855C0E23D2EC( data );
        }
    }

    return _id_EAABF9463637080F;
}

notetrackvisorraise( _id_A234A65C378F3289, flagname )
{
    if ( !isai( self ) )
        return;

    self.visor_down = 0;
    scripts\asm\asm_sp::asm_playvisorraise();
}

notetrackvisorlower( _id_A234A65C378F3289, flagname )
{
    if ( !isai( self ) )
        return;

    self.visor_down = 1;
    scripts\asm\asm_sp::asm_playvisorraise();
}

notetrackvisorlower_instant( _id_A234A65C378F3289, flagname )
{
    if ( !isai( self ) )
        return;

    self.visor_down = 1;
    scripts\asm\asm_sp::asm_playvisorraise( "_instant" );
}

notetrackvisorraise_instant( _id_A234A65C378F3289, flagname )
{
    if ( !isai( self ) )
        return;

    self.visor_down = 0;
    scripts\asm\asm_sp::asm_playvisorraise( "_instant" );
}

notetrackvisorpricelower_instant( _id_A234A65C378F3289, flagname )
{
    if ( !isai( self ) )
        return;

    self.visor_down = 1;
    scripts\asm\asm_sp::asm_playvisorraise( "_price_instant" );
}

notetrackvisorpriceraise_instant( _id_A234A65C378F3289, flagname )
{
    if ( !isai( self ) )
        return;

    self.visor_down = 0;
    scripts\asm\asm_sp::asm_playvisorraise( "_price_instant" );
}

notetrackvisorraise_clear( _id_A234A65C378F3289, flagname )
{
    if ( !isai( self ) )
        return;

    self.visor_down = 0;
    scripts\asm\asm_sp::asm_clearvisoranim();
}

notetrackfingerposeoffleft( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_clearikfingeranim( "left" );
}

notetrackfingerposeonleft( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_ikfingeranim( "left" );
}

notetrackfingerposeoffright( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_clearikfingeranim( "left" );
}

notetrackfingerposeonright( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_ikfingeranim( "right" );
}

notetrackfacialidle( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "idle" );
}

notetrackfacialrun( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "run" );
}

notetrackfacialpain( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "pain" );
}

notetrackfacialdeath( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "death" );
}

_id_B090D15F9D63D223( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "talk_lg" );
}

_id_B094C05F9D67A297( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "talk_md" );
}

_id_B07ADB5F9D4BB4EE( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "talk_sm" );
}

notetrackfacialcheer( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "cheer" );
}

notetrackfacialhappy( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "happy" );
}

notetrackfacialscared( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "scared" );
}

notetrackfacialangry( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "angry" );
}

notetrackfacialgasdeath( _id_A234A65C378F3289, flagname )
{
    scripts\asm\asm_sp::asm_playfacialanimfromnotetrack( "gas_death" );
}

notetrackmovement( _id_A234A65C378F3289, flagname )
{
    if ( isdefined( self.classname ) && self.classname != "script_model" )
    {
        _id_6608AE999A05364C = 1;

        if ( issubstr( _id_A234A65C378F3289, "post" ) )
            _id_6608AE999A05364C = 2;

        _id_4A6AFE0B63C4E16B = get_notetrack_movement();
        self _meth_54D9865423B3C837( _id_4A6AFE0B63C4E16B, _id_6608AE999A05364C );
    }
}

notetrackbodyfall( _id_A234A65C378F3289, flagname )
{
    switch ( _id_A234A65C378F3289 )
    {
        case "bodyfall_head":
            soundalias = "anim_bodyfall_head";
            break;
        case "bodyfall_limb_large":
            soundalias = "anim_bodyfall_limb_large";
            break;
        case "bodyfall_limb_small":
            soundalias = "anim_bodyfall_limb_small";
            break;
        case "bodyfall_torso":
            soundalias = "anim_bodyfall_torso";
            break;
        default:
            soundalias = "anim_bodyfall_limb_large";
    }

    if ( isdefined( self.groundtype ) )
        groundtype = self.groundtype;
    else
        groundtype = "concrete_dry";

    self playsurfacesound( soundalias, groundtype );
}

notetrackfootstep( _id_A234A65C378F3289, flagname )
{
    _id_AE6DB4AB3762FF57 = issubstr( _id_A234A65C378F3289, "left" );
    _id_7DDBE22A1278C165 = issubstr( _id_A234A65C378F3289, "large" );
    _id_DF283C0F77BC4D5C = issubstr( _id_A234A65C378F3289, "vfxonly" );
    foot = "right";

    if ( _id_AE6DB4AB3762FF57 )
        foot = "left";

    if ( isai( self ) )
    {
        self.asm.footsteps.foot = foot;
        self.asm.footsteps.time = gettime();
    }

    if ( scripts\asm\asm_bb::ispartdismembered( "left_leg" ) || scripts\asm\asm_bb::ispartdismembered( "right_leg" ) )
        return;

    playfootstep( _id_AE6DB4AB3762FF57, _id_7DDBE22A1278C165, _id_DF283C0F77BC4D5C );

    if ( isdefined( self.classname ) && self.classname != "script_model" && isdefined( self.weapon ) && !_id_DF283C0F77BC4D5C )
    {
        _id_4A6AFE0B63C4E16B = get_notetrack_movement();
        _id_CE026A6EC728AD97 = self _meth_DB6CDC63041EB1CF( _id_4A6AFE0B63C4E16B, self.weapon );
    }
}

notetrackfootscrape( _id_A234A65C378F3289, flagname )
{
    if ( isdefined( self.groundtype ) )
        groundtype = self.groundtype;
    else
        groundtype = "dirt";
}

notetrackland( _id_A234A65C378F3289, flagname )
{
    if ( isdefined( self.groundtype ) )
        groundtype = self.groundtype;
    else
        groundtype = "dirt";

    self playsurfacesound( "step_default_npc_land", groundtype );
    self _meth_54D9865423B3C837( "land", 2 );
    self _meth_DB6CDC63041EB1CF( "land", self.weapon );
}

playfootstep( _id_AE6DB4AB3762FF57, _id_7DDBE22A1278C165, _id_DF283C0F77BC4D5C )
{
    if ( !isai( self ) )
    {
        if ( isdefined( self._id_BA304776B29BA32D ) )
        {
            [[ self._id_BA304776B29BA32D ]]( _id_AE6DB4AB3762FF57, _id_7DDBE22A1278C165, _id_DF283C0F77BC4D5C );
            return;
        }

        if ( !_id_DF283C0F77BC4D5C )
            self playsurfacesound( "step_default_npc_run", "dirt" );

        return;
    }

    groundtype = undefined;
    _id_5E31DE9F35F2AD8E = "step_";
    stairsstate = self.stairsstate;

    if ( stairsstate == "up" )
        _id_5E31DE9F35F2AD8E = "stepstairup_";
    else if ( stairsstate == "down" )
        _id_5E31DE9F35F2AD8E = "stepstairdown_";

    if ( !isdefined( self.groundtype ) )
    {
        if ( !isdefined( self.lastgroundtype ) )
        {
            if ( !_id_DF283C0F77BC4D5C )
                self playsurfacesound( _id_5E31DE9F35F2AD8E + "default_npc_run", "dirt" );

            return;
        }

        groundtype = self.lastgroundtype;
    }
    else
    {
        groundtype = self.groundtype;
        self.lastgroundtype = self.groundtype;
    }

    foot = "J_Ball_RI";

    if ( _id_AE6DB4AB3762FF57 )
        foot = "J_Ball_LE";

    _id_4A6AFE0B63C4E16B = get_notetrack_movement();

    if ( self.unittype == "soldier" || self.unittype == "civilian" || self.unittype == "juggernaut" || self.unittype == "suicidebomber" )
        unittype = "";
    else
        unittype = tolower( self.unittype + "_" );

    _id_C657C90FD9628994 = undefined;

    if ( isdefined( level.fngetfootstepsound ) )
        _id_C657C90FD9628994 = self [[ level.fngetfootstepsound ]]( _id_4A6AFE0B63C4E16B, groundtype, foot );

    if ( !isdefined( _id_C657C90FD9628994 ) )
    {
        if ( self.unittype == "civilian" || self.team == "allies" )
            _id_C657C90FD9628994 = unittype + _id_5E31DE9F35F2AD8E + "default_ally_" + _id_4A6AFE0B63C4E16B;
        else
            _id_C657C90FD9628994 = unittype + _id_5E31DE9F35F2AD8E + "default_npc_" + _id_4A6AFE0B63C4E16B;
    }

    if ( soundexists( _id_C657C90FD9628994 ) && _id_C657C90FD9628994 != "none" && !_id_DF283C0F77BC4D5C )
        thread scripts\engine\sp\utility::play_footstep_sound( _id_C657C90FD9628994, groundtype );

    if ( _id_7DDBE22A1278C165 )
    {
        if ( ![[ anim.fnfootstepeffect ]]( foot, groundtype ) )
            playfootstepeffectsmall( foot, groundtype );
    }
    else if ( ![[ anim.fnfootstepeffectsmall ]]( foot, groundtype ) )
        playfootstepeffect( foot, groundtype );

    if ( ![[ anim.fnfootprinteffect ]]( foot, groundtype ) )
        playfootprinteffect( foot, groundtype );
}

playhandstep( _id_AE6DB4AB3762FF57, _id_7DDBE22A1278C165 )
{
    if ( !isai( self ) )
    {
        self playsurfacesound( "c6_handstep", "default" );
        return;
    }

    if ( _id_AE6DB4AB3762FF57 )
    {
        tag = "J_MID_LE_1";

        if ( scripts\aitypes\dismember::get_scriptablepartinfo( "left_arm" ) == "dismember" )
            return;
    }
    else
    {
        tag = "J_MID_RI_1";

        if ( scripts\aitypes\dismember::get_scriptablepartinfo( "right_arm" ) == "dismember" )
            return;
    }

    groundtype = undefined;

    if ( !isdefined( self.groundtype ) )
    {
        if ( !isdefined( self.lastgroundtype ) )
        {
            self playsurfacesound( "c6_handstep", "default" );
            return;
        }

        groundtype = self.lastgroundtype;
    }
    else
    {
        groundtype = self.groundtype;
        self.lastgroundtype = self.groundtype;
    }

    _id_C657C90FD9628994 = "c6_handstep";

    if ( soundexists( _id_C657C90FD9628994 ) )
        self playsurfacesound( _id_C657C90FD9628994, groundtype );

    if ( ![[ anim.optionalstepeffectsmallfunction ]]( tag, groundtype ) )
        playfootstepeffect( tag, groundtype );

    if ( ![[ anim.optionalfootprinteffectfunction ]]( tag, groundtype ) )
        playfootprinteffect( tag, groundtype );
}

notetrackhandstep( _id_A234A65C378F3289, flagname )
{
    _id_AE6DB4AB3762FF57 = issubstr( _id_A234A65C378F3289, "left" );
    _id_7DDBE22A1278C165 = issubstr( _id_A234A65C378F3289, "large" );
    foot = "right";

    if ( _id_AE6DB4AB3762FF57 )
        foot = "left";

    if ( isai( self ) )
    {
        self.asm.footsteps.foot = foot;
        self.asm.footsteps.time = gettime();
    }

    playhandstep( _id_AE6DB4AB3762FF57, _id_7DDBE22A1278C165 );
}

playfootprinteffect( foot, groundtype )
{
    if ( !isdefined( anim.optionalfootprinteffects[groundtype] ) )
        return 0;

    _id_D2328567C0454599 = self gettagorigin( foot );
    _id_23801AFAA7ABE9B1 = self gettagangles( foot );
    _id_97D840437B3AE840 = anglestoright( _id_23801AFAA7ABE9B1 ) * -1;
    _id_4BE68345CF3CB03A = anglestoforward( _id_23801AFAA7ABE9B1 );
    tracestart = _id_D2328567C0454599 + _id_97D840437B3AE840 * -5;
    _id_8B39E5984DA1FFAF = _id_D2328567C0454599 + _id_97D840437B3AE840 * 20;
    trace = scripts\engine\trace::_bullet_trace( tracestart, _id_8B39E5984DA1FFAF, 0, self, 0, 0, 0, 0 );

    if ( trace["fraction"] == 1 )
        return 1;

    if ( !isdefined( level._effect["footprint_" + groundtype][self.unittype] ) )
        level._effect["footprint_" + groundtype][self.unittype] = level._effect["footprint_" + groundtype]["soldier"];

    if ( !anim.flirfootprinteffects )
        playfx( level._effect["footprint_" + groundtype][self.unittype], trace["position"], trace["normal"], _id_4BE68345CF3CB03A );
    else
        thread track_flir_footstep( level._effect["footprint_" + groundtype][self.unittype], trace["position"], trace["normal"], _id_4BE68345CF3CB03A );

    return 1;
}

track_flir_footstep( effectid, org, forwardv, upv )
{
    _id_4121634621ECB1AF = spawnstruct();
    _id_4121634621ECB1AF.effectid = effectid;
    _id_4121634621ECB1AF.org = org;
    _id_4121634621ECB1AF.forwardv = forwardv;
    _id_4121634621ECB1AF.upv = upv;
    _id_4121634621ECB1AF.spawntime = gettime();
    _id_4121634621ECB1AF.active = 0;
    anim.flirfootprints = scripts\engine\utility::array_add( anim.flirfootprints, _id_4121634621ECB1AF );

    if ( level.player isnightvisionon() && level.player scripts\engine\sp\utility::is_flir_vision_on() )
        _id_4121634621ECB1AF thread play_flir_footstep_fx();

    wait 10;
    anim.flirfootprints = scripts\engine\utility::array_remove( anim.flirfootprints, _id_4121634621ECB1AF );
}

play_flir_footstep_fx()
{
    if ( self.active )
        return;

    self.active = 1;
    self.fx = spawnfx( self.effectid, self.org, self.forwardv, self.upv );
    triggerfx( self.fx, self.spawntime / 1000 );
}

kill_flir_footstep_fx()
{
    if ( !self.active )
        return;

    self.active = 0;
    self.fx delete();
}

playfootstepeffect( foot, groundtype )
{
    if ( !isdefined( anim.optionalstepeffects[groundtype] ) )
        return 0;

    org = self gettagorigin( foot );
    angles = self.angles;
    forward = anglestoforward( angles );
    up = anglestoup( angles );

    if ( !isdefined( level._effect["step_" + groundtype][self.unittype] ) )
        level._effect["step_" + groundtype][self.unittype] = level._effect["step_" + groundtype]["soldier"];

    playfx( level._effect["step_" + groundtype][self.unittype], org, forward, up );
    return 1;
}

playfootstepeffectsmall( foot, groundtype )
{
    if ( !isdefined( anim.optionalstepeffectssmall[groundtype] ) )
        return 0;

    org = self gettagorigin( foot );
    angles = self.angles;
    forward = anglestoforward( angles );
    up = anglestoup( angles );

    if ( !isdefined( level._effect["step_small_" + groundtype][self.unittype] ) )
        level._effect["step_small_" + groundtype][self.unittype] = level._effect["step_small_" + groundtype]["soldier"];

    playfx( level._effect["step_small_" + groundtype][self.unittype], org, forward, up );
    return 1;
}

get_notetrack_movement()
{
    if ( isai( self ) && !isbot( self ) )
        return self _meth_ CBE5AD2464F5ABE();

    _id_4A6AFE0B63C4E16B = "run";
    _id_AE3EA15396B65C1F = undefined;

    if ( isdefined( self.asm ) )
        _id_AE3EA15396B65C1F = self getbasearchetype();

    if ( isdefined( _id_AE3EA15396B65C1F ) && animspeedthresholdsexist( _id_AE3EA15396B65C1F ) && _func_42919C557E7CAA55( _id_AE3EA15396B65C1F, "sprint" ) && isdefined( self.velocity ) )
    {
        _id_68A306F6CB2DDA9C = _func_7CF4D93C7215AFE3( _id_AE3EA15396B65C1F, "run", "sprint", 0.8 );

        if ( length2d( self.velocity ) > _id_68A306F6CB2DDA9C )
            _id_4A6AFE0B63C4E16B = "sprint";
    }

    if ( isdefined( self._blackboard ) )
    {
        if ( self._blackboard.movetype == "walk" || self._blackboard.movetype == "casual_gun" || self._blackboard.movetype == "patrol" || self._blackboard.movetype == "casual" )
            _id_4A6AFE0B63C4E16B = "walk";

        if ( scripts\asm\asm_bb::bb_getrequestedstance() == "prone" )
            _id_4A6AFE0B63C4E16B = "prone";
    }
    else if ( isdefined( self.a ) )
    {
        if ( isdefined( self.a.movement ) )
        {
            if ( self.a.movement == "walk" )
                _id_4A6AFE0B63C4E16B = "walk";
        }

        if ( isdefined( self.currentpose ) )
        {
            if ( self.currentpose == "prone" )
                _id_4A6AFE0B63C4E16B = "prone";
        }
    }

    return _id_4A6AFE0B63C4E16B;
}

notetracklaser( _id_A234A65C378F3289, flagname )
{
    if ( _id_A234A65C378F3289 == "laser_on" )
        self._id_14070A5A0597BF51 = 1;
    else
        self._id_14070A5A0597BF51 = 0;

    self updatelaserstatus();
}

notetrackgunhand( _id_A234A65C378F3289, flagname )
{
    if ( issubstr( _id_A234A65C378F3289, "left" ) )
    {
        _id_3433EE6B63C7E243::placeweaponon( self.weapon, "left" );
        self notify( "weapon_switch_done" );
    }
    else if ( issubstr( _id_A234A65C378F3289, "right" ) )
    {
        _id_3433EE6B63C7E243::placeweaponon( self.weapon, "right" );
        self notify( "weapon_switch_done" );
    }
    else if ( issubstr( _id_A234A65C378F3289, "none" ) )
        _id_3433EE6B63C7E243::placeweaponon( self.weapon, "none" );
}

notetrackposestand( _id_A234A65C378F3289, flagname )
{
    if ( self.currentpose == "prone" )
        _id_7E4D332E911E1B90::exitpronewrapper( 1.0 );

    setpose( "stand" );
}

notetrackposecrouch( _id_A234A65C378F3289, flagname )
{
    if ( self.currentpose == "prone" )
        _id_7E4D332E911E1B90::exitpronewrapper( 1.0 );

    setpose( "crouch" );
}

#using_animtree("generic_human");

notetrackposeprone( _id_A234A65C378F3289, flagname )
{
    if ( !issentient( self ) )
        return;

    self setproneanimnodes( -45, 45, %prone_legs_down, %prone_dummy, %prone_legs_up );
    _id_7E4D332E911E1B90::enterpronewrapper( 0.5 );
    setpose( "prone" );

    if ( isdefined( self.a.goingtoproneaim ) )
        self.a.proneaiming = 1;
    else
        self.a.proneaiming = undefined;
}

notetrackposecrawl( _id_A234A65C378F3289, flagname )
{
    if ( !issentient( self ) )
        return;

    self setproneanimnodes( -45, 45, %prone_legs_down, %prone_dummy, %prone_legs_up );
    _id_7E4D332E911E1B90::enterpronewrapper( 1.0 );
    setpose( "prone" );
    self.a.proneaiming = undefined;
}

notetrackposeback( _id_A234A65C378F3289, flagname )
{
    if ( !issentient( self ) )
        return;

    setpose( "crouch" );
    self.a.onback = 1;
    self.a.movement = "stop";
    self setproneanimnodes( -90, 90, %prone_legs_down, %prone_dummy, %prone_legs_up );
    _id_7E4D332E911E1B90::enterpronewrapper( 1.0 );
}

notetrackrocketlauncherammoattach()
{
    if ( !isalive( self ) )
        return;

    if ( !_id_2B79931B08683E0A::usingrocketlauncher() )
        return;

    if ( self tagexists( "tag_accessory_left" ) && self tagexists( "tag_rocket" ) )
        self showpart( "tag_rocket" );
}

notetrackdropclip( _id_A234A65C378F3289, flagname )
{
    thread _id_3433EE6B63C7E243::handledropclip( flagname );
}

notetrackhelmetpop( _id_A234A65C378F3289, flagname )
{
    if ( isdefined( self.fnhelmetpop ) )
    {
        self [[ self.fnhelmetpop ]]();
        self.dontbreakhelmet = 1;
    }
}

notetrackstartragdoll( _id_A234A65C378F3289, flagname )
{
    if ( isdefined( self.noragdoll ) )
        return;

    if ( isdefined( self.ragdolltime ) )
        return;

    if ( !isdefined( self.dont_unlink_ragdoll ) )
        thread unlinknextframe();

    if ( isdefined( self._blackboard ) )
    {
        if ( isdefined( self._blackboard.awaitingdropgunnotetrack ) && self._blackboard.awaitingdropgunnotetrack == 1 )
        {
            _id_3433EE6B63C7E243::dropaiweapon();
            self.lastweapon = self.weapon;
        }
    }

    if ( isdefined( self.fnpreragdoll ) )
        self [[ self.fnpreragdoll ]]();

    if ( isdefined( self ) )
        self startragdoll();
}

notetrackragdollblendinit( _id_A234A65C378F3289, flagname )
{
    if ( isdefined( self.noragdoll ) )
        return;

    if ( isdefined( self.ragdolltime ) )
        return;

    if ( !isdefined( self.dont_unlink_ragdoll ) )
        thread unlinknextframe();

    if ( isdefined( self._blackboard ) )
    {
        if ( isdefined( self._blackboard.awaitingdropgunnotetrack ) && self._blackboard.awaitingdropgunnotetrack == 1 )
        {
            _id_3433EE6B63C7E243::dropaiweapon();
            self.lastweapon = self.weapon;
        }
    }

    if ( isdefined( self.fnpreragdoll ) )
        self [[ self.fnpreragdoll ]]();

    self _meth_CEEC1679AF0AD2C1();
}

notetrackragdollblendstart( _id_A234A65C378F3289, flagname )
{

}

notetrackragdollblendend( _id_A234A65C378F3289, flagname )
{

}

notetrackragdollblendrootanim( _id_A234A65C378F3289, flagname )
{

}

notetrackragdollblendrootragdoll( _id_A234A65C378F3289, flagname )
{

}

notetrackgundrop( _id_A234A65C378F3289, flagname )
{
    _id_3433EE6B63C7E243::dropaiweapon();

    if ( isdefined( self._blackboard ) )
        self._blackboard.awaitingdropgunnotetrack = 0;

    self.lastweapon = self.weapon;
}

setpose( _id_5CAA9F9F456B4040 )
{
    self.currentpose = _id_5CAA9F9F456B4040;

    if ( isdefined( self.a.onback ) )
        _id_7E4D332E911E1B90::stoponback();

    scripts\asm\asm_bb::bb_requeststance( _id_5CAA9F9F456B4040 );
    self notify( "entered_pose" + _id_5CAA9F9F456B4040 );
}

unlinknextframe()
{
    wait 0.1;

    if ( isdefined( self ) )
        self unlink();
}

_id_FDB7EA91BDA694DC( _id_DB5548BB3BC60B0C )
{
    info = strtok( _id_DB5548BB3BC60B0C, "," );
    model = info[0];
    tag = info[1];

    if ( isdefined( level.fnnotetrackmodeltranslate ) )
        model = [[ level.fnnotetrackmodeltranslate ]]( model );

    model = tolower( model );
    tag = tolower( tag );

    if ( isdefined( self._id_E2991D2D4B030C75 ) && isdefined( self._id_E2991D2D4B030C75[tag] ) )
    {
        self detach( self._id_E2991D2D4B030C75[tag], tag );
        self._id_E2991D2D4B030C75[tag] = undefined;
    }

    if ( model != "none" && model != "" )
    {
        self attach( model, tag, 1 );
        self._id_E2991D2D4B030C75[tag] = model;
    }
}

_id_A06953A984B6A42A( _id_DB5548BB3BC60B0C )
{
    info = strtok( _id_DB5548BB3BC60B0C, "," );
    model = info[0];
    tag = info[1];

    if ( isdefined( self._id_E2991D2D4B030C75 ) && isdefined( self._id_E2991D2D4B030C75[tag] ) )
    {
        self detach( self._id_E2991D2D4B030C75[tag], tag );
        self._id_E2991D2D4B030C75[tag] = undefined;
    }
    else
        self detach( model, tag );
}

_id_45F825A87C104B8E( _id_DB5548BB3BC60B0C )
{
    info = strtok( _id_DB5548BB3BC60B0C, "," );
    modelname = info[0];
    tag = info[1];
    model = spawn( "script_model", self gettagorigin( tag ) );
    model.angles = self gettagangles( tag );
    model setmodel( modelname );

    if ( !isdefined( self._id_1FEC75F88C15AED8 ) )
        self._id_1FEC75F88C15AED8 = [];

    self._id_1FEC75F88C15AED8[self._id_1FEC75F88C15AED8.size] = model;
    _id_A06953A984B6A42A( _id_DB5548BB3BC60B0C );
}

_id_A08DF6E917EE4DA2( tag )
{
    index = self._id_1FEC75F88C15AED8.size - 1;
    ent = self._id_1FEC75F88C15AED8[index];
    self._id_1FEC75F88C15AED8[index] = undefined;
    self attach( ent.model, tag, 1 );
    self._id_E2991D2D4B030C75[tag] = ent.model;
    ent delete();
}

_id_78157F1BF846E991()
{
    if ( isdefined( self._id_E2991D2D4B030C75 ) )
    {
        foreach ( tag, model in self._id_E2991D2D4B030C75 )
            self detach( model, tag );
    }

    self._id_E2991D2D4B030C75 = undefined;
}

notetrack_model_translate( model )
{
    result = model;

    switch ( model )
    {
        case "offhand":
        case "primary":
        case "pistol":
            if ( isdefined( self.weaponinfo ) )
            {
                foreach ( key, info in self.weaponinfo )
                {
                    weaponname = strtok( key, "+" )[0];
                    _id_DE88CD14114C1E24 = nullweapon();

                    if ( isdefined( weaponname ) && weaponname != "none" && weaponname != "" )
                        _id_DE88CD14114C1E24 = scripts\sp\utility::make_weapon( weaponname );

                    if ( model == "pistol" && _id_DE88CD14114C1E24.classname == "pistol" )
                    {
                        result = getweaponmodel( _id_DE88CD14114C1E24 );
                        continue;
                    }

                    if ( model != "pistol" && _id_DE88CD14114C1E24.inventorytype == model && result == model )
                        result = getweaponmodel( _id_DE88CD14114C1E24 );
                }
            }

            if ( result == model )
                result = "none";

            break;
    }

    return result;
}

notetrack_vo( alias )
{
    if ( isdefined( self.anim_playsound_func ) )
        self thread [[ self.anim_playsound_func ]]( alias, "j_head", 1 );
    else if ( isdefined( self.anim_playvo_func ) )
        self thread [[ self.anim_playvo_func ]]( alias, "j_head", 1 );
    else if ( !issentient( self ) )
        thread scripts\engine\utility::playsoundontag( alias, "j_head", 1, alias );
    else
        scripts\sp\anim::play_sound_at_viewheight( alias, "sounddone", 1 );
}

notetrack_prefix_handler_sp( notetrack )
{
    _id_7CDB504E7250F362 = getsubstr( notetrack, 0, 3 );

    switch ( _id_7CDB504E7250F362 )
    {
        case "ps_":
            alias = getsubstr( notetrack, 3 );

            if ( isdefined( self.anim_playsound_func ) )
                self thread [[ self.anim_playsound_func ]]( alias, "j_head", 1 );
            else
            {
                params = strtok( alias, "," );

                if ( params.size < 2 )
                    thread scripts\engine\utility::playsoundontag( alias, undefined, 1 );
                else
                    thread scripts\engine\utility::playsoundontag( params[0], params[1], 1 );
            }

            return 1;
        case "vo_":
            if ( canplaynotetrackvo() )
            {
                alias = getsubstr( notetrack, 3 );
                notetrack_vo( alias );
                return 1;
            }

            break;
        case "bc_":
            if ( canplaynotetrackvo() )
            {
                _id_DFD66055FF978A3C = getsubstr( notetrack, 3 );
                _id_DEC9BCCE93873125 = _id_35DE402EFC5ACFB3::_id_C0DA17570A24346C( _id_DFD66055FF978A3C );
                return 1;
            }

            break;
        case "sd_":
            if ( canplaynotetrackvo() )
            {
                alias = getsubstr( notetrack, 3 );

                if ( isdefined( self.anim_smartdialog_func ) )
                    self thread [[ self.anim_smartdialog_func ]]( alias );
                else
                    thread scripts\engine\sp\utility::smart_dialogue( alias );

                return 1;
            }

            break;
        case "sr_":
            if ( canplaynotetrackvo() )
            {
                alias = getsubstr( notetrack, 3 );
                level thread scripts\engine\sp\utility::smart_radio_dialogue( alias );
                return 1;
            }

            break;
        case "rm_":
            rumble = getsubstr( notetrack, 3 );
            level.player playrumbleonentity( rumble );
            return 1;
        case "fx_":
            _id_F058CBBC0C35931A = strtok( tolower( notetrack ), "[]" );
            str = strtok( getsubstr( _id_F058CBBC0C35931A[0], 3 ), ",() " );
            _id_02B27C2708DEF0A7 = [];

            if ( _id_F058CBBC0C35931A.size > 1 )
            {
                for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < _id_F058CBBC0C35931A.size; _id_AC0E594AC96AA3A8++ )
                {
                    _id_16290C9DDA466BCE = strtok( _id_F058CBBC0C35931A[_id_AC0E594AC96AA3A8], "," );

                    if ( _id_16290C9DDA466BCE.size > 1 )
                    {
                        str = scripts\engine\utility::array_add( str, ( float( _id_16290C9DDA466BCE[0] ), float( _id_16290C9DDA466BCE[1] ), float( _id_16290C9DDA466BCE[2] ) ) );
                        continue;
                    }

                    str = scripts\engine\utility::array_add( str, _id_16290C9DDA466BCE[0] );
                }
            }

            if ( str.size == 2 )
            {
                if ( str[0] == "exploder" )
                {
                    scripts\engine\utility::exploder( str[1] );
                    return 1;
                }
                else if ( str[0] == "stop_exploder" )
                {
                    scripts\engine\utility::stop_exploder( str[1] );
                    return 1;
                }
                else
                {
                    playfxontag( level._effect[str[0]], self, str[1] );
                    return 1;
                }
            }
            else if ( str.size == 3 )
            {
                if ( str[0] == "playfxontag" )
                {
                    playfxontag( level._effect[str[1]], self, str[2] );
                    return 1;
                }
                else if ( str[0] == "stopfxontag" )
                {
                    stopfxontag( level._effect[str[1]], self, str[2] );
                    return 1;
                }
                else if ( str[0] == "killfxontag" )
                {
                    killfxontag( level._effect[str[1]], self, str[2] );
                    return 1;
                }
            }
            else if ( str.size == 6 )
            {
                if ( str[0] == "debris" )
                {
                    playfxontag( level._effect[str[1]], self, str[2] );
                    self hidepart( str[2], str[3] );
                    return 1;
                }
            }
            else if ( str.size == 11 )
            {
                _id_AC0E424AC96A7113 = ( float( str[2] ), float( str[3] ), float( str[4] ) );
                f = ( float( str[5] ), float( str[6] ), float( str[7] ) );
                _id_AC0E454AC96A77AC = ( float( str[8] ), float( str[9] ), float( str[10] ) );
                playfx( level._effect[str[1]], _id_AC0E424AC96A7113, f, _id_AC0E454AC96A77AC );
            }

            break;
        case "ht_":
            _id_0E4731409BD255E0 = getsubstr( notetrack, 3, notetrack.size );

            if ( _id_0E4731409BD255E0 == "on" || _id_0E4731409BD255E0 == "on_0" )
            {
                if ( !isdefined( self.ht_on ) )
                {
                    self.ht_on = 1;
                    self _meth_A559118098FBEB72();
                }

                scripts\common\utility::lookatentity( level.player, 0 );
            }
            else if ( _id_0E4731409BD255E0 == "on_1" )
            {
                if ( !isdefined( self.ht_on ) )
                {
                    self.ht_on = 1;
                    self _meth_A559118098FBEB72();
                }

                scripts\common\utility::lookatentity( level.player, 1 );
            }
            else
                scripts\asm\shared\utility::cleanupanimscriptedheadlook();

            return 1;
        case "ms_":
            _id_5BF1E96D631B62FE = getsubstr( notetrack, 3, notetrack.size );
            archetype = self getbasearchetype();
            _id_9743A24AC8368484 = getanimspeedthreshold( archetype, _id_5BF1E96D631B62FE );
            self aisetdesiredspeed( _id_9743A24AC8368484 );
            self aisettargetspeed( _id_9743A24AC8368484 );
            return 1;
        case "at_":
            _id_FDB7EA91BDA694DC( getsubstr( notetrack, 3 ) );
            return 1;
        case "dt_":
            _id_A06953A984B6A42A( getsubstr( notetrack, 3 ) );
            return 1;
        case "ds_":
            _id_45F825A87C104B8E( getsubstr( notetrack, 3 ) );
            return 1;
        case "as_":
            _id_A08DF6E917EE4DA2( getsubstr( notetrack, 3 ) );
            return 1;
        case "fs_":
            scripts\engine\utility::flag_set( getsubstr( notetrack, 3 ) );
            return 1;
        case "fc_":
            scripts\engine\utility::flag_clear( getsubstr( notetrack, 3 ) );
            return 1;
        case "hp_":
            parms = getsubstr( notetrack, 3 );

            switch ( parms )
            {
                case "on":
                    if ( isai( self ) )
                    {
                        self _meth_F51FF412609193B9( 1, "script" );
                        self _meth_E99626ADD202FE1A( 0, "script" );
                        self _meth_5621E511B99964A7( level.player );
                    }

                    return 1;
                case "on_pos":
                    if ( isai( self ) )
                    {
                        self _meth_F51FF412609193B9( 1, "script" );
                        self _meth_E99626ADD202FE1A( 0, "script" );
                        self _meth_504A5E2DF31069A4();
                    }

                    return 1;
                case "off":
                    if ( isai( self ) )
                    {
                        self _meth_F51FF412609193B9( 0, "script" );
                        self _meth_E99626ADD202FE1A( 1, "script" );
                    }

                    return 1;
            }

            break;
        case "svc":
            _id_B4572C9B8B2E61BB = strtok( notetrack, "_, " );
            right = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[1] ), float( _id_B4572C9B8B2E61BB[1] ), 0.0 );
            left = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[2] ), float( _id_B4572C9B8B2E61BB[2] ), 0.0 );
            top = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[3] ), float( _id_B4572C9B8B2E61BB[3] ), 0.0 );
            _id_8A925332BA34F25E = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[4] ), float( _id_B4572C9B8B2E61BB[4] ), 0.0 );
            _id_245DC63EC7CE506C = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[5] ), float( _id_B4572C9B8B2E61BB[5] ), 0.0 );
            level.player lerpviewangleclamp( _id_245DC63EC7CE506C, _id_245DC63EC7CE506C * 0.5, _id_245DC63EC7CE506C * 0.5, right, left, top, _id_8A925332BA34F25E, 1 );
            return 1;
        case "vf_":
            if ( level.player islinked() )
            {
                _id_3ADBB72F4082D366 = getsubstr( notetrack, 3, notetrack.size );
                _id_3ADBB72F4082D366 = float( _id_3ADBB72F4082D366 );

                if ( isdefined( level.player getlinkedparent() ) )
                    level.player _meth_6B8A3855966E9ADA( _id_3ADBB72F4082D366 );
            }

            return 1;
        case "pg_":
            gesture = getsubstr( notetrack, 3, notetrack.size );
            level.player forceplaygestureviewmodel( gesture );
            return 1;
        case "eq_":
            _id_B4572C9B8B2E61BB = strtok( notetrack, "_, " );
            scale = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[1] ), float( _id_B4572C9B8B2E61BB[1] ), 1.0 );
            duration = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[2] ), float( _id_B4572C9B8B2E61BB[2] ), 1.0 );
            level.player earthquakeforplayer( scale, duration, level.player.origin, 1000 );
            return 1;
        case "df_":
            if ( isdefined( level.dyndof ) )
                scripts\common\utility::_id_2AF2E0EDE2893721();

            fstop = undefined;
            focusspeed = undefined;
            aperturespeed = undefined;
            angles = undefined;
            _id_9AC1D65434108DCC = undefined;
            _id_DF1B054C1838D0DE = undefined;
            ignorecollision = undefined;
            parms = getsubstr( notetrack, 3, notetrack.size );
            _id_B4572C9B8B2E61BB = strtok( parms, ", " );

            switch ( _id_B4572C9B8B2E61BB.size )
            {
                case 8:
                    ignorecollision = _id_66EB0C2166AEEF3D( _id_B4572C9B8B2E61BB[7] );
                case 7:
                    _id_DF1B054C1838D0DE = _id_66EB0C2166AEEF3D( _id_B4572C9B8B2E61BB[6] );
                case 6:
                    _id_9AC1D65434108DCC = _id_B4572C9B8B2E61BB[5];

                    if ( _id_9AC1D65434108DCC == "-1" )
                        _id_9AC1D65434108DCC = undefined;
                case 5:
                    angles = float( _id_B4572C9B8B2E61BB[4] );

                    if ( angles < 0 )
                        angles = undefined;
                case 4:
                    aperturespeed = float( _id_B4572C9B8B2E61BB[3] );

                    if ( aperturespeed < 0 )
                        aperturespeed = undefined;
                case 3:
                    focusspeed = float( _id_B4572C9B8B2E61BB[2] );

                    if ( focusspeed < 0 )
                        focusspeed = undefined;
                case 2:
                    fstop = float( _id_B4572C9B8B2E61BB[1] );

                    if ( fstop < 0 )
                        fstop = undefined;
                case 1:
                    break;
            }

            ignorelist = [];

            if ( istrue( _id_DF1B054C1838D0DE ) )
            {
                ignorelist = [ level.player ];

                if ( isdefined( level.player_rig ) )
                    ignorelist[ignorelist.size] = level.player_rig;
            }

            level.player thread scripts\common\utility::dof_enable_autofocus( fstop, self, focusspeed, aperturespeed, angles, _id_9AC1D65434108DCC, ignorelist, ignorecollision );
            return 1;
        case "pb_":
            _id_B4572C9B8B2E61BB = strtok( notetrack, "_, " );
            enabled = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[1] ), int( _id_B4572C9B8B2E61BB[1] ), 1 );

            if ( enabled )
                scripts\sp\utility::enable_procedural_bones();
            else
                scripts\sp\utility::disable_procedural_bones();

            return 1;
        case "ts_":
            _id_B4572C9B8B2E61BB = strtok( notetrack, "_, " );
            from = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[1] ), float( _id_B4572C9B8B2E61BB[1] ), 1.0 );
            to = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[2] ), float( _id_B4572C9B8B2E61BB[2] ), 1.0 );
            duration = scripts\engine\utility::ter_op( isdefined( _id_B4572C9B8B2E61BB[3] ), float( _id_B4572C9B8B2E61BB[3] ), 1.0 );
            setslowmotion( from, to, duration );
            return 1;
    }

    _id_7CDB4B4E7250E863 = getsubstr( notetrack, 0, 4 );

    switch ( _id_7CDB4B4E7250E863 )
    {
        case "psr_":
            if ( canplaynotetrackvo() )
            {
                alias = getsubstr( notetrack, 4 );
                scripts\engine\sp\utility::radio_dialogue( alias );
                return 1;
            }

            break;
        case "pip_":
            if ( canplaynotetrackvo() )
            {
                alias = getsubstr( notetrack, 4 );

                if ( isdefined( self.anim_playsound_func ) )
                    self thread [[ self.anim_playsound_func ]]( alias, "j_head", 1 );
                else
                    thread scripts\sp\pip_util::pip_dialogue( alias );

                return 1;
            }

            break;
        case "pvo_":
            if ( canplaynotetrackvo() )
            {
                alias = getsubstr( notetrack, 4 );

                if ( isdefined( level._id_BB89BF6FF5D2B0E6 ) )
                    self thread [[ level._id_BB89BF6FF5D2B0E6 ]]( alias );
                else
                    thread scripts\engine\sp\utility::smart_player_dialogue( alias );

                return 1;
            }

            break;
        case "fov_":
            _id_4712E8231030AF95 = strtok( notetrack, "_" );
            _id_555D27D0D0741DEF = _id_4712E8231030AF95[1];
            _id_D542D908656284BA = 65.0;
            _id_3CF456B26F4E4414 = undefined;

            if ( _id_555D27D0D0741DEF == "start" )
            {
                _id_D542D908656284BA = float( _id_4712E8231030AF95[2] );
                _id_3CF456B26F4E4414 = float( _id_4712E8231030AF95[3] );
                level.player _meth_1D98630AA343510D( _id_D542D908656284BA, _id_3CF456B26F4E4414 );
            }
            else
            {
                _id_3CF456B26F4E4414 = float( _id_4712E8231030AF95[2] );
                level.player _meth_1D98630AA343510D( _id_D542D908656284BA, _id_3CF456B26F4E4414 );
            }

            return 1;
        case "hts_":
            state = getsubstr( notetrack, 4 );

            if ( state == "off" )
                scripts\common\utility::lookatstateoverride();
            else
                scripts\common\utility::lookatstateoverride( state );

            return 1;
        case "pla_":
            if ( !isai( self ) )
                return 1;

            data = strtok( tolower( notetrack ), "," );
            data[0] = getsubstr( data[0], 4 );
            _id_4C5F855C0E23D2EC( data );
            return 1;
        case "fsf_":
            _id_0985C64FC7F3F4B6 = strtok( notetrack, "_" );
            _id_80698C7167DF0CB7 = float( _id_0985C64FC7F3F4B6[1] );
            _id_19FD165B9D684B3D = float( _id_0985C64FC7F3F4B6[2] );
            level.player lerpfovscalefactor( _id_80698C7167DF0CB7, _id_19FD165B9D684B3D );
            return 1;
        case "dof_":
            _id_5A7203790A8CCEAD = strtok( notetrack, "_" );
            _id_71DFE6FB4627FF8B = float( _id_5A7203790A8CCEAD[1] );
            _id_2A0DF86E83A41BB6 = float( _id_5A7203790A8CCEAD[2] );
            level.player thread scripts\common\utility::dof_enable( _id_71DFE6FB4627FF8B, _id_2A0DF86E83A41BB6 );
            return 1;
    }

    return _id_357B9A54DFEDBD4A::notetrack_prefix_handler_common( notetrack );
}

canplaynotetrackvo()
{
    if ( level.missionfailed && !level.notetrackmissionfailedvo )
        return 0;

    if ( !level.notetrackvo )
        return 0;

    return 1;
}

eyeonnotehandler( _id_A234A65C378F3289, flagname )
{
    self setanim( %lookat_eye_node, 1.0, 0.2, 1.0 );
}

eyeoffnotehandler( _id_A234A65C378F3289, flagname )
{
    self clearanim( %lookat_eye_node, 0.2 );
}

_id_78D07EAE81B909A4( _id_A234A65C378F3289, flagname )
{
    if ( isai( self ) )
        return;

    level.player enableoffhandweapons();
    level.player enableweapons();
}

_id_F60A480F6D11B189( _id_A234A65C378F3289, flagname )
{
    if ( isai( self ) )
        return;

    level.player disableoffhandweapons();
    level.player disableweapons();
}

_id_4C5F855C0E23D2EC( _id_6C1755E925291505 )
{
    mode = _id_6C1755E925291505[0];

    switch ( mode )
    {
        case "speed":
            _id_22238DD24555B428( _id_6C1755E925291505 );
            break;
        case "bone_weights":
            _id_3D33D0C14B96B661( _id_6C1755E925291505 );
            break;
        case "bone_speeds":
            _id_D61145721B9F2990( _id_6C1755E925291505 );
            break;
        case "player":
            _id_008D6DC47BF25B58( _id_6C1755E925291505 );
            break;
        case "clamp":
            _id_BF398D3BBC1F1D84( _id_6C1755E925291505 );
            break;
        case "clamp_lopsided":
            _id_FA7A1453B16A7545( _id_6C1755E925291505 );
            break;
        case "head_offset":
            _id_AEADF8545DE91B27( _id_6C1755E925291505 );
            break;
        case "on":
            self _meth_F51FF412609193B9( 1, "anim" );
            break;
        case "off":
            self _meth_F51FF412609193B9( 0, "anim" );
            break;
        case "block":
            self _meth_E99626ADD202FE1A( 1, "anim" );
            break;
        case "unblock":
            self _meth_E99626ADD202FE1A( 0, "anim" );
            break;
        default:
            break;
    }
}

_id_22238DD24555B428( _id_6C1755E925291505 )
{
    if ( _id_6C1755E925291505.size != 2 )
        return;

    if ( self _meth_E9E893B7F1032D7F() == 0 )
        return;

    speed = int( _id_6C1755E925291505[1] );
    self _meth_106BCE0AEEE91D2C( speed );
}

_id_3D33D0C14B96B661( _id_6C1755E925291505 )
{
    if ( _id_6C1755E925291505.size != 4 )
        return;

    if ( self _meth_E9E893B7F1032D7F() == 0 )
        return;

    _id_E49DBBA7580F19F8 = float( _id_6C1755E925291505[1] );
    _id_F8027E5C7600243E = float( _id_6C1755E925291505[2] );
    head = float( _id_6C1755E925291505[3] );
    self _meth_1C46BA98E23C02C1( _id_E49DBBA7580F19F8, _id_F8027E5C7600243E, head );
}

_id_D61145721B9F2990( _id_6C1755E925291505 )
{
    if ( _id_6C1755E925291505.size != 4 )
        return;

    if ( self _meth_E9E893B7F1032D7F() == 0 )
        return;

    _id_E49DBBA7580F19F8 = float( _id_6C1755E925291505[1] );
    _id_F8027E5C7600243E = float( _id_6C1755E925291505[2] );
    head = float( _id_6C1755E925291505[3] );
}

_id_008D6DC47BF25B58( _id_6C1755E925291505 )
{
    if ( _id_6C1755E925291505.size != 2 )
        return;

    if ( self _meth_E9E893B7F1032D7F() == 0 )
        return;

    switch ( tolower( _id_6C1755E925291505[1] ) )
    {
        case "on":
        case "1":
            self _meth_5621E511B99964A7( level.player );
            break;
        case "off":
        case "0":
            self _meth_504A5E2DF31069A4();
            break;
        default:
            break;
    }
}

_id_BF398D3BBC1F1D84( _id_6C1755E925291505 )
{
    if ( _id_6C1755E925291505.size != 3 )
        return;

    if ( self _meth_E9E893B7F1032D7F() == 0 )
        return;

    _id_5848C4CF48977EBD = float( _id_6C1755E925291505[1] );
    _id_160462DD24F1A237 = float( _id_6C1755E925291505[2] );
    self _meth_5B21B24798DA64B5( _id_5848C4CF48977EBD, _id_160462DD24F1A237 );
}

_id_FA7A1453B16A7545( _id_6C1755E925291505 )
{
    if ( _id_6C1755E925291505.size != 5 )
        return;

    if ( self _meth_E9E893B7F1032D7F() == 0 )
        return;

    left = float( _id_6C1755E925291505[1] );
    right = float( _id_6C1755E925291505[2] );
    up = float( _id_6C1755E925291505[3] );
    down = float( _id_6C1755E925291505[4] );
}

_id_AEADF8545DE91B27( _id_6C1755E925291505 )
{
    if ( _id_6C1755E925291505.size != 2 )
        return;

    if ( self _meth_E9E893B7F1032D7F() == 0 )
        return;

    self _meth_81E6E6FA91AFF70B( float( _id_6C1755E925291505[1] ) );
}

_id_DECD3A8E9E64EC1D( _id_A234A65C378F3289, flagname, _id_35CE7799B701C978 )
{
    if ( _id_35CE7799B701C978.size == 3 )
    {
        params = strtok( _id_35CE7799B701C978[2], "," );

        if ( params.size >= 3 )
        {
            modelname = params[0];
            tagname = params[1];
            _id_F8A3B6E282B87E24 = params[2];
            _id_2CF5688735918E11 = [ 0, 0, 0 ];
            angleoffset = [ 0, 0, 0 ];
            _id_65DBABA260BC5C52 = 3;
            _id_EAD6BB7B07E2FB30 = 6;

            for ( _id_017B3814CDDE0132 = _id_65DBABA260BC5C52; _id_017B3814CDDE0132 < params.size && _id_017B3814CDDE0132 < _id_EAD6BB7B07E2FB30; _id_017B3814CDDE0132++ )
                _id_2CF5688735918E11[_id_017B3814CDDE0132 - _id_65DBABA260BC5C52] = float( params[_id_017B3814CDDE0132] );

            for ( _id_017B3814CDDE0132 = _id_EAD6BB7B07E2FB30; _id_017B3814CDDE0132 < params.size; _id_017B3814CDDE0132++ )
                angleoffset[_id_017B3814CDDE0132 - _id_EAD6BB7B07E2FB30] = float( params[_id_017B3814CDDE0132] );

            _id_2638FB6F935AE522 = spawn( "script_model", level.player.origin );
            _id_2638FB6F935AE522 setmodel( modelname );
            _id_2638FB6F935AE522 _meth_81569D81A48A6C07( level.player, tagname, ( _id_2CF5688735918E11[0], _id_2CF5688735918E11[1], _id_2CF5688735918E11[2] ), ( angleoffset[0], angleoffset[1], angleoffset[2] ), 0, 0, 0, 0 );
            _id_2638FB6F935AE522.targetname = _id_F8A3B6E282B87E24;
        }
    }
}

_id_66EB0C2166AEEF3D( str )
{
    if ( tolower( str ) == "true" )
        return 1;

    return int( str ) && 1;
}
