// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

fakeactor_node_setup()
{
    if ( !isdefined( self.angles ) )
        self.angles = ( 0, 0, 0 );

    if ( self.script_fakeactor_node == "path" || self.script_fakeactor_node == "turn" )
        self.wait_state = 2;
    else
        self.wait_state = 0;

    switch ( self.script_fakeactor_node )
    {
        case "traverse":
            if ( isdefined( self.target ) )
            {
                path_nodes = getnodearray( self.target, "targetname" );

                if ( !path_nodes.size )
                {
                    if ( isdefined( self.script_linkto ) )
                        path_nodes = getnodearray( self.script_linkto, "script_linkname" );
                }

                if ( path_nodes.size > 0 )
                {
                    foreach ( _id_E40DFCD45CBA504F in path_nodes )
                    {
                        if ( _id_E40DFCD45CBA504F.type == "Begin" )
                            self.traverse_animscript = _id_E40DFCD45CBA504F.animscript;
                    }
                }

                _id_2B1B52AA6A12C599 = scripts\engine\utility::getstructarray( self.target, "targetname" );

                if ( isdefined( self.script_linkto ) )
                    _id_2B1B52AA6A12C599 = scripts\engine\utility::array_combine( _id_2B1B52AA6A12C599, scripts\engine\utility::getstructarray( self.script_linkto, "script_linkname" ) );

                foreach ( struct in _id_2B1B52AA6A12C599 )
                {
                    if ( isdefined( struct.animation ) )
                    {
                        self.origin = struct.origin;
                        self.angles = struct.angles;
                    }
                }
            }

            break;
        case "animation":
            break;
    }

    fakeactor_node_init_type();
    fakeactor_node_init_params();
    fakeactor_node_init_flags();
    waitframe();

    switch ( self.script_fakeactor_node )
    {
        case "animation":
            self.anim_node = spawnstruct();
            self.anim_node.origin = self.origin;
            self.anim_node.angles = self.angles;
            play_animation = scripts\engine\utility::getanim_generic( self.animation );
            _id_53FD9BCFE97F77D0 = getstartorigin( self.origin, self.angles, play_animation );
            new_angles = getstartangles( self.origin, self.angles, play_animation );
            self.origin = _id_53FD9BCFE97F77D0;
            self.angles = new_angles;
            break;
    }
}

fakeactor_node_init_type()
{
    switch ( self.script_fakeactor_node )
    {
        case "cover_left":
            self.type = "Cover Left";
            return;
        case "cover_right":
            self.type = "Cover Right";
            return;
        case "cover_crouch":
            self.type = "Cover Crouch";
            return;
        case "cover_stand":
            self.type = "Cover Stand";
            return;
    }
}

fakeactor_node_init_params()
{
    if ( !isdefined( self.script_parameters ) )
        return;

    _id_5D1AA1521FA7A6A2 = strtok( self.script_parameters, " " );

    foreach ( _id_F9C40D8C3212F0A5 in _id_5D1AA1521FA7A6A2 )
    {
        if ( !isdefined( level.fakeactor_node_group[_id_F9C40D8C3212F0A5] ) )
            level.fakeactor_node_group[_id_F9C40D8C3212F0A5] = [];

        level.fakeactor_node_group[_id_F9C40D8C3212F0A5] = scripts\engine\utility::array_add( level.fakeactor_node_group[_id_F9C40D8C3212F0A5], self );
    }
}

fakeactor_node_init_flags()
{
    if ( !isdefined( self.spawnflags ) )
        self.spawnflags = 0;

    if ( !( self.spawnflags & 64 ) )
    {
        up = 32 * anglestoup( self.angles );
        down = -20000 * anglestoup( self.angles );
        trace = scripts\engine\trace::ray_trace( self.origin + up, self.origin + down, undefined, scripts\engine\trace::create_solid_ai_contents() );

        if ( trace["hittype"] == "hittype_none" )
        {

        }

        self.origin = trace["position"];

        if ( self.spawnflags & 32 )
        {
            if ( isdefined( trace["entity"] ) )
            {
                self.ground_ent = trace["entity"];
                self.ground_ent_offset = self.ground_ent scripts\engine\sp\utility::worldtolocalcoords( self.origin );

                if ( !isdefined( self.angles ) )
                    self.angles = ( 0, 0, 0 );

                self.ground_ent_angles_offset = self.angles - self.ground_ent.angles;
            }
        }
    }

    if ( self.spawnflags & 8 )
        fakeactor_node_set_disabled( 1 );

    if ( self.spawnflags & 16 )
        self.wait_state = 2;

    self.node_claimed = [];
}

setup_fakeactor_nodes()
{
    level.fakeactor_node_group = [];
    level._id_213EF198A84B4BBA = scripts\engine\utility::random;

    foreach ( _id_6269CA54B5E5E596 in level._id_D5043478289AF856 )
        _id_6269CA54B5E5E596 thread fakeactor_node_setup();
}

is_fakeactor_node()
{
    return isdefined( self.script_fakeactor_node );
}

fakeactor_node_update()
{
    if ( !isdefined( self.ground_ent ) )
        return;

    self.origin = self.ground_ent localtoworldcoords( self.ground_ent_offset );
    _id_BB148694F891721D = spawn( "script_origin", ( 0, 0, 0 ) );
    _id_BB148694F891721D.angles = self.ground_ent.angles;
    _id_BB148694F891721D addpitch( self.ground_ent_angles_offset[0] );
    _id_BB148694F891721D addyaw( self.ground_ent_angles_offset[1] );
    _id_BB148694F891721D addroll( self.ground_ent_angles_offset[2] );
    self.angles = _id_BB148694F891721D.angles;
    _id_BB148694F891721D delete();
}

fakeactor_node_get_cover_list()
{
    _id_20D6D8DA6750E035 = [];
    spawnflags = 0;

    if ( isdefined( self.spawnflags ) )
        spawnflags = self.spawnflags;

    if ( self.script_fakeactor_node == "cover_left" )
    {
        if ( !( spawnflags & 1 ) )
            _id_20D6D8DA6750E035 = scripts\engine\utility::array_add( _id_20D6D8DA6750E035, "cover_left" );

        if ( !( spawnflags & 2 ) )
            _id_20D6D8DA6750E035 = scripts\engine\utility::array_add( _id_20D6D8DA6750E035, "cover_left_crouch" );
    }
    else if ( self.script_fakeactor_node == "cover_right" )
    {
        if ( !( spawnflags & 1 ) )
            _id_20D6D8DA6750E035 = scripts\engine\utility::array_add( _id_20D6D8DA6750E035, "cover_right" );

        if ( !( spawnflags & 2 ) )
            _id_20D6D8DA6750E035 = scripts\engine\utility::array_add( _id_20D6D8DA6750E035, "cover_right_crouch" );
    }
    else if ( self.script_fakeactor_node == "cover_stand" )
        _id_20D6D8DA6750E035 = scripts\engine\utility::array_add( _id_20D6D8DA6750E035, "cover_stand" );
    else if ( self.script_fakeactor_node == "cover_crouch" )
        _id_20D6D8DA6750E035 = scripts\engine\utility::array_add( _id_20D6D8DA6750E035, "cover_crouch" );
    else
        _id_20D6D8DA6750E035 = scripts\engine\utility::array_add( _id_20D6D8DA6750E035, "exposed" );

    if ( _id_20D6D8DA6750E035.size == 0 )
    {

    }

    return _id_20D6D8DA6750E035;
}

fakeactor_node_get_next()
{
    if ( !isdefined( self.target ) )
        return undefined;

    _id_2AAD46D2DF2BCE53 = fakeactor_node_get_all_valid();

    if ( _id_2AAD46D2DF2BCE53.size )
        return self [[ level._id_213EF198A84B4BBA ]]( _id_2AAD46D2DF2BCE53 );

    return undefined;
}

fakeactor_node_get_all_valid()
{
    _id_2AAD46D2DF2BCE53 = [];

    if ( !isdefined( self.target ) )
        return _id_2AAD46D2DF2BCE53;

    _id_C6736586AE30F7EA = scripts\engine\utility::getstructarray( self.target, "targetname" );

    foreach ( _id_0FC77A7F3B518C9A in _id_C6736586AE30F7EA )
    {
        if ( !_id_0FC77A7F3B518C9A is_fakeactor_node() )
            continue;

        if ( !_id_0FC77A7F3B518C9A fakeactor_node_is_valid() )
            continue;

        _id_2AAD46D2DF2BCE53 = scripts\engine\utility::array_add( _id_2AAD46D2DF2BCE53, _id_0FC77A7F3B518C9A );
    }

    return _id_2AAD46D2DF2BCE53;
}

fakeactor_node_get_valid_count()
{
    if ( !isdefined( self.target ) )
        return 0;

    _id_C6736586AE30F7EA = scripts\engine\utility::getstructarray( self.target, "targetname" );
    _id_813B4C0E87A989F5 = 0;

    foreach ( _id_0FC77A7F3B518C9A in _id_C6736586AE30F7EA )
    {
        if ( !_id_0FC77A7F3B518C9A is_fakeactor_node() )
            continue;

        if ( !_id_0FC77A7F3B518C9A fakeactor_node_is_valid() )
            continue;

        _id_813B4C0E87A989F5++;
    }

    return _id_813B4C0E87A989F5;
}

fakeactor_node_get_angles( frantic )
{
    if ( !isdefined( frantic ) )
        frantic = 0;

    _id_BB148694F891721D = spawn( "script_origin", ( 0, 0, 0 ) );

    if ( isdefined( self.angles ) )
        _id_BB148694F891721D.angles = self.angles;

    if ( isdefined( self.type ) )
    {
        if ( frantic && isdefined( anim.fa_franticnodeyaws ) )
        {
            if ( isdefined( anim.fa_franticnodeyaws[self.type] ) )
                _id_BB148694F891721D addyaw( anim.fa_franticnodeyaws[self.type] );
        }
        else if ( isdefined( anim.fa_nodeyaws ) )
        {
            if ( isdefined( anim.fa_nodeyaws[self.type] ) )
                _id_BB148694F891721D addyaw( anim.fa_nodeyaws[self.type] );
        }
    }

    angles = _id_BB148694F891721D.angles;
    _id_BB148694F891721D delete();
    return angles;
}

fakeactor_node_get_path( _id_E68B39E2CB8B811A, _id_D5685B7BAEE6505E, frantic, _id_C3B2A9E2A964C828 )
{
    node_path = [];
    node_path[0]["origin"] = _id_D5685B7BAEE6505E;
    node_path[0]["dist"] = 0;
    node_path[0]["radius"] = 0;
    node_path[0]["node"] = undefined;
    node_path[0]["total_dist"] = 0;
    _id_886C12B4294E7175 = 1;
    _id_537A83E31CD7DACA = 200;

    for (;;)
    {
        index = node_path.size;
        next_node = undefined;

        if ( _id_886C12B4294E7175 )
        {
            next_node = _id_E68B39E2CB8B811A;
            _id_886C12B4294E7175 = 0;
        }
        else
            next_node = node_path[index - 1]["node"] fakeactor_node_get_next();

        if ( !isdefined( next_node ) )
            break;

        node_path[index]["node"] = next_node;
        _id_CA5534A90F13A4D4 = next_node.origin;

        if ( isdefined( next_node.radius ) )
        {
            if ( !isdefined( self.dronerunoffset ) )
                self.dronerunoffset = -1 + randomfloat( 2 );

            if ( !isdefined( next_node.angles ) )
                next_node.angles = ( 0, 0, 0 );

            forwardvec = anglestoforward( next_node.angles );
            _id_6F0E7A5743E7A561 = anglestoright( next_node.angles );
            upvec = anglestoup( next_node.angles );
            _id_B96E8BC44751CFAE = ( 0, self.dronerunoffset * next_node.radius, 0 );
            _id_CA5534A90F13A4D4 = _id_CA5534A90F13A4D4 + forwardvec * _id_B96E8BC44751CFAE[0];
            _id_CA5534A90F13A4D4 = _id_CA5534A90F13A4D4 + _id_6F0E7A5743E7A561 * _id_B96E8BC44751CFAE[1];
            _id_CA5534A90F13A4D4 = _id_CA5534A90F13A4D4 + upvec * _id_B96E8BC44751CFAE[2];
        }

        node_path[index]["origin"] = _id_CA5534A90F13A4D4;
        node_path[index]["angles"] = next_node fakeactor_node_get_angles( frantic );

        if ( index > 0 )
        {
            _id_4031197014C13B35 = _id_CA5534A90F13A4D4 - node_path[index - 1]["origin"];
            node_path[index - 1]["dist"] = length( _id_4031197014C13B35 );
            node_path[0]["total_dist"] = node_path[0]["total_dist"] + node_path[index - 1]["dist"];
            node_path[index - 1]["to_next_node"] = vectornormalize( _id_4031197014C13B35 );

            if ( isdefined( next_node.radius ) )
                node_path[index - 1]["radius"] = next_node.radius;
            else
                node_path[index - 1]["radius"] = _id_537A83E31CD7DACA;
        }

        _id_57A303D3D9923446 = _id_C3B2A9E2A964C828 && index == 1;

        if ( next_node fakeactor_node_is_end_path( _id_57A303D3D9923446 ) )
            break;
    }

    node_path[index]["dist"] = 0;
    node_path[index]["radius"] = 0;
    node_path[index]["to_next_node"] = node_path[index - 1]["to_next_node"];
    return node_path;
}

fakeactor_node_is_valid()
{
    if ( isdefined( self.disabled ) )
        return 0;

    return 1;
}

fakeactor_node_is_end_path( _id_C3B2A9E2A964C828 )
{
    if ( fakeactor_node_is_animation() && !_id_C3B2A9E2A964C828 )
        return 1;

    if ( fakeactor_node_is_traverse() && !_id_C3B2A9E2A964C828 )
        return 1;

    if ( fakeactor_node_is_turn() && !_id_C3B2A9E2A964C828 )
        return 1;

    if ( fakeactor_node_get_valid_count() == 0 )
        return 1;

    if ( fakeactor_node_is_passthrough() )
        return 0;

    if ( fakeactor_node_is_wait() && _id_C3B2A9E2A964C828 )
        return 0;

    return 1;
}

fakeactor_node_set_disabled( disabled )
{
    if ( disabled )
        self.disabled = 1;
    else
        self.disabled = undefined;
}

fakeactor_node_group_set_disabled( _id_F9C40D8C3212F0A5, disabled )
{
    if ( isdefined( level.fakeactor_node_group[_id_F9C40D8C3212F0A5] ) )
    {
        foreach ( _id_6269CA54B5E5E596 in level.fakeactor_node_group[_id_F9C40D8C3212F0A5] )
            _id_6269CA54B5E5E596 fakeactor_node_set_disabled( disabled );
    }
}

fakeactor_node_set_path_claimed( ent )
{
    self.path_claimed = ent;
}

fakeactor_node_clear_path_claimed()
{
    self.path_claimed = undefined;
}

fakeactor_node_set_claimed( ent )
{
    self.node_claimed[self.node_claimed.size] = ent;
}

fakeactor_node_is_claimed_by( _id_DE64F9209142CEF4 )
{
    if ( self.node_claimed.size <= 0 )
        return 0;

    foreach ( ent in self.node_claimed )
    {
        if ( ent == _id_DE64F9209142CEF4 )
            return 1;
    }

    return 0;
}

fakeactor_node_remove_claimed( _id_3CE07C0FFDF58CF5 )
{
    _id_055F75D9F16D814F = [];

    foreach ( ent in self.node_claimed )
    {
        if ( ent != _id_3CE07C0FFDF58CF5 )
            _id_055F75D9F16D814F[_id_055F75D9F16D814F.size] = ent;
    }

    self.node_claimed = _id_055F75D9F16D814F;
}

fakeactor_node_clear_claimed()
{
    self.node_claimed = [];
}

fakeactor_node_set_wait()
{
    self.wait_state = 0;
}

fakeactor_node_set_locked()
{
    self.wait_state = 1;
}

fakeactor_node_set_passthrough()
{
    self.wait_state = 2;
}

fakeactor_node_is_wait()
{
    return self.wait_state == 0;
}

fakeactor_node_is_locked()
{
    return self.wait_state == 1;
}

fakeactor_node_is_passthrough()
{
    return self.wait_state == 2;
}

fakeactor_node_is_on_moving_platform()
{
    return isdefined( self.ground_ent );
}

fakeactor_node_is_disabled()
{
    return isdefined( self.disabled );
}

fakeactor_node_is_turn()
{
    return self.script_fakeactor_node == "turn";
}

fakeactor_node_is_traverse()
{
    return self.script_fakeactor_node == "traverse" && isdefined( self.traverse_animscript );
}

fakeactor_node_is_animation()
{
    return self.script_fakeactor_node == "animation";
}

fakeactor_node_allow_exits()
{
    return !( self.spawnflags & 128 );
}

fakeactor_node_allow_arrivals()
{
    return !( self.spawnflags & 256 );
}

fakeactor_node_debug()
{

}
