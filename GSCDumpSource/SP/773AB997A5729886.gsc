// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

register_interaction( _id_1FBFD9CFD0B3B4F7, struct )
{
    level.interactions[_id_1FBFD9CFD0B3B4F7] = struct;
}

register_state_interaction( _id_1FBFD9CFD0B3B4F7, struct )
{
    level.state_interactions[_id_1FBFD9CFD0B3B4F7] = struct;
}

get_interaction( _id_1FBFD9CFD0B3B4F7 )
{
    if ( !isdefined( level.interactions ) || !isdefined( level.interactions[_id_1FBFD9CFD0B3B4F7] ) )
        return undefined;

    return level.interactions[_id_1FBFD9CFD0B3B4F7];
}

get_state_interaction( _id_1FBFD9CFD0B3B4F7 )
{
    if ( !issubstr( _id_1FBFD9CFD0B3B4F7, "casual" ) && !issubstr( _id_1FBFD9CFD0B3B4F7, "alert" ) )
    {
        if ( isdefined( self.asm ) )
        {
            _id_F7EE87DC76B45E62 = scripts\asm\asm::asm_getdemeanor();

            if ( _id_F7EE87DC76B45E62 == "casual" )
                _id_1FBFD9CFD0B3B4F7 = _id_1FBFD9CFD0B3B4F7 + "_" + _id_F7EE87DC76B45E62;
            else
                _id_1FBFD9CFD0B3B4F7 = _id_1FBFD9CFD0B3B4F7 + "_alert";
        }
        else
            _id_1FBFD9CFD0B3B4F7 = _id_1FBFD9CFD0B3B4F7 + "_casual";
    }

    if ( !isdefined( level.state_interactions ) || !isdefined( level.state_interactions[_id_1FBFD9CFD0B3B4F7] ) )
        return undefined;

    return level.state_interactions[_id_1FBFD9CFD0B3B4F7];
}

is_interaction( _id_1FBFD9CFD0B3B4F7 )
{
    return isdefined( level.interactions ) && isdefined( level.interactions[_id_1FBFD9CFD0B3B4F7] );
}

is_state_interaction( _id_1FBFD9CFD0B3B4F7 )
{
    return isdefined( level.state_interactions ) && isdefined( level.state_interactions[_id_1FBFD9CFD0B3B4F7 + "_casual"] );
}

is_state_interact_struct( struct )
{
    if ( isdefined( struct.script_reaction ) && is_state_interaction( struct.script_reaction ) )
        return 1;

    return 0;
}

is_interact_struct( struct )
{
    if ( isdefined( struct.script_reaction ) && is_interaction( struct.script_reaction ) )
        return 1;

    if ( isdefined( struct.script_noteworthy ) && is_interaction( struct.script_noteworthy ) )
        return 1;

    return 0;
}

is_interact_node( node )
{
    if ( isdefined( node.script_reaction ) )
    {
        if ( is_interaction( node.script_reaction ) || node.script_reaction == "combat_reaction" )
            return 1;
    }

    return 0;
}

get_arrivalstate_from_interaction( interaction )
{
    _id_F7EE87DC76B45E62 = scripts\asm\asm::asm_getdemeanor();

    if ( isdefined( interaction.arrivalstates ) )
        return interaction.arrivalstates[_id_F7EE87DC76B45E62];
    else
        return undefined;
}

get_exitstate_from_interaction( interaction )
{
    _id_F7EE87DC76B45E62 = scripts\asm\asm::asm_getdemeanor();

    if ( isdefined( interaction.exitstates ) )
        return interaction.exitstates[_id_F7EE87DC76B45E62];
    else
        return undefined;
}

get_idlestate_from_interaction( interaction )
{
    _id_F7EE87DC76B45E62 = scripts\asm\asm::asm_getdemeanor();
    return interaction.idlestate;
}

setup_exit_states_for_interaction( interaction_name )
{
    if ( !isai( self ) )
        return;

    self.asm.customdata.interaction = interaction_name;
    interaction = get_interaction( interaction_name );

    if ( !isdefined( interaction ) )
        interaction = get_state_interaction( interaction_name );

    self._id_57E1B0C4AD45DB70 = get_exitstate_from_interaction( interaction );
}

play_interaction_anim( interact, _id_B94D3FF91445983F, weight, time, rate )
{
    interact = get_interaction( interact );

    if ( !isdefined( weight ) )
        weight = 1;

    if ( !isdefined( time ) )
        time = 0.05;

    if ( !isdefined( rate ) )
        rate = 1;

    start_fakeactor_notetracks( interact.scene[_id_B94D3FF91445983F] );
    self setflaggedanim( _id_B94D3FF91445983F, interact.scene[_id_B94D3FF91445983F], weight, time, rate );
}

define_interacton_position( _id_D79CAAB4489A152E )
{
    self endon( "death" );
    self endon( "reaction_done" );
    self endon( "entitydeleted" );
    _id_6CE5BB7A2A6038F3 = undefined;

    for (;;)
    {
        if ( isstruct( _id_D79CAAB4489A152E ) || isent( _id_D79CAAB4489A152E ) )
            _id_6CE5BB7A2A6038F3 = _id_D79CAAB4489A152E.origin;
        else if ( isvector( _id_D79CAAB4489A152E ) )
            _id_6CE5BB7A2A6038F3 = _id_D79CAAB4489A152E;

        if ( isdefined( self.lookat_anims ) )
            self.lookat_anims["interaction_position"] = _id_6CE5BB7A2A6038F3;

        waitframe();
    }
}

redefine_interaction_radius( _id_22704F0918ABFE44 )
{
    _id_327190E5347A2645 = undefined;

    if ( isdefined( self.lookat_anims ) )
    {
        _id_327190E5347A2645 = self.lookat_anims["trigger_radius"];
        self.lookat_anims["trigger_radius"] = _id_22704F0918ABFE44;
        thread _redefine_interaction_radius_cleanup( _id_327190E5347A2645 );
    }
}

_redefine_interaction_radius_cleanup( _id_327190E5347A2645 )
{
    self endon( "interaction_end" );
    self endon( "reaction_end" );
    self waittill( "interaction_done" );
    self.lookat_anims["trigger_radius"] = _id_327190E5347A2645;
}

play_interaction( interaction_name, optional_scripted_struct, _id_4EC51221F3064070 )
{
    self endon( "death" );
    self notify( "reaction_end" );
    interaction = get_interaction( interaction_name );
    setup_exit_states_for_interaction( interaction_name );

    if ( !isdefined( interaction ) )
        return;

    self.lookat_anims = interaction.scene;

    if ( !isdefined( self.animname ) )
        self.animname = "generic";

    self.anim_sequential_counter = 0;
    self.scene_sequential_sounter = 0;
    self.sequential_scene = 0;
    self.skip_interaction = 0;
    self.is_playing_reaction = 0;
    self.nearby_interaction_running = 0;
    self.interaction_name = interaction_name;
    self.reaction_stop_anims = 1;

    if ( !isdefined( self.allow_interactions ) )
        self.allow_interactions = 1;

    if ( isdefined( level.interaction_manager ) )
    {
        scripts\sp\interaction_manager::add_actor_to_manager();
        level.interaction_manager.data["registered_interactions"][interaction_name] = [];

        if ( isdefined( interaction.scene["vo_lines_male"] ) )
            level.interaction_manager.data["registered_interactions"][interaction_name]["vo_lines_male"] = interaction.scene["vo_lines_male"];

        if ( isdefined( interaction.scene["vo_lines_female"] ) )
            level.interaction_manager.data["registered_interactions"][interaction_name]["vo_lines_female"] = interaction.scene["vo_lines_female"];
    }

    if ( isdefined( optional_scripted_struct ) )
    {
        optional_struct = undefined;

        if ( isarray( self.lookat_anims["idle"] ) )
            _id_7DADC6AEA2EB869D = self.lookat_anims["idle"][0];
        else
            _id_7DADC6AEA2EB869D = self.lookat_anims["idle"];

        if ( isstring( optional_scripted_struct ) )
            optional_struct = scripts\engine\utility::getstruct( optional_scripted_struct, "targetname" );
        else if ( isstruct( optional_scripted_struct ) )
            optional_struct = optional_scripted_struct;
        else if ( isent( optional_scripted_struct ) )
            optional_struct = optional_scripted_struct;
        else
            return;

        anime = _id_7DADC6AEA2EB869D;
        start_origin = getstartorigin( optional_struct.origin, optional_struct.angles, anime );
        start_angles = getstartangles( optional_struct.origin, optional_struct.angles, anime );

        if ( !isdefined( self.is_cheap ) )
            self forceteleport( start_origin, start_angles );
        else
        {
            self.origin = start_origin;
            self.angles = start_angles;
        }

        if ( !isdefined( self.is_cheap ) )
            self animmode( "noclip" );

        self.optional_struct = optional_struct;
    }

    if ( !isdefined( self.anim_info ) )
        self.anim_info = spawnstruct();

    if ( isdefined( self.lookat_anims["no_gun"] ) )
    {
        if ( !isdefined( self.is_cheap ) )
            scripts\common\ai::gun_remove();
    }

    if ( isdefined( self.is_cheap ) )
    {
        if ( !isdefined( _id_4EC51221F3064070 ) )
        {
            thread interaction_process();
            thread interaction_end_cheap();
        }
        else
        {
            thread interaction_follow_process();
            thread interaction_end_cheap();
        }
    }
    else if ( !isdefined( _id_4EC51221F3064070 ) )
        scripts\asm\asm_sp::asm_animcustom( ::interaction_process, ::interaction_end );
    else
        scripts\asm\asm_sp::asm_animcustom( ::interaction_follow_process, ::interaction_end );

    self waittill( "reaction_end" );
}

play_smart_interaction( interaction_name, _id_51501AC9D44962F8, post_reaction_vo, _id_42B1F24D780B1894, _id_4F86D94CDA7CCFED, optional_scripted_struct, _id_AE60636ACDFADD47, _id_A8B8D69BB3F6E8A9 )
{
    self endon( "death" );
    self endon( "stop_smart_reaction" );
    setup_interaction_head();
    _id_CD56AED546A14150 = get_interaction( interaction_name ).scene["trigger_radius"] * 2;
    thread scripts\sp\interaction_manager::reaction_look_distance_based( _id_CD56AED546A14150 );
    play_interaction_unknowntype( interaction_name, optional_scripted_struct, _id_51501AC9D44962F8, _id_A8B8D69BB3F6E8A9 );
    self waittill( "interaction_done" );
    thread scripts\engine\sp\utility::gesture_stop( 0.7 );
    self notify( "stop_reaction_look" );
    waittill_playeroutsideradius( _id_AE60636ACDFADD47 );
    play_looping_acknowlegdements( post_reaction_vo, _id_AE60636ACDFADD47 );
}

#using_animtree("generic_human");

setup_interaction_head()
{
    self.headknob = %head;
    self.scriptedtalkingknob = %scripted_talking;
    self.defaulttalk = %generic_talker_allies;
}

play_interaction_unknowntype( interaction_name, optional_scripted_struct, _id_51501AC9D44962F8, _id_A8B8D69BB3F6E8A9 )
{
    if ( issubstr( interaction_name, "blended" ) )
        thread play_interaction_blended( interaction_name, optional_scripted_struct );
    else
        thread play_interaction( interaction_name, optional_scripted_struct );

    queue_interaction_vo( _id_51501AC9D44962F8, _id_A8B8D69BB3F6E8A9 );
}

queue_interaction_vo( _id_51501AC9D44962F8, _id_A8B8D69BB3F6E8A9 )
{
    if ( !isdefined( _id_A8B8D69BB3F6E8A9 ) )
        thread play_note_anim_vo( _id_51501AC9D44962F8 );
    else
    {
        self waittill( "playing_interaction_scene" );
        scripts\engine\utility::delaythread( _id_A8B8D69BB3F6E8A9, scripts\sp\interaction_manager::play_smart_dialog_if_exists, _id_51501AC9D44962F8 );
    }
}

play_smart_simple_interaction( interaction_name, _id_51501AC9D44962F8, post_reaction_vo, _id_42B1F24D780B1894, _id_4F86D94CDA7CCFED, optional_scripted_struct, _id_AE60636ACDFADD47 )
{
    self endon( "death" );
    self endon( "stop_smart_reaction" );
    self.headknob = %head;
    self.scriptedtalkingknob = %scripted_talking;
    self.defaulttalk = %generic_talker_allies;
    thread play_interaction_simple( interaction_name, optional_scripted_struct );
    scripts\sp\interaction_manager::play_gesture_reaction( 85.0, 50.0, _id_51501AC9D44962F8, _id_42B1F24D780B1894, _id_4F86D94CDA7CCFED );
    self notify( "first_acknowledgement_done" );
    waittill_playeroutsideradius( _id_AE60636ACDFADD47 );
    _id_A11FCAFCDAB17D56 = create_interaction_linebook( post_reaction_vo );

    for (;;)
    {
        _id_A0DC29CFF035E549 = _id_A11FCAFCDAB17D56 get_interaction_vo_line();
        scripts\sp\interaction_manager::play_gesture_reaction( 85.0, 50.0, _id_A0DC29CFF035E549, _id_42B1F24D780B1894, _id_4F86D94CDA7CCFED );
        waittill_playeroutsideradius( _id_AE60636ACDFADD47 );
    }
}

play_smart_basic_interaction( _id_BFF752982ED3D584, post_reaction_vo, _id_42B1F24D780B1894, _id_4F86D94CDA7CCFED, _id_AE60636ACDFADD47 )
{
    self endon( "death" );
    self endon( "stop_smart_reaction" );
    self.headknob = %head;
    self.scriptedtalkingknob = %scripted_talking;
    self.defaulttalk = %generic_talker_allies;
    play_single_acknowledgement( _id_BFF752982ED3D584 );
    self notify( "first_acknowledgement_done" );
    waittill_playeroutsideradius( _id_AE60636ACDFADD47 );
    play_looping_acknowlegdements( post_reaction_vo, _id_AE60636ACDFADD47 );
}

play_smart_silent_interaction( _id_AE60636ACDFADD47 )
{
    self endon( "death" );
    self endon( "stop_smart_reaction" );
    self.headknob = %head;
    self.scriptedtalkingknob = %scripted_talking;
    self.defaulttalk = %generic_talker_allies;
    play_single_acknowledgement( undefined );
    waittill_playeroutsideradius( _id_AE60636ACDFADD47 );
    play_looping_acknowlegdements( undefined, _id_AE60636ACDFADD47 );
}

play_smart_simple_silent_interaction( interaction_name, optional_scripted_struct, _id_AE60636ACDFADD47 )
{
    self endon( "death" );
    self endon( "stop_smart_reaction" );
    self.headknob = %head;
    self.scriptedtalkingknob = %scripted_talking;
    self.defaulttalk = %generic_talker_allies;
    thread play_interaction_simple( interaction_name, optional_scripted_struct );
    scripts\sp\interaction_manager::play_gesture_reaction( 85.0, 50.0 );
    self notify( "first_acknowledgement_done" );
    waittill_playeroutsideradius( _id_AE60636ACDFADD47 );
    play_looping_acknowlegdements( undefined, _id_AE60636ACDFADD47 );
}

play_single_acknowledgement( _id_A063A72464A04A79 )
{
    self endon( "stop_smart_reaction" );
    _id_6EA4BFDBC4ECB4AB = 110;
    _id_D0DEF05D989B3BE4 = 85;
    scripts\sp\interaction_manager::play_gesture_reaction( _id_6EA4BFDBC4ECB4AB, _id_D0DEF05D989B3BE4, _id_A063A72464A04A79 );
}

play_looping_acknowlegdements( _id_0EFE1C4B2620F108, _id_AE60636ACDFADD47 )
{
    self endon( "death" );
    self endon( "stop_smart_reaction" );

    if ( !isdefined( _id_AE60636ACDFADD47 ) )
        _id_AE60636ACDFADD47 = 300;

    if ( isdefined( _id_0EFE1C4B2620F108 ) )
    {
        _id_A11FCAFCDAB17D56 = create_interaction_linebook( _id_0EFE1C4B2620F108 );

        for (;;)
        {
            _id_A0DC29CFF035E549 = _id_A11FCAFCDAB17D56 get_interaction_vo_line();
            play_single_acknowledgement( _id_A0DC29CFF035E549 );
            waittill_playeroutsideradius( _id_AE60636ACDFADD47 );
        }
    }
    else
    {
        for (;;)
        {
            play_single_acknowledgement();
            waittill_playeroutsideradius( _id_AE60636ACDFADD47 );
        }
    }
}

play_silent_acknowledgement()
{
    _id_6EA4BFDBC4ECB4AB = 110;
    _id_D0DEF05D989B3BE4 = 85;
    scripts\sp\interaction_manager::play_gesture_reaction( _id_6EA4BFDBC4ECB4AB, _id_D0DEF05D989B3BE4 );
}

waittill_playeroutsideradius( dist )
{
    if ( !isdefined( dist ) )
        dist = 256;

    for (;;)
    {
        if ( distance2d( self.origin, level.player.origin ) >= dist )
            break;

        waitframe();
    }
}

create_interaction_linebook( _id_0EFE1C4B2620F108 )
{
    if ( !isarray( _id_0EFE1C4B2620F108 ) && !isstruct( _id_0EFE1C4B2620F108 ) && !isstring( _id_0EFE1C4B2620F108 ) && !isvector( _id_0EFE1C4B2620F108 ) && !_id_0EFE1C4B2620F108 )
        return undefined;

    _id_88318301272D82DA = spawnstruct();
    _id_88318301272D82DA.base = _id_0EFE1C4B2620F108;
    _id_88318301272D82DA.available = _id_0EFE1C4B2620F108;
    _id_88318301272D82DA.used = [];
    return _id_88318301272D82DA;
}

reset_interaction_linebook()
{
    self.used = [];
    self.available = self.base;
}

get_interaction_vo_line()
{
    _id_A0DC29CFF035E549 = undefined;

    if ( isdefined( self.available ) )
    {
        if ( self.available.size <= 0 )
            reset_interaction_linebook();

        _id_A0DC29CFF035E549 = self.available[randomint( self.available.size )];
        self.used = scripts\engine\utility::array_add( self.used, _id_A0DC29CFF035E549 );
        self.available = scripts\engine\utility::array_remove( self.available, _id_A0DC29CFF035E549 );
        return _id_A0DC29CFF035E549;
    }
}

play_smart_basic_group_interaction( _id_5F7A2F6EF630C3E8, _id_7551DEA02427D9CD, _id_EEE89E98A7CE9526, _id_AE60636ACDFADD47 )
{
    foreach ( actor in _id_5F7A2F6EF630C3E8 )
    {
        actor endon( "death" );
        actor endon( "stop_smart_reaction" );
        actor.headknob = %head;
        actor.scriptedtalkingknob = %scripted_talking;
        actor.defaulttalk = %generic_talker_allies;
    }

    if ( _id_5F7A2F6EF630C3E8.size != _id_7551DEA02427D9CD.size || _id_5F7A2F6EF630C3E8.size != _id_EEE89E98A7CE9526.size )
        return;

    play_group_acknowledgement( _id_5F7A2F6EF630C3E8, _id_7551DEA02427D9CD );
    _id_917387EE0FEA69EF = scripts\sp\interaction_manager::create_middle_ent( _id_5F7A2F6EF630C3E8 );
    _id_917387EE0FEA69EF waittill_playeroutsideradius( _id_AE60636ACDFADD47 );
    play_group_looping_acknowledgements( _id_5F7A2F6EF630C3E8, _id_EEE89E98A7CE9526, _id_AE60636ACDFADD47 );
}

play_group_acknowledgement( _id_5F7A2F6EF630C3E8, _id_41BDBC2D3AC2BABA )
{
    _id_6EA4BFDBC4ECB4AB = 110;
    _id_D0DEF05D989B3BE4 = 85;
    scripts\sp\interaction_manager::play_group_gesture_reaction( _id_5F7A2F6EF630C3E8, _id_6EA4BFDBC4ECB4AB, _id_D0DEF05D989B3BE4, _id_41BDBC2D3AC2BABA );
}

play_group_looping_acknowledgements( _id_5F7A2F6EF630C3E8, _id_19C9B444DA731181, _id_AE60636ACDFADD47 )
{
    foreach ( actor in _id_5F7A2F6EF630C3E8 )
    {
        actor endon( "death" );
        actor endon( "stop_smart_reaction" );
    }

    _id_3204046E85AAB8C2 = create_group_interaction_linebook( _id_19C9B444DA731181 );
    _id_917387EE0FEA69EF = scripts\sp\interaction_manager::create_middle_ent( _id_5F7A2F6EF630C3E8 );

    for (;;)
    {
        _id_E73000EABF1CD643 = get_interaction_vo_line_array( _id_3204046E85AAB8C2 );
        play_group_acknowledgement( _id_5F7A2F6EF630C3E8, _id_E73000EABF1CD643 );
        _id_917387EE0FEA69EF waittill_playeroutsideradius( _id_AE60636ACDFADD47 );
    }
}

create_group_interaction_linebook( _id_19C9B444DA731181 )
{
    _id_3204046E85AAB8C2 = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_19C9B444DA731181.size; _id_AC0E594AC96AA3A8++ )
        _id_3204046E85AAB8C2[_id_AC0E594AC96AA3A8] = create_interaction_linebook( _id_19C9B444DA731181[_id_AC0E594AC96AA3A8] );

    return _id_3204046E85AAB8C2;
}

get_interaction_vo_line_array( _id_3204046E85AAB8C2 )
{
    _id_69CAC023B71C8833 = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_3204046E85AAB8C2.size; _id_AC0E594AC96AA3A8++ )
        _id_69CAC023B71C8833[_id_AC0E594AC96AA3A8] = _id_3204046E85AAB8C2[_id_AC0E594AC96AA3A8] get_interaction_vo_line();

    return _id_69CAC023B71C8833;
}

play_interaction_with_states( interaction_name, optional_scripted_struct, _id_4EC51221F3064070 )
{
    self endon( "death" );
    self notify( "reaction_end" );
    interaction = get_state_interaction( interaction_name );
    setup_exit_states_for_interaction( interaction_name );

    if ( !isdefined( interaction ) )
        return;

    if ( !isdefined( self.animname ) )
        self.animname = "generic";

    self.is_playing_reaction = 0;
    self.nearby_interaction_running = 0;
    self.interaction_name = interaction_name;
    self.reaction_stop_anims = 1;

    if ( !isdefined( self.allow_interactions ) )
        self.allow_interactions = 1;

    if ( isdefined( level.interaction_manager ) )
        scripts\sp\interaction_manager::add_actor_to_manager();

    if ( isdefined( optional_scripted_struct ) )
    {
        optional_struct = undefined;

        if ( isarray( interaction.scene["idle"] ) )
            _id_7DADC6AEA2EB869D = interaction.scene["idle"][0];
        else
            _id_7DADC6AEA2EB869D = interaction.scene["idle"];

        if ( isstring( optional_scripted_struct ) )
            optional_struct = scripts\engine\utility::getstruct( optional_scripted_struct, "targetname" );
        else if ( isstruct( optional_scripted_struct ) )
            optional_struct = optional_scripted_struct;
        else if ( isent( optional_scripted_struct ) )
            optional_struct = optional_scripted_struct;
        else
            return;

        anime = _id_7DADC6AEA2EB869D;
        start_origin = getstartorigin( optional_struct.origin, optional_struct.angles, anime );
        start_angles = getstartangles( optional_struct.origin, optional_struct.angles, anime );

        if ( !isdefined( self.is_cheap ) )
            self forceteleport( start_origin, start_angles );
        else
        {
            self.origin = start_origin;
            self.angles = start_angles;
        }

        if ( !isdefined( self.is_cheap ) )
            self animmode( "noclip" );

        self.optional_struct = optional_struct;
    }

    if ( !isdefined( self.anim_info ) )
        self.anim_info = spawnstruct();

    if ( isdefined( interaction.scene["no_gun"] ) )
    {
        if ( !isdefined( self.is_cheap ) && !isnullweapon( self.weapon ) )
            scripts\common\ai::gun_remove();
    }

    if ( isdefined( self.is_cheap ) )
    {
        thread interaction_process_for_states();
        thread interaction_end_cheap();
    }
    else
        scripts\asm\asm_sp::asm_animcustom( ::interaction_process_for_states, scripts\sp\interaction_manager::stop_state_based_interaction );

    self waittill( "reaction_end" );
}

play_interaction_simple( interaction_name, optional_scripted_struct, optional_prop )
{
    self endon( "death" );
    self endon( "reaction_end" );
    interaction = get_interaction( interaction_name );

    if ( !isdefined( interaction ) )
        return;

    self.lookat_anims = interaction.scene;

    if ( !isdefined( self.animname ) )
        self.animname = "generic";

    self.anim_sequential_counter = 0;
    self.scene_sequential_sounter = 0;
    self.sequential_scene = 0;
    self.skip_interaction = 0;
    self.is_playing_reaction = 0;
    self.nearby_interaction_running = 0;
    self.interaction_name = interaction_name;
    self.reaction_stop_anims = 1;
    self.optional_struct = undefined;
    self.optional_prop = undefined;

    if ( !isdefined( self.allow_interactions ) )
        self.allow_interactions = 1;

    if ( isdefined( level.interaction_manager ) )
        level.interaction_manager.data["actors"] = scripts\engine\utility::array_add( level.interaction_manager.data["actors"], self );

    if ( isdefined( optional_prop ) )
        self.optional_prop = optional_prop;

    if ( isdefined( optional_scripted_struct ) )
    {
        optional_struct = undefined;

        if ( isarray( self.lookat_anims["idle"] ) )
            _id_7DADC6AEA2EB869D = self.lookat_anims["idle"][0];
        else
            _id_7DADC6AEA2EB869D = self.lookat_anims["idle"];

        if ( isstring( optional_scripted_struct ) )
            optional_struct = scripts\engine\utility::getstruct( optional_scripted_struct, "targetname" );
        else if ( isstruct( optional_scripted_struct ) )
            optional_struct = optional_scripted_struct;
        else if ( isent( optional_scripted_struct ) )
            optional_struct = optional_scripted_struct;
        else
            return;

        anime = _id_7DADC6AEA2EB869D;
        start_origin = getstartorigin( optional_struct.origin, optional_struct.angles, anime );
        start_angles = getstartangles( optional_struct.origin, optional_struct.angles, anime );
        self.optional_struct = optional_scripted_struct;
    }

    if ( !isdefined( self.is_cheap ) )
        self animmode( "noclip" );

    if ( !isdefined( self.anim_info ) )
        self.anim_info = spawnstruct();

    if ( isdefined( self.lookat_anims["no_gun"] ) )
    {
        if ( !isdefined( self.is_cheap ) && !isnullweapon( self.weapon ) )
            scripts\common\ai::gun_remove();
    }

    if ( isdefined( self.is_cheap ) )
    {
        thread simple_interaction_idles();
        thread interaction_end_cheap();
    }
    else
        scripts\asm\asm_sp::asm_animcustom( ::simple_interaction_idles, ::interaction_end );

    self waittill( "reaction_end" );
}

play_interaction_blended( interaction_name, optional_scripted_struct )
{
    self endon( "death" );
    self notify( "reaction_end" );
    interaction = get_interaction( interaction_name );

    if ( !isdefined( interaction ) )
        return;

    reset_actor_interaction_values( interaction, interaction_name );
    add_actor_tointeractionmanager();
    move_actor_tointeractionposition( optional_scripted_struct );
    run_blended_interaction();
}

reset_actor_interaction_values( interaction, interaction_name )
{
    if ( !isdefined( self.animname ) )
        self.animname = "generic";

    self.lookat_anims = interaction.scene;
    self.anim_sequential_counter = 0;
    self.scene_sequential_sounter = 0;
    self.sequential_scene = 0;
    self.skip_interaction = 0;
    self.is_playing_reaction = 0;
    self.nearby_interaction_running = 0;
    self.interaction_name = interaction_name;
    self.reaction_stop_anims = 1;

    if ( !isdefined( self.allow_interactions ) || isdefined( self.allow_interactions ) && !self.allow_interactions )
        self.allow_interactions = 1;

    if ( !isdefined( self.anim_info ) )
        self.anim_info = spawnstruct();

    if ( isdefined( self.lookat_anims["no_gun"] ) )
    {
        if ( !isdefined( self.is_cheap ) )
            scripts\common\ai::gun_remove();
    }
}

add_actor_tointeractionmanager()
{
    if ( isdefined( level.interaction_manager ) )
        level.interaction_manager.data["actors"] = scripts\engine\utility::array_add( level.interaction_manager.data["actors"], self );
}

get_interaction_actor_lookatidle()
{
    if ( isarray( self.lookat_anims["idle"] ) )
        return self.lookat_anims["idle"][0];
    else
        return self.lookat_anims["idle"];
}

get_interaction_actor_optionalstruct( optional_scripted_struct )
{
    optional_struct = undefined;

    if ( isstring( optional_scripted_struct ) )
        optional_struct = scripts\engine\utility::getstruct( optional_scripted_struct, "targetname" );
    else if ( isstruct( optional_scripted_struct ) )
        optional_struct = optional_scripted_struct;
    else if ( isent( optional_scripted_struct ) )
        optional_struct = optional_scripted_struct;
    else
    {

    }

    return optional_struct;
}

move_actor_tointeractionposition( optional_scripted_struct )
{
    if ( isdefined( optional_scripted_struct ) )
    {
        _id_44C623F0EB82B128 = get_interaction_actor_lookatidle();
        optional_struct = get_interaction_actor_optionalstruct( optional_scripted_struct );

        if ( !isdefined( optional_struct ) )
            return;

        self.optional_scripted_struct = optional_scripted_struct;
        start_origin = getstartorigin( optional_struct.origin, optional_struct.angles, _id_44C623F0EB82B128 );
        start_angles = getstartangles( optional_struct.origin, optional_struct.angles, _id_44C623F0EB82B128 );
        teleport_interaction_actor( start_origin, start_angles );

        if ( !isdefined( self.is_cheap ) )
            self animmode( "noclip" );
    }
}

teleport_interaction_actor( _id_53FD9BCFE97F77D0, new_angles )
{
    if ( isdefined( self.is_cheap ) )
    {
        self.origin = _id_53FD9BCFE97F77D0;
        self.angles = new_angles;
    }
    else
        self forceteleport( _id_53FD9BCFE97F77D0, new_angles );
}

run_blended_interaction()
{
    if ( isdefined( self.is_cheap ) )
    {
        thread interaction_process_blended();
        thread interaction_end_cheap();
    }
    else
        scripts\asm\asm_sp::asm_animcustom( ::interaction_process_blended, ::interaction_end );

    self waittill( "reaction_end" );
}

play_interaction_immediate( interaction_name, optional_scripted_struct )
{
    self endon( "death" );
    interaction = get_interaction( interaction_name );

    if ( !isdefined( interaction ) )
        return;

    self.lookat_anims = interaction.scene;

    if ( !isdefined( self.animname ) )
        self.animname = "generic";

    self.interaction_name = interaction_name;
    self.anim_sequential_counter = 0;
    self.scene_sequential_sounter = 0;
    self.sequential_scene = 0;
    self.skip_interaction = 0;
    self.is_playing_reaction = 0;
    self.nearby_interaction_running = 0;

    if ( !isdefined( self.allow_interactions ) )
        self.allow_interactions = 1;

    if ( isdefined( level.interaction_manager ) )
        level.interaction_manager.data["actors"] = scripts\engine\utility::array_add( level.interaction_manager.data["actors"], self );

    if ( isdefined( optional_scripted_struct ) )
    {
        optional_struct = undefined;
        _id_CE2292AA6B6C53C7 = self.lookat_anims["lastanim"];

        if ( isstring( optional_scripted_struct ) )
            optional_struct = scripts\engine\utility::getstruct( optional_scripted_struct, "targetname" );
        else if ( isstruct( optional_scripted_struct ) )
            optional_struct = optional_scripted_struct;
        else
            return;

        self.lookat_anims["optional_struct"] = optional_struct;
    }

    if ( !isdefined( self.anim_info ) )
        self.anim_info = spawnstruct();

    if ( isdefined( self.lookat_anims["no_gun"] ) )
    {
        if ( !isdefined( self.is_cheap ) )
            scripts\common\ai::gun_remove();
    }

    thread scripts\asm\asm_sp::asm_animcustom( ::interaction_immediate_process );
    self waittill( "interaction_done" );
}

clear_root()
{
    self clearanim( %body, 0.2 );
}

is_looking_at_range( _id_8D206297C3CB29D4, range )
{
    _id_70222FBC47330166 = anglestoforward( level.player.angles );
    _id_BAC0559FEED06173 = vectornormalize( _id_8D206297C3CB29D4.origin - level.player.origin );
    _id_FCE87949C9B65851 = vectordot( _id_70222FBC47330166, _id_BAC0559FEED06173 );

    if ( _id_FCE87949C9B65851 >= range )
        return 1;
    else
        return 0;
}

interaction_immediate_process()
{
    self endon( "death" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    self.followoff = 0;
    clear_root();

    if ( !isdefined( self.is_cheap ) )
    {
        self orientmode( "face angle", self.angles[1] );
        self animmode( "noclip" );
    }

    optional_struct = self.lookat_anims["optional_struct"];
    _id_314C4455B996B224 = "single anim";

    if ( !scripts\engine\utility::ent_flag_exist( "interaction_end" ) )
        scripts\engine\utility::ent_flag_init( "interaction_end" );

    scripts\engine\utility::ent_flag_clear( "interaction_end" );
    _id_8E9608FC3378D03E = 0.25;
    _id_71794246B41106AC = 0.25;

    if ( isdefined( self.lookat_anims["common_name"] ) )
        thread scripts\sp\interaction_manager::trigger_interaction_common();

    if ( !self.nearby_interaction_running )
    {
        self.is_playing_reaction = 1;
        self notify( "playing_interaction" );
        _id_837C12743AB916FE = undefined;

        if ( isdefined( self.lookat_anims["interaction_position"] ) )
            _id_837C12743AB916FE = vectortoangles( self.lookat_anims["interaction_position"] - self.origin );
        else
            _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

        angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );
        _id_A5148760D51EB926 = scripts\engine\math::normalize_value( 0, 360, angle );
        _id_5442D92E287BFFA2 = self.lookat_anims["lastanim"];

        if ( isdefined( self.lookat_anims["angles"] ) )
        {
            foreach ( _id_AD0C4582F262F65A in self.lookat_anims["angles"] )
            {
                if ( angle <= _id_AD0C4582F262F65A )
                {
                    _id_5442D92E287BFFA2 = self.lookat_anims[_id_AD0C4582F262F65A];
                    break;
                }
            }
        }

        if ( isdefined( optional_struct ) )
        {
            start_origin = getstartorigin( optional_struct.origin, optional_struct.angles, _id_5442D92E287BFFA2 );
            start_angles = getstartangles( optional_struct.origin, optional_struct.angles, _id_5442D92E287BFFA2 );
            self forceteleport( start_origin, start_angles );
        }

        start_fakeactor_notetracks( _id_5442D92E287BFFA2 );
        self setflaggedanim( _id_314C4455B996B224, _id_5442D92E287BFFA2, 1.0, _id_8E9608FC3378D03E );
        wait_time = getanimlength( _id_5442D92E287BFFA2 );
        wait( wait_time );
        self clearanim( _id_5442D92E287BFFA2, _id_71794246B41106AC );
        level notify( "interaction_done" );
        self notify( "interaction_done" );
    }
}

interaction_follow_process()
{
    self endon( "death" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    self.followoff = 0;
    clear_root();

    if ( !isdefined( self.is_cheap ) )
    {
        self orientmode( "face angle", self.angles[1] );
        self animmode( "noclip" );
    }

    _id_E1F91FE78B76DD48 = undefined;
    self.random_idle_playing = 0;

    if ( isarray( self.lookat_anims["idle"] ) )
    {
        _id_E1F91FE78B76DD48 = self.lookat_anims["idle"][0];
        thread random_idle_controller();
    }
    else
        _id_E1F91FE78B76DD48 = self.lookat_anims["idle"];

    start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
    self setflaggedanim( "idle", _id_E1F91FE78B76DD48, 1, 0.5, 1 );
    thread interaction_set_anim_movement( "stop" );
    _id_314C4455B996B224 = "single anim";

    if ( !scripts\engine\utility::ent_flag_exist( "scene_end" ) )
        scripts\engine\utility::ent_flag_init( "scene_end" );

    scripts\engine\utility::ent_flag_clear( "scene_end" );

    if ( !scripts\engine\utility::ent_flag_exist( "playing_interaction" ) )
        scripts\engine\utility::ent_flag_init( "playing_interaction" );

    scripts\engine\utility::ent_flag_clear( "playing_interaction" );
    _id_A8CBE4EAA2219CC9 = 0.11;
    _id_8E9608FC3378D03E = 0.25;
    _id_59213491A79A5A54 = 0.25;
    _id_327B427E11281445 = 350;
    _id_71794246B41106AC = 0.45;
    _id_0F2AEE3C308532D3 = undefined;
    _id_86FDC699F8814626 = undefined;
    _id_9EF180B6A072474B = undefined;

    if ( isdefined( self.lookat_anims["reacquire_left"] ) || isdefined( self.lookat_anims["reacquire_right"] ) )
        _id_0F2AEE3C308532D3 = 1;

    self.reactiontrigger = spawn( "trigger_radius", self.origin, 0, self.lookat_anims["trigger_radius"], self.lookat_anims["trigger_radius"] );

    for (;;)
    {
        if ( ( level.player istouching( self.reactiontrigger ) || is_looking_at_range( self, 0.925 ) ) && !self.random_idle_playing )
        {
            if ( self.sequential_scene )
                self.skip_interaction = 1;
            else
                self.skip_interaction = 0;
        }
        else
            self.skip_interaction = 0;

        _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );
        _id_7636B8DC247C7CB4 = undefined;
        _id_FBCABD62B8F66EB8 = scripts\engine\trace::create_contents( 1, 1, 0, 1, 1, 1 );
        trace = undefined;

        for (;;)
        {
            if ( isdefined( self.lookat_anims["interaction_trigger_override"] ) )
                break;

            if ( scripts\sp\interaction_manager::can_play_nearby_interaction( self.lookat_anims["trigger_radius"] * 2 ) )
            {
                if ( isdefined( self.lookat_anims["interaction_position"] ) )
                    _id_084D1D51D3F40043 = lengthsquared( self.lookat_anims["interaction_position"] - self.origin );
                else
                    _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );

                if ( isdefined( self.lookat_anims["interaction_trigger_override"] ) )
                    break;
                else if ( self.lookat_anims["trigger_radius"] > 0 && _id_084D1D51D3F40043 < squared( self.lookat_anims["trigger_radius"] ) && is_looking_at_range( self, 0.925 ) && !self.random_idle_playing )
                {
                    _id_1B2A5F2737C5776C = self.origin + anglestoup( self.angles ) * 66;
                    _id_7636B8DC247C7CB4 = vectornormalize( level.player geteye() - _id_1B2A5F2737C5776C ) * self.lookat_anims["trigger_radius"] + _id_1B2A5F2737C5776C;
                    trace = scripts\engine\trace::ray_trace( _id_1B2A5F2737C5776C, _id_7636B8DC247C7CB4, self, _id_FBCABD62B8F66EB8 );

                    if ( isplayer( trace["entity"] ) || isdefined( self.lookat_anims["interaction_trigger_override"] ) )
                        break;
                }
            }

            waitframe();
        }

        if ( isdefined( self.lookat_anims["common_name"] ) )
            thread scripts\sp\interaction_manager::trigger_interaction_common();

        self.is_playing_reaction = 1;
        self notify( "playing_interaction_scene" );
        level notify( "playing_interaction" );
        _id_837C12743AB916FE = undefined;

        if ( isdefined( self.lookat_anims["interaction_position"] ) )
            _id_837C12743AB916FE = vectortoangles( self.lookat_anims["interaction_position"] - self.origin );
        else
            _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

        angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );
        _id_A5148760D51EB926 = scripts\engine\math::normalize_value( 0, 360, angle );

        if ( isdefined( self.lookat_anims["backseam"] ) )
        {
            if ( _id_A5148760D51EB926 >= 0 && _id_A5148760D51EB926 <= 0.5 )
                _id_A5148760D51EB926 = _id_A5148760D51EB926 + 0.5;
            else
                _id_A5148760D51EB926 = _id_A5148760D51EB926 - 0.5;
        }

        _id_5442D92E287BFFA2 = self.lookat_anims["lastanim"];

        if ( isdefined( self.lookat_anims["angles"] ) && !self.sequential_scene )
        {
            foreach ( _id_AD0C4582F262F65A in self.lookat_anims["angles"] )
            {
                if ( angle <= _id_AD0C4582F262F65A )
                {
                    _id_5442D92E287BFFA2 = self.lookat_anims[_id_AD0C4582F262F65A];
                    break;
                }
            }
        }

        if ( isarray( _id_5442D92E287BFFA2 ) )
        {
            if ( isarray( _id_5442D92E287BFFA2[0] ) )
            {
                _id_1511386E758EF855 = self.anim_sequential_counter;
                _id_E88EF0694A45C625 = _id_5442D92E287BFFA2[0][_id_1511386E758EF855][0];
            }
            else
                _id_E88EF0694A45C625 = _id_5442D92E287BFFA2[0];
        }
        else
            _id_E88EF0694A45C625 = _id_5442D92E287BFFA2;

        if ( !self.skip_interaction )
        {
            start_fakeactor_notetracks( _id_E88EF0694A45C625 );
            self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_E88EF0694A45C625, 1, _id_8E9608FC3378D03E, 1 );
            self.is_playing_reaction = 1;
        }

        if ( !self.skip_interaction )
        {
            if ( isarray( _id_5442D92E287BFFA2 ) )
            {
                if ( isarray( _id_5442D92E287BFFA2[0] ) && !isarray( self.lookat_anims["diff"] ) )
                {
                    _id_1511386E758EF855 = self.anim_sequential_counter;
                    _id_0EFE1C4B2620F108 = _id_5442D92E287BFFA2[0][_id_1511386E758EF855];
                    thread set_sequential_wait_time( _id_0EFE1C4B2620F108 );
                    thread play_anim_vo_sequential( _id_0EFE1C4B2620F108 );
                }
                else if ( _id_5442D92E287BFFA2.size > 1 )
                    thread play_anim_vo_sequential( _id_5442D92E287BFFA2 );
            }
        }

        if ( isdefined( self.lookat_anims["reaction_func"] ) )
            self thread [[ self.lookat_anims["reaction_func"] ]]();

        _id_2C3D71C250A9405D = getanimlength( _id_E88EF0694A45C625 );
        _id_2C3D71C250A9405D = _id_2C3D71C250A9405D - _id_59213491A79A5A54;

        if ( _id_2C3D71C250A9405D < 0 )
            _id_2C3D71C250A9405D = 0;

        if ( !self.skip_interaction )
            wait( _id_2C3D71C250A9405D );

        if ( !self.skip_interaction )
        {
            start_fakeactor_notetracks( self.lookat_anims["follow"] );
            self _meth_592B654DA5474B48( _id_314C4455B996B224, self.lookat_anims["follow"], 1, 0.25, 1 );
            self setanimtime( self.lookat_anims["follow"], _id_A5148760D51EB926 );
            self setanimknob( self.lookat_anims["ring"], 1, _id_59213491A79A5A54, 1 );
        }

        _id_92778D781991982A = undefined;

        if ( isarray( self.lookat_anims["diff"] ) )
        {
            _id_1511386E758EF855 = self.anim_sequential_counter;
            _id_92778D781991982A = self.lookat_anims["diff"][_id_1511386E758EF855];
        }
        else
            _id_92778D781991982A = self.lookat_anims["diff"];

        start_fakeactor_notetracks( _id_92778D781991982A );
        self _meth_592B654DA5474B48( _id_314C4455B996B224, _id_92778D781991982A, 1, 0.25, 1 );
        self.is_playing_reaction = 1;

        if ( !self.skip_interaction )
            self setanimlimited( self.lookat_anims["additive"], 1, _id_59213491A79A5A54, 1 );

        scripts\engine\utility::delaythread( getanimlength( _id_92778D781991982A ), scripts\engine\utility::ent_flag_set, "scene_end" );
        scripts\engine\utility::ent_flag_set( "playing_interaction" );
        thread scripts\engine\utility::ent_flag_clear_delayed( "playing_interaction", getanimlength( _id_92778D781991982A ) );
        _id_8BC1A6A78E77C5D1 = _id_A5148760D51EB926;

        for (;;)
        {
            _id_AC24B8027C653BEF = distance2d( level.player.origin, self.origin );

            if ( ( _id_AC24B8027C653BEF >= _id_327B427E11281445 || scripts\engine\utility::ent_flag( "scene_end" ) ) && !isdefined( _id_0F2AEE3C308532D3 ) )
            {
                _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );

                if ( _id_084D1D51D3F40043 < squared( self.lookat_anims["trigger_radius"] ) )
                {
                    _id_1B2A5F2737C5776C = self.origin + anglestoup( self.angles ) * 66;
                    _id_7636B8DC247C7CB4 = vectornormalize( level.player geteye() - _id_1B2A5F2737C5776C ) * self.lookat_anims["trigger_radius"] + _id_1B2A5F2737C5776C;
                    trace = scripts\engine\trace::ray_trace( _id_1B2A5F2737C5776C, _id_7636B8DC247C7CB4, self, _id_FBCABD62B8F66EB8 );

                    if ( isplayer( trace["entity"] ) || isdefined( self.lookat_anims["interaction_trigger_override"] ) )
                    {
                        if ( isarray( self.lookat_anims["diff"] ) && self.anim_sequential_counter < self.lookat_anims["diff"].size - 1 )
                        {
                            self.sequential_scene = 1;
                            scripts\engine\utility::ent_flag_clear( "scene_end" );
                            self.anim_sequential_counter = self.anim_sequential_counter + 1;
                            self clearanim( _id_92778D781991982A, 0.15 );
                            self.is_playing_reaction = 0;
                            break;
                        }
                    }
                }

                if ( isdefined( self.lookat_anims["exitangles"] ) )
                {
                    exit_anim = self.lookat_anims["exitangles_anims"]["lastexitanim"];

                    if ( isdefined( self.lookat_anims["interaction_position"] ) )
                        _id_837C12743AB916FE = vectortoangles( self.lookat_anims["interaction_position"] - self.origin );
                    else
                        _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

                    angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );

                    foreach ( _id_307F20AAC7E95BA9 in self.lookat_anims["exitangles"] )
                    {
                        if ( angle <= _id_307F20AAC7E95BA9 )
                        {
                            exit_anim = self.lookat_anims["exitangles_anims"][_id_307F20AAC7E95BA9];
                            break;
                        }
                    }

                    start_fakeactor_notetracks( exit_anim );
                    self _meth_50CE1815D713CDC6( _id_314C4455B996B224, exit_anim, 1, _id_71794246B41106AC, 1 );
                    wait( getanimlength( exit_anim ) );

                    if ( isdefined( self.lookat_anims["end_idle"] ) )
                    {
                        if ( isarray( _id_5442D92E287BFFA2[0] ) )
                        {
                            if ( self.anim_sequential_counter >= _id_5442D92E287BFFA2[0].size )
                            {
                                start_fakeactor_notetracks( self.lookat_anims["end_idle"] );
                                self _meth_50CE1815D713CDC6( _id_314C4455B996B224, self.lookat_anims["end_idle"], 1, _id_71794246B41106AC, 1 );
                            }
                            else
                            {
                                start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
                                self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_E1F91FE78B76DD48, 1, _id_71794246B41106AC, 1 );
                            }
                        }
                        else
                        {
                            start_fakeactor_notetracks( self.lookat_anims["end_idle"] );
                            self _meth_50CE1815D713CDC6( _id_314C4455B996B224, self.lookat_anims["end_idle"], 1, _id_71794246B41106AC, 1 );
                        }
                    }
                    else
                    {
                        start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
                        self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_E1F91FE78B76DD48, 1, _id_71794246B41106AC, 1 );
                    }

                    self.is_playing_reaction = 0;

                    if ( isarray( self.lookat_anims["diff"] ) )
                    {
                        if ( self.anim_sequential_counter < self.lookat_anims["diff"].size )
                        {
                            scripts\engine\utility::ent_flag_clear( "scene_end" );
                            self clearanim( self.lookat_anims["follow"], 0.1 );
                            self clearanim( self.lookat_anims["ring"], 0.1 );
                            self.anim_sequential_counter = self.anim_sequential_counter + 1;
                            self.is_playing_reaction = 0;
                        }

                        if ( self.anim_sequential_counter >= self.lookat_anims["diff"].size )
                        {
                            self.is_playing_reaction = 0;
                            _id_9EF180B6A072474B = 1;

                            if ( !isdefined( self.lookat_anims["allow_multi_use"] ) )
                                self waittill( "forever" );
                        }
                    }
                    else
                    {
                        _id_9EF180B6A072474B = 1;

                        if ( !isdefined( self.lookat_anims["allow_multi_use"] ) )
                            self waittill( "forever" );
                    }

                    self.is_playing_reaction = 0;
                    break;
                }
                else
                {
                    if ( isdefined( self.lookat_anims["end_idle"] ) )
                    {
                        if ( isarray( _id_5442D92E287BFFA2[0] ) )
                        {
                            if ( self.anim_sequential_counter >= _id_5442D92E287BFFA2[0].size )
                            {
                                start_fakeactor_notetracks( self.lookat_anims["end_idle"] );
                                self _meth_50CE1815D713CDC6( _id_314C4455B996B224, self.lookat_anims["end_idle"], 1, _id_71794246B41106AC, 1 );
                            }
                            else
                            {
                                start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
                                self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_E1F91FE78B76DD48, 1, _id_71794246B41106AC, 1 );
                            }
                        }
                        else
                        {
                            start_fakeactor_notetracks( self.lookat_anims["end_idle"] );
                            self _meth_50CE1815D713CDC6( _id_314C4455B996B224, self.lookat_anims["end_idle"], 1, _id_71794246B41106AC, 1 );
                        }
                    }
                    else
                    {
                        start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
                        self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_E1F91FE78B76DD48, 1, _id_71794246B41106AC, 1 );
                    }

                    self.is_playing_reaction = 0;

                    if ( isarray( self.lookat_anims["diff"] ) )
                    {
                        if ( self.anim_sequential_counter < self.lookat_anims["diff"].size )
                        {
                            scripts\engine\utility::ent_flag_clear( "scene_end" );
                            self clearanim( self.lookat_anims["follow"], 0.1 );
                            self clearanim( self.lookat_anims["ring"], 0.1 );
                            self.anim_sequential_counter = self.anim_sequential_counter + 1;
                            self.is_playing_reaction = 0;
                        }

                        if ( self.anim_sequential_counter >= self.lookat_anims["diff"].size )
                        {
                            self.is_playing_reaction = 0;
                            _id_9EF180B6A072474B = 1;

                            if ( !isdefined( self.lookat_anims["allow_multi_use"] ) )
                                self waittill( "forever" );
                        }
                    }
                    else
                    {
                        _id_9EF180B6A072474B = 1;

                        if ( !isdefined( self.lookat_anims["allow_multi_use"] ) )
                            self waittill( "forever" );
                    }

                    self.is_playing_reaction = 0;
                    break;
                }
            }

            if ( isdefined( self.lookat_anims["interaction_position"] ) )
                _id_837C12743AB916FE = vectortoangles( self.lookat_anims["interaction_position"] - self.origin );
            else
                _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

            angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );
            _id_A5148760D51EB926 = scripts\engine\math::normalize_value( 0, 360, angle );

            if ( self.followoff )
                _id_A5148760D51EB926 = 0;

            if ( isdefined( self.lookat_anims["backseam"] ) )
            {
                if ( _id_A5148760D51EB926 >= 0 && _id_A5148760D51EB926 <= 0.5 )
                    _id_A5148760D51EB926 = _id_A5148760D51EB926 + 0.5;
                else
                    _id_A5148760D51EB926 = _id_A5148760D51EB926 - 0.5;

                _id_8BC1A6A78E77C5D1 = _id_8BC1A6A78E77C5D1 + ( _id_A5148760D51EB926 - _id_8BC1A6A78E77C5D1 ) * _id_A8CBE4EAA2219CC9;
            }
            else
                _id_8BC1A6A78E77C5D1 = _id_8BC1A6A78E77C5D1 + ( _id_A5148760D51EB926 - _id_8BC1A6A78E77C5D1 ) * _id_A8CBE4EAA2219CC9;

            if ( isdefined( _id_0F2AEE3C308532D3 ) )
            {
                _id_518C6A4B170E645D = vectornormalize( level.player.origin - self.origin );
                _id_518C6A4B170E645D = scripts\engine\utility::flatten_vector( _id_518C6A4B170E645D, anglestoup( self.angles ) );
                _id_58789C337A81799F = anglestoforward( self.angles );
                _id_EE30F96416FFAFD4 = vectordot( _id_518C6A4B170E645D, _id_58789C337A81799F );
                angle = acos( _id_EE30F96416FFAFD4 );
                _id_775361D05A790917 = vectorcross( _id_518C6A4B170E645D, _id_58789C337A81799F );

                if ( vectordot( _id_775361D05A790917, anglestoup( self.angles ) ) < 0 )
                    angle = angle * -1;

                _id_633B54F5D37B7D94 = 0;

                if ( angle >= 90.0 && !_id_633B54F5D37B7D94 && !scripts\engine\utility::ent_flag( "playing_interaction" ) )
                {
                    _id_633B54F5D37B7D94 = 1;
                    start_fakeactor_notetracks( self.lookat_anims["reacquire_right"] );
                    self clearanim( %body, 0.25 );
                    self setflaggedanimrestart( _id_314C4455B996B224, self.lookat_anims["reacquire_right"], 1.0, 0.25 );
                    wait( clamp( getanimlength( self.lookat_anims["reacquire_right"] ) - 0.25, 0, 100 ) );
                    self clearanim( self.lookat_anims["reacquire_right"], 0.25 );
                }
                else if ( angle < -90.0 && !_id_633B54F5D37B7D94 && !scripts\engine\utility::ent_flag( "playing_interaction" ) )
                {
                    _id_633B54F5D37B7D94 = 1;
                    start_fakeactor_notetracks( self.lookat_anims["reacquire_left"] );
                    self clearanim( %body, 0.25 );
                    self setflaggedanimrestart( _id_314C4455B996B224, self.lookat_anims["reacquire_left"], 1.0, 0.25 );
                    wait( clamp( getanimlength( self.lookat_anims["reacquire_left"] ) - 0.25, 0, 100 ) );
                    self clearanim( self.lookat_anims["reacquire_left"], 0.25 );
                }
                else
                    set_time_via_rate( self.lookat_anims["follow"], _id_8BC1A6A78E77C5D1 );

                if ( _id_633B54F5D37B7D94 )
                {
                    if ( isdefined( self.lookat_anims["interaction_position"] ) )
                        _id_837C12743AB916FE = vectortoangles( self.lookat_anims["interaction_position"] - self.origin );
                    else
                        _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

                    angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );
                    _id_A5148760D51EB926 = scripts\engine\math::normalize_value( 0, 360, angle );
                    start_fakeactor_notetracks( self.lookat_anims["follow"] );
                    self _meth_592B654DA5474B48( _id_314C4455B996B224, self.lookat_anims["follow"], 1, 0.25, 1 );
                    self setanimtime( self.lookat_anims["follow"], 0.5 );
                    self setanimknob( self.lookat_anims["ring"], 1, _id_59213491A79A5A54, 1 );

                    if ( !scripts\engine\utility::ent_flag( "playing_interaction" ) && !scripts\engine\utility::ent_flag( "scene_end" ) )
                    {
                        start_fakeactor_notetracks( self.lookat_anims["diff"] );
                        self _meth_592B654DA5474B48( _id_314C4455B996B224, self.lookat_anims["diff"], 1, 0.05, 1 );
                    }

                    self setanimlimited( self.lookat_anims["additive"], 1, _id_59213491A79A5A54, 1 );
                    _id_8BC1A6A78E77C5D1 = 0.5;
                }
            }
            else
                set_time_via_rate( self.lookat_anims["follow"], _id_8BC1A6A78E77C5D1 );

            waitframe();
        }

        waitframe();
    }
}

interaction_process()
{
    self endon( "death" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    self.followoff = 0;
    clear_root();

    if ( !isdefined( self.is_cheap ) )
    {
        self orientmode( "face angle", self.angles[1] );
        self animmode( "noclip" );
    }

    _id_E1F91FE78B76DD48 = undefined;
    self.random_idle_playing = 0;

    if ( isarray( self.lookat_anims["idle"] ) )
    {
        _id_E1F91FE78B76DD48 = self.lookat_anims["idle"][0];
        thread random_idle_controller();
    }
    else
        _id_E1F91FE78B76DD48 = self.lookat_anims["idle"];

    start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
    self setflaggedanim( "idle", _id_E1F91FE78B76DD48, 1, 0.05, 1 );
    thread interaction_set_anim_movement( "stop" );
    _id_314C4455B996B224 = "single anim";

    if ( !scripts\engine\utility::ent_flag_exist( "scene_end" ) )
        scripts\engine\utility::ent_flag_init( "scene_end" );

    scripts\engine\utility::ent_flag_clear( "scene_end" );
    _id_A8CBE4EAA2219CC9 = 0.11;

    if ( isdefined( self.lookat_anims["lookat_lerp"] ) )
        _id_A8CBE4EAA2219CC9 = self.lookat_anims["lookat_lerp"];

    _id_8E9608FC3378D03E = 0.25;

    if ( isdefined( self.lookat_anims["initial_reaction_blendtime"] ) )
        _id_8E9608FC3378D03E = self.lookat_anims["initial_reaction_blendtime"];

    _id_59213491A79A5A54 = 0.25;

    if ( isdefined( self.lookat_anims["lookat_follow_blendtime"] ) )
        _id_59213491A79A5A54 = self.lookat_anims["lookat_follow_blendtime"];

    _id_327B427E11281445 = 350;

    if ( isdefined( self.lookat_anims["lookat_end_distance"] ) )
        _id_327B427E11281445 = self.lookat_anims["lookat_end_distance"];

    _id_71794246B41106AC = 0.45;

    if ( isdefined( self.lookat_anims["lookat_end_blendtime"] ) )
        _id_71794246B41106AC = self.lookat_anims["lookat_end_blendtime"];

    self.reactiontrigger = spawn( "trigger_radius", self.origin, 0, self.lookat_anims["trigger_radius"], self.lookat_anims["trigger_radius"] );

    for (;;)
    {
        if ( ( level.player istouching( self.reactiontrigger ) || is_looking_at_range( self, 0.925 ) ) && !self.random_idle_playing )
        {
            if ( self.sequential_scene )
                self.skip_interaction = 1;
            else
                self.skip_interaction = 0;
        }
        else
            self.skip_interaction = 0;

        _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );
        _id_7636B8DC247C7CB4 = undefined;
        _id_FBCABD62B8F66EB8 = scripts\engine\trace::create_contents( 1, 1, 0, 1, 1, 1 );
        trace = undefined;

        for (;;)
        {
            if ( isdefined( self.lookat_anims["interaction_trigger_override"] ) )
                break;

            if ( scripts\sp\interaction_manager::can_play_nearby_interaction( self.lookat_anims["trigger_radius"] * 2 ) )
            {
                if ( isdefined( self.lookat_anims["interaction_position"] ) )
                    _id_084D1D51D3F40043 = lengthsquared( self.lookat_anims["interaction_position"] - self.origin );
                else
                    _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );

                if ( isdefined( self.lookat_anims["interaction_trigger_override"] ) )
                    break;
                else if ( self.lookat_anims["trigger_radius"] > 0 && _id_084D1D51D3F40043 < squared( self.lookat_anims["trigger_radius"] ) && is_looking_at_range( self, 0.925 ) && !self.random_idle_playing )
                {
                    _id_1B2A5F2737C5776C = self.origin + anglestoup( self.angles ) * 66;
                    _id_7636B8DC247C7CB4 = vectornormalize( level.player geteye() - _id_1B2A5F2737C5776C ) * self.lookat_anims["trigger_radius"] + _id_1B2A5F2737C5776C;
                    trace = scripts\engine\trace::ray_trace( _id_1B2A5F2737C5776C, _id_7636B8DC247C7CB4, self, _id_FBCABD62B8F66EB8 );

                    if ( isplayer( trace["entity"] ) || isdefined( self.lookat_anims["interaction_trigger_override"] ) )
                        break;
                }
            }

            waitframe();
        }

        if ( isdefined( self.lookat_anims["common_name"] ) )
            thread scripts\sp\interaction_manager::trigger_interaction_common();

        self.is_playing_reaction = 1;
        self notify( "playing_interaction_scene" );
        level notify( "playing_interaction" );
        _id_837C12743AB916FE = undefined;

        if ( isdefined( self.lookat_anims["interaction_position"] ) )
            _id_837C12743AB916FE = vectortoangles( self.lookat_anims["interaction_position"] - self.origin );
        else
            _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

        angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );
        _id_5442D92E287BFFA2 = self.lookat_anims["lastanim"];

        if ( isdefined( self.lookat_anims["angles"] ) )
        {
            foreach ( _id_AD0C4582F262F65A in self.lookat_anims["angles"] )
            {
                if ( angle <= _id_AD0C4582F262F65A )
                {
                    _id_5442D92E287BFFA2 = self.lookat_anims[_id_AD0C4582F262F65A];
                    break;
                }
            }
        }

        if ( isarray( _id_5442D92E287BFFA2 ) )
        {
            if ( isarray( _id_5442D92E287BFFA2[0] ) && self.anim_sequential_counter < _id_5442D92E287BFFA2[0].size )
            {
                _id_1511386E758EF855 = self.anim_sequential_counter;
                _id_E88EF0694A45C625 = _id_5442D92E287BFFA2[0][_id_1511386E758EF855][0];
            }
            else
                _id_E88EF0694A45C625 = _id_5442D92E287BFFA2[0];
        }
        else
            _id_E88EF0694A45C625 = _id_5442D92E287BFFA2;

        if ( !self.skip_interaction )
        {
            start_fakeactor_notetracks( _id_E88EF0694A45C625 );
            self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_E88EF0694A45C625, 1, _id_8E9608FC3378D03E, 1 );
            self.is_playing_reaction = 1;
        }

        level thread scripts\sp\interaction_manager::interaction_cooldown_timer( self );

        if ( isdefined( self.lookat_anims["scene"] ) )
        {
            if ( isdefined( self.lookat_anims["interaction_position"] ) )
                _id_837C12743AB916FE = vectortoangles( self.lookat_anims["interaction_position"] - self.origin );
            else
                _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

            angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );

            if ( self.skip_interaction )
                wait 0.0;
            else
                wait( getanimlength( _id_E88EF0694A45C625 ) );

            if ( isarray( self.lookat_anims["scene"] ) )
            {
                _id_BBB45D49F4EAF799 = self.scene_sequential_sounter;
                start_fakeactor_notetracks( self.lookat_anims["scene"][_id_BBB45D49F4EAF799] );
                self _meth_50CE1815D713CDC6( _id_314C4455B996B224, self.lookat_anims["scene"][_id_BBB45D49F4EAF799], 1, _id_59213491A79A5A54, 1 );
                wait( getanimlength( self.lookat_anims["scene"][_id_BBB45D49F4EAF799] ) );
                self.scene_sequential_sounter = self.scene_sequential_sounter + 1;
                self.sequential_scene = 1;
            }
            else
            {
                start_fakeactor_notetracks( self.lookat_anims["scene"] );
                self _meth_50CE1815D713CDC6( _id_314C4455B996B224, self.lookat_anims["scene"], 1, _id_59213491A79A5A54, 1 );
                wait( getanimlength( self.lookat_anims["scene"] ) );
            }
        }

        if ( isdefined( self.lookat_anims["exitangles"] ) )
        {
            if ( isdefined( self.lookat_anims["interaction_position"] ) )
                _id_837C12743AB916FE = vectortoangles( self.lookat_anims["interaction_position"] - self.origin );
            else
                _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

            angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );
            exit_anim = self.lookat_anims["exitangles_anims"]["lastexitanim"];

            foreach ( _id_307F20AAC7E95BA9 in self.lookat_anims["exitangles"] )
            {
                if ( angle <= _id_307F20AAC7E95BA9 )
                {
                    exit_anim = self.lookat_anims["exitangles_anims"][_id_307F20AAC7E95BA9];
                    break;
                }
            }

            start_fakeactor_notetracks( exit_anim );
            self _meth_50CE1815D713CDC6( _id_314C4455B996B224, exit_anim, 1, _id_71794246B41106AC, 1 );
            wait( getanimlength( exit_anim ) );

            if ( isdefined( self.lookat_anims["end_idle"] ) )
            {
                if ( isarray( _id_5442D92E287BFFA2[0] ) )
                {
                    if ( self.anim_sequential_counter >= _id_5442D92E287BFFA2[0].size )
                    {
                        start_fakeactor_notetracks( self.lookat_anims["end_idle"] );
                        self _meth_50CE1815D713CDC6( _id_314C4455B996B224, self.lookat_anims["end_idle"], 1, _id_71794246B41106AC, 1 );
                    }
                    else
                    {
                        start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
                        self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_E1F91FE78B76DD48, 1, _id_71794246B41106AC, 1 );
                    }
                }
                else
                {
                    start_fakeactor_notetracks( self.lookat_anims["end_idle"] );
                    self _meth_50CE1815D713CDC6( _id_314C4455B996B224, self.lookat_anims["end_idle"], 1, _id_71794246B41106AC, 1 );
                }
            }
            else
            {
                start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
                self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_E1F91FE78B76DD48, 1, _id_71794246B41106AC, 1 );
            }

            self.is_playing_reaction = 0;

            if ( !isdefined( self.lookat_anims["allow_multi_use"] ) )
                self waittill( "forever" );
        }

        if ( !self.skip_interaction )
        {
            if ( isarray( _id_5442D92E287BFFA2 ) )
            {
                if ( isarray( _id_5442D92E287BFFA2[0] ) && self.anim_sequential_counter < _id_5442D92E287BFFA2[0].size )
                {
                    _id_1511386E758EF855 = self.anim_sequential_counter;
                    _id_0EFE1C4B2620F108 = _id_5442D92E287BFFA2[0][_id_1511386E758EF855];
                    thread set_sequential_wait_time( _id_0EFE1C4B2620F108 );
                    thread play_anim_vo_sequential( _id_0EFE1C4B2620F108 );
                }
                else if ( _id_5442D92E287BFFA2.size > 1 )
                    thread play_anim_vo_sequential( _id_5442D92E287BFFA2 );
            }
        }

        if ( isdefined( self.lookat_anims["reaction_func"] ) )
            self [[ self.lookat_anims["reaction_func"] ]]();

        _id_2C3D71C250A9405D = getanimlength( _id_E88EF0694A45C625 );
        wait( _id_2C3D71C250A9405D );

        if ( isdefined( self.lookat_anims["end_idle"] ) )
        {
            if ( isarray( _id_5442D92E287BFFA2 ) )
            {
                if ( isarray( _id_5442D92E287BFFA2[0] ) )
                {
                    start_fakeactor_notetracks();

                    if ( self.anim_sequential_counter >= _id_5442D92E287BFFA2[0].size - 1 )
                        self _meth_9EAE9CF347EAC025( _id_314C4455B996B224, self.lookat_anims["end_idle"], %body, 1, _id_71794246B41106AC, 1 );
                    else
                        self _meth_9EAE9CF347EAC025( _id_314C4455B996B224, _id_E1F91FE78B76DD48, %body, 1, _id_71794246B41106AC, 1 );
                }
                else
                    self _meth_9EAE9CF347EAC025( _id_314C4455B996B224, self.lookat_anims["end_idle"], %body, 1, _id_71794246B41106AC, 1 );
            }
            else
            {
                start_fakeactor_notetracks();
                self _meth_9EAE9CF347EAC025( _id_314C4455B996B224, self.lookat_anims["end_idle"], %body, 1, _id_71794246B41106AC, 1 );
            }
        }
        else
        {
            start_fakeactor_notetracks();
            self _meth_9EAE9CF347EAC025( _id_314C4455B996B224, _id_E1F91FE78B76DD48, %body, 1, _id_71794246B41106AC, 1 );
        }

        self.anim_sequential_counter = self.anim_sequential_counter + 1;
        level notify( "interaction_done" );
        self notify( "interaction_done" );

        if ( isarray( _id_5442D92E287BFFA2 ) )
        {
            if ( isarray( _id_5442D92E287BFFA2[0] ) && self.anim_sequential_counter < _id_5442D92E287BFFA2[0].size )
            {
                _id_C838814A0C155AB8 = self.sequential_loop_padding + self.sequential_wait_time - getanimlength( _id_E88EF0694A45C625 );
                _id_0A65F50CB672D545 = self.sequential_loop_padding + self.sequential_wait_time + getanimlength( _id_E88EF0694A45C625 );
                _id_19C9E7491A3FEE8C = clamp( _id_C838814A0C155AB8, 0, _id_0A65F50CB672D545 );
                wait( _id_19C9E7491A3FEE8C );
                self clearanim( _id_E88EF0694A45C625, 0.1 );
                self.is_playing_reaction = 0;
            }
            else
            {
                self.is_playing_reaction = 0;

                if ( !isdefined( self.lookat_anims["allow_multi_use"] ) )
                    self waittill( "forever" );
            }
        }
        else
        {
            self.is_playing_reaction = 0;

            if ( !isdefined( self.lookat_anims["allow_multi_use"] ) )
                self waittill( "forever" );
        }

        waitframe();
    }
}

interaction_process_for_states()
{
    self endon( "death" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    clear_root();

    if ( !isdefined( self.is_cheap ) )
    {
        self orientmode( "face angle", self.angles[1] );
        self animmode( "noclip" );
    }

    _id_E1F91FE78B76DD48 = undefined;
    self.random_idle_playing = 0;
    interaction = get_state_interaction( self.interaction_name );

    if ( !isdefined( interaction ) )
        return;

    interaction = interaction.scene;
    _id_961E7B22DD3C0CDC = undefined;

    if ( isarray( interaction["idle"] ) )
    {
        if ( isdefined( self.gender ) && issubstr( self.gender, "female" ) )
            _id_961E7B22DD3C0CDC = "idle_female";
        else
            _id_961E7B22DD3C0CDC = "idle";

        _id_E1F91FE78B76DD48 = interaction[_id_961E7B22DD3C0CDC][0];
        thread random_idle_controller_stateful();
    }
    else
    {
        if ( isdefined( self.gender ) && issubstr( self.gender, "female" ) )
            _id_961E7B22DD3C0CDC = "idle_female";
        else
            _id_961E7B22DD3C0CDC = "idle";

        _id_E1F91FE78B76DD48 = interaction[_id_961E7B22DD3C0CDC];
    }

    _id_314C4455B996B224 = "single anim";
    start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
    self setflaggedanim( _id_314C4455B996B224, _id_E1F91FE78B76DD48, 1, 0.5, 1 );
    self setanimtime( _id_E1F91FE78B76DD48, randomfloat( 1 ) );
    thread interaction_set_anim_movement( "stop" );
    thread play_anim_shared_vo();

    if ( !scripts\engine\utility::ent_flag_exist( "scene_end" ) )
        scripts\engine\utility::ent_flag_init( "scene_end" );

    scripts\engine\utility::ent_flag_clear( "scene_end" );
    _id_A8CBE4EAA2219CC9 = 0.11;
    _id_8E9608FC3378D03E = 0.25;
    _id_59213491A79A5A54 = 0.25;
    _id_327B427E11281445 = 350;
    _id_71794246B41106AC = 0.45;
    self.reactiontrigger = spawn( "trigger_radius", self.origin, 0, interaction["trigger_radius"], interaction["trigger_radius"] );

    for (;;)
    {
        _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );
        _id_7636B8DC247C7CB4 = undefined;
        _id_FBCABD62B8F66EB8 = scripts\engine\trace::create_contents( 1, 1, 0, 1, 1, 1 );
        trace = undefined;

        for (;;)
        {
            if ( !isdefined( self.reaction_state ) || isdefined( self.reaction_state ) && self.reaction_state != "busy" && self.reaction_state != "nag" )
            {
                if ( scripts\sp\interaction_manager::can_play_nearby_interaction( interaction["trigger_radius"] * 2 ) )
                {
                    if ( isdefined( interaction["interaction_position"] ) )
                        _id_084D1D51D3F40043 = lengthsquared( interaction["interaction_position"] - self.origin );
                    else
                        _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );

                    if ( isdefined( interaction["interaction_trigger_override"] ) )
                        break;
                    else if ( interaction["trigger_radius"] > 0 && _id_084D1D51D3F40043 < squared( interaction["trigger_radius"] ) && is_looking_at_range( self, 0.925 ) && !self.random_idle_playing )
                    {
                        _id_1B2A5F2737C5776C = self.origin + anglestoup( self.angles ) * 66;
                        _id_7636B8DC247C7CB4 = vectornormalize( level.player geteye() - _id_1B2A5F2737C5776C ) * interaction["trigger_radius"] + _id_1B2A5F2737C5776C;
                        trace = scripts\engine\trace::ray_trace( _id_1B2A5F2737C5776C, _id_7636B8DC247C7CB4, self, _id_FBCABD62B8F66EB8 );

                        if ( isplayer( trace["entity"] ) || isdefined( interaction["interaction_trigger_override"] ) )
                            break;
                    }
                }
            }

            waitframe();
        }

        self.is_playing_reaction = 1;
        self notify( "playing_interaction_scene" );
        level notify( "playing_interaction" );
        _id_837C12743AB916FE = undefined;

        if ( isdefined( interaction["interaction_position"] ) )
            _id_837C12743AB916FE = vectortoangles( interaction["interaction_position"] - self.origin );
        else
            _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

        angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );
        _id_FCE383BDDC1E68DB = "lastanim";

        if ( isdefined( interaction["angles"] ) )
        {
            foreach ( _id_AD0C4582F262F65A in interaction["angles"] )
            {
                if ( angle <= _id_AD0C4582F262F65A )
                {
                    _id_FCE383BDDC1E68DB = _id_AD0C4582F262F65A;
                    break;
                }
            }
        }

        if ( level.state_interactions[self.interaction_name].scene[_id_FCE383BDDC1E68DB].size < 1 )
        {
            level.state_interactions[self.interaction_name].scene[_id_FCE383BDDC1E68DB] = level.state_interactions[self.interaction_name].scene["angle_" + scripts\engine\utility::string( _id_FCE383BDDC1E68DB ) + "_spent"];
            level.state_interactions[self.interaction_name].scene["angle_" + _id_FCE383BDDC1E68DB + "_spent"] = [];
        }

        _id_4FBDB8A4C881D739 = randomint( level.state_interactions[self.interaction_name].scene[_id_FCE383BDDC1E68DB].size );
        _id_E88EF0694A45C625 = level.state_interactions[self.interaction_name].scene[_id_FCE383BDDC1E68DB][_id_4FBDB8A4C881D739];
        start_fakeactor_notetracks( _id_E88EF0694A45C625 );
        self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_E88EF0694A45C625, 1, _id_8E9608FC3378D03E, 1 );
        self.is_playing_reaction = 1;
        thread scripts\sp\interaction_manager::interaction_reboot_timer();
        wait( getanimlength( _id_E88EF0694A45C625 ) );
        level.state_interactions[self.interaction_name].scene["angle_" + _id_FCE383BDDC1E68DB + "_spent"] = scripts\engine\utility::array_add( level.state_interactions[self.interaction_name].scene["angle_" + _id_FCE383BDDC1E68DB + "_spent"], _id_E88EF0694A45C625 );
        level.state_interactions[self.interaction_name].scene[_id_FCE383BDDC1E68DB] = scripts\engine\utility::array_remove( level.state_interactions[self.interaction_name].scene[_id_FCE383BDDC1E68DB], _id_E88EF0694A45C625 );

        if ( isdefined( interaction["exitangles"] ) )
        {
            if ( isdefined( interaction["interaction_position"] ) )
                _id_837C12743AB916FE = vectortoangles( interaction["interaction_position"] - self.origin );
            else
                _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

            angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );
            _id_E2D055545BFCB308 = "lastexitanim";

            foreach ( _id_307F20AAC7E95BA9 in interaction["exitangles"] )
            {
                if ( angle <= _id_307F20AAC7E95BA9 )
                {
                    _id_E2D055545BFCB308 = _id_307F20AAC7E95BA9;
                    break;
                }
            }

            if ( level.state_interactions[self.interaction_name].scene[_id_E2D055545BFCB308].size < 1 )
            {
                level.state_interactions[self.interaction_name].scene[_id_E2D055545BFCB308][_id_E2D055545BFCB308] = level.state_interactions[self.interaction_name].scene[_id_E2D055545BFCB308]["exit_angle_" + scripts\engine\utility::string( _id_E2D055545BFCB308 ) + "_spent"];
                level.state_interactions[self.interaction_name].scene[_id_E2D055545BFCB308]["exit_angle_" + scripts\engine\utility::string( _id_E2D055545BFCB308 ) + "_spent"] = [];
            }

            _id_4FBDB8A4C881D739 = randomint( level.state_interactions[self.interaction_name].scene[_id_E2D055545BFCB308].size );
            _id_D56C071DCFC44B88 = level.state_interactions[self.interaction_name].scene[_id_E2D055545BFCB308][_id_4FBDB8A4C881D739];
            start_fakeactor_notetracks( _id_D56C071DCFC44B88 );
            self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_D56C071DCFC44B88, 1, _id_71794246B41106AC, 1 );
            wait( getanimlength( _id_D56C071DCFC44B88 ) );
            level.state_interactions[self.interaction_name].scene[_id_E2D055545BFCB308] = scripts\engine\utility::array_remove( level.state_interactions[self.interaction_name].scene[_id_E2D055545BFCB308], _id_D56C071DCFC44B88 );
        }

        start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
        self _meth_50CE1815D713CDC6( _id_314C4455B996B224, _id_E1F91FE78B76DD48, 1, _id_71794246B41106AC, 1 );
        self.is_playing_reaction = 0;

        if ( isdefined( interaction["reaction_func"] ) )
            self [[ interaction["reaction_func"] ]]();

        level notify( "interaction_done" );
        thread scripts\sp\interaction_manager::set_reaction_state( "busy" );
        waitframe();
        level waittill( "forever" );
    }
}

interaction_process_blended()
{
    self endon( "death" );
    self endon( "reaction_end" );
    initialize_blending_actor();
    _id_A8CBE4EAA2219CC9 = 0.11;
    _id_8E9608FC3378D03E = 0.25;
    _id_59213491A79A5A54 = 0.25;
    _id_327B427E11281445 = 350;
    _id_E1F91FE78B76DD48 = setup_blend_interaction_idles();
    _id_314C4455B996B224 = "single anim";

    for (;;)
    {
        self.skip_interaction = is_performing_sequential_scene();
        blended_interaction_tracecheck();
        self.is_playing_reaction = 1;
        self notify( "playing_interaction_scene" );
        level notify( "playing_interaction" );

        if ( isdefined( self.lookat_anims["common_name"] ) )
            thread scripts\sp\interaction_manager::trigger_interaction_common();

        play_blended_interaction_anims();
        waitframe();
    }
}

initialize_blending_actor()
{
    self stopanimscripted();
    self.followoff = 0;
    clear_root();

    if ( !isdefined( self.is_cheap ) )
    {
        self orientmode( "face angle", self.angles[1] );
        self animmode( "noclip" );
    }

    if ( !scripts\engine\utility::ent_flag_exist( "scene_end" ) )
        scripts\engine\utility::ent_flag_init( "scene_end" );

    scripts\engine\utility::ent_flag_clear( "scene_end" );
    self.reactiontrigger = spawn( "trigger_radius", self.origin, 0, self.lookat_anims["trigger_radius"], self.lookat_anims["trigger_radius"] );
}

setup_blend_interaction_idles()
{
    _id_E1F91FE78B76DD48 = get_interaction_starting_idle();
    self.random_idle_playing = 0;
    start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
    self setflaggedanim( "single anim", _id_E1F91FE78B76DD48, 1, 0.05, 1 );
    thread interaction_set_anim_movement( "stop" );
}

get_interaction_starting_idle()
{
    _id_E1F91FE78B76DD48 = undefined;

    if ( isarray( self.lookat_anims["idle"] ) )
        _id_E1F91FE78B76DD48 = self.lookat_anims["idle"][0];
    else
        _id_E1F91FE78B76DD48 = self.lookat_anims["idle"];

    return _id_E1F91FE78B76DD48;
}

is_performing_sequential_scene()
{
    skip_interaction = undefined;

    if ( ( level.player istouching( self.reactiontrigger ) || is_looking_at_range( self, 0.925 ) ) && !self.random_idle_playing )
    {
        if ( self.sequential_scene )
            skip_interaction = 1;
        else
            skip_interaction = 0;
    }
    else
        skip_interaction = 0;

    return skip_interaction;
}

blended_interaction_tracecheck()
{
    _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );
    _id_7636B8DC247C7CB4 = undefined;
    _id_FBCABD62B8F66EB8 = scripts\engine\trace::create_contents( 1, 1, 0, 1, 1, 1 );
    trace = undefined;

    for (;;)
    {
        _id_365D60E0212D332F = scripts\sp\interaction_manager::can_play_nearby_interaction( self.lookat_anims["trigger_radius"] * 2 );

        if ( _id_365D60E0212D332F )
        {
            if ( isdefined( self.lookat_anims["interaction_position"] ) )
                _id_084D1D51D3F40043 = lengthsquared( self.lookat_anims["interaction_position"] - self.origin );
            else
                _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );

            if ( isdefined( self.lookat_anims["interaction_trigger_override"] ) )
                break;
            else if ( self.lookat_anims["trigger_radius"] > 0 && _id_084D1D51D3F40043 < squared( self.lookat_anims["trigger_radius"] ) && is_looking_at_range( self, 0.925 ) && !self.random_idle_playing )
            {
                _id_1B2A5F2737C5776C = self.origin + anglestoup( self.angles ) * 66;
                _id_7636B8DC247C7CB4 = vectornormalize( level.player geteye() - _id_1B2A5F2737C5776C ) * self.lookat_anims["trigger_radius"] + _id_1B2A5F2737C5776C;
                trace = scripts\engine\trace::ray_trace( _id_1B2A5F2737C5776C, _id_7636B8DC247C7CB4, self, _id_FBCABD62B8F66EB8 );

                if ( isplayer( trace["entity"] ) || isdefined( self.lookat_anims["interaction_trigger_override"] ) )
                    break;
            }
        }

        waitframe();
    }
}

play_blended_interaction_anims()
{
    initialize_blended_interaction_anims();
    _id_3A58E25D07FA8963 = 0;
    _id_9E41F6B2A5FDFA6C = 0;
    start_time = gettime() / 1000;
    wait_time = getanimlength( self.lookat_anims["fwd_anim"] );

    while ( gettime() / 1000 - start_time < wait_time )
    {
        _id_518C6A4B170E645D = vectornormalize( level.player.origin - self.origin );
        _id_C9056E1AFE1AB9D7 = anglestoforward( self.angles );
        _id_E0E29F268E2B6297 = anglestoforward( self.angles ) * -1;
        _id_AB61652EE01B3D08 = anglestoright( self.angles );
        _id_8FC912A946A93A31 = anglestoright( self.angles ) * -1;
        _id_195A2ED93E9EAEF9 = anglestoup( self.angles );
        _id_E32C0E4A71D1793E = clamp( vectordot( _id_518C6A4B170E645D, _id_C9056E1AFE1AB9D7 ), 0.005, 1 );
        _id_87D553E2E44D7001 = clamp( vectordot( _id_518C6A4B170E645D, _id_AB61652EE01B3D08 ), 0.005, 1 );
        _id_EC8D74CDA15D5374 = clamp( vectordot( _id_518C6A4B170E645D, _id_8FC912A946A93A31 ), 0.005, 1 );
        _id_B0B9A45F796B1296 = clamp( vectordot( _id_518C6A4B170E645D, _id_E0E29F268E2B6297 ), 0.005, 1 );
        self setanimlimited( self.lookat_anims["right_anim"], _id_87D553E2E44D7001, 0.2 );
        self setanimlimited( self.lookat_anims["left_anim"], _id_EC8D74CDA15D5374, 0.2 );
        self _meth_592B654DA5474B48( "single anim", self.lookat_anims["fwd_anim"], _id_E32C0E4A71D1793E + 0.005, 0.2 );
        _id_D7199CF973E1AF07 = 1;

        if ( scripts\engine\math::anglebetweenvectorssigned( _id_C9056E1AFE1AB9D7, _id_518C6A4B170E645D, _id_195A2ED93E9EAEF9 ) > 0 )
            _id_D7199CF973E1AF07 = 0;

        if ( _id_D7199CF973E1AF07 )
        {
            _id_9E41F6B2A5FDFA6C = scripts\engine\math::lerp( _id_9E41F6B2A5FDFA6C, _id_B0B9A45F796B1296, 0.1 );
            _id_3A58E25D07FA8963 = scripts\engine\math::lerp( _id_3A58E25D07FA8963, 0.005, 0.1 );
        }
        else
        {
            _id_9E41F6B2A5FDFA6C = scripts\engine\math::lerp( _id_9E41F6B2A5FDFA6C, 0.005, 0.1 );
            _id_3A58E25D07FA8963 = scripts\engine\math::lerp( _id_3A58E25D07FA8963, _id_B0B9A45F796B1296, 0.1 );
        }

        self setanimlimited( self.lookat_anims["back_right_anim"], _id_9E41F6B2A5FDFA6C, 0.2 );
        self setanimlimited( self.lookat_anims["back_left_anim"], _id_3A58E25D07FA8963, 0.2 );
        waitframe();
    }

    _id_19C961DFF85E05AF = 0.45;
    end_blended_interaction_anims( _id_19C961DFF85E05AF );
    play_interaction_endidle( _id_19C961DFF85E05AF );
}

initialize_blended_interaction_anims()
{
    _id_837C12743AB916FE = undefined;
    _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );
    self.is_playing_reaction = 1;
    level thread scripts\sp\interaction_manager::interaction_cooldown_timer( self );
    self setanimlimited( self.lookat_anims["interaction_blend_parent"], 1.0, 0.2 );
    _id_E1F91FE78B76DD48 = get_interaction_starting_idle();
    self clearanim( _id_E1F91FE78B76DD48, 0.2 );
    self clearanim( %head, 0.2 );
    start_fakeactor_notetracks( self.lookat_anims["fwd_anim"] );
    self _meth_592B654DA5474B48( "single anim", self.lookat_anims["fwd_anim"], 0.005, 0.05 );
    self setanimlimited( self.lookat_anims["right_anim"], 0.005, 0.05 );
    self setanimlimited( self.lookat_anims["left_anim"], 0.005, 0.05 );
    self setanimlimited( self.lookat_anims["back_right_anim"], 0.005, 0.05 );
    self setanimlimited( self.lookat_anims["back_left_anim"], 0.005, 0.05 );
}

end_blended_interaction_anims( _id_D180B535A33B044D )
{
    self.reaction_blend_end = undefined;
    self clearanim( self.lookat_anims["fwd_anim"], _id_D180B535A33B044D );
    self clearanim( self.lookat_anims["right_anim"], _id_D180B535A33B044D );
    self clearanim( self.lookat_anims["left_anim"], _id_D180B535A33B044D );
    self clearanim( self.lookat_anims["back_right_anim"], _id_D180B535A33B044D );
    self clearanim( self.lookat_anims["back_left_anim"], _id_D180B535A33B044D );
    level notify( "interaction_done" );
    self notify( "interaction_done" );
    self.is_playing_reaction = 0;
}

play_interaction_endidle( _id_D180B535A33B044D )
{
    for (;;)
    {
        _id_85DE4B2384EA1FE3 = undefined;

        if ( isdefined( self.lookat_anims["end_idle"] ) )
        {
            _id_85DE4B2384EA1FE3 = self.lookat_anims["end_idle"];
            start_fakeactor_notetracks( _id_85DE4B2384EA1FE3 );
            self setanimtime( _id_85DE4B2384EA1FE3, 0 );
            self _meth_9EAE9CF347EAC025( "single anim", _id_85DE4B2384EA1FE3, %body, 1, _id_D180B535A33B044D, 1 );
        }
        else
        {
            _id_85DE4B2384EA1FE3 = get_interaction_starting_idle();
            start_fakeactor_notetracks( _id_85DE4B2384EA1FE3 );
            self setanimtime( _id_85DE4B2384EA1FE3, 0 );
            self _meth_9EAE9CF347EAC025( "single anim", _id_85DE4B2384EA1FE3, %body, 1, _id_D180B535A33B044D, 1 );
        }

        wait( getanimlength( _id_85DE4B2384EA1FE3 ) );
    }
}

simple_interaction_idles()
{
    self endon( "death" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    interaction = get_interaction( self.interaction_name );

    if ( !scripts\engine\utility::ent_flag_exist( "hold_simple_idles" ) )
        scripts\engine\utility::ent_flag_init( "hold_simple_idles" );
    else
        scripts\engine\utility::ent_flag_clear( "hold_simple_idles" );

    if ( !isarray( interaction.scene["idle"] ) )
        return;

    if ( isarray( interaction.scene["idle"] ) && interaction.scene["idle"].size <= 1 )
        return;

    _id_AD084B6EEE8B803D = [];
    anim_array = interaction.scene["idle"];
    _id_E1F91FE78B76DD48 = anim_array[0];
    anim_array = scripts\engine\utility::array_remove_index( anim_array, 0 );
    _id_9F27918BECAE3667 = undefined;
    _id_69DB5A62C886CB68 = undefined;
    _id_7A8DCEF989DBD61A = undefined;
    _id_374762E6EA6A151F = undefined;

    if ( isdefined( interaction.scene["idle_prop"] ) && isdefined( self.optional_prop ) )
    {
        _id_9F27918BECAE3667 = [];
        interaction.scene["spent_array_prop"] = _id_9F27918BECAE3667;
        _id_7A8DCEF989DBD61A = interaction.scene["idle_prop"];
        _id_69DB5A62C886CB68 = _id_7A8DCEF989DBD61A[0];
        _id_7A8DCEF989DBD61A = scripts\engine\utility::array_remove_index( _id_7A8DCEF989DBD61A, 0 );
        _id_374762E6EA6A151F = _id_7A8DCEF989DBD61A;
        _id_7A8DCEF989DBD61A = undefined;
    }

    _id_B1D95CC465858025 = anim_array;
    anim_array = undefined;
    thread clear_root();
    interaction_set_anim_movement( "stop" );

    for (;;)
    {
        if ( isdefined( self.optional_struct ) )
            _set_node_relative_anim_actor( self.optional_struct, _id_E1F91FE78B76DD48 );

        start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
        self _meth_50CE1815D713CDC6( "single anim", _id_E1F91FE78B76DD48, 1, 0.2, 1 );
        thread scripts\asm\gesture\script_funcs::ai_lookat_release();

        if ( isdefined( self.optional_prop ) )
            thread _simple_interaction_prop_start( _id_69DB5A62C886CB68 );

        wait( getanimlength( _id_E1F91FE78B76DD48 ) * randomintrange( 1, 2 ) );

        while ( scripts\engine\utility::ent_flag( "hold_simple_idles" ) )
            wait( getanimlength( _id_E1F91FE78B76DD48 ) );

        if ( _id_B1D95CC465858025.size <= 0 )
        {
            _id_B1D95CC465858025 = _id_AD084B6EEE8B803D;
            _id_AD084B6EEE8B803D = [];
        }

        _id_B94D3FF91445983F = randomint( _id_B1D95CC465858025.size );
        _id_243275A04A5860CA = _id_B1D95CC465858025[_id_B94D3FF91445983F];
        _id_AD084B6EEE8B803D = scripts\engine\utility::array_add( _id_AD084B6EEE8B803D, _id_243275A04A5860CA );
        _id_B1D95CC465858025 = scripts\engine\utility::array_remove_index( _id_B1D95CC465858025, _id_B94D3FF91445983F );

        if ( isdefined( self.optional_prop ) )
        {
            if ( _id_374762E6EA6A151F.size <= 0 )
            {
                _id_374762E6EA6A151F = _id_9F27918BECAE3667;
                _id_9F27918BECAE3667 = [];
            }

            _id_BF114BB6B7E12922 = _id_374762E6EA6A151F[_id_B94D3FF91445983F];
            _id_9F27918BECAE3667 = scripts\engine\utility::array_add( _id_9F27918BECAE3667, _id_BF114BB6B7E12922 );
            _id_374762E6EA6A151F = scripts\engine\utility::array_remove_index( _id_374762E6EA6A151F, _id_B94D3FF91445983F );
            thread _simple_interaction_prop_random_anim( _id_BF114BB6B7E12922 );
        }

        self clearanim( _id_E1F91FE78B76DD48, 0.2 );

        if ( isdefined( self.optional_struct ) )
            _set_node_relative_anim_actor( self.optional_struct, _id_243275A04A5860CA );

        start_fakeactor_notetracks( _id_243275A04A5860CA );
        self _meth_50CE1815D713CDC6( "single anim", _id_243275A04A5860CA, 1, 0.2, 1 );
        thread scripts\asm\gesture\script_funcs::ai_lookat_hold();
        wait( getanimlength( _id_243275A04A5860CA ) );
        self clearanim( _id_243275A04A5860CA, 0.2 );

        if ( isdefined( self.optional_prop ) )
            thread _simple_interaction_prop_clear();

        waitframe();
    }
}

_set_node_relative_anim_actor( _id_A165F8AFFEA867AC, animation )
{
    pos = getstartorigin( _id_A165F8AFFEA867AC.origin, _id_A165F8AFFEA867AC.angles, animation );
    _id_8BC14603A27FA3E7 = getstartangles( _id_A165F8AFFEA867AC.origin, _id_A165F8AFFEA867AC.angles, animation );

    if ( !isdefined( self.is_cheap ) )
    {
        self forceteleport( pos, _id_8BC14603A27FA3E7, 100000 );
        wait 0.05;
    }
    else
    {
        self.origin = pos;
        self.angles = _id_8BC14603A27FA3E7;
        self dontinterpolate();
        wait 0.05;
    }
}

#using_animtree("script_model");

_simple_interaction_prop_random_anim( _id_243275A04A5860CA )
{
    self endon( "death" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    self.optional_prop useanimtree( #animtree );
    self.optional_prop clearanim( self.optional_prop.curr_anim, 0.2 );
    self.optional_prop setanimknob( _id_243275A04A5860CA, 1, 0.2, 1 );
    self.optional_prop.curr_anim = _id_243275A04A5860CA;
}

_simple_interaction_prop_start( _id_CE2292AA6B6C53C7 )
{
    self endon( "death" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    self.optional_prop useanimtree( #animtree );
    self.optional_prop setanimknob( _id_CE2292AA6B6C53C7, 1, 0.2, 1 );
    self.optional_prop.curr_anim = _id_CE2292AA6B6C53C7;
}

_simple_interaction_prop_clear()
{
    self endon( "death" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    self.optional_prop useanimtree( #animtree );
    self.optional_prop clearanim( self.optional_prop.curr_anim, 0.2 );
}

play_anim_vo( waittime, _id_A063A72464A04A79 )
{
    wait( waittime );
    _id_2B6906F1DB0C91B3 = strtok( _id_A063A72464A04A79, "_" );

    if ( scripts\engine\utility::array_contains( _id_2B6906F1DB0C91B3, "plr" ) )
        level.player scripts\engine\sp\utility::play_sound_on_entity( _id_A063A72464A04A79 );
    else
        scripts\engine\sp\utility::smart_dialogue( _id_A063A72464A04A79 );
}

_play_interaction_anim_vo_note()
{
    self notify( "start_interaction_vo_note" );
    self endon( "death" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    self endon( "start_interaction_vo_note" );

    for (;;)
    {
        self waittill( "single anim", notes );

        if ( isarray( notes ) )
        {
            foreach ( _id_A234A65C378F3289 in notes )
            {
                if ( issubstr( _id_A234A65C378F3289, "vo_" ) && !issubstr( _id_A234A65C378F3289, "_plr" ) )
                {
                    _id_A063A72464A04A79 = getsubstr( _id_A234A65C378F3289, 3 );
                    thread scripts\engine\sp\utility::smart_dialogue( _id_A063A72464A04A79 );
                    wait( lookupsoundlength( _id_A063A72464A04A79 ) / 1000 );
                    self notify( "single dialogue" );

                    if ( isdefined( self.scriptedtalkingknob ) )
                        self clearanim( self.scriptedtalkingknob, 0.2 );
                }
            }

            continue;
        }

        if ( issubstr( notes, "vo_" ) && !issubstr( notes, "_plr" ) )
        {
            _id_A063A72464A04A79 = getsubstr( notes, 3 );
            thread scripts\engine\sp\utility::smart_dialogue( _id_A063A72464A04A79 );
            wait( lookupsoundlength( _id_A063A72464A04A79 ) / 1000 );
            self notify( "single dialogue" );

            if ( isdefined( self.scriptedtalkingknob ) )
                self clearanim( self.scriptedtalkingknob, 0.2 );
        }
    }
}

play_note_anim_vo( _id_A063A72464A04A79 )
{
    self endon( "death" );
    self endon( "stop_smart_reaction" );
    _id_A51C1B93AC446341 = 0;

    while ( !_id_A51C1B93AC446341 )
    {
        self waittill( "single anim", notetracks );

        if ( isarray( notetracks ) )
        {
            foreach ( notetrack in notetracks )
            {
                if ( notetrack == "reaction_vo" )
                {
                    _id_A51C1B93AC446341 = 1;
                    break;
                }
            }
        }
        else if ( notetracks == "reaction_vo" )
        {
            _id_A51C1B93AC446341 = 1;
            break;
        }

        waitframe();
    }

    self notify( "reaction_vo_fired" );
    scripts\sp\interaction_manager::play_smart_dialog_if_exists( _id_A063A72464A04A79 );
}

play_anim_shared_vo()
{
    self endon( "death" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    _id_876DB5E801F6DFBA = undefined;
    _id_A0DC29CFF035E549 = undefined;

    if ( !isdefined( level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_male"] ) )
        return;

    if ( !isdefined( level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_female"] ) )
        return;

    if ( !isdefined( level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["used_male_vo"] ) )
        level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["used_male_vo"] = [];

    if ( isdefined( self.gender ) && issubstr( self.gender, "male" ) )
    {
        if ( level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_male"].size < 1 )
            level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_male"] = level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["used_male_vo"];

        lines = level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_male"];
        _id_C1E5762D7EC31D56 = randomint( lines.size );
        _id_A0DC29CFF035E549 = lines[_id_C1E5762D7EC31D56];
        level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_male"] = scripts\engine\utility::array_remove_index( level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_male"], _id_C1E5762D7EC31D56 );
        level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["used_male_vo"] = scripts\engine\utility::array_add( level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["used_male_vo"], _id_A0DC29CFF035E549 );
    }

    if ( !isdefined( level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["used_female_vo"] ) )
        level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["used_female_vo"] = [];

    if ( isdefined( self.gender ) && issubstr( self.gender, "female" ) )
    {
        if ( level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_female"].size < 1 )
            level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_female"] = level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["used_female_vo"];

        lines = level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_female"];
        _id_C1E5762D7EC31D56 = randomint( lines.size );
        _id_A0DC29CFF035E549 = lines[_id_C1E5762D7EC31D56];
        level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_female"] = scripts\engine\utility::array_remove_index( level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["vo_lines_female"], _id_C1E5762D7EC31D56 );
        level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["used_female_vo"] = scripts\engine\utility::array_add( level.interaction_manager.data["registered_state_interactions"][self.interaction_name]["used_female_vo"], _id_A0DC29CFF035E549 );
    }

    _id_533794D29349E370 = undefined;

    for (;;)
    {
        self waittill( "single anim", notetracks );

        if ( isarray( notetracks ) )
        {
            foreach ( notetrack in notetracks )
            {
                if ( notetrack == "reaction_vo" )
                {
                    _id_533794D29349E370 = 1;
                    break;
                }
            }
        }
        else if ( notetracks == "reaction_vo" )
            _id_533794D29349E370 = 1;

        if ( isdefined( _id_533794D29349E370 ) )
            break;

        waitframe();
    }

    scripts\engine\sp\utility::smart_dialogue( _id_A0DC29CFF035E549 );
}

play_anim_vo_sequential( _id_BFFE0E76DE43DBBC )
{
    _id_876DB5E801F6DFBA = undefined;
    _id_A0DC29CFF035E549 = undefined;
    registered_interaction = level.interaction_manager.data["registered_interactions"][self.interaction_name];

    if ( isdefined( level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_male"] ) )
    {
        _id_876DB5E801F6DFBA = 1;

        if ( !isdefined( level.interaction_manager.data["registered_interactions"][self.interaction_name]["used_male_vo"] ) )
            level.interaction_manager.data["registered_interactions"][self.interaction_name]["used_male_vo"] = [];

        if ( isdefined( self.gender ) && issubstr( self.gender, "male" ) )
        {
            if ( level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_male"].size < 1 )
                level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_male"] = level.interaction_manager.data["registered_interactions"][self.interaction_name]["used_male_vo"];

            lines = level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_male"];
            _id_C1E5762D7EC31D56 = randomint( lines.size );
            _id_A0DC29CFF035E549 = lines[_id_C1E5762D7EC31D56];
            level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_male"] = scripts\engine\utility::array_remove_index( level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_male"], _id_C1E5762D7EC31D56 );
            level.interaction_manager.data["registered_interactions"][self.interaction_name]["used_male_vo"] = scripts\engine\utility::array_add( level.interaction_manager.data["registered_interactions"][self.interaction_name]["used_male_vo"], _id_A0DC29CFF035E549 );
        }
    }

    if ( isdefined( level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_female"] ) )
    {
        _id_876DB5E801F6DFBA = 1;

        if ( !isdefined( level.interaction_manager.data["registered_interactions"][self.interaction_name]["used_female_vo"] ) )
            level.interaction_manager.data["registered_interactions"][self.interaction_name]["used_female_vo"] = [];

        if ( isdefined( self.gender ) && issubstr( self.gender, "female" ) )
        {
            if ( level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_female"].size < 1 )
                level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_female"] = level.interaction_manager.data["registered_interactions"][self.interaction_name]["used_female_vo"];

            lines = level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_female"];
            _id_C1E5762D7EC31D56 = randomint( lines.size );
            _id_A0DC29CFF035E549 = lines[_id_C1E5762D7EC31D56];
            level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_female"] = scripts\engine\utility::array_remove_index( level.interaction_manager.data["registered_interactions"][self.interaction_name]["vo_lines_female"], _id_C1E5762D7EC31D56 );
            level.interaction_manager.data["registered_interactions"][self.interaction_name]["used_female_vo"] = scripts\engine\utility::array_add( level.interaction_manager.data["registered_interactions"][self.interaction_name]["used_female_vo"], _id_A0DC29CFF035E549 );
        }
    }

    _id_D1EEA60321B43092 = _id_BFFE0E76DE43DBBC.size - 1;

    if ( !isdefined( _id_876DB5E801F6DFBA ) )
    {
        if ( isstring( _id_BFFE0E76DE43DBBC[_id_D1EEA60321B43092] ) )
        {
            for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < _id_BFFE0E76DE43DBBC.size; _id_AC0E594AC96AA3A8 = _id_AC0E594AC96AA3A8 + 2 )
                play_anim_vo( _id_BFFE0E76DE43DBBC[_id_AC0E594AC96AA3A8], _id_BFFE0E76DE43DBBC[_id_AC0E594AC96AA3A8 + 1] );

            return;
        }

        for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < _id_BFFE0E76DE43DBBC.size - 1; _id_AC0E594AC96AA3A8 = _id_AC0E594AC96AA3A8 + 2 )
            play_anim_vo( _id_BFFE0E76DE43DBBC[_id_AC0E594AC96AA3A8], _id_BFFE0E76DE43DBBC[_id_AC0E594AC96AA3A8 + 1] );

        return;
    }
    else
        play_anim_vo( _id_BFFE0E76DE43DBBC[1], _id_A0DC29CFF035E549 );
}

set_sequential_wait_time( _id_BFFE0E76DE43DBBC )
{
    self.sequential_wait_time = 0.0;
    self.sequential_loop_padding = 0.0;
    _id_D1EEA60321B43092 = _id_BFFE0E76DE43DBBC.size - 1;

    if ( isstring( _id_BFFE0E76DE43DBBC[_id_D1EEA60321B43092] ) )
    {
        self.sequential_loop_padding = 0.0;

        for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < _id_BFFE0E76DE43DBBC.size; _id_AC0E594AC96AA3A8 = _id_AC0E594AC96AA3A8 + 2 )
            self.sequential_wait_time = self.sequential_wait_time + _id_BFFE0E76DE43DBBC[_id_AC0E594AC96AA3A8];
    }
    else
    {
        self.sequential_loop_padding = _id_BFFE0E76DE43DBBC[_id_D1EEA60321B43092];

        for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < _id_BFFE0E76DE43DBBC.size - 1; _id_AC0E594AC96AA3A8 = _id_AC0E594AC96AA3A8 + 2 )
            self.sequential_wait_time = self.sequential_wait_time + _id_BFFE0E76DE43DBBC[_id_AC0E594AC96AA3A8];
    }
}

random_idle_controller()
{
    self endon( "reaction_end" );
    self endon( "stop_idle_controller" );
    self endon( "death" );
    _id_9016CDD15DA6E3DC = undefined;
    interaction = get_interaction( self.interaction_name );

    if ( !isdefined( interaction ) )
        interaction = get_state_interaction( self.interaction_name );

    self.can_play_random_idle = 1;
    self.is_playing_random_idle = undefined;

    if ( !isarray( interaction.scene["idle"] ) )
        interaction.scene["idle"] = [ interaction.scene["idle"], interaction.scene["idle"] ];

    _id_AD084B6EEE8B803D = [];
    anim_array = interaction.scene["idle"];
    _id_E1F91FE78B76DD48 = anim_array[0];
    anim_array = scripts\engine\utility::array_remove_index( anim_array, 0 );
    _id_B1D95CC465858025 = anim_array;
    anim_array = undefined;
    self.starting_random_idle = _id_E1F91FE78B76DD48;

    for (;;)
    {
        self.is_playing_random_idle = 1;
        _id_06A626AE2A0ECB1E = getanimlength( _id_E1F91FE78B76DD48 );
        _id_5406E6EFFD6154E8 = randomint( 2 ) + 1;
        wait_time = _id_06A626AE2A0ECB1E * float( _id_5406E6EFFD6154E8 );
        wait( wait_time );

        for (;;)
        {
            if ( distance2dsquared( self.origin, level.player.origin ) >= squared( 150.0 ) )
                break;

            waitframe();
        }

        if ( _id_B1D95CC465858025.size <= 0 )
        {
            _id_B1D95CC465858025 = _id_AD084B6EEE8B803D;
            _id_AD084B6EEE8B803D = [];
        }

        _id_243275A04A5860CA = _id_B1D95CC465858025[randomint( _id_B1D95CC465858025.size )];
        _id_AD084B6EEE8B803D = scripts\engine\utility::array_add( _id_AD084B6EEE8B803D, _id_243275A04A5860CA );
        _id_B1D95CC465858025 = scripts\engine\utility::array_remove( _id_B1D95CC465858025, _id_243275A04A5860CA );
        pos = undefined;
        _id_8BC14603A27FA3E7 = undefined;

        if ( isdefined( self.optional_struct ) )
        {
            pos = getstartorigin( self.optional_struct.origin, self.optional_struct.angles, _id_243275A04A5860CA );
            _id_8BC14603A27FA3E7 = getstartangles( self.optional_struct.origin, self.optional_struct.angles, _id_243275A04A5860CA );

            if ( !isdefined( self.is_cheap ) )
                self forceteleport( pos, _id_8BC14603A27FA3E7 );
            else
            {
                self.origin = pos;
                self.angles = _id_8BC14603A27FA3E7;
            }
        }

        while ( self.is_playing_reaction )
            waitframe();

        start_fakeactor_notetracks( _id_243275A04A5860CA );
        self _meth_50CE1815D713CDC6( "single anim", _id_243275A04A5860CA, 1, 0.2, 1 );
        self.random_idle_playing = 1;
        _id_6D253FB7CEBBB28E = getanimlength( _id_243275A04A5860CA );
        wait( _id_6D253FB7CEBBB28E );

        while ( self.is_playing_reaction )
            waitframe();

        if ( isdefined( self.optional_struct ) )
        {
            pos = getstartorigin( self.optional_struct.origin, self.optional_struct.angles, _id_E1F91FE78B76DD48 );
            _id_8BC14603A27FA3E7 = getstartangles( self.optional_struct.origin, self.optional_struct.angles, _id_E1F91FE78B76DD48 );

            if ( !isdefined( self.is_cheap ) )
                self forceteleport( pos, _id_8BC14603A27FA3E7 );
            else
            {
                self.origin = pos;
                self.angles = _id_8BC14603A27FA3E7;
            }
        }

        self.random_idle_playing = 0;
        self clearanim( _id_243275A04A5860CA, 0.3 );
        self.is_playing_random_idle = undefined;
        start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
        self _meth_50CE1815D713CDC6( "single anim", _id_E1F91FE78B76DD48, 1, 0.2, 1 );
        self setanimtime( _id_E1F91FE78B76DD48, randomfloat( 1 ) );

        for (;;)
        {
            if ( isdefined( self.can_play_random_idle ) )
                break;

            waitframe();
        }

        waitframe();
    }
}

random_idle_controller_stateful()
{
    self endon( "reaction_end" );
    self endon( "stop_idle_controller" );
    self endon( "death" );
    _id_9016CDD15DA6E3DC = undefined;
    interaction = get_state_interaction( self.interaction_name );
    self.can_play_random_idle = 1;
    self.is_playing_random_idle = undefined;
    _id_961E7B22DD3C0CDC = undefined;

    if ( isdefined( self.gender ) && issubstr( self.gender, "female" ) )
        _id_961E7B22DD3C0CDC = "idle_female";
    else
        _id_961E7B22DD3C0CDC = "idle";

    _id_E1F91FE78B76DD48 = interaction.scene[_id_961E7B22DD3C0CDC][0];
    self.starting_random_idle = _id_E1F91FE78B76DD48;

    for (;;)
    {
        self.is_playing_random_idle = 1;
        _id_06A626AE2A0ECB1E = getanimlength( _id_E1F91FE78B76DD48 );
        _id_5406E6EFFD6154E8 = randomint( 2 ) + 1;
        wait_time = _id_06A626AE2A0ECB1E * float( _id_5406E6EFFD6154E8 );
        wait( wait_time );

        for (;;)
        {
            if ( distance2dsquared( self.origin, level.player.origin ) >= squared( 150.0 ) )
                break;

            waitframe();
        }

        _id_EDA2DE4E93C90579 = undefined;
        _id_9C4CA7794F6F0EE6 = undefined;

        if ( isdefined( self.gender ) && issubstr( self.gender, "female" ) )
        {
            _id_EDA2DE4E93C90579 = "random_idles_female";
            _id_9C4CA7794F6F0EE6 = "spent_random_idles_female";
        }
        else
        {
            _id_EDA2DE4E93C90579 = "random_idles";
            _id_9C4CA7794F6F0EE6 = "spent_random_idles";
        }

        if ( level.state_interactions[self.interaction_name].scene[_id_EDA2DE4E93C90579].size <= 0 )
        {
            level.state_interactions[self.interaction_name].scene[_id_EDA2DE4E93C90579] = level.state_interactions[self.interaction_name].scene[_id_9C4CA7794F6F0EE6];
            level.state_interactions[self.interaction_name].scene[_id_9C4CA7794F6F0EE6] = [];
        }

        _id_243275A04A5860CA = level.state_interactions[self.interaction_name].scene[_id_EDA2DE4E93C90579][randomint( level.state_interactions[self.interaction_name].scene[_id_EDA2DE4E93C90579].size )];
        level.state_interactions[self.interaction_name].scene[_id_9C4CA7794F6F0EE6] = scripts\engine\utility::array_add( level.state_interactions[self.interaction_name].scene[_id_9C4CA7794F6F0EE6], _id_243275A04A5860CA );
        level.state_interactions[self.interaction_name].scene[_id_EDA2DE4E93C90579] = scripts\engine\utility::array_remove( level.state_interactions[self.interaction_name].scene[_id_EDA2DE4E93C90579], _id_243275A04A5860CA );
        pos = undefined;
        _id_8BC14603A27FA3E7 = undefined;

        if ( isdefined( self.optional_struct ) )
        {
            pos = getstartorigin( self.optional_struct.origin, self.optional_struct.angles, _id_243275A04A5860CA );
            _id_8BC14603A27FA3E7 = getstartangles( self.optional_struct.origin, self.optional_struct.angles, _id_243275A04A5860CA );

            if ( !isdefined( self.is_cheap ) )
                self forceteleport( pos, _id_8BC14603A27FA3E7 );
            else
            {
                self.origin = pos;
                self.angles = _id_8BC14603A27FA3E7;
            }
        }

        while ( self.is_playing_reaction )
            waitframe();

        start_fakeactor_notetracks( _id_243275A04A5860CA );
        self _meth_50CE1815D713CDC6( "single anim", _id_243275A04A5860CA, 1, 0.2, 1 );
        self.random_idle_playing = 1;
        _id_6D253FB7CEBBB28E = getanimlength( _id_243275A04A5860CA );
        wait( _id_6D253FB7CEBBB28E );

        while ( self.is_playing_reaction )
            waitframe();

        if ( isdefined( self.optional_struct ) )
        {
            pos = getstartorigin( self.optional_struct.origin, self.optional_struct.angles, _id_E1F91FE78B76DD48 );
            _id_8BC14603A27FA3E7 = getstartangles( self.optional_struct.origin, self.optional_struct.angles, _id_E1F91FE78B76DD48 );

            if ( !isdefined( self.is_cheap ) )
                self forceteleport( pos, _id_8BC14603A27FA3E7 );
            else
            {
                self.origin = pos;
                self.angles = _id_8BC14603A27FA3E7;
            }
        }

        self.random_idle_playing = 0;
        self clearanim( _id_243275A04A5860CA, 0.3 );
        self.is_playing_random_idle = undefined;
        start_fakeactor_notetracks( _id_E1F91FE78B76DD48 );
        self _meth_50CE1815D713CDC6( "single anim", _id_E1F91FE78B76DD48, 1, 0.2, 1 );
        self setanimtime( _id_E1F91FE78B76DD48, randomfloat( 1 ) );

        for (;;)
        {
            if ( isdefined( self.can_play_random_idle ) )
                break;

            waitframe();
        }

        waitframe();
    }
}

random_idle_group_controller( actors, frequency, _id_A1CF7F5AD1C9B75F )
{
    self endon( "reaction_end" );
    self endon( "stop_idle_controller" );
    level endon( "stop_idle_controller" );
    self endon( "stop_group_idle_controller" );
    level endon( "stop_group_idle_controller" );
    self endon( "death" );

    if ( !scripts\engine\utility::flag_exist( "hold_group_vignettes" ) )
        scripts\engine\utility::flag_init( "hold_group_vignettes" );

    _id_AD084B6EEE8B803D = [];
    anim_array = _id_A1CF7F5AD1C9B75F;

    for (;;)
    {
        wait( randomfloatrange( frequency * 0.5, frequency ) );

        foreach ( actor in actors )
        {
            if ( !isdefined( actor ) )
            {
                self notify( "stop_group_idle_controller" );
                return;
            }

            actor endon( "death" );
            actor endon( "entitydeleted" );
            actor.can_play_random_idle = undefined;
        }

        _id_0F20F14691346EE8 = 0;

        for (;;)
        {
            if ( !scripts\engine\utility::flag( "hold_group_vignettes" ) )
            {
                foreach ( _id_1B3E4A344EDA5359 in actors )
                {
                    if ( !isdefined( _id_1B3E4A344EDA5359.is_playing_random_idle ) )
                        _id_0F20F14691346EE8++;
                }

                if ( _id_0F20F14691346EE8 >= actors.size )
                    break;
                else
                    _id_0F20F14691346EE8 = 0;
            }

            waitframe();
        }

        _id_B92972E6E87ED559 = undefined;

        if ( isarray( _id_A1CF7F5AD1C9B75F ) )
        {
            if ( anim_array.size <= 0 )
            {
                anim_array = _id_A1CF7F5AD1C9B75F;
                _id_AD084B6EEE8B803D = [];
            }

            _id_B92972E6E87ED559 = anim_array[randomint( anim_array.size )];
        }
        else
            _id_B92972E6E87ED559 = _id_A1CF7F5AD1C9B75F;

        wait_time = 0;

        if ( !scripts\engine\utility::flag( "hold_group_vignettes" ) )
        {
            foreach ( actor in actors )
            {
                if ( !isdefined( actor ) )
                {
                    self notify( "stop_group_idle_controller" );
                    return;
                }

                animation = actor scripts\engine\utility::getanim( _id_B92972E6E87ED559 );
                org = getstartorigin( actor.origin, actor.angles, animation );
                _id_8BC14603A27FA3E7 = getstartangles( actor.origin, actor.angles, animation );

                if ( isai( actor ) )
                    actor forceteleport( org, _id_8BC14603A27FA3E7 );
                else
                {
                    actor.origin = org;
                    actor.angles = _id_8BC14603A27FA3E7;
                }

                actor thread start_fakeactor_notetracks( animation );
                actor _meth_50CE1815D713CDC6( "single anim", animation, 1.0, 0.2 );
                actor.allow_interactions = 0;
                actor.hold_lookat = 1;
                wait_time = getanimlength( animation );
            }

            wait( wait_time );

            if ( isarray( _id_A1CF7F5AD1C9B75F ) )
            {
                _id_AD084B6EEE8B803D = scripts\engine\utility::array_add( _id_AD084B6EEE8B803D, _id_B92972E6E87ED559 );
                anim_array = scripts\engine\utility::array_remove( anim_array, _id_B92972E6E87ED559 );
            }

            foreach ( guy in actors )
            {
                if ( !isdefined( guy ) )
                {
                    self notify( "stop_group_idle_controller" );
                    return;
                }

                animation = guy scripts\engine\utility::getanim( _id_B92972E6E87ED559 );
                guy thread start_fakeactor_notetracks( guy.starting_random_idle );
                guy setanimknob( animation, 0.0, 0.2 );
                guy _meth_50CE1815D713CDC6( "single anim", guy.starting_random_idle, 1, 0.2, 1 );
                guy setanimtime( guy.starting_random_idle, randomfloat( 1 ) );
                guy.can_play_random_idle = 1;
                guy.allow_interactions = 1;
                guy.hold_lookat = undefined;
            }
        }

        waitframe();
    }
}

interaction_end()
{
    if ( !isdefined( self.reaction_stop_anims ) )
    {
        scripts\asm\asm_sp::asm_stopanimscripted();
        interaction_set_anim_movement( "stop" );
    }

    scripts\sp\interaction_manager::remove_actor_from_manager();
    self notify( "reaction_end" );
    thread scripts\sp\interaction_manager::stop_gesture_reaction();
    self notify( "stop_smart_reaction" );
    self.is_talking = undefined;
}

interaction_end_cheap()
{
    self waittill( "reaction_end" );
    scripts\sp\interaction_manager::remove_actor_from_manager();
    self notify( "interaction_done" );
    self notify( "stop_reaction" );
    self.is_talking = undefined;
}

set_time_via_rate( anime, time, weight )
{
    if ( !isdefined( weight ) )
        weight = 1;

    prev_time = self getanimtime( anime );
    duration = getanimlength( anime );
    rate = ( time - prev_time ) * duration / 0.05;
    self setanimlimited( anime, weight, 0.25, rate );
}

play_combat_interaction( node, statename )
{
    self endon( "death" );
    self endon( "interaction_done" );
    self endon( "stop_reaction" );
    self endon( "reaction_end" );
    self.anim_sequential_counter = 0;
    self.scene_sequential_sounter = 0;
    self.sequential_scene = 0;
    self.skip_interaction = 0;
    self.is_playing_reaction = 0;
    self.nearby_interaction_running = 0;
    self.combat_reaction_return_state = statename;

    if ( isdefined( level.interaction_manager ) )
        level.interaction_manager.data["actors"] = scripts\engine\utility::array_add( level.interaction_manager.data["actors"], self );

    while ( self.script == "init" )
        waitframe();

    for (;;)
    {
        for (;;)
        {
            _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );

            if ( _id_084D1D51D3F40043 < squared( 150.0 ) && is_looking_at_range( self, 0.925 ) )
                break;

            waitframe();
        }

        asmname = self.asmname;
        _id_293AF010052E93CA = self asmgetcurrentstate( asmname );

        if ( _id_293AF010052E93CA == self.combat_reaction_return_state && !self.nearby_interaction_running )
        {
            if ( node.script_reaction == "combat_reaction" )
            {
                interactions = [];

                if ( isdefined( node.type ) )
                {
                    switch ( node.type )
                    {
                        case "Cover Crouch":
                            interactions = [ "combat_crouch_1", "combat_crouch_2" ];
                            break;
                        case "Cover Left":
                            switch ( self.currentpose )
                            {
                                case "stand":
                                    interactions = [ "hm_grnd_org_cover_left_stand_react_01", "hm_grnd_org_cover_left_stand_react_02" ];
                                    break;
                                case "crouch":
                                    interactions = [ "hm_grnd_org_cover_left_crouch_react_01", "hm_grnd_org_cover_left_crouch_react_02" ];
                                    break;
                                case "prone":
                                    break;
                            }

                            break;
                        case "Cover Right":
                            switch ( self.currentpose )
                            {
                                case "stand":
                                    interactions = [ "hm_grnd_org_cover_right_stand_react_01", "hm_grnd_org_cover_right_stand_react_02" ];
                                    break;
                                case "crouch":
                                    interactions = [ "hm_grnd_org_cover_right_crouch_react_01", "hm_grnd_org_cover_right_crouch_react_02" ];
                                    break;
                                case "prone":
                                    break;
                            }

                            break;
                        case "Cover Prone":
                            break;
                        case "Cover Stand":
                            break;
                        case "Cover Crouch Window":
                            interactions = [ "combat_cover_crouch_1" ];
                            break;
                    }

                    if ( interactions.size > 0 )
                    {
                        _id_7176C4302AF61196 = randomint( interactions.size );
                        _id_29E9B5E69B29C1F9 = interactions[_id_7176C4302AF61196];
                        combat_interaction_process( _id_29E9B5E69B29C1F9, node );
                    }
                    else
                        return;
                }
            }
            else
                combat_interaction_process( node.script_reaction, node );
        }

        wait 1.5;
    }
}

combat_interaction_process( interaction_name, node )
{
    self endon( "death" );
    self endon( "interaction_done" );
    interaction = get_interaction( interaction_name );
    thread scripts\common\notetrack::start_notetrack_wait( self, "vo" );
    thread _play_interaction_anim_vo_note();

    if ( !isdefined( interaction ) )
        return;

    self.lookat_anims = interaction.scene;

    if ( !isdefined( self.animname ) )
        self.animname = "generic";

    _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );
    _id_7636B8DC247C7CB4 = undefined;
    _id_FBCABD62B8F66EB8 = scripts\engine\trace::create_contents( 1, 1, 0, 1, 1, 1 );
    trace = undefined;

    if ( isdefined( self.lookat_anims["interaction_position"] ) )
        _id_084D1D51D3F40043 = lengthsquared( self.lookat_anims["interaction_position"] - self.origin );
    else
        _id_084D1D51D3F40043 = lengthsquared( level.player.origin - self.origin );

    if ( _id_084D1D51D3F40043 < squared( self.lookat_anims["trigger_radius"] ) && is_looking_at_range( self, 0.925 ) )
    {
        _id_7636B8DC247C7CB4 = vectornormalize( level.player geteye() - self geteye() ) * self.lookat_anims["trigger_radius"] + self geteye();
        trace = scripts\engine\trace::ray_trace( self geteye(), _id_7636B8DC247C7CB4, self, _id_FBCABD62B8F66EB8 );

        if ( isplayer( trace["entity"] ) )
            combat_interaction_run();
    }
}

#using_animtree("generic_human");

combat_interaction_run()
{
    self endon( "death" );
    self endon( "interaction_done" );
    self.is_playing_reaction = 1;
    self notify( "playing_interaction_scene" );
    level notify( "playing_interaction" );
    _id_CE2292AA6B6C53C7 = self.combat_reaction_previous_anim;
    _id_837C12743AB916FE = undefined;

    if ( isdefined( self.lookat_anims["interaction_position"] ) )
        _id_837C12743AB916FE = vectortoangles( self.lookat_anims["interaction_position"] - self.origin );
    else
        _id_837C12743AB916FE = vectortoangles( level.player.origin - self.origin );

    angle = abs( angleclamp( _id_837C12743AB916FE - self.angles[1] ) - 360 );
    _id_5442D92E287BFFA2 = self.lookat_anims["lastanim"];

    if ( isdefined( self.lookat_anims["angles"] ) )
    {
        foreach ( _id_AD0C4582F262F65A in self.lookat_anims["angles"] )
        {
            if ( angle <= _id_AD0C4582F262F65A )
            {
                _id_5442D92E287BFFA2 = self.lookat_anims[_id_AD0C4582F262F65A];
                break;
            }
        }
    }

    if ( isarray( _id_5442D92E287BFFA2 ) )
    {
        if ( isarray( _id_5442D92E287BFFA2[0] ) )
        {
            _id_1511386E758EF855 = self.anim_sequential_counter;
            _id_E88EF0694A45C625 = _id_5442D92E287BFFA2[0][_id_1511386E758EF855][0];
        }
        else
            _id_E88EF0694A45C625 = _id_5442D92E287BFFA2[0];
    }
    else
        _id_E88EF0694A45C625 = _id_5442D92E287BFFA2;

    start_fakeactor_notetracks( _id_E88EF0694A45C625 );
    self setanimlimited( %body, 0, 0.25, 1 );
    self _meth_9EAE9CF347EAC025( "vo", _id_E88EF0694A45C625, %body, 1, 0.25, 1 );
    wait( getanimlength( _id_E88EF0694A45C625 ) );
    self clearanim( %scripted, 0.25 );
    self setanimlimited( %body, 1, 0.25, 1 );
    self.is_playing_reaction = 0;
    wait 0.25;
    self notify( "interaction_done" );
    level notify( "interaction_done" );
    thread interaction_end();
}

combat_reaction_wait_buffer( node )
{
    node.combat_reaction_wait = 1;
    wait 2.0;
    node.combat_reaction_wait = undefined;
}

new_goal_listener()
{
    self endon( "death" );
    self endon( "reaction_done" );
    self endon( "entitydeleted" );
    _id_DB33B152656EEED0 = undefined;

    if ( isdefined( self.last_set_goalnode ) )
    {
        _id_DB33B152656EEED0 = self.last_set_goalnode.origin;

        while ( isdefined( self.last_set_goalnode ) && self.last_set_goalnode.origin == _id_DB33B152656EEED0 )
            waitframe();
    }
    else if ( isdefined( self.last_set_goalent ) )
    {
        _id_DB33B152656EEED0 = self.last_set_goalent.origin;

        while ( isdefined( self.last_set_goalent ) && self.last_set_goalent.origin == _id_DB33B152656EEED0 )
            waitframe();
    }
    else if ( isdefined( self.last_set_goalpos ) )
    {
        _id_DB33B152656EEED0 = self.last_set_goalpos;

        while ( isdefined( self.last_set_goalpos ) && self.last_set_goalpos == _id_DB33B152656EEED0 )
            waitframe();
    }

    self notify( "interaction_done" );
    thread interaction_end();
}

interaction_pain_listener()
{
    self endon( "death" );
    self endon( "interaction_done" );
    self.interaction_pain = undefined;

    for (;;)
    {
        self.interaction_pain = undefined;
        self waittill( "pain" );
        self.interaction_pain = 1;
        wait 5.0;
    }
}

interaction_set_anim_movement( movement )
{
    if ( !isdefined( movement ) )
        movement = "stop";

    if ( isai( self ) )
        self.a.movement = movement;
    else
        return;
}

start_fakeactor_notetracks( animation )
{
    anime = undefined;

    if ( isdefined( self.interaction_name ) )
        anime = self.interaction_name;

    thread scripts\common\notetrack::start_notetrack_wait( self, "single anim", anime, undefined, animation );
    thread scripts\sp\anim::animscriptdonotetracksthread( self, "single anim", anime );
}
