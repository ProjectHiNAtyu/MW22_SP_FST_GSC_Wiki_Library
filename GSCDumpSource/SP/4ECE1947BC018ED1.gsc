// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

stealth_noteworthy_thread( enabled, callouts )
{
    self notify( "stealth_noteworthy_thread" );

    if ( !isdefined( enabled ) )
        enabled = 1;

    if ( !enabled )
        return;

    self endon( "stealth_noteworthy_thread" );
    self endon( "disconnect" );

    while ( !isdefined( self.stealth ) )
        wait 1.0;

    stealth_noteworthy_init();

    if ( !isdefined( self.stealth.stealth_noted ) )
        self.stealth.stealth_noted = [];

    childthread stealth_noteworthy_kill_monitor();

    if ( istrue( callouts ) )
        childthread stealth_noteworthy_callouts( 1 );

    contents = stealth_noteworthy_aim_contents();

    for (;;)
    {
        scripts\engine\utility::flag_wait( "stealth_enabled" );
        scripts\engine\utility::flag_waitopen( "stealth_spotted" );
        _id_445ACA8C2C95592E = -1.0;
        _id_5D2A2A8B837615B6 = undefined;

        if ( self playerads() > level.stealth.noteworthy.stealth_noteworthy_min_ads )
        {
            _id_C2F4EC03C9EC610E = self geteye();
            _id_0F70B704E57BD522 = anglestoforward( self getplayerangles() );
            targets = stealth_noteworthy_entities( self.origin, 20000, "axis", level.stealth.noteworthy.civilians_aim, level.stealth.noteworthy.fakeactors_aim );

            foreach ( _id_E99670032AADC0D4 in targets )
            {
                entnum = _id_E99670032AADC0D4 getentitynumber();

                if ( isdefined( self.stealth.stealth_noted[entnum] ) )
                    continue;

                _id_57838C060EB4DED1 = _id_E99670032AADC0D4 stealth_noteworthy_get_eye();
                dir = vectornormalize( _id_57838C060EB4DED1 - _id_C2F4EC03C9EC610E );
                dot = vectordot( _id_0F70B704E57BD522, dir );

                if ( dot > level.stealth.noteworthy.stealth_noteworthy_min_dot && dot > _id_445ACA8C2C95592E )
                {
                    if ( scripts\engine\trace::ray_trace_passed( _id_57838C060EB4DED1, _id_C2F4EC03C9EC610E, undefined, contents ) )
                    {
                        _id_445ACA8C2C95592E = dot;
                        _id_5D2A2A8B837615B6 = _id_E99670032AADC0D4;
                    }
                }
            }

            if ( isdefined( _id_5D2A2A8B837615B6 ) )
                thread stealth_noteworthy_delayed( "aim", _id_5D2A2A8B837615B6 );

            foreach ( entnum, ent in self.stealth.stealth_noted )
            {
                if ( !isdefined( self.stealth.stealth_noted[entnum] ) )
                    self.stealth.stealth_noted[entnum] = undefined;
            }
        }

        waitframe();
    }
}

stealth_noteworthy_init()
{
    if ( isdefined( level.stealth.noteworthy ) )
        return;

    level.stealth.noteworthy = spawnstruct();
    level.stealth.noteworthy.priority_func = ::stealth_noteworthy_priority;
    level.stealth.noteworthy.stealth_noteworthy_min_ads = 0.3;
    level.stealth.noteworthy.stealth_noteworthy_min_dot = 0.99;
    level.stealth.noteworthy.stealth_noteworthy_min_delay = 0.25;
    level.stealth.noteworthy.stealth_noteworthy_max_delay = 0.5;
    level.stealth.noteworthy.callout_enabled = [];
    level.stealth.noteworthy.callout_enabled["left"] = 1;
    level.stealth.noteworthy.callout_enabled["right"] = 1;
    level.stealth.noteworthy.callout_enabled["ahead"] = 0;
    level.stealth.noteworthy.callout_enabled["behind"] = 1;
    level.stealth.noteworthy.callout_enabled["below"] = 1;
    level.stealth.noteworthy.fakeactors_aim = 1;
    level.stealth.noteworthy.fakeactors_callout = 0;
    level.stealth.noteworthy.civilians_aim = 1;
    level.stealth.noteworthy.civilians_callout = 1;
    level.stealth.noteworthy.callout_debounce_guy = 60000;
    level.stealth.noteworthy.callout_debounce_all = 15000;
    level.stealth.noteworthy.callout_radius = 800;
    level.stealth.noteworthy.callout_proximity_radius = 0;
    level.stealth.noteworthy.callout_bunch_radius = 100;
    level.stealth.noteworthy.callout_func_validator = undefined;
    level.stealth.noteworthy.callout_trace_contents = scripts\engine\trace::create_ainosight_contents();
    level.stealth.noteworthy.callout_traces = 0;
    level.stealth.noteworthy.callout_spotted = 0;
}

stealth_noteworthy_kill_monitor()
{
    _id_4E5BF965CDBD439C = 0;
    kills = undefined;

    for (;;)
    {
        kills = self.stats["kills"];

        if ( !isdefined( kills ) )
            kills = 0;

        _id_9011371412CCE700 = kills;
        lastkilltime = gettime();
        scripts\engine\utility::flag_wait( "stealth_enabled" );
        scripts\engine\utility::flag_waitopen( "stealth_spotted" );
        level waittill( "ai_killed", victim, attacker, meansofdeath, weapon );

        if ( !isdefined( attacker ) || attacker != self )
            continue;

        if ( !scripts\engine\utility::flag( "stealth_enabled" ) || scripts\engine\utility::flag( "stealth_spotted" ) )
            continue;

        if ( isdefined( victim ) && isdefined( victim.team ) && victim.team != "axis" )
            thread stealth_noteworthy_delayed( "civilian_kill", victim );

        kills = self.stats["kills"];

        if ( !isdefined( kills ) )
            kills = 1;

        _id_74F06E54BA04979E = kills - _id_9011371412CCE700;

        if ( gettime() - lastkilltime > 1000 )
            _id_4E5BF965CDBD439C = 0;

        _id_CD51503D08D24E7D = isdefined( weapon ) && weapontype( weapon ) == "bullet";

        if ( _id_74F06E54BA04979E >= 2 && _id_CD51503D08D24E7D )
            thread stealth_noteworthy_delayed( "good_kill_double", victim, 1 );

        _id_4E5BF965CDBD439C = _id_4E5BF965CDBD439C + _id_74F06E54BA04979E;

        if ( _id_4E5BF965CDBD439C > 1 )
        {
            thread stealth_noteworthy_delayed( "good_kill_impressive", victim, 1 );
            continue;
        }

        if ( _id_CD51503D08D24E7D )
        {
            thread stealth_noteworthy_delayed( "good_kill_bullet", victim, 1 );
            continue;
        }

        thread stealth_noteworthy_delayed( "good_kill", victim, 1 );
    }
}

stealth_noteworthy_delayed( eventname, target, _id_DC524D5756A28562, delay )
{
    targets = undefined;
    entnum = undefined;

    if ( isarray( target ) )
        targets = target;
    else
    {
        entnum = target getentitynumber();
        targets = [];
        targets[entnum] = target;
    }

    if ( isdefined( self.stealth.stealth_note_pending ) )
    {
        if ( [[ level.stealth.noteworthy.priority_func ]]( self.stealth.stealth_note_pending ) > [[ level.stealth.noteworthy.priority_func ]]( eventname ) )
            return;

        if ( eventname == "aim" )
        {
            if ( isdefined( self.stealth.stealth_note_pending_targets[entnum] ) )
                return;

            self.stealth.stealth_note_pending_targets = targets;
        }
        else if ( self.stealth.stealth_note_pending == eventname )
            self.stealth.stealth_note_pending_targets[entnum] = target;
        else
            self.stealth.stealth_note_pending_targets = targets;
    }
    else
    {
        self.stealth.stealth_note_pending = eventname;
        self.stealth.stealth_note_pending_targets = targets;
    }

    self notify( "stealth_noteworthy_delayed" );
    self endon( "stealth_noteworthy_delayed" );
    self endon( "disconnect" );
    _id_47D2BD504A119E32 = _func_ 725F1665C849C38( self );

    if ( istrue( _id_DC524D5756A28562 ) )
        self.stealth.stealth_note_start_alert = _id_47D2BD504A119E32;

    if ( !isdefined( delay ) )
        delay = randomfloatrange( level.stealth.noteworthy.stealth_noteworthy_min_delay, level.stealth.noteworthy.stealth_noteworthy_max_delay );

    if ( delay > 0 )
        wait( delay );

    if ( isstartstr( eventname, "good_kill" ) )
        self.stealth.stealth_note_pending_targets = scripts\engine\utility::array_combine( self.stealth.stealth_note_pending_targets );
    else
        self.stealth.stealth_note_pending_targets = scripts\engine\utility::array_removedead_or_dying( self.stealth.stealth_note_pending_targets );

    _id_47D2BD504A119E32 = _func_ 725F1665C849C38( self );

    if ( istrue( _id_DC524D5756A28562 ) && self.stealth.stealth_note_start_alert < _id_47D2BD504A119E32 )
    {
        self.stealth.stealth_note_pending = undefined;
        self.stealth.stealth_note_pending_targets = undefined;
        return;
    }

    if ( eventname == "aim" )
    {
        _id_C2F4EC03C9EC610E = self geteye();
        _id_0F70B704E57BD522 = anglestoforward( self getplayerangles() );
        contents = stealth_noteworthy_aim_contents();

        foreach ( ent in self.stealth.stealth_note_pending_targets )
        {
            _id_57838C060EB4DED1 = ent stealth_noteworthy_get_eye();
            dir = vectornormalize( _id_57838C060EB4DED1 - _id_C2F4EC03C9EC610E );
            dot = vectordot( _id_0F70B704E57BD522, dir );

            if ( dot < level.stealth.noteworthy.stealth_noteworthy_min_dot || !scripts\engine\trace::ray_trace_passed( _id_57838C060EB4DED1, _id_C2F4EC03C9EC610E, undefined, contents ) )
            {
                self.stealth.stealth_note_pending = undefined;
                self.stealth.stealth_note_pending_targets = undefined;
                return;
            }
        }

        foreach ( target in self.stealth.stealth_note_pending_targets )
            self.stealth.stealth_noted[target getentitynumber()] = target;
    }

    self notify( "stealth_noteworthy", eventname, self.stealth.stealth_note_pending_targets );
    self.stealth.stealth_note_pending = undefined;
    self.stealth.stealth_note_pending_targets = undefined;
}

stealth_noteworthy_priority( eventname )
{
    if ( !isdefined( eventname ) )
        return -1;

    switch ( eventname )
    {
        case "civilian_kill":
            return 70;
        case "good_kill_double":
            return 60;
        case "good_kill_impressive":
            return 50;
        case "good_kill_bullet":
            return 40;
        case "good_kill":
            return 30;
        case "aim":
            return 20;
        case "callout_behind":
        case "callout_ahead":
        case "callout_below":
        case "callout_right":
        case "callout_left":
            return 10;
    }

    return 0;
}

stealth_noteworthy_aim_contents()
{
    return scripts\engine\trace::create_contents( 0, 1, 0, 1, 0, 1 );
}

stealth_noteworthy_entities( origin, radius, team, civilians, fakeactors )
{
    if ( !isdefined( team ) )
        team = "axis";

    if ( istrue( civilians ) )
        entities = getaiarrayinradius( origin, radius, team, "neutral" );
    else
        entities = getaiarrayinradius( origin, radius, team );

    entities = scripts\engine\utility::array_removedead_or_dying( entities );

    if ( istrue( fakeactors ) )
    {
        _id_226F19AB7C6E987F = _func_CCEC9671BEB63674( origin, radius );

        foreach ( _id_B477FFE0567B4ED2 in _id_226F19AB7C6E987F )
        {
            if ( isdefined( _id_B477FFE0567B4ED2.team ) && ( _id_B477FFE0567B4ED2.team == team || istrue( civilians ) && _id_B477FFE0567B4ED2.team == "neutral" ) )
                entities[entities.size] = _id_B477FFE0567B4ED2;
        }
    }

    return entities;
}

stealth_noteworthy_callouts( enabled )
{
    self notify( "stealth_noteworthy_callouts" );
    self endon( "stealth_noteworthy_callouts" );

    if ( !istrue( enabled ) )
        return;

    level.stealth.noteworthy.callout_next = 0;

    for (;;)
    {
        wait 0.5;
        scripts\engine\utility::flag_wait( "stealth_enabled" );

        if ( !level.stealth.noteworthy.callout_spotted )
            scripts\engine\utility::flag_waitopen( "stealth_spotted" );

        entities = stealth_noteworthy_entities( self.origin, level.stealth.noteworthy.callout_radius, undefined, level.stealth.noteworthy.civilians_callout, level.stealth.noteworthy.fakeactors_callout );
        callouts = stealth_noteworthy_callouts_init();
        _id_F1FCCDA1AD4EDF59 = self geteye();

        foreach ( ent in entities )
        {
            if ( !isdefined( ent.stealth ) )
                continue;

            if ( istrue( ent.stealth.callout_disabled ) )
                continue;

            if ( isdefined( ent.stealth.callout_next ) && gettime() < ent.stealth.callout_next )
                continue;

            if ( isdefined( level.stealth.noteworthy.callout_func_validator ) && !self [[ level.stealth.noteworthy.callout_func_validator ]]( ent ) )
                continue;

            _id_BF67531DCAEEBEC0 = distancesquared( self.origin, ent.origin ) > level.stealth.noteworthy.callout_proximity_radius * level.stealth.noteworthy.callout_proximity_radius;

            if ( _id_BF67531DCAEEBEC0 && !stealth_noteworthy_trace( ent stealth_noteworthy_get_eye(), _id_F1FCCDA1AD4EDF59, ent ) )
                continue;

            if ( stealth_noteworthy_visible( ent, _id_BF67531DCAEEBEC0 ) )
            {
                ent.stealth.callout_next = gettime() + level.stealth.noteworthy.callout_debounce_guy;
                continue;
            }

            if ( gettime() < level.stealth.noteworthy.callout_next )
                continue;

            type = stealth_noteworthy_callout_type( ent );

            if ( isdefined( type ) )
            {
                entnum = ent getentitynumber();

                if ( istrue( level.stealth.noteworthy.callout_civilians ) )
                {
                    foreach ( _id_7163550C589FA07A in callouts.results["all"] )
                    {
                        if ( _id_7163550C589FA07A.team != ent.team && _id_7163550C589FA07A.team == "neutral" )
                            callouts = stealth_noteworthy_callouts_init();

                        break;
                    }
                }

                callouts.results["all"][entnum] = ent;
                _id_ABD9EE4725B96FC2 = distancesquared( self.origin, ent.origin );

                if ( _id_ABD9EE4725B96FC2 < callouts.closest_dist_sq )
                {
                    callouts.closest_dist_sq = _id_ABD9EE4725B96FC2;
                    callouts.closest_type = type;
                }

                callouts.results[type][entnum] = ent;
            }
        }

        if ( isdefined( callouts.closest_type ) )
        {
            type = callouts.closest_type;

            foreach ( ent in callouts.results[type] )
                ent.stealth.callout_next = gettime() + level.stealth.noteworthy.callout_debounce_guy;

            level.stealth.noteworthy.callout_next = gettime() + level.stealth.noteworthy.callout_debounce_all;
            _id_DAD53B1877D9909E = [];

            foreach ( ent in callouts.results[type] )
            {
                _id_7720B9932E50148E = stealth_noteworthy_entities( ent.origin, level.stealth.noteworthy.callout_bunch_radius, ent.team, 0, level.stealth.noteworthy.fakeactors_callout );

                foreach ( _id_7CE3363433B33FC7 in _id_7720B9932E50148E )
                {
                    if ( !isdefined( _id_7CE3363433B33FC7.stealth ) )
                        continue;

                    if ( istrue( _id_7CE3363433B33FC7.stealth.callout_disabled ) )
                        continue;

                    _id_DAD53B1877D9909E[_id_7CE3363433B33FC7 getentitynumber()] = _id_7CE3363433B33FC7;
                    _id_7CE3363433B33FC7.stealth.callout_next = gettime() + level.stealth.noteworthy.callout_debounce_guy;
                }
            }

            foreach ( ent in _id_DAD53B1877D9909E )
                callouts.results[type][ent getentitynumber()] = ent;

            stealth_noteworthy_delayed( "callout_" + type, callouts.results[type], undefined, 0 );
        }
    }
}

stealth_noteworthy_callouts_init()
{
    callouts = spawnstruct();
    callouts.results["left"] = [];
    callouts.results["right"] = [];
    callouts.results["ahead"] = [];
    callouts.results["behind"] = [];
    callouts.results["below"] = [];
    callouts.results["all"] = [];
    callouts.closest_type = undefined;
    callouts.closest_dist_sq = squared( 20000 );
    return callouts;
}

stealth_noteworthy_callout_type( ent )
{
    type = undefined;
    _id_FEEA27A1B633DAAD = anglestoforward( self.angles );
    _id_4E5F3799E80AFAC6 = vectorcross( _id_FEEA27A1B633DAAD, ( 0, 0, 1 ) );
    dir = vectornormalize( ent.origin - self.origin );
    _id_E32C0E4A71D1793E = vectordot( _id_FEEA27A1B633DAAD, dir );

    if ( _id_E32C0E4A71D1793E > 0.7 )
        type = "ahead";
    else if ( _id_E32C0E4A71D1793E < -0.7 )
        type = "behind";
    else
    {
        height = ent.origin[2] - self.origin[2];

        if ( _id_E32C0E4A71D1793E > 0.7 && height < -100 )
            type = "below";
        else
        {
            _id_87D553E2E44D7001 = vectordot( _id_4E5F3799E80AFAC6, dir );

            if ( _id_87D553E2E44D7001 < -0.7 )
                type = "left";
            else if ( _id_87D553E2E44D7001 > 0.7 )
                type = "right";
        }
    }

    if ( isdefined( type ) && !istrue( level.stealth.noteworthy.callout_enabled[type] ) )
        return undefined;

    return type;
}

stealth_noteworthy_visible( other, _id_88266FD50ECB7909 )
{
    if ( !scripts\engine\utility::within_fov( self.origin, self.angles, other.origin, 0.7 ) )
        return 0;

    _id_C2F4EC03C9EC610E = self geteye();

    if ( stealth_noteworthy_trace( _id_C2F4EC03C9EC610E, other.origin + ( 0, 0, 18 ), other ) )
        return 1;

    if ( _id_88266FD50ECB7909 || stealth_noteworthy_trace( _id_C2F4EC03C9EC610E, other stealth_noteworthy_get_eye(), other ) )
        return 1;

    return 0;
}

stealth_noteworthy_get_eye()
{
    _id_C2F4EC03C9EC610E = self.origin + ( 0, 0, 50 );

    if ( issentient( self ) )
        _id_C2F4EC03C9EC610E = self geteye();

    return _id_C2F4EC03C9EC610E;
}

stealth_noteworthy_trace( start, end, _id_75BEA58D65510615 )
{
    stealth_noteworthy_trace_safety_check();
    return scripts\engine\trace::ray_trace_passed( start, end, [ self, _id_75BEA58D65510615 ], level.stealth.noteworthy.callout_trace_contents );
}

stealth_noteworthy_trace_safety_check()
{
    level.stealth.noteworthy.callout_traces++;

    if ( level.stealth.noteworthy.callout_traces > 3 )
    {
        waitframe();
        level.stealth.noteworthy.callout_traces = 1;
    }
}

ambient_player_thread( _id_E80854BC30EF7692, _id_0E8091311A0985E4, _id_BF7EB5DAF1C3FC77, _id_1E6C1E4BB0511BE9 )
{

}

ambient_candidates( _id_267D1581E3D4E156, _id_AD494952EC0E52E7 )
{
    maxdist = 1000;
    _id_B0BB95D539F6B4CF = [];

    if ( !_id_267D1581E3D4E156 && !_id_AD494952EC0E52E7 )
        return _id_B0BB95D539F6B4CF;

    if ( _id_267D1581E3D4E156 && !_id_AD494952EC0E52E7 && !_id_3212CC02A2700260::bctable_exists( "stealth", "radio", "convo" ) )
        return _id_B0BB95D539F6B4CF;

    _id_109E550E37FF34BB = getaiarrayinradius( self.origin, maxdist, "axis" );
    _id_109E550E37FF34BB = scripts\engine\utility::array_removeundefined( _id_109E550E37FF34BB );

    foreach ( enemy in _id_109E550E37FF34BB )
    {
        if ( !_id_267D1581E3D4E156 && !isalive( enemy ) )
            continue;

        if ( !_id_267D1581E3D4E156 && ( !isdefined( enemy.stealth ) || issentient( enemy ) && enemy.alertlevel == "combat" ) )
            continue;

        if ( issentient( enemy ) && enemy.ignoreall )
            continue;

        if ( issentient( enemy ) && !isdefined( enemy.stealth ) )
            continue;

        if ( isdefined( enemy.fnisinstealthidlescriptedanim ) && enemy [[ enemy.fnisinstealthidlescriptedanim ]]() )
            continue;

        if ( isdefined( enemy.fnisinstealthidle ) && !istrue( enemy [[ enemy.fnisinstealthidle ]]() ) )
            continue;

        if ( enemy.unittype == "dog" )
            continue;

        if ( isdefined( enemy.stealth ) )
        {
            if ( isdefined( enemy.stealth.vo_next_ambient ) && gettime() < enemy.stealth.vo_next_ambient )
                continue;

            if ( isdefined( enemy.stealth.last_sound_time ) && gettime() - enemy.stealth.last_sound_time < 10000 )
                continue;

            if ( isdefined( enemy.last_severity_time ) && gettime() - enemy.last_severity_time < 10000 )
                continue;
        }

        _id_B0BB95D539F6B4CF[_id_B0BB95D539F6B4CF.size] = enemy;
    }

    _id_B0BB95D539F6B4CF = sortbydistance( _id_B0BB95D539F6B4CF, self.origin );
    return _id_B0BB95D539F6B4CF;
}

ambient_player_stop()
{
    self notify( "ambient_player_thread" );
}

_id_9856971A6BDA1BEA()
{
    level.player endon( "death" );
    level.player._id_088606454E690C77 = spawnstruct();
    level.player._id_088606454E690C77.active = 1;
    childthread sixthsense_think();
}

sixthsense_think()
{
    level endon( "stop_sixth_sense" );

    for (;;)
    {
        waitframe();

        if ( !level.player._id_088606454E690C77.active )
        {
            _id_21D44D6E55FF1AD2( 0, 0 );
            continue;
        }

        sixthsense_think_internal();
    }
}

sixthsense_think_internal()
{
    _id_0C0269881CB3B186 = 0;
    _id_FA89613ACD0EB87E = 0;
    _id_75ABBF0830C5D3FA = 0;
    _id_F9BC699768A98866 = 0;
    _id_1925D24D0AE333E6 = level.player geteye();

    if ( istrue( level.player.ignoreme ) || istrue( level.player.notarget ) )
        return;

    foreach ( enemy in getaiarray( "bad_guys" ) )
    {
        if ( _id_FA89613ACD0EB87E >= 25 )
        {
            _id_FA89613ACD0EB87E = 0;
            waitframe();
        }

        if ( !isalive( enemy ) )
            continue;

        if ( !isdefined( enemy.stealth ) && !isdefined( enemy._id_BB5D687F2F98454A ) )
            continue;

        if ( istrue( enemy.ignoreall ) )
            continue;

        if ( distancesquared( enemy.origin, _id_1925D24D0AE333E6 ) > 16000000 )
            continue;

        _id_FA89613ACD0EB87E = _id_FA89613ACD0EB87E + 1;

        if ( isdefined( enemy._id_02BCCFEBE0B2B566 ) )
        {
            if ( !enemy [[ enemy._id_02BCCFEBE0B2B566 ]]() )
                continue;
        }
        else if ( !enemy cansee( level.player ) )
            continue;

        direction = level.player getsixthsensedirection( enemy );

        if ( enemy scripts\stealth\utility::_id_6A86DD83C01F8FAA() && !isdefined( enemy._id_BB5D687F2F98454A ) )
        {
            _id_F9BC699768A98866 = _id_F9BC699768A98866 | direction;
            continue;
        }

        _id_75ABBF0830C5D3FA = _id_75ABBF0830C5D3FA | direction;
    }

    level.player _id_21D44D6E55FF1AD2( _id_75ABBF0830C5D3FA, _id_F9BC699768A98866 );
}

_id_21D44D6E55FF1AD2( _id_75ABBF0830C5D3FA, _id_F9BC699768A98866 )
{
    if ( !isdefined( level.player._id_088606454E690C77.hud ) )
    {
        _id_1F1F9C9942133ACB = [];
        _id_1F1F9C9942133ACB["left"] = newhudelem();
        _id_1F1F9C9942133ACB["left"] setshader( "widg_gradient_left_to_right", 150, 480 );
        _id_1F1F9C9942133ACB["left"].x = 0;
        _id_1F1F9C9942133ACB["left"].y = 0;
        _id_1F1F9C9942133ACB["left"].alignx = "left";
        _id_1F1F9C9942133ACB["left"].aligny = "top";
        _id_1F1F9C9942133ACB["left"].horzalign = "left";
        _id_1F1F9C9942133ACB["left"].vertalign = "top";
        _id_1F1F9C9942133ACB["left"].sort = 0;
        _id_1F1F9C9942133ACB["left"].alpha = 0.0;
        _id_1F1F9C9942133ACB["left"].color = ( 0.925, 0.519, 0.14 );
        _id_1F1F9C9942133ACB["right"] = newhudelem();
        _id_1F1F9C9942133ACB["right"] setshader( "widg_gradient_right_to_left", 150, 480 );
        _id_1F1F9C9942133ACB["right"].x = 0;
        _id_1F1F9C9942133ACB["right"].y = 0;
        _id_1F1F9C9942133ACB["right"].alignx = "right";
        _id_1F1F9C9942133ACB["right"].aligny = "top";
        _id_1F1F9C9942133ACB["right"].horzalign = "right";
        _id_1F1F9C9942133ACB["right"].vertalign = "top";
        _id_1F1F9C9942133ACB["right"].sort = 0;
        _id_1F1F9C9942133ACB["right"].alpha = 0.0;
        _id_1F1F9C9942133ACB["right"].color = ( 0.925, 0.519, 0.14 );
        _id_1F1F9C9942133ACB["lower"] = newhudelem();
        _id_1F1F9C9942133ACB["lower"] setshader( "widg_gradient_bottom_to_top", 1280, 150 );
        _id_1F1F9C9942133ACB["lower"].x = 0;
        _id_1F1F9C9942133ACB["lower"].y = 480;
        _id_1F1F9C9942133ACB["lower"].alignx = "left";
        _id_1F1F9C9942133ACB["lower"].aligny = "bottom";
        _id_1F1F9C9942133ACB["lower"].horzalign = "left";
        _id_1F1F9C9942133ACB["lower"].vertalign = "top";
        _id_1F1F9C9942133ACB["lower"].sort = 0;
        _id_1F1F9C9942133ACB["lower"].alpha = 0.0;
        _id_1F1F9C9942133ACB["lower"].color = ( 0.925, 0.519, 0.14 );

        if ( getdvarint( "dvar_82EB856681438F08" ) == 0 )
        {
            _id_1F1F9C9942133ACB["upper"] = newhudelem();
            _id_1F1F9C9942133ACB["upper"] setshader( "widg_gradient_top_to_bottom", 1280, 150 );
            _id_1F1F9C9942133ACB["upper"].x = 0;
            _id_1F1F9C9942133ACB["upper"].y = 0;
            _id_1F1F9C9942133ACB["upper"].alignx = "left";
            _id_1F1F9C9942133ACB["upper"].aligny = "top";
            _id_1F1F9C9942133ACB["upper"].horzalign = "left";
            _id_1F1F9C9942133ACB["upper"].vertalign = "top";
            _id_1F1F9C9942133ACB["upper"].sort = 0;
            _id_1F1F9C9942133ACB["upper"].alpha = 0.0;
            _id_1F1F9C9942133ACB["upper"].color = ( 0.925, 0.519, 0.14 );
        }

        level.player._id_088606454E690C77.hud = _id_1F1F9C9942133ACB;
    }

    foreach ( dir in getarraykeys( level.player._id_088606454E690C77.hud ) )
    {
        active = _id_14C8D34A7E2B92C1( dir, _id_75ABBF0830C5D3FA );
        spotted = _id_14C8D34A7E2B92C1( dir, _id_F9BC699768A98866 );

        if ( getdvarint( "dvar_3A810DB500922B6C" ) != 0 )
            _id_8736C4028A753995( dir, active, spotted );

        if ( isdefined( level._id_28C0D60E971FF699 ) )
            [[ level._id_28C0D60E971FF699 ]]( dir, active, spotted );

        _id_494FDA903EF1977C( dir, active, spotted, _id_75ABBF0830C5D3FA, _id_F9BC699768A98866 );
    }
}

_id_14C8D34A7E2B92C1( dir, mask )
{
    _id_91C0D90230D51049 = [];

    switch ( dir )
    {
        case "left":
            _id_91C0D90230D51049 = [ 128, 32 ];
            break;
        case "right":
            _id_91C0D90230D51049 = [ 64, 8 ];
            break;
        case "upper":
            _id_91C0D90230D51049 = [ 4, 2, 1 ];
            break;
        case "lower":
            _id_91C0D90230D51049 = [ 16 ];
            break;
        default:
            break;
    }

    foreach ( _id_A85BB3E5070650D1 in _id_91C0D90230D51049 )
    {
        if ( mask & _id_A85BB3E5070650D1 )
            return 1;
    }

    return 0;
}

_id_8736C4028A753995( dir, active, spotted )
{
    _id_4EFE32558A7556C6 = level.player._id_088606454E690C77.hud[dir];
    _id_4EFE32558A7556C6.color = scripts\engine\utility::ter_op( spotted, ( 1, 0.14, 0.519 ), ( 0.925, 0.519, 0.14 ) );
    _id_4EFE32558A7556C6 fadeovertime( scripts\engine\utility::ter_op( active, 1, 3 ) );
    _id_4EFE32558A7556C6.alpha = scripts\engine\utility::ter_op( active, 1.0, 0.0 );
}

_id_494FDA903EF1977C( dir, active, spotted, _id_75ABBF0830C5D3FA, _id_F9BC699768A98866 )
{
    if ( _id_75ABBF0830C5D3FA > 0 )
    {
        if ( _id_F9BC699768A98866 == 0 && _func_EAC0CD99C9C6D8EE() != "spotted" )
        {
            if ( !isdefined( level.player._id_33DF676309C77FC4 ) )
                level.player._id_33DF676309C77FC4 = gettime();

            if ( gettime() >= level.player._id_33DF676309C77FC4 )
            {
                level.player._id_33DF676309C77FC4 = gettime() + 5000;
                level.player playsound( "ui_stealth_threat_hud_periph_vision" );
            }
        }
    }

    if ( _id_F9BC699768A98866 > 0 )
    {
        if ( !isdefined( level.player._id_80221E9C5627503A ) )
            level.player._id_80221E9C5627503A = gettime();

        if ( gettime() >= level.player._id_80221E9C5627503A )
        {
            level.player._id_80221E9C5627503A = gettime() + 5000;
            level.player playsound( "ui_stealth_spotted_vision" );
        }
    }
}

getsixthsensedirection( enemy )
{
    forward = anglestoforward( self getplayerangles() );
    _id_9D9E76097A59CB60 = ( forward[0], forward[1], forward[2] );
    _id_9D9E76097A59CB60 = vectornormalize( _id_9D9E76097A59CB60 );
    _id_9001DA663C7CDFEC = enemy.origin - self.origin;
    _id_4720FAE3929BBDBA = ( _id_9001DA663C7CDFEC[0], _id_9001DA663C7CDFEC[1], _id_9001DA663C7CDFEC[2] );
    _id_4720FAE3929BBDBA = vectornormalize( _id_4720FAE3929BBDBA );
    dot = vectordot( _id_9D9E76097A59CB60, _id_4720FAE3929BBDBA );

    if ( dot >= 0.92388 )
        return 2;
    else if ( dot >= 0.5 )
        return scripts\engine\utility::ter_op( isleft2d( self.origin, _id_9D9E76097A59CB60, enemy.origin ), 4, 1 );
    else if ( dot >= 0.5 )
        return scripts\engine\utility::ter_op( isleft2d( self.origin, _id_9D9E76097A59CB60, enemy.origin ), 128, 64 );
    else if ( dot >= -0.707107 )
        return scripts\engine\utility::ter_op( isleft2d( self.origin, _id_9D9E76097A59CB60, enemy.origin ), 32, 8 );
    else
        return 16;
}

isleft2d( startpos, _id_49E63390E090A2A8, _id_990BC5D950404EE5 )
{
    _id_7799A293BF13FE15 = ( startpos[0], startpos[1], 0 );
    _id_4C711FE4D7900B43 = ( _id_990BC5D950404EE5[0], _id_990BC5D950404EE5[1], 0 );
    _id_79868B365E4D18F8 = _id_4C711FE4D7900B43 - _id_7799A293BF13FE15;
    _id_9D9E76097A59CB60 = ( _id_49E63390E090A2A8[0], _id_49E63390E090A2A8[1], 0 );
    return _id_79868B365E4D18F8[0] * _id_9D9E76097A59CB60[1] - _id_79868B365E4D18F8[1] * _id_9D9E76097A59CB60[0] < 0;
}
