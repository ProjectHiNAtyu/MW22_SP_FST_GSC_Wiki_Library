// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

entity_count()
{

}

entity_count_hud()
{

}

get_total_count_color( total )
{

}

adjust_entcounthud_pos()
{

}

set_entity_count_hud( num, key, val )
{

}

entity_count_delta( _id_9C1BFACC3F682FEA, val )
{

}

adjust_entity_count_hud_color( val )
{

}

get_entity_count_list( _id_BD17AF3029B82375, _id_39FEB40218B7AF6E )
{
    ents = getentarray();
    array = [];

    if ( !isdefined( _id_BD17AF3029B82375 ) )
        _id_BD17AF3029B82375 = 0;

    foreach ( ent in ents )
    {
        if ( !isdefined( ent.classname ) )
            classname = "UNKNOWN?";
        else
            classname = ent.classname;

        if ( _id_BD17AF3029B82375 )
        {
            if ( isai( ent ) )
                classname = "actors";
            else if ( isspawner( ent ) )
            {
                _id_DEC9BCCE93873125 = getsubstr( classname, 0, 5 );

                if ( _id_DEC9BCCE93873125 == "actor" )
                    classname = "AI_spawners";
                else
                    classname = "vehicle_spawners";
            }
            else if ( isdefined( ent.createfx_ent ) )
                classname = ent.classname + " CREATEFX";
            else if ( !isdefined( ent.code_classname ) )
            {

            }
            else if ( ent.code_classname == "script_model" )
            {
                if ( ent.model == "tag_origin" )
                    classname = "script_model TAG_ORIGIN";
            }
            else if ( ent.code_classname == "trigger_multiple" )
            {
                _id_DEC9BCCE93873125 = getsubstr( classname, 0, 22 );

                if ( _id_DEC9BCCE93873125 == "trigger_multiple_bcs_" )
                    classname = "trigger_multiple_bcs";
                else
                    classname = "trigger_multiple";
            }
            else
            {
                _id_DEC9BCCE93873125 = getsubstr( ent.code_classname, 0, 10 );

                if ( _id_DEC9BCCE93873125 == "weapon_iw8" )
                    classname = "weapons";

                _id_DEC9BCCE93873125 = getsubstr( ent.code_classname, 0, 5 );

                if ( _id_DEC9BCCE93873125 == "actor" )
                    classname = "drones";
            }
        }
        else
        {
            if ( isdefined( ent.createfx_ent ) )
                classname = "CREATEFX " + ent.classname;

            if ( classname == "script_model" )
                classname = classname + ( " " + ent.model );
        }

        if ( !isdefined( array[classname] ) )
            array[classname] = 0;

        array[classname]++;
    }

    if ( !isdefined( _id_39FEB40218B7AF6E ) || !_id_39FEB40218B7AF6E )
        array = sort_by_key( array );

    return array;
}

sort_by_key( array )
{
    keys = getarraykeys( array );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < keys.size - 1; _id_AC0E594AC96AA3A8++ )
    {
        for ( _id_AC0E5C4AC96AAA41 = _id_AC0E594AC96AA3A8 + 1; _id_AC0E5C4AC96AAA41 < keys.size; _id_AC0E5C4AC96AAA41++ )
        {
            if ( stricmp( keys[_id_AC0E594AC96AA3A8], keys[_id_AC0E5C4AC96AAA41] ) > 0 )
            {
                ref = keys[_id_AC0E5C4AC96AAA41];
                keys[_id_AC0E5C4AC96AAA41] = keys[_id_AC0E594AC96AA3A8];
                keys[_id_AC0E594AC96AA3A8] = ref;
            }
        }
    }

    _id_055F75D9F16D814F = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < keys.size; _id_AC0E594AC96AA3A8++ )
        _id_055F75D9F16D814F[keys[_id_AC0E594AC96AA3A8]] = array[keys[_id_AC0E594AC96AA3A8]];

    return _id_055F75D9F16D814F;
}

debug_enemypos( num )
{
    ai = getaiarray();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( ai[_id_AC0E594AC96AA3A8] getentitynumber() != num )
            continue;

        ai[_id_AC0E594AC96AA3A8] thread debug_enemyposproc();
        break;
    }
}

debug_stopenemypos( num )
{
    ai = getaiarray();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( ai[_id_AC0E594AC96AA3A8] getentitynumber() != num )
            continue;

        ai[_id_AC0E594AC96AA3A8] notify( "stop_drawing_enemy_pos" );
        break;
    }
}

debug_enemyposproc()
{
    self endon( "death" );
    self endon( "stop_drawing_enemy_pos" );

    for (;;)
    {
        wait 0.05;

        if ( isalive( self.enemy ) )
        {

        }

        if ( !_id_7E4D332E911E1B90::hasenemysightpos() )
            continue;

        pos = _id_7E4D332E911E1B90::getenemysightpos();
    }
}

debug_enemyposreplay()
{
    ai = getaiarray();
    guy = undefined;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = ai[_id_AC0E594AC96AA3A8];

        if ( !isalive( guy ) )
            continue;

        if ( isdefined( guy.lastenemysightpos ) )
        {

        }

        if ( isdefined( guy.goodshootpos ) )
        {
            if ( guy isbadguy() )
                color = ( 1, 0, 0 );
            else
                color = ( 0, 0, 1 );

            _id_B3E742AC78B00246 = guy.origin + ( 0, 0, 54 );

            if ( isdefined( guy.node ) )
            {
                if ( guy.node.type == "Cover Left" )
                {
                    _id_C9548EE0484F7C10 = 1;
                    _id_B3E742AC78B00246 = anglestoright( guy.node.angles );
                    _id_B3E742AC78B00246 = _id_B3E742AC78B00246 * -32;
                    _id_B3E742AC78B00246 = ( _id_B3E742AC78B00246[0], _id_B3E742AC78B00246[1], 64 );
                    _id_B3E742AC78B00246 = guy.node.origin + _id_B3E742AC78B00246;
                }
                else if ( guy.node.type == "Cover Right" )
                {
                    _id_C9548EE0484F7C10 = 1;
                    _id_B3E742AC78B00246 = anglestoright( guy.node.angles );
                    _id_B3E742AC78B00246 = _id_B3E742AC78B00246 * 32;
                    _id_B3E742AC78B00246 = ( _id_B3E742AC78B00246[0], _id_B3E742AC78B00246[1], 64 );
                    _id_B3E742AC78B00246 = guy.node.origin + _id_B3E742AC78B00246;
                }
            }

            scripts\engine\utility::draw_arrow( _id_B3E742AC78B00246, guy.goodshootpos, color );
        }
    }

    if ( 1 )
        return;

    if ( !isalive( guy ) )
        return;

    if ( isalive( guy.enemy ) )
    {

    }

    if ( isdefined( guy.lastenemysightpos ) )
    {

    }

    if ( isalive( guy.goodenemy ) )
    {

    }

    if ( !guy _id_7E4D332E911E1B90::hasenemysightpos() )
        return;

    pos = guy _id_7E4D332E911E1B90::getenemysightpos();

    if ( isdefined( guy.goodshootpos ) )
        return;
}

drawenttag( num )
{

}

drawtag( tag, _id_FBF44F91729A2AA1, _id_47D735016BAE708E )
{
    if ( isdefined( self.model ) && scripts\engine\utility::hastag( self.model, tag ) )
    {
        org = self gettagorigin( tag );
        _id_8BC14603A27FA3E7 = self gettagangles( tag );
        drawarrow( org, _id_8BC14603A27FA3E7, _id_FBF44F91729A2AA1, _id_47D735016BAE708E );
    }
}

drawarrow( org, _id_8BC14603A27FA3E7, _id_FBF44F91729A2AA1, _id_47D735016BAE708E )
{
    scale = 10;
    forward = anglestoforward( _id_8BC14603A27FA3E7 );
    _id_4B01E6DB3ABF9DDB = forward * scale;
    _id_3A8939B94BA42EEA = forward * ( scale * 0.8 );
    right = anglestoright( _id_8BC14603A27FA3E7 );
    _id_7B11357F8F8851FE = right * ( scale * -0.2 );
    _id_33B0514767568857 = right * ( scale * 0.2 );
    up = anglestoup( _id_8BC14603A27FA3E7 );
    right = right * scale;
    up = up * scale;
    _id_CBA41E031462F3D0 = ( 0.9, 0.2, 0.2 );
    _id_CAAE05637AC7AE10 = ( 0.2, 0.9, 0.2 );
    _id_D6348C41222908A1 = ( 0.2, 0.2, 0.9 );

    if ( isdefined( _id_FBF44F91729A2AA1 ) )
    {
        _id_CBA41E031462F3D0 = _id_FBF44F91729A2AA1;
        _id_CAAE05637AC7AE10 = _id_FBF44F91729A2AA1;
        _id_D6348C41222908A1 = _id_FBF44F91729A2AA1;
    }

    if ( !isdefined( _id_47D735016BAE708E ) )
        _id_47D735016BAE708E = 1;
}

drawtagforever( tag, _id_FBF44F91729A2AA1 )
{
    for (;;)
    {
        if ( !isdefined( self ) )
            return;

        drawtag( tag, _id_FBF44F91729A2AA1 );
        wait 0.05;
    }
}

dragtaguntildeath( tag, _id_FBF44F91729A2AA1 )
{
    self endon( "death" );

    for (;;)
    {
        if ( !isdefined( self ) )
            break;

        if ( !isdefined( self.origin ) )
            break;

        drawtag( tag, _id_FBF44F91729A2AA1 );
        wait 0.05;
    }
}

viewtag( type, tag )
{
    if ( type == "ai" )
    {
        ai = getaiarray();

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
            ai[_id_AC0E594AC96AA3A8] drawtag( tag );
    }
}

debug_corner()
{
    level.player.ignoreme = 1;
    nodes = getallnodes();
    _id_7BA521E5CC4CB125 = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < nodes.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( nodes[_id_AC0E594AC96AA3A8].type == "Cover Left" )
            _id_7BA521E5CC4CB125[_id_7BA521E5CC4CB125.size] = nodes[_id_AC0E594AC96AA3A8];

        if ( nodes[_id_AC0E594AC96AA3A8].type == "Cover Right" )
            _id_7BA521E5CC4CB125[_id_7BA521E5CC4CB125.size] = nodes[_id_AC0E594AC96AA3A8];
    }

    ai = getaiarray();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
        ai[_id_AC0E594AC96AA3A8] delete();

    level.debugspawners = _func_91E8F01DD90DE05A();
    level.activenodes = [];
    level.completednodes = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.debugspawners.size; _id_AC0E594AC96AA3A8++ )
        level.debugspawners[_id_AC0E594AC96AA3A8].targetname = "blah";

    _id_AF1347791574EF7D = 0;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 30; _id_AC0E594AC96AA3A8++ )
    {
        if ( _id_AC0E594AC96AA3A8 >= _id_7BA521E5CC4CB125.size )
            break;

        _id_7BA521E5CC4CB125[_id_AC0E594AC96AA3A8] thread covertest();
        _id_AF1347791574EF7D++;
    }

    if ( _id_7BA521E5CC4CB125.size <= 30 )
        return;

    for (;;)
    {
        level waittill( "debug_next_corner" );

        if ( _id_AF1347791574EF7D >= _id_7BA521E5CC4CB125.size )
            _id_AF1347791574EF7D = 0;

        _id_7BA521E5CC4CB125[_id_AF1347791574EF7D] thread covertest();
        _id_AF1347791574EF7D++;
    }
}

covertest()
{
    coversetupanim();
}

coversetupanim()
{
    spawn = undefined;
    spawner = undefined;

    for (;;)
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.debugspawners.size; _id_AC0E594AC96AA3A8++ )
        {
            wait 0.05;
            spawner = level.debugspawners[_id_AC0E594AC96AA3A8];
            _id_991D7CAD6273DBE5 = 0;

            for ( _id_AC0E424AC96A7113 = 0; _id_AC0E424AC96A7113 < level.activenodes.size; _id_AC0E424AC96A7113++ )
            {
                if ( distance( level.activenodes[_id_AC0E424AC96A7113].origin, self.origin ) > 250 )
                    continue;

                _id_991D7CAD6273DBE5 = 1;
                break;
            }

            if ( _id_991D7CAD6273DBE5 )
                continue;

            _id_0AF8D4CC519C65DE = 0;

            for ( _id_AC0E424AC96A7113 = 0; _id_AC0E424AC96A7113 < level.completednodes.size; _id_AC0E424AC96A7113++ )
            {
                if ( level.completednodes[_id_AC0E424AC96A7113] != self )
                    continue;

                _id_0AF8D4CC519C65DE = 1;
                break;
            }

            if ( _id_0AF8D4CC519C65DE )
                continue;

            level.activenodes[level.activenodes.size] = self;
            spawner.origin = self.origin;
            spawner.angles = self.angles;
            spawner.count = 1;
            spawn = spawner _meth_514FCB5326AE8D5F();

            if ( scripts\common\ai::spawn_failed( spawn ) )
            {
                removeactivespawner( self );
                continue;
            }

            break;
        }

        if ( isalive( spawn ) )
            break;
    }

    wait 1;

    if ( isalive( spawn ) )
    {
        spawn.ignoreme = 1;
        spawn.team = "neutral";
        spawn setgoalpos( spawn.origin );
        thread createline( self.origin );
        spawn thread scripts\engine\sp\utility::debugorigin();
        thread createlineconstantly( spawn );
        spawn waittill( "death" );
    }

    removeactivespawner( self );
    level.completednodes[level.completednodes.size] = self;
}

removeactivespawner( spawner )
{
    _id_DE09C63850DCFDBC = [];

    for ( _id_AC0E424AC96A7113 = 0; _id_AC0E424AC96A7113 < level.activenodes.size; _id_AC0E424AC96A7113++ )
    {
        if ( level.activenodes[_id_AC0E424AC96A7113] == spawner )
            continue;

        _id_DE09C63850DCFDBC[_id_DE09C63850DCFDBC.size] = level.activenodes[_id_AC0E424AC96A7113];
    }

    level.activenodes = _id_DE09C63850DCFDBC;
}

createline( org )
{
    for (;;)
        wait 0.05;
}

createlineconstantly( ent )
{
    org = undefined;

    while ( isalive( ent ) )
    {
        org = ent.origin;
        wait 0.05;
    }

    for (;;)
        wait 0.05;
}

debugmisstime()
{
    self notify( "stopdebugmisstime" );
    self endon( "stopdebugmisstime" );
    self endon( "death" );

    for (;;)
    {
        if ( self.misstime <= 0 )
        {

        }
        else
        {

        }

        wait 0.05;
    }
}

debugmisstimeoff()
{
    self notify( "stopdebugmisstime" );
}

debugjump( num )
{

}

add_debugdvar_func( dvar, func, _id_98141672E15B254C, unarchived )
{
    if ( !isdefined( level.debug.dvarfuncs ) )
        level.debug.dvarfuncs = [];

    setdvarifuninitialized( dvar, "" );
    struct = spawnstruct();
    struct.func = func;

    if ( isdefined( _id_98141672E15B254C ) )
        struct.threaded = _id_98141672E15B254C;

    if ( isdefined( unarchived ) )
        struct.unarchived = unarchived;

    level.debug.dvarfuncs[dvar] = struct;
}

debugdvars()
{

}

show_arrivalexit_state()
{

}

process_dvarfuncs()
{

}

remove_fxlighting_object()
{

}

create_fxlighting_object()
{

}

play_fxlighting_fx()
{

}

debug_fxlighting()
{

}

debug_fxlighting_buttons()
{

}

showdebugtrace()
{
    _id_91D729A1BC106ACB = undefined;
    _id_FB6F8D94499F97D6 = undefined;
    _id_91D729A1BC106ACB = ( 15.1859, -12.2822, 4.071 );
    _id_FB6F8D94499F97D6 = ( 947.2, -10918, 64.9514 );

    for (;;)
    {
        wait 0.05;
        start = _id_91D729A1BC106ACB;
        end = _id_FB6F8D94499F97D6;

        if ( !isdefined( _id_91D729A1BC106ACB ) )
            start = level.tracestart;

        if ( !isdefined( _id_FB6F8D94499F97D6 ) )
            end = level.player geteye();

        trace = scripts\engine\trace::_bullet_trace( start, end, 0, undefined );
    }
}

debug_character_count()
{
    drones = newhudelem();
    drones.alignx = "left";
    drones.aligny = "middle";
    drones.x = 10;
    drones.y = 100;
    drones.label = &"DEBUG_DRONES";
    drones.alpha = 0;
    allies = newhudelem();
    allies.alignx = "left";
    allies.aligny = "middle";
    allies.x = 10;
    allies.y = 115;
    allies.label = &"DEBUG_ALLIES";
    allies.alpha = 0;
    axis = newhudelem();
    axis.alignx = "left";
    axis.aligny = "middle";
    axis.x = 10;
    axis.y = 130;
    axis.label = &"DEBUG_AXIS";
    axis.alpha = 0;
    vehicles = newhudelem();
    vehicles.alignx = "left";
    vehicles.aligny = "middle";
    vehicles.x = 10;
    vehicles.y = 145;
    vehicles.label = &"DEBUG_VEHICLES";
    vehicles.alpha = 0;
    total = newhudelem();
    total.alignx = "left";
    total.aligny = "middle";
    total.x = 10;
    total.y = 160;
    total.label = &"DEBUG_TOTAL";
    total.alpha = 0;
    _id_A49101E1AA7C8055 = "off";

    for (;;)
    {
        dvar = getdvar( "dvar_B3CFA089E4C57E2D" );

        if ( dvar == "off" )
        {
            if ( dvar != _id_A49101E1AA7C8055 )
            {
                drones.alpha = 0;
                allies.alpha = 0;
                axis.alpha = 0;
                vehicles.alpha = 0;
                total.alpha = 0;
                _id_A49101E1AA7C8055 = dvar;
            }

            wait 0.25;
            continue;
        }
        else if ( dvar != _id_A49101E1AA7C8055 )
        {
            drones.alpha = 1;
            allies.alpha = 1;
            axis.alpha = 1;
            vehicles.alpha = 1;
            total.alpha = 1;
            _id_A49101E1AA7C8055 = dvar;
        }

        _id_E738087A63B8E076 = getentarray( "drone", "targetname" ).size;
        drones setvalue( _id_E738087A63B8E076 );
        _id_7289804AE7F3CBCF = getaiarray( "allies" ).size;
        allies setvalue( _id_7289804AE7F3CBCF );
        _id_7AE1DAB833DFFD24 = getaiarray( "bad_guys" ).size;
        axis setvalue( _id_7AE1DAB833DFFD24 );
        vehicles setvalue( getentarray( "script_vehicle", "classname" ).size );
        total setvalue( _id_E738087A63B8E076 + _id_7289804AE7F3CBCF + _id_7AE1DAB833DFFD24 );
        wait 0.25;
    }
}

nuke()
{
    if ( !self.damageshield )
    {
        if ( isdefined( self.unittype ) && self.unittype == "c12" )
            self kill( ( 0, 0, -500 ), level.player );
        else
            self kill( ( 0, 0, -500 ), level.player, level.player );
    }
}

_id_CBF037982D8B467C( entnum )
{

}

debug_nuke()
{

}

camera()
{
    wait 0.05;
    _id_7C381FE62B0CDA6B = getentarray( "camera", "targetname" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_7C381FE62B0CDA6B.size; _id_AC0E594AC96AA3A8++ )
    {
        ent = getent( _id_7C381FE62B0CDA6B[_id_AC0E594AC96AA3A8].target, "targetname" );
        _id_7C381FE62B0CDA6B[_id_AC0E594AC96AA3A8].origin2 = ent.origin;
        _id_7C381FE62B0CDA6B[_id_AC0E594AC96AA3A8].angles = vectortoangles( ent.origin - _id_7C381FE62B0CDA6B[_id_AC0E594AC96AA3A8].origin );
    }

    for (;;)
    {
        ai = getaiarray( "axis" );

        if ( !ai.size )
        {
            freeplayer();
            wait 0.5;
            continue;
        }

        _id_C1519AF15B8D8DFA = [];

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_7C381FE62B0CDA6B.size; _id_AC0E594AC96AA3A8++ )
        {
            for ( _id_AC0E424AC96A7113 = 0; _id_AC0E424AC96A7113 < ai.size; _id_AC0E424AC96A7113++ )
            {
                if ( distance( _id_7C381FE62B0CDA6B[_id_AC0E594AC96AA3A8].origin, ai[_id_AC0E424AC96A7113].origin ) > 256 )
                    continue;

                _id_C1519AF15B8D8DFA[_id_C1519AF15B8D8DFA.size] = _id_7C381FE62B0CDA6B[_id_AC0E594AC96AA3A8];
                break;
            }
        }

        if ( !_id_C1519AF15B8D8DFA.size )
        {
            freeplayer();
            wait 0.5;
            continue;
        }

        _id_D1FF380D78FF106F = [];

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_C1519AF15B8D8DFA.size; _id_AC0E594AC96AA3A8++ )
        {
            camera = _id_C1519AF15B8D8DFA[_id_AC0E594AC96AA3A8];
            start = camera.origin2;
            end = camera.origin;
            _id_2A83DF6C49112D96 = vectortoangles( ( end[0], end[1], end[2] ) - ( start[0], start[1], start[2] ) );
            angles = ( 0, _id_2A83DF6C49112D96[1], 0 );
            forward = anglestoforward( angles );
            _id_2A83DF6C49112D96 = vectornormalize( end - level.player.origin );
            dot = vectordot( forward, _id_2A83DF6C49112D96 );

            if ( dot < 0.85 )
                continue;

            _id_D1FF380D78FF106F[_id_D1FF380D78FF106F.size] = camera;
        }

        if ( !_id_D1FF380D78FF106F.size )
        {
            freeplayer();
            wait 0.5;
            continue;
        }

        dist = distance( level.player.origin, _id_D1FF380D78FF106F[0].origin );
        _id_64177B5A8B8ADBA4 = _id_D1FF380D78FF106F[0];

        for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < _id_D1FF380D78FF106F.size; _id_AC0E594AC96AA3A8++ )
        {
            _id_5C1EE5AB8012EA11 = distance( level.player.origin, _id_D1FF380D78FF106F[_id_AC0E594AC96AA3A8].origin );

            if ( _id_5C1EE5AB8012EA11 > dist )
                continue;

            _id_64177B5A8B8ADBA4 = _id_D1FF380D78FF106F[_id_AC0E594AC96AA3A8];
            dist = _id_5C1EE5AB8012EA11;
        }

        setplayertocamera( _id_64177B5A8B8ADBA4 );
        wait 3;
    }
}

freeplayer()
{
    setdvar( "dvar_F94ADDEDC8E87B69", "0" );
}

setplayertocamera( camera )
{
    setdvar( "dvar_F94ADDEDC8E87B69", "2" );
}

deathspawnerpreview()
{
    waittillframeend;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 50; _id_AC0E594AC96AA3A8++ )
    {
        if ( !isdefined( level.deathspawnerents[_id_AC0E594AC96AA3A8] ) )
            continue;

        array = level.deathspawnerents[_id_AC0E594AC96AA3A8];

        for ( _id_AC0E424AC96A7113 = 0; _id_AC0E424AC96A7113 < array.size; _id_AC0E424AC96A7113++ )
        {
            ent = array[_id_AC0E424AC96A7113];

            if ( isdefined( ent.truecount ) )
                continue;
        }
    }
}

lastsightposwatch()
{

}

watchminimap()
{
    for (;;)
    {
        updateminimapsetting();
        wait 0.25;
    }
}

updateminimapsetting()
{
    _id_D0C656DDDD860089 = getdvarfloat( "dvar_24D7DC1CC026A63B", 1 );

    if ( !isdefined( level.minimapcornertargetname ) )
    {
        setdvar( "dvar_4CE073DB68D6DA5D", "minimap_corner" );
        level.minimapcornertargetname = "minimap_corner";
    }

    if ( !isdefined( level.minimapheight ) )
    {
        setdvar( "dvar_7CE3FA1FABFD4530", "0" );
        level.minimapheight = 0;
    }

    minimapheight = getdvarfloat( "dvar_7CE3FA1FABFD4530" );
    minimapcornertargetname = getdvar( "dvar_4CE073DB68D6DA5D" );

    if ( minimapheight != level.minimapheight || minimapcornertargetname != level.minimapcornertargetname )
    {
        if ( isdefined( level.minimaporigin ) )
        {
            level.minimapplayer unlink();
            level.minimaporigin delete();
            level notify( "end_draw_map_bounds" );
        }

        if ( minimapheight > 0 )
        {
            level.minimapheight = minimapheight;
            level.minimapcornertargetname = minimapcornertargetname;
            player = level.player;
            _id_7BA521E5CC4CB125 = getentarray( minimapcornertargetname, "targetname" );

            if ( _id_7BA521E5CC4CB125.size == 2 )
            {
                _id_AA59B8437A574636 = _id_7BA521E5CC4CB125[0].origin + _id_7BA521E5CC4CB125[1].origin;
                _id_AA59B8437A574636 = ( _id_AA59B8437A574636[0] * 0.5, _id_AA59B8437A574636[1] * 0.5, _id_AA59B8437A574636[2] * 0.5 );
                _id_8D57E398D918BF40 = ( _id_7BA521E5CC4CB125[0].origin[0], _id_7BA521E5CC4CB125[0].origin[1], _id_AA59B8437A574636[2] );
                _id_DC27DDC7645DED0A = ( _id_7BA521E5CC4CB125[0].origin[0], _id_7BA521E5CC4CB125[0].origin[1], _id_AA59B8437A574636[2] );

                if ( _id_7BA521E5CC4CB125[1].origin[0] > _id_7BA521E5CC4CB125[0].origin[0] )
                    _id_8D57E398D918BF40 = ( _id_7BA521E5CC4CB125[1].origin[0], _id_8D57E398D918BF40[1], _id_8D57E398D918BF40[2] );
                else
                    _id_DC27DDC7645DED0A = ( _id_7BA521E5CC4CB125[1].origin[0], _id_DC27DDC7645DED0A[1], _id_DC27DDC7645DED0A[2] );

                if ( _id_7BA521E5CC4CB125[1].origin[1] > _id_7BA521E5CC4CB125[0].origin[1] )
                    _id_8D57E398D918BF40 = ( _id_8D57E398D918BF40[0], _id_7BA521E5CC4CB125[1].origin[1], _id_8D57E398D918BF40[2] );
                else
                    _id_DC27DDC7645DED0A = ( _id_DC27DDC7645DED0A[0], _id_7BA521E5CC4CB125[1].origin[1], _id_DC27DDC7645DED0A[2] );

                _id_7FDFEC8EA5A3D7EA = _id_8D57E398D918BF40 - _id_AA59B8437A574636;
                _id_AA59B8437A574636 = ( _id_AA59B8437A574636[0], _id_AA59B8437A574636[1], _id_AA59B8437A574636[2] + minimapheight );
                origin = spawn( "script_origin", player.origin );
                _id_E470964DB795B7FF = ( cos( getnorthyaw() ), sin( getnorthyaw() ), 0 );
                _id_30C6E18E3CB5E637 = ( _id_E470964DB795B7FF[1], 0 - _id_E470964DB795B7FF[0], 0 );
                _id_61E70A136A5B0E67 = vectordot( _id_E470964DB795B7FF, _id_7FDFEC8EA5A3D7EA );

                if ( _id_61E70A136A5B0E67 < 0 )
                    _id_61E70A136A5B0E67 = 0 - _id_61E70A136A5B0E67;

                _id_A7BE9958F630E64F = vectordot( _id_30C6E18E3CB5E637, _id_7FDFEC8EA5A3D7EA );

                if ( _id_A7BE9958F630E64F < 0 )
                    _id_A7BE9958F630E64F = 0 - _id_A7BE9958F630E64F;

                if ( _id_D0C656DDDD860089 > 0 )
                {
                    _id_9EFBEAF97C663AB0 = _id_A7BE9958F630E64F / _id_61E70A136A5B0E67;

                    if ( _id_9EFBEAF97C663AB0 < _id_D0C656DDDD860089 )
                    {
                        _id_AD1167B62B969063 = _id_D0C656DDDD860089 / _id_9EFBEAF97C663AB0;
                        _id_A7BE9958F630E64F = _id_A7BE9958F630E64F * _id_AD1167B62B969063;
                        _id_5A976CA4F755DC8A = vecscale( _id_30C6E18E3CB5E637, vectordot( _id_30C6E18E3CB5E637, _id_8D57E398D918BF40 - _id_AA59B8437A574636 ) * ( _id_AD1167B62B969063 - 1 ) );
                        _id_DC27DDC7645DED0A = _id_DC27DDC7645DED0A - _id_5A976CA4F755DC8A;
                        _id_8D57E398D918BF40 = _id_8D57E398D918BF40 + _id_5A976CA4F755DC8A;
                    }
                    else
                    {
                        _id_AD1167B62B969063 = _id_9EFBEAF97C663AB0 / _id_D0C656DDDD860089;
                        _id_61E70A136A5B0E67 = _id_61E70A136A5B0E67 * _id_AD1167B62B969063;
                        _id_5A976CA4F755DC8A = vecscale( _id_E470964DB795B7FF, vectordot( _id_E470964DB795B7FF, _id_8D57E398D918BF40 - _id_AA59B8437A574636 ) * ( _id_AD1167B62B969063 - 1 ) );
                        _id_DC27DDC7645DED0A = _id_DC27DDC7645DED0A - _id_5A976CA4F755DC8A;
                        _id_8D57E398D918BF40 = _id_8D57E398D918BF40 + _id_5A976CA4F755DC8A;
                    }
                }

                if ( _func_AFE76380661D5C7F() )
                {
                    _id_42EADF9E75612071 = 1.77778;
                    _id_5F61027614B0DD37 = 2 * atan( _id_A7BE9958F630E64F * 0.8 / minimapheight );
                    _id_5A6A5EE8B984EA7F = 2 * atan( _id_61E70A136A5B0E67 * _id_42EADF9E75612071 * 0.8 / minimapheight );
                }
                else
                {
                    _id_42EADF9E75612071 = 1.33333;
                    _id_5F61027614B0DD37 = 2 * atan( _id_A7BE9958F630E64F * 1.05 / minimapheight );
                    _id_5A6A5EE8B984EA7F = 2 * atan( _id_61E70A136A5B0E67 * _id_42EADF9E75612071 * 1.05 / minimapheight );
                }

                if ( _id_5F61027614B0DD37 > _id_5A6A5EE8B984EA7F )
                    angle = _id_5F61027614B0DD37;
                else
                    angle = _id_5A6A5EE8B984EA7F;

                _id_C02F062B2ED246CB = minimapheight - 1000;

                if ( _id_C02F062B2ED246CB < 16 )
                    _id_C02F062B2ED246CB = 16;

                if ( _id_C02F062B2ED246CB > 10000 )
                    _id_C02F062B2ED246CB = 10000;

                player playerlinktoabsolute( origin );
                origin.origin = _id_AA59B8437A574636 + ( 0, 0, -62 );
                origin.angles = ( 90, getnorthyaw(), 0 );
                player giveweapon( "defaultweapon" );
                setsaveddvar( "dvar_DF1DC712C4A91588", angle );
                level.minimapplayer = player;
                level.minimaporigin = origin;
                thread drawminimapbounds( _id_AA59B8437A574636, _id_DC27DDC7645DED0A, _id_8D57E398D918BF40 );
            }
            else
            {

            }
        }
    }
}

getchains()
{
    _id_83AC480DC5468DE3 = [];
    _id_83AC480DC5468DE3 = getentarray( "minimap_line", "script_noteworthy" );
    array = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_83AC480DC5468DE3.size; _id_AC0E594AC96AA3A8++ )
        array[_id_AC0E594AC96AA3A8] = _id_83AC480DC5468DE3[_id_AC0E594AC96AA3A8] getchain();

    return array;
}

getchain()
{
    array = [];
    ent = self;

    while ( isdefined( ent ) )
    {
        array[array.size] = ent;

        if ( !isdefined( ent ) || !isdefined( ent.target ) )
            break;

        ent = getent( ent.target, "targetname" );

        if ( isdefined( ent ) && ent == array[0] )
        {
            array[array.size] = ent;
            break;
        }
    }

    _id_1C4B2E44269D9598 = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < array.size; _id_AC0E594AC96AA3A8++ )
        _id_1C4B2E44269D9598[_id_AC0E594AC96AA3A8] = array[_id_AC0E594AC96AA3A8].origin;

    return _id_1C4B2E44269D9598;
}

vecscale( _id_06A3A1033FFC2699, _id_B79930868F410231 )
{
    return ( _id_06A3A1033FFC2699[0] * _id_B79930868F410231, _id_06A3A1033FFC2699[1] * _id_B79930868F410231, _id_06A3A1033FFC2699[2] * _id_B79930868F410231 );
}

drawminimapbounds( _id_AA59B8437A574636, _id_DC27DDC7645DED0A, _id_8D57E398D918BF40 )
{
    level notify( "end_draw_map_bounds" );
    level endon( "end_draw_map_bounds" );
    _id_4438B1EB9D728FAF = _id_AA59B8437A574636[2] - _id_8D57E398D918BF40[2];
    _id_F4B385FE00D1F061 = length( _id_DC27DDC7645DED0A - _id_8D57E398D918BF40 );
    _id_37B59B629214587D = _id_DC27DDC7645DED0A - _id_AA59B8437A574636;
    _id_37B59B629214587D = vectornormalize( ( _id_37B59B629214587D[0], _id_37B59B629214587D[1], 0 ) );
    _id_DC27DDC7645DED0A = _id_DC27DDC7645DED0A + vecscale( _id_37B59B629214587D, _id_F4B385FE00D1F061 * 1 / 800 * 0 );
    _id_10F80DFFF07600C3 = _id_8D57E398D918BF40 - _id_AA59B8437A574636;
    _id_10F80DFFF07600C3 = vectornormalize( ( _id_10F80DFFF07600C3[0], _id_10F80DFFF07600C3[1], 0 ) );
    _id_8D57E398D918BF40 = _id_8D57E398D918BF40 + vecscale( _id_10F80DFFF07600C3, _id_F4B385FE00D1F061 * 1 / 800 * 0 );
    _id_66D02DCE4615A1F0 = ( cos( getnorthyaw() ), sin( getnorthyaw() ), 0 );
    _id_9D8BDB88F428109E = _id_8D57E398D918BF40 - _id_DC27DDC7645DED0A;
    _id_A66BA9B157533F5A = vecscale( _id_66D02DCE4615A1F0, vectordot( _id_9D8BDB88F428109E, _id_66D02DCE4615A1F0 ) );
    _id_372993A3E5FE7DE5 = vecscale( _id_66D02DCE4615A1F0, abs( vectordot( _id_9D8BDB88F428109E, _id_66D02DCE4615A1F0 ) ) );
    _id_7BA4DEE5CC4C1DCC = _id_DC27DDC7645DED0A;
    _id_7BA4DFE5CC4C1FFF = _id_DC27DDC7645DED0A + _id_A66BA9B157533F5A;
    _id_7BA4E0E5CC4C2232 = _id_8D57E398D918BF40;
    _id_7BA4E1E5CC4C2465 = _id_8D57E398D918BF40 - _id_A66BA9B157533F5A;
    _id_C1FF20095FED653A = vecscale( _id_DC27DDC7645DED0A + _id_8D57E398D918BF40, 0.5 ) + vecscale( _id_372993A3E5FE7DE5, 0.51 );
    _id_1D2EA645EFAE8C58 = _id_F4B385FE00D1F061 * 0.003;
    _id_CDDD3DD9D3387D03 = getchains();

    for (;;)
    {
        scripts\engine\utility::array_levelthread( _id_CDDD3DD9D3387D03, scripts\engine\utility::plot_points );
        wait 0.05;
    }
}

debug_colornodes()
{
    wait 0.05;
    ai = getaiarray();
    array = [];
    array["axis"] = [];
    array["allies"] = [];
    array["neutral"] = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ai.size; _id_AC0E594AC96AA3A8++ )
    {
        guy = ai[_id_AC0E594AC96AA3A8];

        if ( !isdefined( guy.currentcolorcode ) )
            continue;

        array[guy.team][guy.currentcolorcode] = 1;
        color = ( 1, 1, 1 );

        if ( isdefined( guy.script_forcecolor ) )
            color = level.color_debug[guy.script_forcecolor];

        if ( guy.team == "axis" )
            continue;

        guy try_to_draw_line_to_node();
    }

    draw_colornodes( array, "allies" );
    draw_colornodes( array, "axis" );
}

draw_colornodes( array, team )
{
    keys = getarraykeys( array[team] );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < keys.size; _id_AC0E594AC96AA3A8++ )
    {
        color = ( 1, 1, 1 );
        color = level.color_debug[getsubstr( keys[_id_AC0E594AC96AA3A8], 0, 1 )];

        if ( isdefined( level.colornodes_debug_array[team][keys[_id_AC0E594AC96AA3A8]] ) )
        {
            _id_5A9CFC3686B1FD8D = level.colornodes_debug_array[team][keys[_id_AC0E594AC96AA3A8]];

            for ( _id_AC0E424AC96A7113 = 0; _id_AC0E424AC96A7113 < _id_5A9CFC3686B1FD8D.size; _id_AC0E424AC96A7113++ )
            {

            }
        }

        if ( isdefined( level.colorvolumes_debug_array[team][keys[_id_AC0E594AC96AA3A8]] ) )
        {
            _id_90EE14A3333A1A42 = level.colorvolumes_debug_array[team][keys[_id_AC0E594AC96AA3A8]];
            thread scripts\engine\utility::draw_entity_bounds( _id_90EE14A3333A1A42, 0.05, color, 0 );
        }
    }
}

get_team_substr()
{
    if ( self.team == "allies" )
    {
        if ( !isdefined( self.node.script_color_allies ) )
            return;

        return self.node.script_color_allies;
    }

    if ( self.team == "axis" )
    {
        if ( !isdefined( self.node.script_color_axis ) )
            return;

        return self.node.script_color_axis;
    }
}

try_to_draw_line_to_node()
{
    if ( !isdefined( self.node ) )
        return;

    if ( !isdefined( self.script_forcecolor ) )
        return;

    _id_DE8A45DD2BF968EC = get_team_substr();

    if ( !isdefined( _id_DE8A45DD2BF968EC ) )
    {
        volume = level.arrays_of_colorcoded_volumes[scripts\sp\colors::get_team()][self.currentcolorcode];

        if ( isdefined( volume ) )
        {

        }

        return;
    }

    if ( !issubstr( _id_DE8A45DD2BF968EC, self.script_forcecolor ) )
        return;
}

debugthreat()
{
    level.last_threat_debug = gettime();
    thread debugthreatcalc();
}

debugthreatcalc()
{

}

displaythreat( entity, _id_E37B793DB1524F49 )
{
    if ( self.team == entity.team )
        return;

    _id_8816A024B6574873 = 0;
    _id_8816A024B6574873 = _id_8816A024B6574873 + self.threatbias;
    threat = 0;
    threat = threat + entity.threatbias;
    _id_5C38C36E9F129B3E = undefined;

    if ( isdefined( _id_E37B793DB1524F49 ) )
    {
        _id_5C38C36E9F129B3E = self getthreatbiasgroup();

        if ( isdefined( _id_5C38C36E9F129B3E ) )
        {
            threat = threat + _func_39A5C3C92EEF58D2( _id_E37B793DB1524F49, _id_5C38C36E9F129B3E );
            _id_8816A024B6574873 = _id_8816A024B6574873 + _func_39A5C3C92EEF58D2( _id_5C38C36E9F129B3E, _id_E37B793DB1524F49 );
        }
    }

    if ( entity.ignoreme || threat < -900000 )
        threat = "Ignore";

    if ( self.ignoreme || _id_8816A024B6574873 < -900000 )
        _id_8816A024B6574873 = "Ignore";

    timer = 20;
    col = ( 1, 0.5, 0.2 );
    _id_6CAF7824B49651C5 = ( 0.2, 0.5, 1 );
    pacifist = !isplayer( self ) && self.pacifist;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 <= timer; _id_AC0E594AC96AA3A8++ )
    {
        if ( isdefined( _id_E37B793DB1524F49 ) )
        {

        }

        if ( isdefined( _id_5C38C36E9F129B3E ) )
        {

        }

        if ( pacifist )
        {

        }

        wait 0.05;
    }
}

debugcolorfriendlies()
{
    level.debug_color_friendlies = [];
    level.debug_color_huds = [];

    for (;;)
    {
        level waittill( "updated_color_friendlies" );
        draw_color_friendlies();
    }
}

get_script_palette()
{
    _id_CBAC2C03146AFE48 = [];
    _id_CBAC2C03146AFE48["r"] = ( 1, 0, 0 );
    _id_CBAC2C03146AFE48["o"] = ( 1, 0.5, 0 );
    _id_CBAC2C03146AFE48["y"] = ( 1, 1, 0 );
    _id_CBAC2C03146AFE48["g"] = ( 0, 1, 0 );
    _id_CBAC2C03146AFE48["c"] = ( 0, 1, 1 );
    _id_CBAC2C03146AFE48["b"] = ( 0, 0, 1 );
    _id_CBAC2C03146AFE48["p"] = ( 1, 0, 1 );
    return _id_CBAC2C03146AFE48;
}

draw_color_friendlies()
{
    level endon( "updated_color_friendlies" );
    keys = getarraykeys( level.debug_color_friendlies );
    _id_A6C7B54D49582D5D = [];
    colors = [];
    colors[colors.size] = "r";
    colors[colors.size] = "o";
    colors[colors.size] = "y";
    colors[colors.size] = "g";
    colors[colors.size] = "c";
    colors[colors.size] = "b";
    colors[colors.size] = "p";
    _id_CBAC2C03146AFE48 = get_script_palette();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < colors.size; _id_AC0E594AC96AA3A8++ )
        _id_A6C7B54D49582D5D[colors[_id_AC0E594AC96AA3A8]] = 0;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < keys.size; _id_AC0E594AC96AA3A8++ )
    {
        color = level.debug_color_friendlies[keys[_id_AC0E594AC96AA3A8]];
        _id_A6C7B54D49582D5D[color]++;
    }

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.debug_color_huds.size; _id_AC0E594AC96AA3A8++ )
        level.debug_color_huds[_id_AC0E594AC96AA3A8] destroy();

    level.debug_color_huds = [];
    x = 15;
    y = 420;
    _id_A61C75B156FC1EE0 = 8;
    _id_750C94BA41F40A47 = _id_A61C75B156FC1EE0 + 2;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < colors.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( _id_A6C7B54D49582D5D[colors[_id_AC0E594AC96AA3A8]] <= 0 )
            continue;

        for ( _id_AC0E424AC96A7113 = 0; _id_AC0E424AC96A7113 < _id_A6C7B54D49582D5D[colors[_id_AC0E594AC96AA3A8]]; _id_AC0E424AC96A7113++ )
        {
            overlay = newhudelem();
            overlay.x = x + _id_750C94BA41F40A47 * _id_AC0E424AC96A7113;
            overlay.y = y;
            overlay setshader( "white", _id_A61C75B156FC1EE0, _id_A61C75B156FC1EE0 );
            overlay.horzalign = "left";
            overlay.vertalign = "top";
            overlay.alignx = "left";
            overlay.aligny = "bottom";
            overlay.alpha = 1;
            overlay.color = _id_CBAC2C03146AFE48[colors[_id_AC0E594AC96AA3A8]];
            level.debug_color_huds[level.debug_color_huds.size] = overlay;
        }

        y = y - _id_750C94BA41F40A47;
    }
}

get_alias_from_stored( _id_1DB06B5493E09FB3 )
{
    if ( !isdefined( level.animsound_aliases[_id_1DB06B5493E09FB3.animname] ) )
        return;

    if ( !isdefined( level.animsound_aliases[_id_1DB06B5493E09FB3.animname][_id_1DB06B5493E09FB3.anime] ) )
        return;

    if ( !isdefined( level.animsound_aliases[_id_1DB06B5493E09FB3.animname][_id_1DB06B5493E09FB3.anime][_id_1DB06B5493E09FB3.notetrack] ) )
        return;

    return level.animsound_aliases[_id_1DB06B5493E09FB3.animname][_id_1DB06B5493E09FB3.anime][_id_1DB06B5493E09FB3.notetrack]["soundalias"];
}

is_from_animsound( animname, anime, notetrack )
{
    return isdefined( level.animsound_aliases[animname][anime][notetrack]["created_by_animSound"] );
}

debug_animsoundtag( _id_2CD7DA4D7CCA2FB5 )
{

}

debug_animsoundtagselected()
{

}

tag_sound( tag, _id_2CD7DA4D7CCA2FB5 )
{
    if ( !isdefined( level.animsound_tagged ) )
        return;

    if ( !isdefined( level.animsound_tagged.animsounds[_id_2CD7DA4D7CCA2FB5] ) )
        return;

    _id_1DB06B5493E09FB3 = level.animsound_tagged.animsounds[_id_2CD7DA4D7CCA2FB5];
    soundalias = get_alias_from_stored( _id_1DB06B5493E09FB3 );

    if ( !isdefined( soundalias ) || is_from_animsound( _id_1DB06B5493E09FB3.animname, _id_1DB06B5493E09FB3.anime, _id_1DB06B5493E09FB3.notetrack ) )
    {
        level.animsound_aliases[_id_1DB06B5493E09FB3.animname][_id_1DB06B5493E09FB3.anime][_id_1DB06B5493E09FB3.notetrack]["soundalias"] = tag;
        level.animsound_aliases[_id_1DB06B5493E09FB3.animname][_id_1DB06B5493E09FB3.anime][_id_1DB06B5493E09FB3.notetrack]["created_by_animSound"] = 1;
    }
}

find_new_chase_target( _id_8EFEF5B1E4D79B79 )
{

}

chasecam( _id_8EFEF5B1E4D79B79 )
{
    if ( !isdefined( level.chase_cam_last_num ) )
        level.chase_cam_last_num = -1;

    if ( level.chase_cam_last_num == _id_8EFEF5B1E4D79B79 )
        return;

    find_new_chase_target( _id_8EFEF5B1E4D79B79 );

    if ( !isdefined( level.chase_cam_target ) )
        return;

    level.chase_cam_last_num = _id_8EFEF5B1E4D79B79;

    if ( !isdefined( level.chase_cam_ent ) )
        level.chase_cam_ent = level.chase_cam_target scripts\engine\utility::spawn_tag_origin();

    thread chasecam_onent( level.chase_cam_target );
}

chasecam_onent( ent )
{
    level notify( "new_chasecam" );
    level endon( "new_chasecam" );
    ent endon( "death" );
    level.player unlink();
    level.player playerlinktoblend( level.chase_cam_ent, "tag_origin", 2, 0.5, 0.5 );
    wait 2;
    level.player playerlinktodelta( level.chase_cam_ent, "tag_origin", 1, 180, 180, 180, 180 );

    for (;;)
    {
        wait 0.2;

        if ( !isdefined( level.chase_cam_target ) )
            return;

        start = level.chase_cam_target.origin;
        angles = level.chase_cam_target.angles;
        forward = anglestoforward( angles );
        forward = forward * 200;
        start = start + forward;
        angles = level.player getplayerangles();
        forward = anglestoforward( angles );
        forward = forward * -200;
        level.chase_cam_ent moveto( start + forward, 0.2 );
    }
}

viewfx()
{
    foreach ( fx in level.createfxent )
    {
        if ( isdefined( fx.looper ) )
        {

        }
    }
}

add_key( key, val )
{

}

print_vehicle_info( noteworthy )
{
    if ( !isdefined( level.vnum ) )
        level.vnum = 9500;

    level.vnum++;
    _id_690D1CF274CFE40A = "bridge_helpers";
    add_key( "origin", self.origin[0] + " " + self.origin[1] + " " + self.origin[2] );
    add_key( "angles", self.angles[0] + " " + self.angles[1] + " " + self.angles[2] );
    add_key( "targetname", "helper_model" );
    add_key( "model", self.model );
    add_key( "classname", "script_model" );
    add_key( "spawnflags", "4" );
    add_key( "_color", "0.443137 0.443137 1.000000" );

    if ( isdefined( noteworthy ) )
        add_key( "script_noteworthy", noteworthy );
}

draw_dot_for_ent( entnum )
{

}

draw_dot_for_guy()
{
    _id_DEE6508B0BA437C5 = level.player getplayerangles();
    _id_70222FBC47330166 = anglestoforward( _id_DEE6508B0BA437C5 );
    end = level.player geteye();
    start = self geteye();
    angles = vectortoangles( start - end );
    forward = anglestoforward( angles );
    dot = vectordot( forward, _id_70222FBC47330166 );
}

measure()
{

}

take_weapons_away()
{
    storedweapons = spawnstruct();
    storedweapons.weapons = level.player getweaponslistall();
    storedweapons.clip_ammo = [];
    storedweapons.stock_ammo = [];

    foreach ( index, weapon in storedweapons.weapons )
    {
        storedweapons.clip_ammo[index] = level.player getweaponammoclip( weapon );
        storedweapons.stock_ammo[index] = level.player getweaponammostock( weapon );
    }

    level.player takeallweapons();
    return storedweapons;
}

give_weapons_back( storedweapons )
{
    _id_2B689C91303930AF = -1;

    foreach ( index, weapon in storedweapons.weapons )
    {
        level.player giveweapon( weapon );

        if ( weapon.ismelee )
        {
            level.player assignweaponmeleeslot( weapon );
            continue;
        }

        if ( _id_2B689C91303930AF < 0 )
            _id_2B689C91303930AF = index;

        if ( isdefined( storedweapons.clip_ammo[index] ) )
            level.player setweaponammoclip( weapon, storedweapons.clip_ammo[index] );

        if ( isdefined( storedweapons.stock_ammo[index] ) )
            level.player setweaponammostock( weapon, storedweapons.stock_ammo[index] );
    }

    level.player switchtoweapon( storedweapons.weapons[_id_2B689C91303930AF] );
}

debug_cursor( _id_20247FB9F3BABB74 )
{
    level.debug.cursor_pos = ( 0, 0, 0 );
    level notify( "stop_debug_cursor" );
    level endon( "stop_debug_cursor" );

    if ( !isdefined( _id_20247FB9F3BABB74 ) )
        _id_20247FB9F3BABB74 = 0;

    for (;;)
    {
        start = level.player geteye();
        forward = anglestoforward( level.player getplayerangles() );

        if ( _id_20247FB9F3BABB74 )
            end = start + forward * 1000;
        else
            end = start + forward * 10000;

        trace = scripts\engine\trace::_bullet_trace( start, end, 0 );

        if ( _id_20247FB9F3BABB74 )
            level.debug.cursor_pos = getclosestpointonnavmesh( trace["position"] ) + ( 0, 0, -2 );
        else
            level.debug.cursor_pos = trace["position"];

        waitframe();
    }
}

draw_debug_cross( pos )
{
    range = 4;
    color = ( 1, 1, 1 );
    alpha = 1;
    _id_FBEA67E67B07F196 = 1;
    duration = 1;
}

draw_spawner( pos, angles, color, alpha, _id_FFB74DFE2FDAD3BE )
{
    if ( !isdefined( angles ) )
        angles = ( 0, 0, 0 );

    if ( !isdefined( alpha ) )
        alpha = 1;

    if ( !isdefined( _id_FFB74DFE2FDAD3BE ) )
        _id_FFB74DFE2FDAD3BE = 0;

    up = anglestoup( angles );
    fwd = anglestoforward( angles );
    start = pos + up * 72 * 0.5;
    end = start + fwd * 32;
    draw_small_arrow( start, end, color, alpha, _id_FFB74DFE2FDAD3BE );
    draw_box( pos, color, angles, [ 32, 72 ], alpha, _id_FFB74DFE2FDAD3BE );
}

draw_node( pos, angles, color, _id_A61C75B156FC1EE0, alpha, _id_FFB74DFE2FDAD3BE )
{
    if ( !isdefined( angles ) )
        angles = ( 0, 0, 0 );

    if ( !isdefined( _id_A61C75B156FC1EE0 ) )
        _id_A61C75B156FC1EE0 = 32;

    if ( !isdefined( alpha ) )
        alpha = 1;

    if ( !isdefined( _id_FFB74DFE2FDAD3BE ) )
        _id_FFB74DFE2FDAD3BE = 0;

    up = anglestoup( angles );
    fwd = anglestoforward( angles );
    start = pos + up * _id_A61C75B156FC1EE0 * 0.5;
    end = start + fwd * _id_A61C75B156FC1EE0;
    draw_small_arrow( start, end, color, alpha, _id_FFB74DFE2FDAD3BE );
    draw_box( pos, color, angles, _id_A61C75B156FC1EE0, alpha, _id_FFB74DFE2FDAD3BE );
}

draw_small_arrow( start, end, color, alpha, _id_FFB74DFE2FDAD3BE )
{
    if ( !isdefined( alpha ) )
        alpha = 1;

    if ( !isdefined( _id_FFB74DFE2FDAD3BE ) )
        _id_FFB74DFE2FDAD3BE = 0;

    angle = vectortoangles( end - start );
    dist = length( end - start );
    forward = anglestoforward( angle );
    _id_4B01E6DB3ABF9DDB = forward * dist;
    _id_6D57DF1B675794B6 = 5;
    _id_3A8939B94BA42EEA = forward * ( dist - _id_6D57DF1B675794B6 );
    right = anglestoright( angle );
    _id_7B11357F8F8851FE = right * ( _id_6D57DF1B675794B6 * -1 );
    _id_33B0514767568857 = right * _id_6D57DF1B675794B6;
}

draw_box( pos, color, angles, _id_A61C75B156FC1EE0, alpha, _id_FFB74DFE2FDAD3BE )
{
    if ( !isdefined( _id_A61C75B156FC1EE0 ) )
    {
        width = 32;
        height = 32;
    }
    else if ( !isarray( _id_A61C75B156FC1EE0 ) )
    {
        width = _id_A61C75B156FC1EE0;
        height = _id_A61C75B156FC1EE0;
    }
    else
    {
        width = _id_A61C75B156FC1EE0[0];
        height = _id_A61C75B156FC1EE0[1];
    }

    if ( !isdefined( angles ) )
        angles = ( 0, 0, 0 );

    if ( !isdefined( alpha ) )
        alpha = 1;

    if ( !isdefined( _id_FFB74DFE2FDAD3BE ) )
        _id_FFB74DFE2FDAD3BE = 0;

    forward = anglestoforward( angles );
    right = anglestoright( angles );
    up = anglestoup( angles );
    start = pos + forward * width * 0.5;
    start = start + right * width * 0.5;
    points = [];
    points[points.size] = start;
    points[points.size] = points[points.size - 1] + forward * width * -1;
    points[points.size] = points[points.size - 1] + right * width * -1;
    points[points.size] = points[points.size - 1] + forward * width;
    offset = height * up;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < points.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( _id_AC0E594AC96AA3A8 == points.size - 1 )
            continue;
    }
}

print_timer( label )
{

}

display_ai_group_info()
{
    if ( !isdefined( level._ai_group ) )
        return;

    foreach ( groupname, struct in level._ai_group )
    {
        foreach ( guy in struct.ai )
        {
            if ( isalive( guy ) )
            {
                if ( guy.team == "axis" )
                    color = ( 1, 0, 0 );
                else
                    color = ( 0, 1, 0 );
            }
        }
    }
}

show_animnames()
{

}

_id_C8CE49ADBBDFE59B()
{
    teams = [ "axis", "allies", "team3", "neutral", "dying", "lightweight", "total" ];
    y = 70;

    foreach ( team in teams )
    {
        if ( team == "lightweight" )
        {
            count = getaicount( "all", "all", "lightweight" );
            color = _id_A08C7D9BF42CA575( count, 10, 15 );
        }
        else
        {
            ai_array = getaiarray();

            if ( getdvarint( "dvar_8BECA11D7B55550E" ) )
            {
                _id_27C1A387E7B386F0["allies"] = ( 0, 1, 0 );
                _id_27C1A387E7B386F0["axis"] = ( 1, 0, 0 );
                _id_27C1A387E7B386F0["default"] = ( 0, 1, 1 );

                foreach ( guy in ai_array )
                    _id_45F3B3C1F250CD23 = scripts\engine\utility::_id_53C4C53197386572( _id_27C1A387E7B386F0[guy.team], _id_27C1A387E7B386F0["default"] );
            }

            if ( team == "total" )
            {
                count = ai_array.size;
                color = _id_A08C7D9BF42CA575( count, 10, 25 );
            }
            else if ( team == "dying" )
            {
                alive = scripts\engine\utility::array_removedead_or_dying( ai_array );
                count = ai_array.size - alive.size;
                color = _id_A08C7D9BF42CA575( count, 5, 10 );
            }
            else
            {
                ai_array = getaiarray( team );
                ai_array = scripts\engine\utility::array_removedead_or_dying( ai_array );
                count = ai_array.size;
                color = _id_A08C7D9BF42CA575( count, 10, 25 );
            }
        }

        y = y + 15;
    }
}

_id_A08C7D9BF42CA575( count, _id_8D0FC73F82C3715C, _id_0D211EEA36B16B15 )
{
    if ( count <= _id_8D0FC73F82C3715C )
        color = ( 0, 1, 0 );
    else if ( count <= _id_0D211EEA36B16B15 )
        color = ( 1, 1, 0 );
    else
        color = ( 1, 0, 0 );

    return color;
}
