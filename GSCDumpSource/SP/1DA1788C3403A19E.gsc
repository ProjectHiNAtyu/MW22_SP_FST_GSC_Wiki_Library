// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( !scripts\engine\utility::add_init_script( "autosave", ::main ) )
        return;

    setdvarifuninitialized( "dvar_1FBF179E197540F3", "1" );
    setdvarifuninitialized( "dvar_6AF159684591CB79", "0" );
    level.autosave = spawnstruct();
    level.autosave.lastautosavetime = 0;
    scripts\engine\utility::flag_init( "game_saving" );
    scripts\engine\utility::flag_init( "can_save" );
    scripts\engine\utility::flag_set( "can_save" );
    scripts\engine\utility::flag_init( "disable_autosaves" );
    scripts\engine\utility::flag_init( "ImmediateLevelStartSave" );

    if ( !isdefined( level.autosave.extra_autosave_checks ) )
        level.autosave.extra_autosave_checks = [];

    level.autosave.proximity_threat_func = ::autosave_proximity_threat_func;
    level.autosave.enemydistcheck = 1;
    beginningoflevelsave();
    startsavedprogression( level.script );
}

proggressionmismatchpopup( _id_0D4C90180F6E4B32 )
{
    setomnvar( "progression_invalid", 1 );
}

cheat_save()
{
    wait 2;
    level.player endon( "death" );
    setdvarifuninitialized( "dvar_6E05061C38987036", "0" );

    for (;;)
    {
        if ( getdvarint( "dvar_6E05061C38987036" ) > 0 )
        {
            setdvar( "dvar_6E05061C38987036", "0" );
            scripts\engine\sp\utility::autosave_by_name( "cheat_save" );
            wait 1;
        }

        wait 0.05;
    }
}

getdescription()
{
    return &"AUTOSAVE/AUTOSAVE";
}

beginningoflevelsave()
{
    if ( scripts\sp\utility::is_trials_level() )
        return;

    thread immediatelevelstartsave();
    thread beginningoflevelsave_thread();
}

immediatelevelstartsave()
{
    _id_DAAB9679DD0058EF = scripts\sp\endmission::level_settle_time_get( level.script );

    if ( !isdefined( _id_DAAB9679DD0058EF ) )
        _id_DAAB9679DD0058EF = 0;

    _id_DAAB9679DD0058EF = _id_DAAB9679DD0058EF * 0.05;
    _id_FB3779574B08663B = scripts\sp\endmission::client_settle_time_get( level.script );

    if ( !isdefined( _id_FB3779574B08663B ) )
        _id_FB3779574B08663B = 0;

    _id_FB3779574B08663B = _id_FB3779574B08663B * 0.001;
    wait( _id_FB3779574B08663B + _id_DAAB9679DD0058EF + 0.15 );
    _id_9F925F5509626DF1 = 0;

    if ( isdefined( level.credits_active ) )
    {
        autosaveprint( "immediateLevelStartSave() Credits are active", 0 );
        _id_9F925F5509626DF1 = 1;
    }
    else if ( level.missionfailed )
    {
        autosaveprint( "immediateLevelStartSave() Mission Failed", 0 );
        _id_9F925F5509626DF1 = 1;
    }
    else if ( scripts\engine\utility::flag( "game_saving" ) )
    {
        autosaveprint( "immediateLevelStartSave() In the middle of another save, aborting", 0 );
        _id_9F925F5509626DF1 = 1;
    }

    if ( _id_9F925F5509626DF1 )
    {
        scripts\engine\utility::flag_set( "ImmediateLevelStartSave" );
        return;
    }

    scripts\engine\utility::flag_set( "game_saving" );

    if ( !isalive( level.player ) )
        return;

    _id_D63C50F8A63DC1A5 = "levelshots / autosave / autosave_" + level.script + "immediate_start";
    _func_58DCB11B5A8AA9EE( "immediatelevelstart", &"AUTOSAVE/LEVELSTART", _id_D63C50F8A63DC1A5, 1 );
    setdvar( "dvar_228E280524E6D278", "0" );
    level.player _meth_E2C5C81E080D8624( 0 );
    autosaveprint( "immediateLevelStartSave() Saved", 1 );
    scripts\engine\utility::flag_clear( "game_saving" );
    scripts\engine\utility::flag_set( "ImmediateLevelStartSave" );
}

beginningoflevelsave_thread()
{
    if ( isdefined( level.beginningoflevelsavedelay ) )
        wait( level.beginningoflevelsavedelay );
    else
        wait 2;

    if ( isdefined( level.credits_active ) )
    {
        autosaveprint( "beginningOfLevelSave_thread() Credits are active", 0 );
        return;
    }

    if ( level.missionfailed )
    {
        autosaveprint( "beginningOfLevelSave_thread() Missiong failed", 0 );
        return;
    }

    if ( scripts\engine\utility::flag( "game_saving" ) )
    {
        autosaveprint( "beginningOfLevelSave_thread() In the middle of another save, aborting", 0 );
        return;
    }

    if ( !scripts\engine\utility::flag( "ImmediateLevelStartSave" ) )
    {
        scripts\engine\utility::flag_wait( "ImmediateLevelStartSave" );
        wait 1;
    }

    scripts\engine\utility::flag_set( "game_saving" );
    _id_D63C50F8A63DC1A5 = "levelshots / autosave / autosave_" + level.script + "start";
    result = waitfortransientloading( "beginningOfLevelSave_thread()" );

    if ( !isdefined( result ) )
    {
        autosaveprint( "beginningOfLevelSave_thread() a newer save was called...", 0 );
        scripts\engine\utility::flag_clear( "game_saving" );
        return;
    }

    if ( !isalive( level.player ) )
        return;

    _func_58DCB11B5A8AA9EE( "levelstart", &"AUTOSAVE/LEVELSTART", _id_D63C50F8A63DC1A5, 1 );
    setdvar( "dvar_228E280524E6D278", "0" );
    level.player _meth_E2C5C81E080D8624( 0 );
    autosaveprint( "beginningOfLevelSave_thread() beginningOfLevelSave Saved", 1 );
    scripts\engine\utility::flag_clear( "game_saving" );
}

_id_E96F7708C1775016( trigger )
{
    trigger waittill( "trigger" );
    scripts\engine\sp\utility::_id_8D94212299B4B241();
}

trigger_autosave_stealth( trigger )
{
    trigger waittill( "trigger" );
    scripts\engine\sp\utility::autosave_stealth();
}

trigger_autosave_tactical( trigger )
{
    trigger waittill( "trigger" );
    scripts\engine\sp\utility::autosave_tactical();
}

trigger_autosave( trigger )
{
    thread _id_0806EE0C06769F6F( trigger );
}

_id_0806EE0C06769F6F( trigger )
{
    trigger endon( "death" );
    wait 1;

    if ( istrue( trigger.script_repeat ) )
    {
        delay = 30;

        if ( isdefined( trigger.script_delay ) )
            delay = trigger.script_delay;

        for (;;)
        {
            _id_B55C93A657439F8A( trigger );
            wait( delay );
        }
    }
    else
        _id_B55C93A657439F8A( trigger, 1 );
}

_id_B55C93A657439F8A( trigger, _id_D8EC40FF894A8D81 )
{
    trigger waittill( "trigger", other );
    name = undefined;

    if ( isdefined( trigger.script_autosavename ) )
        name = trigger.script_autosavename;

    scripts\engine\sp\utility::autosave_by_name( name );

    if ( isdefined( trigger ) && istrue( _id_D8EC40FF894A8D81 ) )
        trigger delete();
}

autosaveprint( msg, type, _id_57DA6DCC2D8F10A9 )
{
    if ( !getdvarint( "dvar_6AF159684591CB79" ) && !getdvarint( "dvar_1FBF179E197540F3" ) )
        return;

    if ( !isdefined( type ) )
        type = -1;

    _id_DEC9BCCE93873125 = "^5AUTOSAVE";

    if ( isdefined( _id_57DA6DCC2D8F10A9 ) )
        _id_DEC9BCCE93873125 = _id_DEC9BCCE93873125 + "[" + _id_57DA6DCC2D8F10A9 + "]";

    _id_DEC9BCCE93873125 = _id_DEC9BCCE93873125 + ":^7 ";

    if ( type == 0 )
        msg = _id_DEC9BCCE93873125 + "^1[ FAILED    ] " + "^7" + msg;
    else if ( type == 1 )
        msg = _id_DEC9BCCE93873125 + "^2[ SUCCEEDED ] " + "^7" + msg;
    else if ( type == 2 )
        msg = _id_DEC9BCCE93873125 + "^7" + msg;
    else
        msg = _id_DEC9BCCE93873125 + msg;

    if ( type == 0 || type == 1 || type == 2 )
        thread autosave_hudprint( msg );

    if ( getdvarint( "dvar_6AF159684591CB79" ) )
        iprintln( msg );
}

autosave_hudprint( msg )
{
    _id_5159F960A67ED33B = getbuildversion();

    if ( _id_5159F960A67ED33B == "IW9" )
        return;

    if ( getdvarint( "dvar_1CFACB017D3A4D53" ) )
        return;

    if ( !getdvarint( "dvar_1FBF179E197540F3" ) )
        return;

    if ( !isdefined( level.autosave.fail_huds ) )
        level.autosave.fail_huds = [];

    if ( level.autosave.fail_huds.size == 3 )
    {
        _id_DE5AAABD1AECB05F = level.autosave.fail_huds[0];
        level.autosave.fail_huds = scripts\engine\utility::array_remove_index( level.autosave.fail_huds, 0 );
        autosave_hudfail_update();
        _id_DE5AAABD1AECB05F thread autosave_hudfail_destroy();
    }

    hud = newhudelem();
    hud.elemtype = "font";
    hud.font = "default";
    hud.fontscale = 0.7;
    hud.width = 0;
    hud.height = int( 8.4 );
    hud.horzalign = "fullscreen";
    hud.vertalign = "fullscreen";
    index = level.autosave.fail_huds.size;
    level.autosave.fail_huds[index] = hud;
    hud.foreground = 1;
    hud.sort = 20;
    hud.x = 450;
    hud.y = 5 + index * 8.4;
    hud.label = msg;
    hud.alpha = 0;
    hud fadeovertime( 0.2 );
    hud.alpha = 1;
    hud endon( "death" );
    wait 5;
    level.autosave.fail_huds = scripts\engine\utility::array_remove( level.autosave.fail_huds, hud );
    autosave_hudfail_update();
    hud thread autosave_hudfail_destroy();
}

autosave_hudfail_destroy()
{
    scale = 1;
    self endon( "death" );
    self fadeovertime( 0.1 );
    self moveovertime( 0.1 );
    self.y = self.y - 8.4;
    self.alpha = 0;
    wait 0.2;
    self destroy();
}

autosave_hudfail_update()
{
    level.autosave.fail_huds = scripts\engine\utility::array_removeundefined( level.autosave.fail_huds );

    foreach ( index, hud in level.autosave.fail_huds )
    {
        hud moveovertime( 0.1 );
        hud.y = 5 + index * 12 * 0.7;
    }
}

_autosave_game_now( _id_F450DEF949FD681E, _id_37D5547BBE7FE582, _id_BC910DB033E0A289 )
{
    if ( scripts\sp\utility::is_trials_level() )
        return 0;

    autosaveprint( "_autosave_game_now() called...", 2 );

    if ( gettime() < 3300 )
        autosaveprint( "tryAutoSave() cannot save during before immediatelevelsave and beginningoflevelsave", 0 );
    else
    {
        if ( isdefined( level.missionfailed ) && level.missionfailed )
            return 0;

        if ( !isdefined( _id_37D5547BBE7FE582 ) || !_id_37D5547BBE7FE582 )
            level notify( "trying_new_autosave" );

        if ( scripts\engine\utility::flag( "game_saving" ) )
        {
            autosaveprint( "_autosave_game_now() game_saving in progress, aborting...", 0 );
            return 0;
        }

        scripts\engine\utility::flag_set( "game_saving" );
        result = waitfortransientloading( "_autosave_game_now()" );

        if ( !isdefined( result ) )
        {
            autosaveprint( "_autosave_game_now() a newer save was called...", 0 );
            scripts\engine\utility::flag_clear( "game_saving" );
            return 0;
        }

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.players.size; _id_AC0E594AC96AA3A8++ )
        {
            player = level.players[_id_AC0E594AC96AA3A8];

            if ( !isalive( player ) )
                return 0;
        }

        _id_615B735DDA2A4C94 = "save_now";
        _id_AED6D94A7C103648 = getdescription();

        if ( getdvarint( "dvar_31147F793B338D70" ) != 0 )
        {
            autosaveprint( "_autosave_game_now() Game is restarting", 0 );
            return 0;
        }

        if ( isdefined( level.nextmission ) )
        {
            autosaveprint( "_autosave_game_now() Game is going to next mission", 0 );
            return 0;
        }

        if ( isdefined( _id_F450DEF949FD681E ) )
            _id_57DA6DCC2D8F10A9 = _func_F76E4ED6CF94BF94( _id_615B735DDA2A4C94, _id_AED6D94A7C103648, "$default", 1 );
        else
            _id_57DA6DCC2D8F10A9 = _func_F76E4ED6CF94BF94( _id_615B735DDA2A4C94, _id_AED6D94A7C103648 );

        autosaveprint( "_autosave_game_now() Saving", undefined, _id_57DA6DCC2D8F10A9 );
        wait 0.05;

        if ( _func_ED3C5BE86BB9967D() )
        {
            autosaveprint( "_autosave_game_now() Save recently loaded...", 0 );
            level.autosave.lastautosavetime = gettime();
            scripts\engine\utility::flag_clear( "game_saving" );
            return 0;
        }

        if ( _func_5502E763F153F584() )
        {
            autosaveprint( "_autosave_game_now() transient is loading, retrying (1)...", 0 );
            scripts\engine\utility::flag_clear( "game_saving" );
            return 0;
        }

        if ( _id_57DA6DCC2D8F10A9 < 0 )
        {
            autosaveprint( "_autosave_game_now() save error", 0, _id_57DA6DCC2D8F10A9 );
            scripts\engine\utility::flag_clear( "game_saving" );
            return 0;
        }

        if ( !try_to_autosave_now( _id_57DA6DCC2D8F10A9 ) )
        {
            scripts\engine\utility::flag_clear( "game_saving" );
            return 0;
        }

        if ( istrue( _id_BC910DB033E0A289 ) && level.script == "strike" )
        {

        }
        else
            wait 2;

        scripts\engine\utility::flag_clear( "game_saving" );

        if ( _func_5502E763F153F584() )
        {
            autosaveprint( "_autosave_game_now() transient is loading, retrying (2)...", 0 );
            return 0;
        }

        if ( !_func_B23AE75CE61CBC36( _id_57DA6DCC2D8F10A9 ) )
        {
            autosaveprint( "_autosave_game_now() SaveGame is no longer valid, another save was run from elsewhere", 0, _id_57DA6DCC2D8F10A9 );
            return 0;
        }

        if ( try_to_autosave_now( _id_57DA6DCC2D8F10A9 ) )
        {
            autosaveprint( "_autosave_game_now() committed", 1, _id_57DA6DCC2D8F10A9 );
            _func_9D5FB33B4CA1E875( _id_57DA6DCC2D8F10A9 );
            level.player _meth_E2C5C81E080D8624( 0 );
            setdvar( "dvar_228E280524E6D278", "0" );
            scripts\sp\gameskill::auto_adjust_save_committed();
        }
    }
}

autosave_now_trigger( trigger )
{
    trigger waittill( "trigger" );
    scripts\engine\sp\utility::autosave_now();
}

try_to_autosave_now( _id_57DA6DCC2D8F10A9 )
{
    if ( !_func_3E5D0B7D52A44E12() )
        return 0;

    if ( !level.player autosavehealthcheck( _id_57DA6DCC2D8F10A9 ) )
        return 0;

    if ( !scripts\engine\utility::flag( "can_save" ) )
    {
        autosaveprint( "Can_save flag was clear", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    return 1;
}

tryautosave( name, description, image, timeout, _id_F78389D2B10C1F26, _id_F450DEF949FD681E, _id_07EE0E272B34FAFF )
{
    if ( scripts\sp\utility::is_trials_level() )
        return 0;

    if ( !isdefined( level._id_93F4C5209AA8EBBE ) )
        level._id_93F4C5209AA8EBBE = 0;

    autosaveprint( "tryAutoSave() called name = " + name, 2 );

    if ( gettime() < 3300 )
        autosaveprint( "tryAutoSave() cannot save during before immediatelevelsave and beginningoflevelsave", 0 );
    else
    {
        if ( scripts\engine\utility::flag( "disable_autosaves" ) )
        {
            autosaveprint( "tryAutoSave() autosaves disabled", 0 );
            return 0;
        }

        level endon( "nextmission" );
        level.player endon( "death" );

        if ( scripts\engine\utility::flag( "game_saving" ) )
        {
            autosaveprint( "tryAutoSave() game_saving in progress, aborting...", 0 );
            return 0;
        }

        level notify( "trying_new_autosave" );

        if ( isdefined( level.nextmission ) )
            return 0;

        _id_0A3775B45B8CEDC8 = 0.05;
        _id_0A3776B45B8CEFFB = 1.25;
        _id_0A3777B45B8CF22E = 1.25;

        if ( isdefined( timeout ) && timeout < _id_0A3775B45B8CEDC8 + _id_0A3776B45B8CEFFB + _id_0A3777B45B8CF22E )
        {

        }

        if ( !isdefined( _id_F450DEF949FD681E ) )
            _id_F450DEF949FD681E = 0;

        if ( !isdefined( image ) )
            image = "$default";

        if ( !isdefined( _id_F78389D2B10C1F26 ) )
            _id_F78389D2B10C1F26 = 0;

        scripts\engine\utility::flag_set( "game_saving" );
        _id_AED6D94A7C103648 = getdescription();
        _id_FD303234CC718D0B = gettime();
        _id_BFDA656E7B3CC1A0 = undefined;

        if ( isdefined( timeout ) )
            _id_BFDA656E7B3CC1A0 = gettime() + timeout * 1000;

        _id_6D39356E6E1F0FC1 = 0;
        result = 0;

        for (;;)
        {
            if ( scripts\engine\utility::flag( "disable_autosaves" ) )
            {
                autosaveprint( "tryAutoSave() autosaves disabled (2)", 0 );
                break;
            }

            if ( istrue( _id_07EE0E272B34FAFF ) && _id_6D39356E6E1F0FC1 > 0 )
            {
                autosaveprint( "tryAutoSave() Tried once and failed", 0 );
                break;
            }

            if ( isdefined( _id_BFDA656E7B3CC1A0 ) && gettime() > _id_BFDA656E7B3CC1A0 )
            {
                autosaveprint( "tryAutoSave() Autosave timed out after " + ( gettime() - _id_FD303234CC718D0B ) + " milliseconds", 0 );
                break;
            }

            _id_6D39356E6E1F0FC1++;

            if ( autosavecheck( undefined, _id_F78389D2B10C1F26 ) )
            {
                waitfortransientloading( "tryAutoSave()" );

                if ( getdvarint( "dvar_31147F793B338D70" ) != 0 )
                {
                    autosaveprint( "tryAutoSave() Game is restarting", 0 );
                    break;
                }

                if ( isdefined( level.nextmission ) )
                {
                    autosaveprint( "tryAutoSave() Game is going to next mission", 0 );
                    break;
                }

                _id_57DA6DCC2D8F10A9 = _func_F76E4ED6CF94BF94( level._id_93F4C5209AA8EBBE, _id_AED6D94A7C103648, image, _id_F450DEF949FD681E );
                autosaveprint( "tryAutoSave() Saving no commit", 2, _id_57DA6DCC2D8F10A9 );

                if ( _id_57DA6DCC2D8F10A9 < 0 )
                {
                    autosaveprint( "tryAutoSave() save error", 0, _id_57DA6DCC2D8F10A9 );
                    break;
                }

                wait( _id_0A3775B45B8CEDC8 );

                if ( isdefined( _id_BFDA656E7B3CC1A0 ) && gettime() > _id_BFDA656E7B3CC1A0 )
                {
                    autosaveprint( "tryAutoSave() Autosave timed out after " + ( gettime() - _id_FD303234CC718D0B ) + " milliseconds", 0 );
                    break;
                }

                if ( _func_ED3C5BE86BB9967D() )
                {
                    autosaveprint( "tryAutoSave() Save recently loaded...", 0 );
                    level.autosave.lastautosavetime = gettime();
                    break;
                }

                if ( _func_5502E763F153F584() )
                {
                    autosaveprint( "tryAutoSave() transient is loading, retrying (1)...", 0 );
                    continue;
                }

                wait( _id_0A3776B45B8CEFFB );

                if ( isdefined( _id_BFDA656E7B3CC1A0 ) && gettime() > _id_BFDA656E7B3CC1A0 )
                {
                    autosaveprint( "tryAutoSave() Autosave timed out after " + ( gettime() - _id_FD303234CC718D0B ) + " milliseconds", 0 );
                    break;
                }

                if ( _func_5502E763F153F584() )
                {
                    autosaveprint( "tryAutoSave() transient is loading, retrying (2)...", 0 );
                    continue;
                }

                if ( extra_autosave_checks_failed( _id_57DA6DCC2D8F10A9 ) )
                    continue;

                if ( !autosavecheck( undefined, _id_F78389D2B10C1F26, _id_57DA6DCC2D8F10A9 ) )
                {
                    autosaveprint( "tryAutoSave() SaveGame invalid: 1.25 second check failed", 0, _id_57DA6DCC2D8F10A9 );
                    continue;
                }

                wait( _id_0A3777B45B8CF22E );

                if ( isdefined( _id_BFDA656E7B3CC1A0 ) && gettime() > _id_BFDA656E7B3CC1A0 )
                {
                    autosaveprint( "tryAutoSave() Autosave timed out after " + ( gettime() - _id_FD303234CC718D0B ) + " milliseconds", 0 );
                    break;
                }

                if ( _func_5502E763F153F584() )
                {
                    autosaveprint( "tryAutoSave() transient is loading, retrying (3)...", 0 );
                    continue;
                }

                if ( !autosavecheck_not_picky( _id_57DA6DCC2D8F10A9 ) )
                {
                    autosaveprint( "tryAutoSave() SaveGame invalid: 2.5 second check failed", 0, _id_57DA6DCC2D8F10A9 );
                    continue;
                }

                if ( !scripts\engine\utility::flag( "can_save" ) )
                {
                    autosaveprint( "tryAutoSave() Can_save flag was clear", 0, _id_57DA6DCC2D8F10A9 );
                    break;
                }

                if ( !_func_B23AE75CE61CBC36( _id_57DA6DCC2D8F10A9 ) )
                {
                    autosaveprint( "tryAutoSave() SaveGame is no longer valid, another save was run from elsewhere", 0, _id_57DA6DCC2D8F10A9 );
                    scripts\engine\utility::flag_clear( "game_saving" );
                    return 0;
                }

                if ( scripts\engine\utility::flag( "disable_autosaves" ) )
                {
                    autosaveprint( "tryAutoSave() autosaves disabled (3)", 0 );
                    break;
                }

                result = 1;
                autosaveprint( "tryAutoSave() committed", 1, _id_57DA6DCC2D8F10A9 );
                _func_9D5FB33B4CA1E875( _id_57DA6DCC2D8F10A9 );
                level.player _meth_E2C5C81E080D8624( 0 );
                level.lastsavetime = gettime();
                setdvar( "dvar_228E280524E6D278", "0" );
                scripts\sp\gameskill::auto_adjust_save_committed();
                break;
            }

            wait 0.25;
        }

        scripts\engine\utility::flag_clear( "game_saving" );

        if ( isdefined( result ) && result )
            level._id_93F4C5209AA8EBBE++;
    }
}

startsavedprogression( _id_0D4C90180F6E4B32 )
{
    if ( isprogressionlevel( _id_0D4C90180F6E4B32 ) )
    {
        if ( isprogressionmismatch( _id_0D4C90180F6E4B32 ) )
            proggressionmismatchpopup();
        else if ( getdvarint( "dvar_B8B8E25BB75B206D" ) == 0 )
        {
            level.player _meth_8E232755197D2A79( "currentMission", _id_0D4C90180F6E4B32 );
            state = level.player _meth_2583E4BC5ABCA7B5( "missionStateData", _id_0D4C90180F6E4B32 );

            if ( state == "locked" )
                level.player _meth_8E232755197D2A79( "missionStateData", _id_0D4C90180F6E4B32, "incomplete" );
        }
    }
}

isprogressionmismatch( _id_0D4C90180F6E4B32 )
{
    _id_3012ABBF8B098D0F = scripts\sp\endmission::getlevelindex( _id_0D4C90180F6E4B32 );

    if ( previouslevelcompleted( _id_3012ABBF8B098D0F ) || isdevbuild() || getdvarint( "dvar_3086AA2871E781C1" ) )
        return 0;
    else
        return 1;

    return 0;
}

isprogressionlevel( _id_0D4C90180F6E4B32 )
{
    _id_3012ABBF8B098D0F = scripts\sp\endmission::getlevelindex( _id_0D4C90180F6E4B32 );
    return isdefined( _id_3012ABBF8B098D0F );
}

isdevbuild()
{
    _id_37E6D053AD5DB668 = 0;
    setdvarifuninitialized( "dvar_B3FCF6E357E30812", 0 );
    return _id_37E6D053AD5DB668;
}

previouslevelcompleted( _id_3012ABBF8B098D0F )
{
    if ( _id_3012ABBF8B098D0F == 0 )
        return 1;

    _id_3012ABBF8B098D0F--;
    _id_DAFC1E855DED43AA = level.missionsettings.levels[_id_3012ABBF8B098D0F].name;
    _id_15CFC62C61F4117F = level.player _meth_2583E4BC5ABCA7B5( "missionStateData", _id_DAFC1E855DED43AA );

    if ( _id_15CFC62C61F4117F != "complete" )
        return 0;
    else
        return 1;
}

waitfortransientloading( _id_DEC9BCCE93873125 )
{
    level endon( "trying_new_autosave" );
    _id_6902D760014CF492 = 0;

    if ( _func_6AA5132EE96A72D3() )
    {
        while ( !_func_5924D03BE18328C2() )
        {
            if ( gettime() > _id_6902D760014CF492 )
            {
                autosaveprint( _id_DEC9BCCE93873125 + " Waiting for Preload to complete...", undefined );
                _id_6902D760014CF492 = gettime() + 2000;
            }

            wait 0.05;
        }
    }

    while ( _func_5502E763F153F584() )
    {
        if ( gettime() > _id_6902D760014CF492 )
        {
            autosaveprint( _id_DEC9BCCE93873125 + " Waiting for transient to load...", undefined );
            _id_6902D760014CF492 = gettime() + 2000;
        }

        wait 0.05;
    }

    return 1;
}

extra_autosave_checks_failed( _id_57DA6DCC2D8F10A9 )
{
    foreach ( func in level.autosave.extra_autosave_checks )
    {
        if ( ![[ func["func"] ]]() )
        {
            autosaveprint( "Extra Autosave Check: " + func["msg"] + "", 0, _id_57DA6DCC2D8F10A9 );
            return 1;
        }
    }

    return 0;
}

autosavecheck_not_picky( _id_57DA6DCC2D8F10A9 )
{
    return autosavecheck( 0, 0, _id_57DA6DCC2D8F10A9 );
}

autosavecheck( _id_9A6BE9E4B6D6B6D1, _id_F78389D2B10C1F26, _id_57DA6DCC2D8F10A9 )
{
    if ( isdefined( level.autosave_check_override ) )
    {
        _id_475E02596EDF24AF = spawnstruct();
        _id_475E02596EDF24AF._id_9A6BE9E4B6D6B6D1 = _id_9A6BE9E4B6D6B6D1;
        _id_475E02596EDF24AF._id_F78389D2B10C1F26 = _id_F78389D2B10C1F26;
        _id_475E02596EDF24AF._id_57DA6DCC2D8F10A9 = _id_57DA6DCC2D8F10A9;
        return [[ level.autosave_check_override ]]( _id_475E02596EDF24AF );
    }

    if ( isdefined( level.special_autosavecondition ) && ![[ level.special_autosavecondition ]]() )
    {
        autosaveprint( "autoSaveCheck() special_autosavecondition failed", 0 );
        return 0;
    }

    if ( level.missionfailed )
        return 0;

    if ( !isdefined( _id_9A6BE9E4B6D6B6D1 ) )
        _id_9A6BE9E4B6D6B6D1 = level.dopickyautosavechecks;

    if ( !isdefined( _id_F78389D2B10C1F26 ) )
        _id_F78389D2B10C1F26 = 0;

    if ( _id_F78389D2B10C1F26 )
    {
        if ( ![[ level.global_callbacks["_autosave_stealthcheck"] ]]() )
            return 0;
    }

    if ( !level.player autosavehealthcheck( _id_57DA6DCC2D8F10A9 ) )
        return 0;

    if ( _id_9A6BE9E4B6D6B6D1 && !level.player autosaveammocheck( _id_57DA6DCC2D8F10A9 ) )
        return 0;

    if ( level.autosave_threat_check_enabled )
    {
        if ( !autosavethreatcheck( _id_9A6BE9E4B6D6B6D1, _id_57DA6DCC2D8F10A9 ) )
            return 0;
    }

    if ( !level.player autosaveplayercheck( _id_9A6BE9E4B6D6B6D1, _id_57DA6DCC2D8F10A9 ) )
        return 0;

    if ( !level.player autosavefriendlyfirecheck( _id_57DA6DCC2D8F10A9 ) )
        return 0;

    if ( level.player recentunresolvedcollision() )
        return 0;

    if ( !_func_3E5D0B7D52A44E12() )
    {
        autosaveprint( "autoSaveCheck() save call was unsuccessful", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    return 1;
}

autosaveplayercheck( _id_9A6BE9E4B6D6B6D1, _id_57DA6DCC2D8F10A9 )
{
    if ( self ismeleeing() && _id_9A6BE9E4B6D6B6D1 )
    {
        autosaveprint( "player is meleeing", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    if ( istrue( self.in_melee_death ) )
    {
        autosaveprint( "player is in context melee", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    if ( !_id_58929539ECE45CE1() )
    {
        autosaveprint( "player is throwing a grenade", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    if ( isdefined( self.shellshocked ) && self.shellshocked )
    {
        autosaveprint( "player is in shellshock", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    if ( self _meth_E40102956C887F7C() )
    {
        if ( _id_4B87F2871B6B025C::_id_EA8199F09C110522() )
        {
            autosaveprint( " player's remaining breath is too low ", 0, _id_57DA6DCC2D8F10A9 );
            return 0;
        }
    }
    else if ( !self islinked() && !self isonground() )
    {
        if ( scripts\engine\trace::_bullet_trace_passed( level.player.origin + ( 0, 0, 5 ), level.player.origin + ( 0, 0, -200 ), 0, self ) )
        {
            autosaveprint( "player is too high off the ground", 0, _id_57DA6DCC2D8F10A9 );
            return 0;
        }
    }

    if ( scripts\engine\utility::isflashed() )
    {
        autosaveprint( "player is flashbanged", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    if ( isdefined( self.hackingblockautosave ) && self.hackingblockautosave == 1 )
    {
        autosaveprint( "player is controlling a hacked robot", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    return 1;
}

_id_58929539ECE45CE1()
{
    if ( !self isthrowinggrenade() )
        return 1;

    offhand = self getheldoffhand();

    switch ( offhand.basename )
    {
        case "handheld_note":
        case "handheld_map":
        case "smoke_empty":
        case "hb_sensor_toggle":
        case "hb_sensor":
            return 1;
    }

    return 0;
}

recentunresolvedcollision()
{
    _id_0F1A9809EED7E8F0 = gettime();

    if ( isdefined( self.last_unresolved_collision_time ) && _id_0F1A9809EED7E8F0 - self.last_unresolved_collision_time < 500 )
        return 1;

    return 0;
}

autosavefriendlyfirecheck( _id_57DA6DCC2D8F10A9 )
{
    _id_D85EABB77248E824 = getentarray( "grenade", "classname" );

    if ( _id_D85EABB77248E824.size == 0 )
        return 1;

    _id_CFB65343CD42A773 = [];

    foreach ( _id_33071C5CA19FBB3F in _id_D85EABB77248E824 )
    {
        if ( isvalidmissile( _id_33071C5CA19FBB3F ) && isplayer( getmissileowner( _id_33071C5CA19FBB3F ) ) )
            _id_CFB65343CD42A773[_id_CFB65343CD42A773.size] = _id_33071C5CA19FBB3F;
    }

    if ( _id_CFB65343CD42A773.size == 0 )
        return 1;

    if ( playernadessafe( _id_CFB65343CD42A773 ) )
        return 1;

    allies = getaiarray( "allies" );

    foreach ( ally in allies )
    {
        foreach ( _id_8187D0F863F205B2 in _id_CFB65343CD42A773 )
        {
            if ( distancesquared( ally.origin, _id_8187D0F863F205B2.origin ) < 6400 )
            {
                autosaveprint( "autoSaveFriendlyFireCheck() player nade is too close to friendlies", 0, _id_57DA6DCC2D8F10A9 );
                return 0;
            }
        }
    }

    return 1;
}

playernadessafe( _id_CFB65343CD42A773 )
{
    foreach ( _id_33071C5CA19FBB3F in _id_CFB65343CD42A773 )
    {
        if ( scripts\sp\utility::offhand_is_dangerous( _id_33071C5CA19FBB3F ) )
            return 0;
    }

    return 1;
}

autosaveammocheck( _id_57DA6DCC2D8F10A9 )
{
    weapons = self getweaponslistprimaries();

    if ( weapons.size == 0 )
        return 1;

    _id_50E880F4569C48C8 = 1;
    _id_113C8717236299BB = 0;
    classname = "";

    foreach ( weapon in weapons )
    {
        if ( isnullweapon( weapon ) )
            continue;

        if ( weaponmaxammo( weapon ) > 0 )
            _id_50E880F4569C48C8 = 0;

        _id_B422990D3A652911 = self getweaponammoclip( weapon );
        _id_C89B9DBD286AFCAB = weaponclipsize( weapon );
        _id_F8B0919EDF69149B = self getweaponammostock( weapon );
        _id_AB0EE360900BCB85 = weaponmaxammo( weapon );
        _id_38944F3D0F31DF8D = _id_B422990D3A652911 + _id_F8B0919EDF69149B;
        maxammo = _id_C89B9DBD286AFCAB + _id_AB0EE360900BCB85;

        if ( maxammo <= 0 )
            continue;

        _id_AD2562E1DB5353F1 = _id_38944F3D0F31DF8D / maxammo;
        _id_BAEAF1EEBDB2A3DE = 0.0714286;

        if ( _id_AD2562E1DB5353F1 > _id_113C8717236299BB )
        {
            _id_113C8717236299BB = _id_AD2562E1DB5353F1;
            classname = weapon.classname;

            if ( weapon.classname == "grenade" || weapon.classname == "rocketlauncher" )
            {
                _id_BAEAF1EEBDB2A3DE = 0.5;
                classname = "explosive";
            }
        }

        if ( _id_AD2562E1DB5353F1 >= _id_BAEAF1EEBDB2A3DE )
            return 1;
    }

    if ( _id_50E880F4569C48C8 )
        return 1;

    autosaveprint( "Highest stock+clip ammo fraction: " + _id_113C8717236299BB + " for " + classname + " weapon. Too low to save.", 0, _id_57DA6DCC2D8F10A9 );
    return 0;
}

autosavehealthcheck( _id_57DA6DCC2D8F10A9 )
{
    if ( scripts\sp\player::belowcriticalhealththreshold() )
    {
        autosaveprint( "player is below critical health threshold", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    if ( istrue( self.damage.firedamage ) )
    {
        autosaveprint( "player is on fire!", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    if ( self isonladder() )
    {
        autosaveprint( "player is on ladder! TU1 HACK!", 0, _id_57DA6DCC2D8F10A9 );
        return 0;
    }

    return 1;
}

autosavethreatcheck( _id_9A6BE9E4B6D6B6D1, _id_57DA6DCC2D8F10A9 )
{
    enemies = getaiunittypearray( "bad_guys", "all" );

    foreach ( enemy in enemies )
    {
        if ( isdefined( level.player.stealth ) && isdefined( enemy.stealth ) && enemy.threatsight && enemy getthreatsight( level.player ) > 0 )
        {
            autosaveprint( "AI cansee player, stealth meter is up", 0, _id_57DA6DCC2D8F10A9 );
            return 0;
        }

        if ( !isalive( enemy.enemy ) )
            continue;

        if ( !isplayer( enemy.enemy ) )
        {
            if ( level.autosave.enemydistcheck && enemy playermaybecomemyenemy() )
            {
                autosaveprint( "Player close to AI's enemy", 0, _id_57DA6DCC2D8F10A9 );
                return 0;
            }
        }
        else
        {
            if ( enemy._id_A97AC004F00C5DF9 && isdefined( enemy._id_9BFC452192B23C7A ) && isplayer( enemy._id_9BFC452192B23C7A ) )
            {
                autosaveprint( "AI meleeing player", 0, _id_57DA6DCC2D8F10A9 );
                return 0;
            }

            _id_5C5E201E116C223B = [[ level.autosave.proximity_threat_func ]]( enemy );

            if ( _id_5C5E201E116C223B == "return_even_if_low_accuracy" )
            {
                autosaveprint( "AI too close to player, so close we're ignoring his accuracy", 0, _id_57DA6DCC2D8F10A9 );
                return 0;
            }

            if ( enemy.finalaccuracy < 0.021 && enemy.finalaccuracy > -1 )
                continue;

            if ( _id_5C5E201E116C223B == "none" )
                continue;

            _id_F01B5C5893E51E88 = undefined;
            _id_9F810AAE92AC7BF1 = enemy._blackboard._id_060DCAA3D3BE97AB > gettime() - 1500;

            if ( _id_9F810AAE92AC7BF1 )
            {
                _id_F01B5C5893E51E88 = enemy getcanshootandsee();

                if ( _id_F01B5C5893E51E88 )
                {
                    autosaveprint( "AI firing on player", 0, _id_57DA6DCC2D8F10A9 );
                    return 0;
                }
            }

            if ( !isdefined( _id_F01B5C5893E51E88 ) )
                _id_F01B5C5893E51E88 = enemy getcanshootandsee();

            if ( isdefined( enemy._id_A709FBD9FEA148F6 ) && enemy scripts\asm\asm::asm_currentstatehasflag( enemy._id_A709FBD9FEA148F6, "aim" ) && _id_F01B5C5893E51E88 )
            {
                autosaveprint( "AI aiming at player", 0, _id_57DA6DCC2D8F10A9 );
                return 0;
            }
            else
                continue;
        }
    }

    if ( scripts\sp\equipment\tripwire::playerintripwiredangerzone() )
    {
        autosaveprint( "player in tripwire danager zone", 0 );
        return 0;
    }

    if ( scripts\sp\utility::player_is_near_live_offhand( 1 ) )
        return 0;

    if ( isdefined( level.phys_barrels ) )
    {
        foreach ( _id_DDC4E4BDECFF28CD in level.phys_barrels )
        {
            if ( !isdefined( _id_DDC4E4BDECFF28CD.onfire ) )
                continue;

            if ( _id_DDC4E4BDECFF28CD.subtype == "antigrav" )
                continue;

            if ( distancesquared( _id_DDC4E4BDECFF28CD.origin, level.player.origin ) < 122500 )
            {
                autosaveprint( _id_DDC4E4BDECFF28CD.subtype + " barrel is onfire and too close to player", 0, _id_57DA6DCC2D8F10A9 );
                return 0;
            }
        }
    }

    vehicles = getentarray( "scriptable", "code_classname" );

    foreach ( vehicle in vehicles )
    {
        if ( !isdefined( vehicle.destructible_type ) || vehicle.destructible_type != "vehicle" )
            continue;

        if ( !isdefined( vehicle.onfire ) )
            continue;

        if ( distancesquared( vehicle.origin, level.player.origin ) < 160000 )
        {
            autosaveprint( "burning car too close to player", 0, _id_57DA6DCC2D8F10A9 );
            return 0;
        }
    }

    return 1;
}

playermaybecomemyenemy()
{
    if ( self.enemy scripts\common\vehicle::isvehicle() )
        return 0;

    if ( distancesquared( self.enemy.origin, level.player.origin ) < 4900 )
        return 1;

    if ( self cansee( level.player ) )
    {
        _id_F2BC2E4B8D09E518 = distancesquared( self.enemy.origin, self.origin );
        _id_D2E4BDDEDDC9B4F9 = distancesquared( level.player.origin, self.origin );

        if ( _id_D2E4BDDEDDC9B4F9 <= _id_F2BC2E4B8D09E518 + 10000 )
            return 1;
    }

    return 0;
}

getcanshootandsee()
{
    return _id_2B79931B08683E0A::canseeenemy( 0 ) && self canshootenemy( 0 );
}

enemy_is_a_threat()
{
    if ( self.finalaccuracy >= 0.021 )
        return 1;

    foreach ( player in level.players )
    {
        if ( distance( self.origin, player.origin ) < 500 )
            return 1;
    }

    return 0;
}

autosave_proximity_threat_func( enemy )
{
    foreach ( player in level.players )
    {
        dist = distancesquared( enemy.origin, player.origin );

        if ( dist < 10000 )
            return "return_even_if_low_accuracy";
        else if ( dist < 129600 )
            return "return";
        else if ( dist < 1000000 )
            return "threat_exists";
    }

    return "none";
}
