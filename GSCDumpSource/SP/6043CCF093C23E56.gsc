// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

preload()
{
    _func_A39466ADC48F650F( "turret_attackheli" );
    _func_A39466ADC48F650F( "missile_attackheli" );
    attack_heli_fx();
    thread init();
}

attack_heli_fx()
{
    if ( getdvarint( "dvar_AD42CA33A427DE58" ) && getdvar( "dvar_5C129CC6B6F612DC" ) != "0" )
        level._effect["_attack_heli_spotlight"] = loadfx( "vfx/core/vehicles/hunted_spotlight_model" );
    else
        level._effect["_attack_heli_spotlight"] = loadfx( "vfx/core/vehicles/spotlight_large" );
}

init()
{
    if ( isdefined( level.attackheliaiburstsize ) )
        return;

    while ( !isdefined( level.gameskill ) )
        wait 0.05;

    if ( !isdefined( level.cosine ) )
        level.cosine = [];

    if ( !isdefined( level.cosine["25"] ) )
        level.cosine["25"] = cos( 25 );

    if ( !isdefined( level.cosine["35"] ) )
        level.cosine["35"] = cos( 35 );

    if ( !isdefined( level.attackhelirange ) )
        level.attackhelirange = 3500;

    if ( !isdefined( level.attackhelikillsai ) )
        level.attackhelikillsai = 0;

    if ( !isdefined( level.attackhelifov ) )
        level.attackhelifov = cos( 30 );

    level.attackheliaiburstsize = 1;
    level.attackhelimemory = 3;
    level.attackhelitargetreaquire = 6;
    level.attackhelimovetime = 3;

    switch ( level.gameskill )
    {
        case 0:
            level.attackheliplayerbreak = 9;
            level.attackhelitimeout = 1;
            break;
        case 1:
            level.attackheliplayerbreak = 7;
            level.attackhelitimeout = 2;
            break;
        case 2:
            level.attackheliplayerbreak = 5;
            level.attackhelitimeout = 3;
            break;
        case 3:
            level.attackheliplayerbreak = 3;
            level.attackhelitimeout = 5;
            break;
    }
}

start_attack_heli( _id_C1B40B757EBD4BD4 )
{
    if ( !isdefined( _id_C1B40B757EBD4BD4 ) )
        _id_C1B40B757EBD4BD4 = "kill_heli";

    _id_A8F80D776B64EC94 = scripts\common\vehicle::spawn_vehicle_from_targetname_and_drive( _id_C1B40B757EBD4BD4 );
    _id_A8F80D776B64EC94 = begin_attack_heli_behavior( _id_A8F80D776B64EC94 );
    return _id_A8F80D776B64EC94;
}

begin_attack_heli_behavior( _id_A8F80D776B64EC94, _id_21C3A2D73EA410FD )
{
    _id_A8F80D776B64EC94 endon( "death" );
    _id_A8F80D776B64EC94 endon( "heli_players_dead" );

    if ( level.gameskill == 0 || level.gameskill == 1 )
    {
        org = spawn( "script_origin", _id_A8F80D776B64EC94.origin + ( 0, 0, -20 ) );
        org linkto( _id_A8F80D776B64EC94 );
        _id_A8F80D776B64EC94 thread scripts\engine\utility::delete_on_death( org );
        _id_0C0AB0189903C9D4 = undefined;

        if ( level.gameskill == 0 )
            _id_0C0AB0189903C9D4 = 2800;
        else
            _id_0C0AB0189903C9D4 = 2200;

        if ( !isdefined( _id_A8F80D776B64EC94.no_attractor ) )
            _id_A8F80D776B64EC94.attractor = missile_createattractorent( org, _id_0C0AB0189903C9D4, 10000, level.player );
    }

    _id_A8F80D776B64EC94 enableaimassist();
    _id_A8F80D776B64EC94.startingorigin = spawn( "script_origin", _id_A8F80D776B64EC94.origin );
    _id_A8F80D776B64EC94 thread scripts\engine\utility::delete_on_death( _id_A8F80D776B64EC94.startingorigin );

    if ( !isdefined( _id_A8F80D776B64EC94.circling ) )
        _id_A8F80D776B64EC94.circling = 0;

    _id_A8F80D776B64EC94.allowshoot = 1;
    _id_A8F80D776B64EC94.firingmissiles = 0;
    _id_A8F80D776B64EC94.moving = 1;
    _id_A8F80D776B64EC94.istakingdamage = 0;
    _id_A8F80D776B64EC94.heli_lastattacker = undefined;
    _id_A8F80D776B64EC94 thread notify_disable();
    _id_A8F80D776B64EC94 thread notify_enable();
    thread kill_heli_logic( _id_A8F80D776B64EC94, _id_21C3A2D73EA410FD );
    _id_A8F80D776B64EC94.turrettype = undefined;
    _id_A8F80D776B64EC94 heli_default_target_setup();
    _id_A8F80D776B64EC94 thread detect_player_death();

    switch ( _id_A8F80D776B64EC94.vehicletype )
    {
        case "hind":
        case "ny_harbor_hind":
        case "hind_blackice":
        case "hind_battle":
            _id_A8F80D776B64EC94.turrettype = "default";
            break;
        case "mi28":
        case "nh90":
        case "mi17":
            _id_A8F80D776B64EC94.turrettype = "default";
            break;
        case "apache":
            _id_A8F80D776B64EC94.turrettype = "default";
            break;
        case "littlebird_spotlight":
        case "littlebird":
            _id_A8F80D776B64EC94 setyawspeed( 90, 30, 20 );
            _id_A8F80D776B64EC94 setmaxpitchroll( 40, 40 );
            _id_A8F80D776B64EC94 sethoverparams( 100, 20, 5 );
            _id_A8F80D776B64EC94 setup_miniguns();
            break;
        default:
            break;
    }

    _id_A8F80D776B64EC94.etarget = _id_A8F80D776B64EC94.targetdefault;

    if ( isdefined( _id_A8F80D776B64EC94.script_spotlight ) && _id_A8F80D776B64EC94.script_spotlight == 1 && !isdefined( _id_A8F80D776B64EC94.spotlight ) )
        _id_A8F80D776B64EC94 thread heli_spotlight_on( undefined, 1 );

    _id_A8F80D776B64EC94 thread attack_heli_cleanup();
    return _id_A8F80D776B64EC94;
}

detect_player_death()
{
    foreach ( player in level.players )
        player scripts\engine\sp\utility::add_wait( scripts\engine\sp\utility::waittill_msg, "death" );

    scripts\engine\sp\utility::do_wait_any();
    self notify( "heli_players_dead" );
}

heli_default_target_setup()
{
    _id_0BA33DC1C42A46EE = undefined;
    _id_9281F4D9E2F7F340 = undefined;

    switch ( self.vehicletype )
    {
        case "hind":
        case "ny_harbor_hind":
        case "hind_blackice":
        case "hind_battle":
            _id_9281F4D9E2F7F340 = 600;
            _id_0BA33DC1C42A46EE = -100;
            break;
        case "mi28":
        case "nh90":
        case "mi17":
            _id_9281F4D9E2F7F340 = 600;
            _id_0BA33DC1C42A46EE = -100;
            break;
        case "apache":
            _id_9281F4D9E2F7F340 = 600;
            _id_0BA33DC1C42A46EE = -100;
            break;
        case "littlebird_spotlight":
        case "littlebird":
            _id_9281F4D9E2F7F340 = 600;
            _id_0BA33DC1C42A46EE = -204;
            break;
        default:
            break;
    }

    self.targetdefault = spawn( "script_origin", self.origin );
    self.targetdefault.angles = self.angles;
    self.targetdefault.origin = self.origin;
    ent = spawnstruct();
    ent.entity = self.targetdefault;
    ent.forward = _id_9281F4D9E2F7F340;
    ent.up = _id_0BA33DC1C42A46EE;
    ent scripts\engine\sp\utility::translate_local();
    self.targetdefault linkto( self );
    self.targetdefault thread heli_default_target_cleanup( self );
}

get_turrets()
{
    if ( isdefined( self.turrets ) )
        return self.turrets;

    setup_miniguns();
    return self.turrets;
}

setup_miniguns()
{
    self.turrettype = "miniguns";
    self.minigunsspinning = 0;
    self.firingguns = 0;

    if ( !isdefined( self.mgturret ) )
        return;

    self.turrets = self.mgturret;
    scripts\engine\utility::array_thread( self.turrets, ::littlebird_turrets_think, self );
}

heli_default_target_cleanup( _id_A8F80D776B64EC94 )
{
    _id_A8F80D776B64EC94 scripts\engine\utility::waittill_either( "death", "vehicle_crashDone" );

    if ( isdefined( self ) )
        self delete();
}

start_circling_heli( _id_7F47C65917578B10, _id_21C3A2D73EA410FD )
{
    if ( !isdefined( _id_7F47C65917578B10 ) )
        _id_7F47C65917578B10 = "kill_heli";

    heli = scripts\common\vehicle::spawn_vehicle_from_targetname_and_drive( _id_7F47C65917578B10 );
    heli.startingorigin = spawn( "script_origin", heli.origin );
    heli thread scripts\engine\utility::delete_on_death( heli.startingorigin );
    heli.circling = 1;
    heli.allowshoot = 1;
    heli.firingmissiles = 0;
    heli thread notify_disable();
    heli thread notify_enable();
    thread kill_heli_logic( heli, _id_21C3A2D73EA410FD );
    return heli;
}

kill_heli_logic( heli, _id_21C3A2D73EA410FD )
{
    if ( !isdefined( heli ) )
    {
        heli = scripts\common\vehicle::spawn_vehicle_from_targetname_and_drive( "kill_heli" );
        heli.allowshoot = 1;
        heli.firingmissiles = 0;
        heli thread notify_disable();
        heli thread notify_enable();
    }

    _id_6201FB806AD1B5D7 = undefined;

    if ( !isdefined( heli.script_airspeed ) )
        _id_6201FB806AD1B5D7 = 40;
    else
        _id_6201FB806AD1B5D7 = heli.script_airspeed;

    if ( !isdefined( level.enemy_heli_killed ) )
        level.enemy_heli_killed = 0;

    if ( !isdefined( level.commander_speaking ) )
        level.commander_speaking = 0;

    if ( !isdefined( level.enemy_heli_attacking ) )
        level.enemy_heli_attacking = 0;

    level.attack_heli_safe_volumes = undefined;
    volumes = getentarray( "attack_heli_safe_volume", "script_noteworthy" );

    if ( volumes.size > 0 )
        level.attack_heli_safe_volumes = volumes;

    if ( !level.enemy_heli_killed )
        thread dialog_nags_heli( heli );

    if ( !isdefined( heli.helicopter_predator_target_shader ) )
    {
        switch ( heli.vehicletype )
        {
            case "mi28":
            case "nh90":
            case "mi17":
                _func_3C7A539844CA1747( heli, ( 0, 0, -80 ) );
                break;
            case "hind":
            case "ny_harbor_hind":
            case "hind_blackice":
            case "hind_battle":
                _func_3C7A539844CA1747( heli, ( 0, 0, -96 ) );
                break;
            case "apache":
                _func_3C7A539844CA1747( heli, ( 0, 0, -96 ) );
                break;
            case "littlebird_spotlight":
            case "littlebird":
                _func_3C7A539844CA1747( heli, ( 0, 0, -80 ) );
                break;
            default:
                break;
        }

        _func_B4636CD800891B78( heli, 1 );
    }

    heli thread heli_damage_monitor();
    heli thread heli_death_monitor();
    heli endon( "death" );
    heli endon( "heli_players_dead" );
    heli endon( "returning_home" );
    heli setvehweapon( "turret_attackheli" );

    if ( !isdefined( heli.circling ) )
        heli.circling = 0;

    if ( !heli.circling )
    {
        heli setneargoalnotifydist( 100 );

        if ( !isdefined( heli.dontwaitforpathend ) )
            heli waittill( "reached_dynamic_path_end" );
    }
    else
    {
        heli setneargoalnotifydist( 500 );
        heli waittill( "near_goal" );
    }

    heli thread heli_shoot_think();

    if ( heli.circling )
        heli thread heli_circling_think( _id_21C3A2D73EA410FD, _id_6201FB806AD1B5D7 );
    else
        heli thread heli_goal_think( _id_6201FB806AD1B5D7 );
}

heli_circling_think( _id_21C3A2D73EA410FD, _id_6201FB806AD1B5D7 )
{
    if ( !isdefined( _id_21C3A2D73EA410FD ) )
        _id_21C3A2D73EA410FD = "attack_heli_circle_node";

    points = getentarray( _id_21C3A2D73EA410FD, "targetname" );

    if ( !isdefined( points ) || points.size < 1 )
        points = scripts\engine\utility::getstructarray( _id_21C3A2D73EA410FD, "targetname" );

    heli = self;
    heli endon( "stop_circling" );
    heli endon( "death" );
    heli endon( "returning_home" );
    heli endon( "heli_players_dead" );

    for (;;)
    {
        heli vehicle_setspeed( _id_6201FB806AD1B5D7, _id_6201FB806AD1B5D7 / 4, _id_6201FB806AD1B5D7 / 4 );
        heli setneargoalnotifydist( 100 );
        player = level.player;
        playerorigin = player.origin;
        heli setlookatent( player );
        _id_60DD0BBA209DA6A2 = scripts\engine\utility::getclosest( playerorigin, points );
        _id_5A72A428D40544FE = getentarray( _id_60DD0BBA209DA6A2.target, "targetname" );

        if ( !isdefined( _id_5A72A428D40544FE ) || _id_5A72A428D40544FE.size < 1 )
            _id_5A72A428D40544FE = scripts\engine\utility::getstructarray( _id_60DD0BBA209DA6A2.target, "targetname" );

        goal = _id_5A72A428D40544FE[randomint( _id_5A72A428D40544FE.size )];
        heli setvehgoalpos( goal.origin, 1 );
        heli waittill( "near_goal" );

        if ( !isdefined( player.is_controlling_uav ) )
        {
            wait 1;
            wait( randomfloatrange( 0.8, 1.3 ) );
        }
    }
}

heli_goal_think( _id_6201FB806AD1B5D7 )
{
    self endon( "death" );
    points = getentarray( "kill_heli_spot", "targetname" );
    heli = self;
    goal = scripts\engine\utility::getclosest( heli.origin, points );
    current_node = goal;
    heli endon( "death" );
    heli endon( "returning_home" );
    heli endon( "heli_players_dead" );
    _id_66A7FBC9D133F2BF = undefined;

    for (;;)
    {
        wait 0.05;
        heli vehicle_setspeed( _id_6201FB806AD1B5D7, _id_6201FB806AD1B5D7 / 2, _id_6201FB806AD1B5D7 / 10 );
        heli setneargoalnotifydist( 100 );
        player = level.player;
        playerorigin = player.origin;

        if ( goal == current_node && heli.istakingdamage )
        {
            linked = get_linked_points( heli, goal, points, player, playerorigin );
            goal = scripts\engine\utility::getclosest( playerorigin, linked );
        }

        heli setvehgoalpos( goal.origin, 1 );
        heli.moving = 1;
        player = level.player;

        if ( isdefined( self.etarget ) && isdefined( self.etarget.classname ) && self.etarget.classname == "script_origin" )
            _id_66A7FBC9D133F2BF = player;
        else if ( isdefined( self.etarget ) )
            _id_66A7FBC9D133F2BF = self.etarget;
        else
            _id_66A7FBC9D133F2BF = self.targetdefault;

        heli setlookatent( _id_66A7FBC9D133F2BF );
        heli waittill( "near_goal" );
        heli.moving = 0;

        if ( level.gameskill == 0 || level.gameskill == 1 )
        {
            while ( player_is_aiming_with_rocket( heli ) )
                wait 0.5;

            wait 3;
        }

        player = level.player;
        playerorigin = player.origin;
        linked = get_linked_points( heli, goal, points, player, playerorigin );
        linked[linked.size] = goal;
        current_node = goal;
        _id_60DD0BBA209DA6A2 = scripts\engine\utility::getclosest( playerorigin, points );
        _id_30BA4289875DD691 = scripts\engine\utility::getclosest( playerorigin, linked );

        foreach ( point in linked )
        {
            if ( player sightconetrace( point.origin, heli ) != 1 )
            {
                linked = scripts\engine\utility::array_remove( linked, point );
                continue;
            }
        }

        _id_C3EC5AFB02199783 = scripts\engine\utility::getclosest( playerorigin, linked );

        if ( linked.size < 2 )
            goal = _id_30BA4289875DD691;
        else if ( _id_C3EC5AFB02199783 != _id_60DD0BBA209DA6A2 )
            goal = _id_C3EC5AFB02199783;
        else
        {
            _id_6342A5CD84590602 = [];
            _id_6342A5CD84590602[0] = _id_C3EC5AFB02199783;
            linked = scripts\engine\utility::get_array_of_closest( playerorigin, linked, _id_6342A5CD84590602, 2 );
            _id_3F403475C9BCA3F7 = randomint( linked.size );

            if ( randomint( 100 ) > 50 )
                goal = linked[_id_3F403475C9BCA3F7];
            else
                goal = _id_60DD0BBA209DA6A2;
        }

        _id_7A0C1F650BBE34C6 = randomfloatrange( level.attackhelimovetime - 0.5, level.attackhelimovetime + 0.5 );
        scripts\engine\utility::waittill_notify_or_timeout( "damage_by_player", _id_7A0C1F650BBE34C6 );
    }
}

player_is_aiming_with_rocket( _id_A8F80D776B64EC94 )
{
    if ( !level.player usingantiairweapon() )
        return 0;

    if ( !level.player adsbuttonpressed() )
        return 0;

    _id_D539DD4D949070D9 = level.player geteye();

    if ( sighttracepassed( _id_D539DD4D949070D9, _id_A8F80D776B64EC94.origin, 0, level.player ) )
        return 1;

    return 0;
}

heli_shoot_think()
{
    self endon( "stop_shooting" );
    self endon( "death" );
    self endon( "heli_players_dead" );
    thread heli_missiles_think();
    _id_13E19E01DF44D953 = level.attackhelirange * level.attackhelirange;
    level.attackheligraceperiod = 0;

    while ( isdefined( self ) )
    {
        wait( randomfloatrange( 0.8, 1.3 ) );

        if ( !heli_has_target() || !heli_has_player_target() )
        {
            etarget = heli_get_target_player_only();

            if ( isplayer( etarget ) )
                self.etarget = etarget;
        }

        if ( heli_has_player_target() )
        {
            if ( !heli_can_see_target() || level.attackheligraceperiod == 1 )
            {
                etarget = heli_get_target_ai_only();
                self.etarget = etarget;
            }
        }

        if ( isdefined( self.heli_lastattacker ) && isplayer( self.heli_lastattacker ) )
            self.etarget = self.heli_lastattacker;
        else if ( !heli_has_target() )
        {
            etarget = heli_get_target_ai_only();
            self.etarget = etarget;
        }

        if ( !heli_has_target() )
            continue;

        if ( self.etarget is_hidden_from_heli( self ) )
            continue;

        if ( heli_has_target() && distancesquared( self.etarget.origin, self.origin ) > _id_13E19E01DF44D953 )
            continue;

        if ( self.turrettype == "default" && heli_has_player_target() )
        {
            miss_player( self.etarget );
            wait( randomfloatrange( 0.8, 1.3 ) );
            miss_player( self.etarget );
            wait( randomfloatrange( 0.8, 1.3 ) );

            while ( can_see_player( self.etarget ) && !self.etarget is_hidden_from_heli( self ) )
            {
                fire_guns();
                wait( randomfloatrange( 2.0, 4.0 ) );
            }

            continue;
        }

        if ( isplayer( self.etarget ) || isai( self.etarget ) )
            fire_guns();

        if ( isplayer( self.etarget ) )
            thread player_grace_period( self );

        scripts\engine\utility::waittill_notify_or_timeout( "damage_by_player", level.attackhelitargetreaquire );
    }
}

player_grace_period( _id_A8F80D776B64EC94 )
{
    level notify( "player_is_heli_target" );
    level endon( "player_is_heli_target" );
    level.attackheligraceperiod = 1;
    _id_A8F80D776B64EC94 scripts\engine\utility::waittill_notify_or_timeout( "damage_by_player", level.attackheliplayerbreak );
    level.attackheligraceperiod = 0;
}

heli_can_see_target()
{
    if ( !isdefined( self.etarget ) )
        return 0;

    org = self.etarget.origin + ( 0, 0, 32 );

    if ( isplayer( self.etarget ) )
        org = self.etarget geteye();

    _id_4B9A91106F629C2B = self gettagorigin( "tag_flash" );
    _id_09F39F74F8CA988F = sighttracepassed( _id_4B9A91106F629C2B, org, 0, self );
    return _id_09F39F74F8CA988F;
}

heli_has_player_target()
{
    if ( !isdefined( self.etarget ) )
        return 0;

    if ( isplayer( self.etarget ) )
        return 1;
    else
        return 0;
}

heli_has_target()
{
    if ( !isdefined( self.etarget ) )
        return 0;

    if ( !isalive( self.etarget ) )
        return 0;

    if ( self.etarget == self.targetdefault )
        return 0;
    else
        return 1;
}

heli_get_target()
{
    etarget = scripts\sp\helicopter_globals::getenemytarget( level.attackhelirange, level.attackhelifov, 1, 1, 0, 1, level.attackheliexcluders );

    if ( isdefined( etarget ) && isplayer( etarget ) )
        etarget = self.targetdefault;

    if ( !isdefined( etarget ) )
        etarget = self.targetdefault;

    return etarget;
}

heli_get_target_player_only()
{
    _id_A3658E5EE7A7DDA1 = getaiarray( "allies" );
    etarget = scripts\sp\helicopter_globals::getenemytarget( level.attackhelirange, level.attackhelifov, 1, 0, 0, 0, _id_A3658E5EE7A7DDA1 );

    if ( !isdefined( etarget ) )
        etarget = self.targetdefault;

    return etarget;
}

heli_get_target_ai_only()
{
    etarget = scripts\sp\helicopter_globals::getenemytarget( level.attackhelirange, level.attackhelifov, 1, 1, 0, 1, level.players );

    if ( !isdefined( etarget ) )
        etarget = self.targetdefault;

    return etarget;
}

heli_missiles_think()
{
    if ( !isdefined( self.script_missiles ) )
        return;

    self endon( "death" );
    self endon( "heli_players_dead" );
    self endon( "stop_shooting" );
    _id_E20C72DA9DE356C1 = undefined;
    defaultweapon = "turret_attackheli";
    weaponname = "missile_attackheli";
    _id_20B553D85EC7BC57 = undefined;
    _id_8F26A943256ED058 = undefined;
    tags = [];

    switch ( self.vehicletype )
    {
        case "mi28":
            _id_E20C72DA9DE356C1 = 1;
            _id_20B553D85EC7BC57 = 1;
            _id_8F26A943256ED058 = 0.5;
            tags[0] = "tag_store_L_2_a";
            tags[1] = "tag_store_R_2_a";
            tags[2] = "tag_store_L_2_b";
            tags[3] = "tag_store_R_2_b";
            tags[4] = "tag_store_L_2_c";
            tags[5] = "tag_store_R_2_c";
            tags[6] = "tag_store_L_2_d";
            tags[7] = "tag_store_R_2_d";
            break;
        case "littlebird":
        case "apache":
            _id_E20C72DA9DE356C1 = 1;
            _id_20B553D85EC7BC57 = 1;
            _id_8F26A943256ED058 = 0.5;
            tags[0] = "tag_missile_left";
            tags[1] = "tag_missile_right";
            break;
        default:
            break;
    }

    nextmissiletag = -1;

    for (;;)
    {
        wait 0.05;
        self waittill( "fire_missiles", other );

        if ( !isplayer( other ) )
            continue;

        player = other;

        if ( !player_is_good_missile_target( player ) )
            continue;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_E20C72DA9DE356C1; _id_AC0E594AC96AA3A8++ )
        {
            nextmissiletag++;

            if ( nextmissiletag >= tags.size )
                nextmissiletag = 0;

            self setvehweapon( weaponname );
            self.firingmissiles = 1;
            _id_BCB3B419004A1724 = self fireweapon( tags[nextmissiletag], player );
            _id_BCB3B419004A1724 thread missilelosetarget( _id_8F26A943256ED058 );
            _id_BCB3B419004A1724 thread missile_earthquake();

            if ( _id_AC0E594AC96AA3A8 < _id_E20C72DA9DE356C1 - 1 )
                wait( _id_20B553D85EC7BC57 );
        }

        self.firingmissiles = 0;
        self setvehweapon( defaultweapon );
        wait 10;
    }
}

player_is_good_missile_target( player )
{
    if ( self.moving )
        return 0;
    else
        return 1;
}

missile_earthquake()
{
    if ( distancesquared( self.origin, level.player.origin ) > 9000000 )
        return;

    org = self.origin;

    while ( isdefined( self ) )
    {
        org = self.origin;
        wait 0.1;
    }

    earthquake( 0.7, 1.5, org, 1600 );
}

missilelosetarget( _id_3447DD0CDCD69308 )
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    wait( _id_3447DD0CDCD69308 );

    if ( isdefined( self ) )
        self missile_cleartarget();
}

get_different_player( player )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.players.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( player != level.players[_id_AC0E594AC96AA3A8] )
            return level.players[_id_AC0E594AC96AA3A8];
    }

    return level.players[0];
}

notify_disable()
{
    self notify( "notify_disable_thread" );
    self endon( "notify_disable_thread" );
    self endon( "death" );
    self endon( "heli_players_dead" );

    for (;;)
    {
        self waittill( "disable_turret" );
        self.allowshoot = 0;
    }
}

notify_enable()
{
    self notify( "notify_enable_thread" );
    self endon( "notify_enable_thread" );
    self endon( "death" );
    self endon( "heli_players_dead" );

    for (;;)
    {
        self waittill( "enable_turret" );
        self.allowshoot = 1;
    }
}

fire_guns()
{
    switch ( self.turrettype )
    {
        case "default":
            _id_F7A22274947D27DC = randomintrange( 5, 10 );
            firetime = weaponfiretime( "turret_attackheli" );
            turret_default_fire( self.etarget, _id_F7A22274947D27DC, firetime );
            break;
        case "miniguns":
            _id_F7A22274947D27DC = getburstsize( self.etarget );

            if ( self.allowshoot && !self.firingmissiles )
                turret_minigun_fire( self.etarget, _id_F7A22274947D27DC );

            break;
        default:
            break;
    }
}

getburstsize( etarget )
{
    _id_F7A22274947D27DC = undefined;

    if ( !isplayer( etarget ) )
    {
        _id_F7A22274947D27DC = level.attackheliaiburstsize;
        return _id_F7A22274947D27DC;
    }

    switch ( level.gameskill )
    {
        case 3:
        case 2:
        case 1:
        case 0:
            _id_F7A22274947D27DC = randomintrange( 2, 3 );
            break;
    }

    return _id_F7A22274947D27DC;
}

fire_missiles( _id_3447DD0CDCD69308 )
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    wait( _id_3447DD0CDCD69308 );

    if ( !isplayer( self.etarget ) )
        return;

    self notify( "fire_missiles", self.etarget );
}

turret_default_fire( etarget, _id_F7A22274947D27DC, firetime )
{
    thread fire_missiles( randomfloatrange( 0.2, 2 ) );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_F7A22274947D27DC; _id_AC0E594AC96AA3A8++ )
    {
        self setturrettargetent( etarget, scripts\engine\utility::randomvector( 50 ) + ( 0, 0, 32 ) );

        if ( self.allowshoot && !self.firingmissiles )
            self fireweapon();

        wait( firetime );
    }
}

turret_minigun_fire( etarget, _id_F7A22274947D27DC, _id_F4F31EF6FE61050A )
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    self notify( "firing_miniguns" );
    self endon( "firing_miniguns" );
    turrets = get_turrets();
    scripts\engine\utility::array_thread( turrets, ::turret_minigun_target_track, etarget, self );

    if ( !self.minigunsspinning )
    {
        self.firingguns = 1;
        thread scripts\engine\sp\utility::play_sound_on_tag( "littlebird_gatling_spinup", "tag_flash" );
        wait 2.1;
        thread scripts\engine\sp\utility::play_loop_sound_on_tag( "littlebird_minigun_spinloop", "tag_flash" );
    }

    self.minigunsspinning = 1;

    if ( !isdefined( _id_F4F31EF6FE61050A ) )
        _id_F4F31EF6FE61050A = 3;

    _id_65213DD2C413D808 = 0.5;

    if ( _id_65213DD2C413D808 > _id_F4F31EF6FE61050A )
        _id_65213DD2C413D808 = _id_F4F31EF6FE61050A;

    if ( _id_65213DD2C413D808 > 0 )
        wait( randomfloatrange( _id_65213DD2C413D808, _id_F4F31EF6FE61050A ) );

    minigun_fire( etarget, _id_F7A22274947D27DC );
    turrets = get_turrets();
    scripts\engine\utility::array_call( turrets, ::stopfiring );
    thread minigun_spindown( etarget );
    self notify( "stopping_firing" );
}

minigun_fire( etarget, _id_F7A22274947D27DC )
{
    self endon( "death" );
    self endon( "heli_players_dead" );

    if ( isplayer( etarget ) )
        self endon( "cant_see_player" );

    turrets = get_turrets();
    scripts\engine\utility::array_call( turrets, ::startfiring );
    wait( randomfloatrange( 1, 2 ) );

    if ( isplayer( etarget ) )
        thread target_track( etarget );

    if ( isplayer( etarget ) )
    {
        _id_7A0C1F650BBE34C6 = randomfloatrange( 0.5, 3 );
        thread fire_missiles( _id_7A0C1F650BBE34C6 );
    }

    wait( _id_F7A22274947D27DC );
}

target_track( etarget )
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    self endon( "stopping_firing" );
    self notify( "tracking_player" );
    self endon( "tracking_player" );

    for (;;)
    {
        if ( !can_see_player( etarget ) )
            break;

        wait 0.5;
    }

    wait( level.attackhelitimeout );
    self notify( "cant_see_player" );
}

turret_minigun_target_track( etarget, _id_A8F80D776B64EC94 )
{
    _id_A8F80D776B64EC94 endon( "death" );
    _id_A8F80D776B64EC94 endon( "heli_players_dead" );
    self notify( "miniguns_have_new_target" );
    self endon( "miniguns_have_new_target" );

    if ( !isplayer( etarget ) && isai( etarget ) && level.attackhelikillsai == 0 )
    {
        _id_692E37FEA1E1CC0C = spawn( "script_origin", etarget.origin + ( 0, 0, 100 ) );
        _id_692E37FEA1E1CC0C linkto( etarget );
        thread minigun_ai_target_cleanup( _id_692E37FEA1E1CC0C );
        etarget = _id_692E37FEA1E1CC0C;
    }

    for (;;)
    {
        wait 0.5;
        self settargetentity( etarget );
    }
}

minigun_ai_target_cleanup( _id_692E37FEA1E1CC0C )
{
    scripts\engine\utility::waittill_either( "death", "miniguns_have_new_target" );
    _id_692E37FEA1E1CC0C delete();
}

minigun_spindown( etarget )
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    self endon( "firing_miniguns" );

    if ( isplayer( etarget ) )
        wait( randomfloatrange( 3, 4 ) );
    else
        wait( randomfloatrange( 1, 2 ) );

    thread minigun_spindown_sound();
    self.firingguns = 0;
}

minigun_spindown_sound()
{
    self notify( "stop soundlittlebird_minigun_spinloop" );
    self.minigunsspinning = 0;
    scripts\engine\sp\utility::play_sound_on_tag( "littlebird_gatling_cooldown", "tag_flash" );
}

miss_player( player )
{
    forward = anglestoforward( level.player.angles );
    _id_4B01E6DB3ABF9DDB = forward * 400;
    _id_B1ABEAD37471BD64 = _id_4B01E6DB3ABF9DDB + scripts\engine\utility::randomvector( 50 );
    _id_F7A22274947D27DC = randomintrange( 10, 20 );
    firetime = weaponfiretime( "turret_attackheli" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_F7A22274947D27DC; _id_AC0E594AC96AA3A8++ )
    {
        _id_B1ABEAD37471BD64 = _id_4B01E6DB3ABF9DDB + scripts\engine\utility::randomvector( 50 );
        self setturrettargetent( player, _id_B1ABEAD37471BD64 );

        if ( self.allowshoot )
            self fireweapon();

        wait( firetime );
    }
}

can_see_player( player )
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    _id_4B9A91106F629C2B = self gettagorigin( "tag_flash" );
    pos = ( 0, 0, 0 );

    if ( isplayer( player ) )
        pos = player geteye();
    else
        pos = player.origin;

    if ( sighttracepassed( _id_4B9A91106F629C2B, pos, 0, undefined ) )
        return 1;
    else
        return 0;
}

get_linked_points( heli, goal, points, player, playerorigin )
{
    linked = [];
    _id_67F14F8315CB0F2F = strtok( goal.script_linkto, " " );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < points.size; _id_AC0E594AC96AA3A8++ )
    {
        for ( _id_AC0E5C4AC96AAA41 = 0; _id_AC0E5C4AC96AAA41 < _id_67F14F8315CB0F2F.size; _id_AC0E5C4AC96AAA41++ )
        {
            if ( points[_id_AC0E594AC96AA3A8].script_linkname == _id_67F14F8315CB0F2F[_id_AC0E5C4AC96AAA41] )
                linked[linked.size] = points[_id_AC0E594AC96AA3A8];
        }
    }

    foreach ( point in linked )
    {
        if ( point.origin[2] < playerorigin[2] )
        {
            linked = scripts\engine\utility::array_remove( linked, point );
            continue;
        }
    }

    return linked;
}

heli_damage_monitor()
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    self endon( "crashing" );
    self endon( "leaving" );
    self.damagetaken = 0;
    self.seen_attacker = undefined;

    for (;;)
    {
        self waittill( "damage", damage, attacker, direction_vec, _id_AC0E424AC96A7113, type );

        if ( !isdefined( attacker ) || !isplayer( attacker ) )
            continue;

        self notify( "damage_by_player" );
        thread heli_damage_update();
        thread can_see_attacker_for_a_bit( attacker );

        if ( scripts\engine\sp\utility::is_damagefeedback_enabled() )
            attacker thread updatedamagefeedback();
    }
}

heli_damage_update()
{
    self notify( "taking damage" );
    self endon( "taking damage" );
    self endon( "death" );
    self endon( "heli_players_dead" );
    self.istakingdamage = 1;
    wait 1;
    self.istakingdamage = 0;
}

can_see_attacker_for_a_bit( attacker )
{
    self notify( "attacker_seen" );
    self endon( "attacker_seen" );
    self.seen_attacker = attacker;
    self.heli_lastattacker = attacker;
    wait( level.attackhelimemory );
    self.heli_lastattacker = undefined;
    self.seen_attacker = undefined;
}

is_hidden_from_heli( heli )
{
    if ( isdefined( heli.seen_attacker ) )
    {
        if ( heli.seen_attacker == self )
            return 0;
    }

    if ( isdefined( level.attack_heli_safe_volumes ) )
    {
        foreach ( volume in level.attack_heli_safe_volumes )
        {
            if ( self istouching( volume ) )
                return 1;
        }
    }

    return 0;
}

updatedamagefeedback()
{
    if ( !isplayer( self ) )
        return;

    self.hud_damagefeedback setshader( "damage_feedback", 24, 48 );
    self playlocalsound( "player_feedback_hit_alert" );
    self.hud_damagefeedback.alpha = 1;
    self.hud_damagefeedback fadeovertime( 1 );
    self.hud_damagefeedback.alpha = 0;
}

damage_feedback_setup()
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.players.size; _id_AC0E594AC96AA3A8++ )
    {
        player = level.players[_id_AC0E594AC96AA3A8];
        player.hud_damagefeedback = newclienthudelem( player );
        player.hud_damagefeedback.horzalign = "center";
        player.hud_damagefeedback.vertalign = "middle";
        player.hud_damagefeedback.x = -12;
        player.hud_damagefeedback.y = -12;
        player.hud_damagefeedback.alpha = 0;
        player.hud_damagefeedback.archived = 1;
        player.hud_damagefeedback setshader( "damage_feedback", 24, 48 );
    }
}

heli_death_monitor()
{
    self waittill( "death" );
    level notify( "attack_heli_destroyed" );
    level.enemy_heli_killed = 1;
    wait 15;
    level.enemy_heli_attacking = 0;
}

dialog_nags_heli( heli )
{
    heli endon( "death" );
    heli endon( "heli_players_dead" );
    wait 30;

    if ( !level.enemy_heli_attacking )
        return;

    commander_dialog( "co_cf_cmd_heli_small_fire" );

    if ( !level.enemy_heli_attacking )
        return;

    commander_dialog( "co_cf_cmd_rpg_stinger" );
    wait 30;

    if ( !level.enemy_heli_attacking )
        return;

    commander_dialog( "co_cf_cmd_heli_wonders" );
}

commander_dialog( _id_B86D3E96869D9E54 )
{
    while ( level.commander_speaking )
        wait 1;

    level.commander_speaking = 1;
    level.player playsound( _id_B86D3E96869D9E54, "sounddone" );
    level.player waittill( "sounddone" );
    wait 0.5;
    level.commander_speaking = 0;
}

usingantiairweapon()
{
    weapon = self getcurrentweapon();

    if ( !isdefined( weapon ) )
        return 0;

    weaponname = tolower( weapon.basename );

    if ( issubstr( weaponname, "rpg" ) )
        return 1;

    if ( issubstr( weaponname, "stinger" ) )
        return 1;

    if ( issubstr( weaponname, "at4" ) )
        return 1;

    return 0;
}

heli_spotlight_cleanup( _id_D0F012B1761FE4B6 )
{
    scripts\engine\utility::waittill_any_3( "death", "vehicle_crashDone", "turn_off_spotlight" );
    self.spotlight = undefined;

    if ( isdefined( self ) )
        stopfxontag( scripts\engine\utility::getfx( "_attack_heli_spotlight" ), self, _id_D0F012B1761FE4B6 );
}

heli_spotlight_create_default_targets( _id_F1E7828DEB7BB7AA )
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    _id_48A61F22B03B1670 = self.targetdefault;

    if ( isdefined( _id_F1E7828DEB7BB7AA ) )
        _id_48A61F22B03B1670 = _id_F1E7828DEB7BB7AA;

    _id_48A61F22B03B1670.targetname = "original_ent";
    self.left_ent = spawn( "script_origin", _id_48A61F22B03B1670.origin );
    self.left_ent.origin = _id_48A61F22B03B1670.origin;
    self.left_ent.angles = _id_48A61F22B03B1670.angles;
    self.left_ent.targetname = "left_ent";
    self.right_ent = spawn( "script_origin", _id_48A61F22B03B1670.origin );
    self.right_ent.origin = _id_48A61F22B03B1670.origin;
    self.right_ent.angles = _id_48A61F22B03B1670.angles;
    self.right_ent.targetname = "right_ent";
    ent = spawnstruct();
    ent.entity = self.left_ent;
    ent.right = 250;
    ent scripts\engine\sp\utility::translate_local();
    self.left_ent linkto( self );
    _id_6848CD559BA201BC = spawnstruct();
    _id_6848CD559BA201BC.entity = self.right_ent;
    _id_6848CD559BA201BC.right = -250;
    _id_6848CD559BA201BC scripts\engine\sp\utility::translate_local();
    self.right_ent linkto( self );
    _id_5C52AAE8A045DE55 = [];
    _id_5C52AAE8A045DE55[0] = _id_48A61F22B03B1670;
    _id_5C52AAE8A045DE55[1] = self.left_ent;
    _id_5C52AAE8A045DE55[2] = self.right_ent;
    level.spotlight_aim_ents = _id_5C52AAE8A045DE55;
    self.spottarget = _id_48A61F22B03B1670;
}

heli_spotlight_destroy_default_targets()
{
    if ( isdefined( level.spotlight_aim_ents ) )
    {
        foreach ( _id_0A2C12CAC1FD6524 in level.spotlight_aim_ents )
        {
            if ( isdefined( _id_0A2C12CAC1FD6524 ) )
                _id_0A2C12CAC1FD6524 delete();
        }
    }
}

heli_spotlight_aim( _id_8B9FFC712B48D29E )
{
    self endon( "death" );
    self endon( "heli_players_dead" );

    if ( self.vehicletype != "littlebird" )
        return;

    thread heli_spotlight_think( _id_8B9FFC712B48D29E );
    _id_943F3EECF3858541 = undefined;

    for (;;)
    {
        wait 0.05;

        switch ( self.vehicletype )
        {
            case "littlebird_spotlight":
            case "littlebird":
                _id_943F3EECF3858541 = self.spottarget;
                break;
            default:
                _id_943F3EECF3858541 = self.etarget;
                break;
        }

        if ( isdefined( _id_943F3EECF3858541 ) )
            self setturrettargetent( _id_943F3EECF3858541, ( 0, 0, 0 ) );
    }
}

heli_spotlight_think( _id_8B9FFC712B48D29E )
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    heli_spotlight_create_default_targets();
    scripts\engine\utility::array_thread( level.spotlight_aim_ents, ::heli_spotlight_aim_ents_cleanup, self );

    if ( isdefined( _id_8B9FFC712B48D29E ) )
        self thread [[ _id_8B9FFC712B48D29E ]]();
    else
    {
        for (;;)
        {
            wait( randomfloatrange( 1, 3 ) );

            if ( heli_has_player_target() && !within_player_fov() )
            {
                self.spottarget = self.etarget;
                continue;
            }

            _id_3F403475C9BCA3F7 = randomint( level.spotlight_aim_ents.size );
            self.targetdefault = level.spotlight_aim_ents[_id_3F403475C9BCA3F7];
            self.spottarget = self.targetdefault;
        }
    }
}

within_player_fov()
{
    self endon( "death" );
    self endon( "heli_players_dead" );

    if ( !isdefined( self.etarget ) )
        return 0;

    if ( !isplayer( self.etarget ) )
        return 0;

    player = self.etarget;
    _id_594475C14B9B58E5 = scripts\engine\utility::within_fov( player geteye(), player getplayerangles(), self.origin, level.cosine["35"] );
    return _id_594475C14B9B58E5;
}

heli_spotlight_aim_ents_cleanup( _id_A8F80D776B64EC94 )
{
    _id_A8F80D776B64EC94 scripts\engine\utility::waittill_either( "death", "vehicle_crashDone" );

    if ( isdefined( self ) )
        self delete();
}

littlebird_turrets_think( _id_A8F80D776B64EC94 )
{
    _id_D6D62D4A2B436DC6 = self;
    _id_D6D62D4A2B436DC6 scripts\common\vehicle_code::turret_set_default_on_mode( "manual" );

    if ( isdefined( _id_A8F80D776B64EC94.targetdefault ) )
        _id_D6D62D4A2B436DC6 settargetentity( _id_A8F80D776B64EC94.targetdefault );

    _id_D6D62D4A2B436DC6 setmode( "manual" );
    _id_A8F80D776B64EC94 waittill( "death" );

    if ( isdefined( _id_A8F80D776B64EC94.firingguns ) && _id_A8F80D776B64EC94.firingguns == 1 )
        thread minigun_spindown_sound();
}

attack_heli_cleanup()
{
    scripts\engine\utility::waittill_either( "death", "vehicle_crashDone" );

    if ( isdefined( self.attractor ) )
        missile_deleteattractor( self.attractor );

    if ( isdefined( self.attractor2 ) )
        missile_deleteattractor( self.attractor2 );
}

heli_default_missiles_on( _id_F5C2E7C08C50919F )
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    self endon( "stop_default_heli_missiles" );
    self.preferredtarget = undefined;

    while ( isdefined( self ) )
    {
        wait 0.05;
        etarget = undefined;
        _id_E20C72DA9DE356C1 = undefined;
        delay = undefined;
        self.preferredtarget = undefined;
        _id_009A287933C5BFBD = undefined;

        if ( isdefined( self.currentnode ) && isdefined( self.currentnode.target ) )
            _id_009A287933C5BFBD = scripts\engine\utility::getent_or_struct( self.currentnode.target, "targetname" );

        if ( isdefined( _id_009A287933C5BFBD ) && isdefined( _id_009A287933C5BFBD.script_linkto ) )
            self.preferredtarget = scripts\engine\utility::getent_or_struct( _id_009A287933C5BFBD.script_linkto, "script_linkname" );

        if ( isdefined( self.preferredtarget ) )
        {
            etarget = self.preferredtarget;
            _id_E20C72DA9DE356C1 = etarget.script_shotcount;
            delay = etarget.script_delay;
            _id_009A287933C5BFBD waittill( "trigger" );
        }
        else
            scripts\engine\utility::waittill_any_2( "near_goal", "goal" );

        if ( isdefined( etarget ) )
            thread heli_fire_missiles( etarget, _id_E20C72DA9DE356C1, delay, _id_F5C2E7C08C50919F );
    }
}

heli_default_missiles_off()
{
    self notify( "stop_default_heli_missiles" );
}

heli_spotlight_on( _id_D0F012B1761FE4B6, _id_AF408E1E3636AB16, _id_D8D5DB80FB486480 )
{
    if ( !isdefined( _id_D0F012B1761FE4B6 ) )
        _id_D0F012B1761FE4B6 = "tag_barrel";

    if ( !isdefined( _id_AF408E1E3636AB16 ) )
        _id_AF408E1E3636AB16 = 0;

    if ( !isdefined( _id_D8D5DB80FB486480 ) )
        _id_D8D5DB80FB486480 = 0;

    playfxontag( scripts\engine\utility::getfx( "_attack_heli_spotlight" ), self, _id_D0F012B1761FE4B6 );
    self.spotlight = 1;
    thread heli_spotlight_cleanup( _id_D0F012B1761FE4B6 );

    if ( _id_D8D5DB80FB486480 )
        self setturrettargetent( level.player );
    else if ( _id_AF408E1E3636AB16 )
    {
        self endon( "death" );
        self endon( "heli_players_dead" );
        spawn_origin = self gettagorigin( "tag_origin" );

        if ( !isdefined( self.targetdefault ) )
            heli_default_target_setup();

        self setturrettargetent( self.targetdefault );
        thread heli_spotlight_aim();
    }
}

heli_spotlight_off()
{
    self notify( "turn_off_spotlight" );
}

heli_spotlight_random_targets_on()
{
    self endon( "death" );
    self endon( "heli_players_dead" );
    self endon( "stop_spotlight_random_targets" );

    if ( !isdefined( self.targetdefault ) )
        thread heli_default_target_setup();

    if ( !isdefined( self.left_ent ) )
        thread heli_spotlight_think();

    while ( isdefined( self ) )
    {
        wait 0.05;
        self setturrettargetent( self.targetdefault, ( 0, 0, 0 ) );
    }
}

heli_spotlight_random_targets_off()
{
    self notify( "stop_spotlight_random_targets" );
}

heli_fire_missiles( etarget, _id_E20C72DA9DE356C1, delay, _id_F5C2E7C08C50919F )
{
    self endon( "death" );
    self endon( "heli_players_dead" );

    if ( isdefined( self.defaultweapon ) )
        defaultweapon = self.defaultweapon;
    else
        defaultweapon = "turret_attackheli";

    weaponname = "missile_attackheli";

    if ( isdefined( _id_F5C2E7C08C50919F ) )
        weaponname = _id_F5C2E7C08C50919F;

    _id_8F26A943256ED058 = undefined;
    tags = [];
    self setvehweapon( defaultweapon );

    if ( !isdefined( _id_E20C72DA9DE356C1 ) )
        _id_E20C72DA9DE356C1 = 1;

    if ( !isdefined( delay ) )
        delay = 1;

    if ( !isdefined( etarget.classname ) )
    {
        if ( !isdefined( self.dummytarget ) )
        {
            self.dummytarget = spawn( "script_origin", etarget.origin );
            thread scripts\engine\utility::delete_on_death( self.dummytarget );
        }

        self.dummytarget.origin = etarget.origin;
        etarget = self.dummytarget;
    }

    switch ( self.vehicletype )
    {
        case "mi28":
            _id_8F26A943256ED058 = 0.5;
            tags[0] = "tag_store_L_2_a";
            tags[1] = "tag_store_R_2_a";
            tags[2] = "tag_store_L_2_b";
            tags[3] = "tag_store_R_2_b";
            tags[4] = "tag_store_L_2_c";
            tags[5] = "tag_store_R_2_c";
            tags[6] = "tag_store_L_2_d";
            tags[7] = "tag_store_R_2_d";
            break;
        case "littlebird":
        case "apache":
            _id_8F26A943256ED058 = 0.5;
            tags[0] = "tag_missile_left";
            tags[1] = "tag_missile_right";
            break;
        case "hind_battle":
            tags[0] = "tag_missile_left";
            tags[1] = "tag_missile_right";
            break;
        default:
            break;
    }

    nextmissiletag = -1;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_E20C72DA9DE356C1; _id_AC0E594AC96AA3A8++ )
    {
        nextmissiletag++;

        if ( nextmissiletag >= tags.size )
            nextmissiletag = 0;

        self setvehweapon( weaponname );
        self.firingmissiles = 1;
        _id_BCB3B419004A1724 = self fireweapon( tags[nextmissiletag], etarget );
        _id_BCB3B419004A1724 thread missile_earthquake();

        if ( _id_AC0E594AC96AA3A8 < _id_E20C72DA9DE356C1 - 1 )
            wait( delay );
    }

    self.firingmissiles = 0;
    self setvehweapon( defaultweapon );
}

boneyard_style_heli_missile_attack()
{
    self waittill( "trigger", vehicle );
    _id_5894EC5F9681977C = scripts\engine\utility::getstructarray( self.target, "targetname" );
    _id_5894EC5F9681977C = scripts\engine\sp\utility::array_index_by_script_index( _id_5894EC5F9681977C );
    boneyard_fire_at_targets( vehicle, _id_5894EC5F9681977C );
}

boneyard_style_heli_missile_attack_linked()
{
    self waittill( "trigger", vehicle );
    _id_5894EC5F9681977C = scripts\engine\utility::get_linked_structs();
    _id_5894EC5F9681977C = scripts\engine\sp\utility::array_index_by_script_index( _id_5894EC5F9681977C );
    boneyard_fire_at_targets( vehicle, _id_5894EC5F9681977C );
}

boneyard_fire_at_targets( vehicle, _id_5894EC5F9681977C )
{
    tags = [];
    tags[0] = "tag_missile_right";
    tags[1] = "tag_missile_left";

    if ( vehicle.vehicletype == "cobra" )
    {
        tags[0] = "tag_store_L_1_a";
        tags[1] = "tag_store_R_1_a";
    }

    ents = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_5894EC5F9681977C.size; _id_AC0E594AC96AA3A8++ )
    {
        ents[_id_AC0E594AC96AA3A8] = spawn( "script_origin", _id_5894EC5F9681977C[_id_AC0E594AC96AA3A8].origin );
        vehicle setvehweapon( "littlebird_FFAR" );
        vehicle setturrettargetent( ents[_id_AC0E594AC96AA3A8] );
        missile = vehicle fireweapon( tags[_id_AC0E594AC96AA3A8 % tags.size], ents[_id_AC0E594AC96AA3A8], ( 0, 0, 0 ) );
        missile scripts\engine\utility::delaycall( 1, ::missile_cleartarget );
        wait( randomfloatrange( 0.2, 0.3 ) );
    }

    wait 2;

    foreach ( ent in ents )
        ent delete();
}
