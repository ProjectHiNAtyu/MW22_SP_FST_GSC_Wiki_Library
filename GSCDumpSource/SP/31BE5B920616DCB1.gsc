// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    _id_4BC6EB9CAF7F6F1A = getentarray( "script_light", "targetname" );
    _id_C1635F22B2E4B127 = getentarray( "script_light_toggle", "targetname" );
    _id_817F3BFE5E36AD2D = getentarray( "script_light_destructable", "targetname" );
    _id_5317FEE07ACAB079 = getentarray( "script_light_flicker", "targetname" );
    _id_32CB74B7AB6A826E = getentarray( "script_light_pulse", "targetname" );
    _id_74EC32F58E0C8F14 = getentarray( "generic_double_strobe", "targetname" );
    burning_trash_fire = getentarray( "burning_trash_fire", "targetname" );
    _id_DA92CCFD1C9637E2 = getentarray( "cine_tank_fire", "targetname" );
    _id_855B623BF1B4FB59 = getentarray( "generic_pulsing", "targetname" );
    scripts\engine\utility::array_thread( _id_4BC6EB9CAF7F6F1A, ::init_light_generic_iw7 );
    scripts\engine\utility::array_thread( _id_C1635F22B2E4B127, ::init_light_generic_iw7 );
    scripts\engine\utility::array_thread( _id_817F3BFE5E36AD2D, ::init_light_destructable );
    scripts\engine\utility::array_thread( _id_5317FEE07ACAB079, ::init_light_flicker );
    scripts\engine\utility::array_thread( _id_32CB74B7AB6A826E, ::init_light_pulse_iw7 );
    scripts\engine\utility::array_thread( _id_74EC32F58E0C8F14, ::generic_double_strobe );
    scripts\engine\utility::array_thread( burning_trash_fire, ::burning_trash_fire );
    scripts\engine\utility::array_thread( _id_855B623BF1B4FB59, ::generic_pulsing );
    scripts\engine\utility::array_thread( _id_DA92CCFD1C9637E2, ::_id_DA92CCFD1C9637E2 );
    lights = getentarray( "light_spot", "classname" );
    lights = scripts\engine\utility::array_combine( getentarray( "light_omni", "classname" ), lights );
    lights = scripts\engine\utility::array_combine( getentarray( "light", "classname" ), lights );

    foreach ( light in lights )
    {
        if ( !isdefined( light.script_type ) )
            continue;

        switch ( light.script_type )
        {
            case "pulse":
                light thread init_pulse();
                break;
            case "strobe":
                light thread init_strobe();
                break;
        }
    }
}

init_pulse()
{
    init_light();

    if ( getdvarint( "dvar_E6AFCE2CF5CF7515" ) == 1 )
        return;

    thread light_think();
}

init_strobe()
{
    init_light();

    if ( getdvarint( "dvar_E6AFCE2CF5CF7515" ) == 1 )
        return;

    if ( !isdefined( self.script_delay2 ) && !isdefined( self.script_delay2_max ) && !isdefined( self.script_delay2_min ) )
        self.script_delay2 = 0.1;

    thread light_think();
}

light_think()
{
    self endon( "death" );
    _id_D0937A8376E6D93B = self.script_intensity < self.script_intensity2;
    _id_1E6D224371BE587C = _id_D0937A8376E6D93B;

    if ( isdefined( self.script_flag ) && !scripts\engine\utility::flag( self.script_flag ) )
    {
        if ( isdefined( self.script_start_intensity ) )
            set_lights_internal( self.script_start_intensity );
        else if ( isdefined( self.script_start_state ) )
        {
            if ( self.script_start_state == "on" )
                _id_1E6D224371BE587C = !_id_D0937A8376E6D93B;
        }
    }

    started = 0;

    for (;;)
    {
        if ( isdefined( self.script_flag ) )
        {
            if ( !scripts\engine\utility::flag( self.script_flag ) )
            {
                if ( !started )
                {
                    if ( self.script_start_state == "off" )
                        set_lights_internal( 0 );
                    else
                        set_light_values_by_frac( _id_1E6D224371BE587C );
                }
                else if ( isdefined( self._id_7E92C50BF639C26E ) )
                    set_lights_internal( self._id_7E92C50BF639C26E );
                else
                    set_light_values_by_frac( _id_D0937A8376E6D93B );

                scripts\engine\utility::flag_wait( self.script_flag );
            }
        }

        if ( !started )
        {
            started = 1;
            start_delay();
        }

        switch ( self.script_type )
        {
            case "pulse":
                pulse();
                break;
            case "strobe":
                strobe();
                break;
        }
    }
}

pulse()
{
    self endon( "death" );
    time = get_script_delay();

    if ( has_script_delay2() )
        time = get_script_delay2();
    else
        time = get_script_delay();

    light_lerp( time );

    if ( has_script_wait() )
        scripts\engine\utility::script_wait();

    if ( has_script_delay2() )
        time = get_script_delay2();
    else
        time = get_script_delay();

    light_lerp( time, 1 );
}

strobe()
{
    self endon( "death" );
    set_light_values_by_frac( 1 );
    time = get_script_delay();
    wait( time );
    count = get_script_loop();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < count; _id_AC0E594AC96AA3A8++ )
    {
        set_light_values_by_frac( 0 );

        if ( has_script_delay2() )
            time = get_script_delay2();
        else
            time = get_script_delay();

        wait( time );
        set_light_values_by_frac( 1 );

        if ( _id_AC0E594AC96AA3A8 == count - 1 )
            break;

        if ( has_script_delay2() )
            time = get_script_delay2();
        else
            time = get_script_delay();

        wait( time );
    }

    if ( has_script_wait() )
        scripts\engine\utility::script_wait();
}

light_lerp( time, _id_B1EE44C8F46F63BD )
{
    self endon( "death" );

    if ( !isdefined( _id_B1EE44C8F46F63BD ) )
        _id_B1EE44C8F46F63BD = 0;

    _id_63F445469B886BF8 = int( time * 20 );
    intensity_inc = ( self.script_intensity - self.script_intensity2 ) / _id_63F445469B886BF8;
    color = undefined;
    _id_A58217123877EFA3 = undefined;

    if ( has_script_color() )
        _id_A58217123877EFA3 = ( self.script_color - self.script_color2 ) / _id_63F445469B886BF8;

    for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < _id_63F445469B886BF8; _id_AC0E594AC96AA3A8++ )
    {
        if ( _id_B1EE44C8F46F63BD )
            frac = 1 - _id_AC0E594AC96AA3A8 / _id_63F445469B886BF8;
        else
            frac = _id_AC0E594AC96AA3A8 / _id_63F445469B886BF8;

        set_light_values_by_frac( frac );
        waitframe();
    }

    if ( _id_B1EE44C8F46F63BD )
        frac = 0;
    else
        frac = 1;

    set_light_values_by_frac( frac );
    waitframe();
}

set_light_values_by_frac( frac )
{
    intensity = scripts\engine\math::lerp( self.script_intensity2, self.script_intensity, frac );
    color = undefined;

    if ( has_script_color() )
        color = vectorlerp( self.script_color, self.script_color2, frac );

    set_lights_internal( intensity, color );
}

set_lights_internal( intensity, color )
{
    if ( isdefined( intensity ) )
    {
        self setlightintensity( intensity );

        if ( isdefined( self.linked_lights ) )
            scripts\engine\utility::array_call( self.linked_lights, ::setlightintensity, intensity );
    }

    if ( isdefined( color ) )
    {
        self _meth_8A5136D4D87795D4( color );

        if ( isdefined( self.linked_lights ) )
            scripts\engine\utility::array_call( self.linked_lights, ::_meth_8A5136D4D87795D4, color );
    }

    if ( intensity > 0.0001 )
        set_light_parts_on();
    else if ( intensity < 0.0001 )
        set_light_parts_off();
}

set_light_parts_on()
{
    scripts\engine\utility::ent_flag_set( "light_on" );

    if ( isdefined( self.script_prefab_exploder ) )
        scripts\engine\utility::exploder( self.script_prefab_exploder );

    if ( isdefined( self.scriptables ) )
    {
        foreach ( scriptable in self.scriptables )
            scriptable setscriptablepartstate( "onoff", "on" );
    }

    scripts\engine\utility::array_call( self.models_unlit, ::hide );

    foreach ( model in self.models_lit )
    {
        model show();

        if ( isdefined( model.script_fxid ) )
        {
            if ( isdefined( model.fxobj ) )
                model.fxobj delete();

            model.fxobj = spawnfx( scripts\engine\utility::getfx( model.script_fxid ), model.fx_origin, model.fx_forward, model.fx_up );
            triggerfx( model.fxobj );
            model.fxobj willneverchange();
        }
    }
}

set_light_parts_off()
{
    scripts\engine\utility::ent_flag_clear( "light_on" );

    if ( isdefined( self.script_prefab_exploder ) )
        scripts\engine\utility::stop_exploder( self.script_prefab_exploder );

    if ( isdefined( self.scriptables ) )
    {
        foreach ( scriptable in self.scriptables )
            scriptable setscriptablepartstate( "onoff", "off" );
    }

    foreach ( model in self.models_lit )
    {
        model hide();

        if ( isdefined( model.fxobj ) )
            model.fxobj delete();
    }

    scripts\engine\utility::array_call( self.models_unlit, ::show );
}

init_light()
{
    self.script_intensity = get_defined_value( [ self.script_intensity, self getlightintensity() ] );
    self.script_color = get_defined_value( [ self.script_color, self _meth_CDD36EB036403400() ] );
    self.script_intensity2 = get_defined_value( [ self.script_intensity2, 0 ] );
    self.script_color2 = get_defined_value( [ self.script_color2 ] );
    self.script_notify_start = get_defined_value( [ self.script_notify_start ] );
    self.script_notify_stop = get_defined_value( [ self.script_notify_stop ] );
    self.script_startrunning = get_defined_value( [ self.script_startrunning ] );

    if ( !isdefined( self.script_delay ) && !isdefined( self.script_delay_max ) && !isdefined( self.script_delay_min ) )
        self.script_delay = 0.8;

    if ( !scripts\engine\utility::ent_flag_exist( "light_on" ) )
        scripts\engine\utility::ent_flag_init( "light_on" );

    self.models_lit = [];
    self.models_unlit = [];
    self.linked_lights = [];
    self.triggers = [];
    ents = scripts\engine\utility::get_linked_ents();

    foreach ( ent in ents )
    {
        if ( is_light_entity( ent ) )
        {
            self.linked_lights[self.linked_lights.size] = ent;
            continue;
        }

        if ( isdefined( ent.script_noteworthy ) && ent.script_noteworthy == "on" )
        {
            self.models_lit[self.models_lit.size] = ent;
            continue;
        }

        if ( isdefined( ent.script_noteworthy ) && ent.script_noteworthy == "off" )
        {
            self.models_unlit[self.models_unlit.size] = ent;
            continue;
        }

        if ( ent.code_classname == "trigger_multiple" || ent.code_classname == "trigger_once" )
            self.triggers[self.triggers.size] = ent;
    }

    if ( getdvarint( "dvar_E6AFCE2CF5CF7515" ) == 1 )
    {
        set_light_parts_off();
        set_lights_values( 0 );
        return;
    }

    scripts\engine\utility::flag_wait( "scriptables_ready" );

    if ( isdefined( self.target ) )
        self.scriptables = getscriptablearray( self.target, "targetname" );

    scripts\engine\utility::array_thread( self.triggers, ::trigger_light, self );

    foreach ( model in self.models_lit )
    {
        if ( isdefined( model.script_fxid ) )
        {
            if ( isdefined( model.script_offset ) )
                origin = model.origin + model.script_offset;
            else
                origin = model.origin;

            if ( isdefined( model.script_angles ) )
                angles = model.angles + model.script_angles;
            else
                angles = model.angles;

            model.fx_origin = origin;
            model.fx_forward = anglestoforward( angles );
            model.fx_up = anglestoup( angles );
            model.fxobj = spawnfx( scripts\engine\utility::getfx( model.script_fxid ), model.fx_origin, model.fx_forward, model.fx_up );
        }
    }

    self notify( "init_light_complete" );
}

trigger_light( light )
{
    self endon( "death" );

    if ( isdefined( self.script_noteworthy ) && self.script_noteworthy == "stop" )
    {
        _id_A234A65C378F3289 = "trigger_light_stop";
        light.trig_notify_stop = _id_A234A65C378F3289;
    }
    else
    {
        _id_A234A65C378F3289 = "trigger_light_start";
        light.trig_notify_start = _id_A234A65C378F3289;
    }

    self waittill( "trigger" );

    if ( isdefined( light ) )
        light notify( _id_A234A65C378F3289 );
}

get_defined_value( _id_1802F815DF0FBEC8 )
{
    foreach ( value in _id_1802F815DF0FBEC8 )
    {
        if ( isdefined( value ) )
            return value;
    }

    return undefined;
}

start_delay()
{
    if ( isdefined( self.script_startdelay_min ) && isdefined( self.script_startdelay_max ) )
        wait( randomfloatrange( self.script_startdelay_min, self.script_startdelay_max ) );
    else if ( isdefined( self.script_startdelay ) )
        wait( self.script_startdelay );
}

script_delay2()
{
    if ( isdefined( self.script_delay2_min ) && isdefined( self.script_delay2_max ) )
        wait( randomfloatrange( self.script_wait2_min, self.script_delay2_max ) );
    else if ( isdefined( self.script_delay2 ) )
        wait( self.script_delay2 );
}

get_script_delay()
{
    if ( isdefined( self.script_delay_min ) && isdefined( self.script_delay_max ) )
        return randomfloatrange( self.script_delay_min, self.script_delay_max );
    else if ( isdefined( self.script_delay ) )
        return self.script_delay;

    return 0;
}

get_script_delay2()
{
    if ( isdefined( self.script_delay2_min ) && isdefined( self.script_delay2_max ) )
        return randomfloatrange( self.script_delay2_min, self.script_delay2_max );
    else if ( isdefined( self.script_delay2 ) )
        return self.script_delay2;

    return 0;
}

get_script_loop()
{
    if ( isdefined( self.script_count_min ) && isdefined( self.script_count_max ) )
        return randomintrange( self.script_count_min, self.script_count_max );
    else if ( isdefined( self.script_count ) )
        return self.script_count;

    return 1;
}

has_script_delay2()
{
    if ( isdefined( self.script_delay2_min ) && isdefined( self.script_delay2_max ) )
        return 1;
    else if ( isdefined( self.script_delay2 ) )
        return 1;

    return 0;
}

has_script_wait()
{
    if ( isdefined( self.script_wait_min ) && isdefined( self.script_wait_max ) )
        return 1;
    else if ( isdefined( self.script_wait ) )
        return 1;

    return 0;
}

has_script_color()
{
    if ( isdefined( self.script_color ) && isdefined( self.script_color2 ) )
        return 1;

    return 0;
}

_id_0ADB0429DE1A7284( trigger )
{
    trigger endon( "death" );
    lights = getentarray( trigger.target, "targetname" );

    foreach ( light in lights )
    {
        light.og_intensity = light getlightintensity();
        light setlightintensity( 0 );
    }

    if ( getdvarint( "dvar_E6AFCE2CF5CF7515" ) == 1 )
        return;

    for (;;)
    {
        trigger waittill( "trigger", other );

        foreach ( light in lights )
            light setlightintensity( light.og_intensity );

        while ( other istouching( trigger ) )
            wait 0.1;

        foreach ( light in lights )
            light setlightintensity( 0 );
    }
}

light_debug_thread()
{
    lights = getentarray( "light_spot", "classname" );
    lights = scripts\engine\utility::array_combine( getentarray( "light_omni", "classname" ), lights );

    for (;;)
    {
        _id_0EEF67125F5FBD62 = 0;

        foreach ( light in lights )
        {
            if ( isdefined( light ) )
            {
                light light_debug_draw();
                continue;
            }

            _id_0EEF67125F5FBD62 = 1;
        }

        if ( _id_0EEF67125F5FBD62 )
            lights = scripts\engine\utility::array_removeundefined( lights );

        waitframe();
    }
}

light_debug_draw()
{
    if ( distancesquared( self.origin, level.player.origin ) < 2000 )
        return;

    light_debug_print3d( "Intensity: " + self getlightintensity() );
}

light_debug_print3d( msg )
{
    if ( !isdefined( msg ) )
        return;
}

init_light_generic_iw7( intensity_01, color_01, intensity_02, color_02, notify_start, notify_stop, start_running, _id_2ED5969C74EC5ACE )
{
    if ( isdefined( self.script_type ) )
        return;

    wait 0.05;
    self.intensity_01 = get_defined_value( [ self.script_intensity_01, intensity_01, self getlightintensity() ] );
    self.color_01 = get_defined_value( [ self.script_color_01, color_01, self _meth_CDD36EB036403400() ] );
    self.intensity_02 = get_defined_value( [ self.script_intensity_02, intensity_02, 0 ] );
    self.color_02 = get_defined_value( [ self.script_color_02, color_02, ( 0, 0, 0 ) ] );
    self.notify_start = get_defined_value( [ self.script_light_startnotify, notify_start ] );
    self.notify_stop = get_defined_value( [ self.script_light_stopnotify, notify_stop ] );
    self.start_running = get_defined_value( [ self.script_startrunning, start_running ] );
    self.light_type = get_defined_value( [ self.script_type, "generic" ] );
    self.delay_start = issubstr( self.light_type, "delaystart" );

    if ( !scripts\engine\utility::ent_flag_exist( "light_on" ) )
        scripts\engine\utility::ent_flag_init( "light_on" );

    self.lit_models = [];
    self.unlit_models = [];
    self.linked_lights = [];
    self.triggers = [];
    ents = scripts\engine\utility::get_linked_ents();

    foreach ( ent in ents )
    {
        if ( is_light_entity( ent ) )
        {
            self.linked_lights[self.linked_lights.size] = ent;
            continue;
        }

        if ( isdefined( ent.script_noteworthy ) && ent.script_noteworthy == "on" )
        {
            self.lit_models[self.lit_models.size] = ent;
            continue;
        }

        if ( isdefined( ent.script_noteworthy ) && ent.script_noteworthy == "off" )
        {
            self.unlit_models[self.unlit_models.size] = ent;
            continue;
        }

        if ( issubstr( ent.classname, "trigger" ) )
            self.triggers[self.triggers.size] = ent;
    }

    if ( getdvar( "dvar_E6AFCE2CF5CF7515" ) == "1" )
    {
        set_lights_values( 0, ( 0, 0, 0 ) );
        return;
    }

    scripts\engine\utility::flag_wait( "scriptables_ready" );

    if ( isdefined( self.target ) )
        self.scriptables = getscriptablearray( self.target, "targetname" );

    if ( self.lit_models.size != 0 || self.unlit_models.size != 0 )
    {

    }

    scripts\engine\utility::array_thread( self.triggers, ::init_light_trig, self );

    foreach ( model in self.lit_models )
    {
        if ( isdefined( model.script_fxid ) )
        {
            model.effect = scripts\engine\utility::createoneshoteffect( model.script_fxid );
            _id_A175C1A2EDCF2C02 = ( 0, 0, 0 );
            _id_D6EEB4795094DE80 = ( 0, 0, 0 );

            if ( isdefined( model.script_parameters ) )
            {
                _id_67F14F8315CB0F2F = strtok( model.script_parameters, ", " );
                _id_A175C1A2EDCF2C02 = ( float( _id_67F14F8315CB0F2F[0] ), float( _id_67F14F8315CB0F2F[1] ), float( _id_67F14F8315CB0F2F[2] ) );

                if ( _id_67F14F8315CB0F2F.size >= 6 )
                    _id_D6EEB4795094DE80 = ( float( _id_67F14F8315CB0F2F[3] ), float( _id_67F14F8315CB0F2F[4] ), float( _id_67F14F8315CB0F2F[5] ) );
            }

            model.effect scripts\common\createfx::set_origin_and_angles( model.origin + _id_A175C1A2EDCF2C02, model.angles + _id_D6EEB4795094DE80 );
        }
    }

    self.init_complete = 1;
    self notify( "script_light_init_complete" );

    if ( isdefined( _id_2ED5969C74EC5ACE ) && _id_2ED5969C74EC5ACE )
        return;

    if ( isdefined( self.notify_start ) || isdefined( self.notify_stop ) || self.triggers.size > 0 )
        thread light_toggle_loop();
}

init_light_destructable()
{
    if ( isdefined( self.script_type ) )
        return;

    init_light_generic_iw7();
}

light_toggle_loop()
{
    self endon( "death" );
    self notify( "stop_script_light_loop" );
    self endon( "stop_script_light_loop" );

    if ( isdefined( self.start_running ) && self.start_running )
        light_turn_on();
    else if ( isdefined( self.notify_start ) || isdefined( self.trig_notify_start ) )
        light_turn_off();

    for (;;)
    {
        if ( !scripts\engine\utility::ent_flag( "light_on" ) )
        {
            level scripts\engine\utility::waittill_any( "FAKE_WAITTILL", self.trig_notify_start, self.notify_start );
            scripts\engine\utility::script_delay();

            if ( isdefined( self.delay_start ) )
            {
                if ( isdefined( self.script_delay ) )
                    self.old_script_delay = self.script_delay;

                if ( isdefined( self.script_delay_max ) )
                    self.old_script_delay_max = self.script_delay_max;

                if ( isdefined( self.script_delay_min ) )
                    self.old_script_delay_min = self.script_delay_min;

                self.script_delay = undefined;
                self.script_delay_max = undefined;
                self.script_delay_min = undefined;
            }

            light_turn_on();
        }

        level scripts\engine\utility::waittill_any( "FAKE_WAITTILL", self.trig_notify_stop, self.notify_stop );
        scripts\engine\utility::script_delay();

        if ( isdefined( self.delay_start ) )
        {
            if ( isdefined( self.script_delay ) )
                self.old_script_delay = self.script_delay;

            if ( isdefined( self.script_delay_max ) )
                self.old_script_delay_max = self.script_delay_max;

            if ( isdefined( self.script_delay_min ) )
                self.old_script_delay_min = self.script_delay_min;

            self.script_delay = undefined;
            self.script_delay_max = undefined;
            self.script_delay_min = undefined;
        }

        light_turn_off();

        if ( isdefined( self.old_script_delay ) )
            self.script_delay = self.old_script_delay;

        if ( isdefined( self.old_script_delay_max ) )
            self.script_delay_max = self.old_script_delay_max;

        if ( isdefined( self.old_script_delay_min ) )
            self.script_delay_min = self.old_script_delay_min;

        wait 0.05;
    }
}

init_light_flicker( intensity_01, color_01, wait_01_min, wait_01_max, intensity_02, color_02, wait_02_min, wait_02_max, speed_scale, notify_start, notify_stop, start_running, light_type, on_off_time, _id_2ED5969C74EC5ACE )
{
    if ( isdefined( self.script_type ) )
        return;

    init_light_generic_iw7( intensity_01, color_01, intensity_02, color_02, notify_start, notify_stop, start_running, 1 );

    if ( getdvar( "dvar_E6AFCE2CF5CF7515" ) == "1" )
        return;

    make_light_flicker( wait_01_min, wait_01_max, wait_02_min, wait_02_max, speed_scale, light_type, on_off_time );

    if ( isdefined( _id_2ED5969C74EC5ACE ) && _id_2ED5969C74EC5ACE )
        return;

    thread start_light_flicker();
}

make_light_flicker( wait_01_min, wait_01_max, wait_02_min, wait_02_max, speed_scale, light_type, on_off_time )
{
    init_light_type( light_type );
    self.speed_scale = get_defined_value( [ self.script_speed_scale, speed_scale, 1 ] );
    self.on_off_time = max( get_defined_value( [ self.script_duration, on_off_time, 3 ] ) / self.speed_scale, 0.25 );

    if ( isdefined( self.script_wait_01_min ) && isdefined( self.script_wait_01_max ) )
        self.hi_wait = max( get_defined_value( [ self.script_wait_01_min, self.script_wait_01_max ] ) / self.speed_scale, 0.05 );
    else
    {
        self.wait_01_min = max( get_defined_value( [ self.script_wait_01_min, wait_01_min, 0.05 ] ) / self.speed_scale, 0.05 );
        self.wait_01_max = max( get_defined_value( [ self.script_wait_01_max, wait_01_max, 0.1 ] ) / self.speed_scale, 0.1 );

        if ( self.wait_01_min > self.wait_01_max )
        {
            max = self.wait_01_max;
            self.wait_01_max = self.wait_01_min;
            self.wait_01_min = max;
        }
    }

    if ( isdefined( self.script_wait_02_min ) && isdefined( self.script_wait_02_max ) )
        self.lo_wait = max( get_defined_value( [ self.script_wait_02_min, self.script_wait_02_max ] ) / self.speed_scale, 0.05 );
    else
    {
        self.wait_02_min = max( get_defined_value( [ self.script_wait_02_min, wait_02_min, 0.05 ] ) / self.speed_scale, 0.05 );
        self.wait_02_max = max( get_defined_value( [ self.script_wait_02_max, wait_02_max, 0.75 ] ) / self.speed_scale, 0.1 );

        if ( self.wait_02_min > self.wait_02_max )
        {
            max = self.wait_02_max;
            self.wait_02_max = self.wait_02_min;
            self.wait_02_min = max;
        }
    }
}

start_light_flicker()
{
    if ( self.type_on || self.type_off )
        thread light_flicker_on_off_loop();
    else
        thread light_flicker_loop();
}

light_flicker_loop()
{
    self endon( "death" );
    self notify( "stop_script_light_loop" );
    self endon( "stop_script_light_loop" );

    if ( isdefined( self.start_running ) && self.start_running )
        light_turn_on();
    else if ( isdefined( self.notify_start ) || isdefined( self.trig_notify_start ) )
        light_turn_off( undefined, self.two_color );

    if ( isdefined( self.notify_start ) && isdefined( self.notify_stop ) )
    {
        for (;;)
        {
            scripts\engine\utility::script_delay();

            if ( isdefined( self.delay_start ) )
            {
                if ( isdefined( self.script_delay ) )
                    self.old_script_delay = self.script_delay;

                if ( isdefined( self.script_delay_max ) )
                    self.old_script_delay_max = self.script_delay_max;

                if ( isdefined( self.script_delay_min ) )
                    self.old_script_delay_min = self.script_delay_min;

                self.script_delay = undefined;
                self.script_delay_max = undefined;
                self.script_delay_min = undefined;
            }

            light_flicker_proc();

            if ( isdefined( self.start_running ) && self.start_running )
                light_turn_on();
            else
                light_turn_off( undefined, self.two_color );

            if ( isdefined( self.old_script_delay ) )
                self.script_delay = self.old_script_delay;

            if ( isdefined( self.old_script_delay_max ) )
                self.script_delay_max = self.old_script_delay_max;

            if ( isdefined( self.old_script_delay_min ) )
                self.script_delay_min = self.old_script_delay_min;

            waitframe();
        }
    }
    else
    {
        light_flicker_proc();

        if ( isdefined( self.start_running ) && self.start_running )
        {
            light_turn_on();
            return;
        }

        light_turn_off( undefined, self.two_color );
    }
}

light_flicker_on_off_loop()
{
    self endon( "death" );
    self notify( "stop_script_light_loop" );
    self endon( "stop_script_light_loop" );

    if ( isdefined( self.start_running ) && self.start_running )
        light_turn_on();
    else if ( isdefined( self.notify_start ) || isdefined( self.trig_notify_start ) )
        light_turn_off( undefined, self.two_color );

    for (;;)
    {
        if ( !scripts\engine\utility::ent_flag( "light_on" ) && ( isdefined( self.trig_notify_start ) || isdefined( self.notify_start ) ) )
            level scripts\engine\utility::waittill_any( "FAKE_WAITTILL", self.trig_notify_start, self.notify_start );

        scripts\engine\utility::script_delay();

        if ( isdefined( self.delay_start ) )
        {
            if ( isdefined( self.script_delay ) )
                self.old_script_delay = self.script_delay;

            if ( isdefined( self.script_delay_max ) )
                self.old_script_delay_max = self.script_delay_max;

            if ( isdefined( self.script_delay_min ) )
                self.old_script_delay_min = self.script_delay_min;

            self.script_delay = undefined;
            self.script_delay_max = undefined;
            self.script_delay_min = undefined;
        }

        if ( self.type_on && !scripts\engine\utility::ent_flag( "light_on" ) )
        {
            childthread light_flicker_proc( 1, self.random_intensity_on );

            if ( self.static_time )
                wait( self.on_off_time );
            else
                wait( randomfloat( self.on_off_time ) );

            self notify( "stop_flicker" );
        }

        light_turn_on();

        if ( !isdefined( self.notify_start ) && !isdefined( self.trig_notify_start ) )
            return;

        if ( !self.type_run )
            level scripts\engine\utility::waittill_any( "FAKE_WAITTILL", self.trig_notify_stop, self.notify_stop );
        else
            light_flicker_proc( 1 );

        if ( self.type_off )
        {
            childthread light_flicker_proc( 1, self.random_intensity_off );

            if ( self.static_time )
                wait( self.on_off_time );
            else
                wait( randomfloat( self.on_off_time ) );

            self notify( "stop_flicker" );
        }

        light_turn_off( undefined, self.two_color );

        if ( isdefined( self.old_script_delay ) )
            self.script_delay = self.old_script_delay;

        if ( isdefined( self.old_script_delay_max ) )
            self.script_delay_max = self.old_script_delay_max;

        if ( isdefined( self.old_script_delay_min ) )
            self.script_delay_min = self.old_script_delay_min;

        wait 0.05;

        if ( !isdefined( self.notify_start ) && !isdefined( self.notify_stop ) )
            return;
    }
}

light_flicker_proc( _id_15A6D57C9A0A2DAC, _id_C4AEB5479D7D9620 )
{
    self notify( "stop_flicker" );
    self endon( "stop_flicker" );

    if ( isdefined( self.trig_notify_stop ) )
        level endon( self.trig_notify_stop );

    if ( isdefined( self.notify_stop ) )
        level endon( self.notify_stop );

    if ( !isdefined( _id_15A6D57C9A0A2DAC ) && ( isdefined( self.trig_notify_start ) || isdefined( self.notify_start ) ) )
        level scripts\engine\utility::waittill_any( "FAKE_WAITTILL", self.trig_notify_start, self.notify_start );

    for (;;)
    {
        light_turn_on( _id_C4AEB5479D7D9620 );

        if ( isdefined( self.hi_wait ) )
            wait( self.hi_wait );
        else
            wait( randomfloatrange( self.wait_01_min, self.wait_01_max ) );

        light_turn_off( _id_C4AEB5479D7D9620 );

        if ( isdefined( self.lo_wait ) )
        {
            wait( self.lo_wait );
            continue;
        }

        wait( randomfloatrange( self.wait_02_min, self.wait_02_max ) );
    }
}

init_light_pulse_iw7( intensity_01, color_01, wait_01_min, wait_01_max, intensity_02, color_02, wait_02_min, wait_02_max, speed_scale, notify_start, notify_stop, start_running, light_type, on_off_time, _id_2ED5969C74EC5ACE )
{
    if ( isdefined( self.script_type ) )
        return;

    init_light_generic_iw7( intensity_01, color_01, intensity_02, color_02, notify_start, notify_stop, undefined, 1 );

    if ( getdvar( "dvar_E6AFCE2CF5CF7515" ) == "1" )
        return;

    make_light_pulse( wait_01_min, wait_01_max, wait_02_min, wait_02_max, speed_scale, light_type, on_off_time, start_running );

    if ( isdefined( _id_2ED5969C74EC5ACE ) && _id_2ED5969C74EC5ACE )
        return;

    thread start_light_pulse();
}

make_light_pulse( wait_01_min, wait_01_max, wait_02_min, wait_02_max, speed_scale, light_type, on_off_time, start_running )
{
    self.start_running = get_defined_value( [ self.script_startrunning, start_running, 1 ] );
    init_light_type( light_type );
    self.speed_scale = get_defined_value( [ self.script_speed_scale, speed_scale, 1 ] );
    self.on_off_time = max( get_defined_value( [ self.script_duration, on_off_time, 3 ] ) / self.speed_scale, 3 );

    if ( isdefined( self.script_wait_01_min ) && !isdefined( self.script_wait_01_max ) || !isdefined( self.script_wait_01_min ) && isdefined( self.script_wait_01_max ) )
        self.hi_wait = max( get_defined_value( [ self.script_wait_01_min, self.script_wait_01_max ] ) / self.speed_scale, 0.05 );
    else
    {
        self.wait_01_min = max( get_defined_value( [ self.script_wait_01_min, wait_01_min, 0.05 ] ) / self.speed_scale, 0.05 );
        self.wait_01_max = max( get_defined_value( [ self.script_wait_01_max, wait_01_max, 0.5 ] ) / self.speed_scale, 0.1 );

        if ( self.wait_01_min > self.wait_01_max )
        {
            max = self.wait_01_max;
            self.wait_01_max = self.wait_01_min;
            self.wait_01_min = max;
        }
    }

    if ( isdefined( self.script_wait_02_min ) && !isdefined( self.script_wait_02_max ) || !isdefined( self.script_wait_02_min ) && isdefined( self.script_wait_02_max ) )
    {
        self.lo_wait = max( get_defined_value( [ self.script_wait_02_min, self.script_wait_02_max ] ) / self.speed_scale, 0.05 );
        _id_63F445469B886BF8 = int( self.lo_wait * 20 );
        self.step_inc = 2 / _id_63F445469B886BF8;
        self.intensity_inc = 2 * ( self.intensity_01 - self.intensity_02 ) / _id_63F445469B886BF8;
    }
    else
    {
        self.wait_02_min = max( get_defined_value( [ self.script_wait_02_min, wait_02_min, 0.25 ] ) / self.speed_scale, 0.05 );
        self.wait_02_max = max( get_defined_value( [ self.script_wait_02_max, wait_02_max, 0.75 ] ) / self.speed_scale, 0.1 );

        if ( self.wait_02_min > self.wait_02_max )
        {
            max = self.wait_02_max;
            self.wait_02_max = self.wait_02_min;
            self.wait_02_min = max;
        }

        _id_63F445469B886BF8 = int( self.wait_02_max * 20 );
        self.step_inc = 2 / _id_63F445469B886BF8;
        self.intensity_inc = 2 * ( self.intensity_01 - self.intensity_02 ) / _id_63F445469B886BF8;
    }
}

start_light_pulse()
{
    if ( self.type_on || self.type_off )
        thread light_pulse_on_off_loop();
    else
        thread light_pulse_loop();
}

light_pulse_loop()
{
    self endon( "death" );
    self notify( "stop_script_light_loop" );
    self endon( "stop_script_light_loop" );

    if ( isdefined( self.start_running ) && self.start_running )
        light_turn_on();
    else if ( isdefined( self.notify_start ) || isdefined( self.trig_notify_start ) )
        light_turn_off( undefined, self.two_color );

    if ( isdefined( self.notify_start ) && isdefined( self.notify_stop ) )
    {
        for (;;)
        {
            light_pulse_proc_iw7();

            if ( isdefined( self.start_running ) && self.start_running )
                light_turn_on();
            else
                light_turn_off( undefined, self.two_color );

            waitframe();
        }
    }
    else
    {
        light_pulse_proc_iw7();

        if ( isdefined( self.start_running ) && self.start_running )
        {
            light_turn_on();
            return;
        }

        light_turn_off( undefined, self.two_color );
    }
}

light_pulse_on_off_loop()
{
    self endon( "death" );
    self notify( "stop_script_light_loop" );
    self endon( "stop_script_light_loop" );

    if ( isdefined( self.start_running ) && self.start_running )
        light_turn_on();
    else if ( isdefined( self.notify_start ) || isdefined( self.trig_notify_start ) )
        light_turn_off( undefined, self.two_color );

    for (;;)
    {
        if ( !scripts\engine\utility::ent_flag( "light_on" ) && ( isdefined( self.trig_notify_start ) || isdefined( self.notify_start ) ) )
            level scripts\engine\utility::waittill_any( "FAKE_WAITTILL", self.trig_notify_start, self.notify_start );

        scripts\engine\utility::script_delay();

        if ( isdefined( self.delay_start ) )
        {
            if ( isdefined( self.script_delay ) )
                self.old_script_delay = self.script_delay;

            if ( isdefined( self.script_delay_max ) )
                self.old_script_delay_max = self.script_delay_max;

            if ( isdefined( self.script_delay_min ) )
                self.old_script_delay_min = self.script_delay_min;

            self.script_delay = undefined;
            self.script_delay_max = undefined;
            self.script_delay_min = undefined;
        }

        if ( self.type_on && !scripts\engine\utility::ent_flag( "light_on" ) )
        {
            childthread light_pulse_proc_iw7( 1 );

            if ( self.static_time )
                wait( self.on_off_time );
            else
                wait( randomfloat( self.on_off_time ) );

            self notify( "stop_pulse" );
        }

        light_turn_on();

        if ( !isdefined( self.notify_start ) && !isdefined( self.trig_notify_start ) )
            return;

        if ( !self.type_run )
            level scripts\engine\utility::waittill_any( "FAKE_WAITTILL", self.trig_notify_stop, self.notify_stop );
        else
            light_pulse_proc_iw7( 1 );

        if ( self.type_off )
        {
            childthread light_pulse_proc_iw7( 1 );

            if ( self.static_time )
                wait( self.on_off_time );
            else
                wait( randomfloat( self.on_off_time ) );

            self notify( "stop_flicker" );
        }

        light_turn_off( undefined, self.two_color );

        if ( isdefined( self.old_script_delay ) )
            self.script_delay = self.old_script_delay;

        if ( isdefined( self.old_script_delay_max ) )
            self.script_delay_max = self.old_script_delay_max;

        if ( isdefined( self.old_script_delay_min ) )
            self.script_delay_min = self.old_script_delay_min;

        waitframe();

        if ( !isdefined( self.notify_start ) && !isdefined( self.notify_stop ) )
            return;
    }
}

light_pulse_proc_iw7( _id_15A6D57C9A0A2DAC )
{
    self notify( "stop_pulse" );
    self endon( "stop_pulse" );

    if ( isdefined( self.trig_notify_stop ) )
        level endon( self.trig_notify_stop );

    if ( isdefined( self.notify_stop ) )
        level endon( self.notify_stop );

    if ( !isdefined( _id_15A6D57C9A0A2DAC ) && ( isdefined( self.trig_notify_start ) || isdefined( self.notify_start ) ) )
        level scripts\engine\utility::waittill_any( "FAKE_WAITTILL", self.trig_notify_start, self.notify_start );

    for (;;)
    {
        light_turn_on();

        if ( isdefined( self.hi_wait ) )
            wait( self.hi_wait );
        else
            wait( randomfloatrange( self.wait_01_min, self.wait_01_max ) );

        if ( isdefined( self.lo_wait ) )
        {
            light_pulse( self.lo_wait );
            continue;
        }

        light_pulse( randomfloatrange( self.wait_02_min, self.wait_02_max ) );
    }
}

init_light_trig( light )
{
    self endon( "death" );

    if ( isdefined( self.script_noteworthy ) && self.script_noteworthy == "stop" )
    {
        _id_A234A65C378F3289 = "trigger_light_stop";
        light.trig_notify_stop = _id_A234A65C378F3289;
    }
    else
    {
        _id_A234A65C378F3289 = "trigger_light_start";
        light.trig_notify_start = _id_A234A65C378F3289;
    }

    self waittill( "trigger" );

    if ( isdefined( light ) )
        light notify( _id_A234A65C378F3289 );
}

light_turn_on( _id_C4AEB5479D7D9620 )
{
    scripts\engine\utility::ent_flag_set( "light_on" );

    if ( isdefined( _id_C4AEB5479D7D9620 ) && _id_C4AEB5479D7D9620 && self.intensity_01 > 0 )
        set_lights_values( randomfloatrange( self.intensity_01 * 0.25, self.intensity_01 ), self.color_01 );
    else
        set_lights_values( self.intensity_01, self.color_01 );

    if ( isdefined( self.script_prefab_exploder ) )
        scripts\engine\utility::exploder( self.script_prefab_exploder );

    foreach ( scriptable in self.scriptables )
        scriptable setscriptablepartstate( "onoff", "on" );

    scripts\engine\utility::array_call( self.unlit_models, ::hide );

    foreach ( model in self.lit_models )
    {
        model show();

        if ( isdefined( model.effect ) )
            model.effect scripts\engine\sp\utility::restarteffect();
    }
}

light_turn_off( _id_C4AEB5479D7D9620, two_color )
{
    scripts\engine\utility::ent_flag_clear( "light_on" );

    if ( isdefined( two_color ) && two_color )
        set_lights_values( 0, ( 0, 0, 0 ) );
    else if ( isdefined( _id_C4AEB5479D7D9620 ) && _id_C4AEB5479D7D9620 && self.intensity_02 > 0 )
        set_lights_values( randomfloatrange( self.intensity_02 * 0.25, self.intensity_02 ), self.color_02 );
    else
        set_lights_values( self.intensity_02, self.color_02 );

    if ( isdefined( self.script_prefab_exploder ) )
        scripts\engine\utility::stop_exploder( self.script_prefab_exploder );

    foreach ( scriptable in self.scriptables )
        scriptable setscriptablepartstate( "onoff", "off" );

    foreach ( model in self.lit_models )
    {
        model hide();

        if ( isdefined( model.effect ) )
            model.effect scripts\engine\utility::pauseeffect();
    }

    scripts\engine\utility::array_call( self.unlit_models, ::show );
}

light_pulse( _id_816F2802FA9C1FDE )
{
    scripts\engine\utility::ent_flag_clear( "light_on" );
    _id_63F445469B886BF8 = int( _id_816F2802FA9C1FDE / 0.1 );

    for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 <= _id_63F445469B886BF8; _id_AC0E594AC96AA3A8++ )
    {
        _id_A510AE7913007CD7 = max( 0, self.intensity_01 - self.intensity_inc * _id_AC0E594AC96AA3A8 );
        _id_6C306CF0A14E8EC9 = vectorlerp( self.color_01, self.color_02, self.step_inc * _id_AC0E594AC96AA3A8 );
        set_lights_values( _id_A510AE7913007CD7, _id_6C306CF0A14E8EC9 );
        wait 0.05;
    }

    for ( _id_AC0E594AC96AA3A8 = _id_63F445469B886BF8; _id_AC0E594AC96AA3A8 > 0; _id_AC0E594AC96AA3A8-- )
    {
        _id_A510AE7913007CD7 = max( 0, self.intensity_01 - self.intensity_inc * _id_AC0E594AC96AA3A8 );
        _id_6C306CF0A14E8EC9 = vectorlerp( self.color_01, self.color_02, self.step_inc * _id_AC0E594AC96AA3A8 );
        set_lights_values( _id_A510AE7913007CD7, _id_6C306CF0A14E8EC9 );
        wait 0.05;
    }
}

lights_turn_on( name, key, intensity, color, _id_48E6F4B3EF8464E5 )
{
    lights = getentarray( name, key );
    scripts\engine\utility::array_thread( lights, ::turn_on_proc, intensity, color, _id_48E6F4B3EF8464E5 );
}

turn_on_proc( intensity, color, _id_48E6F4B3EF8464E5 )
{
    if ( !isdefined( self.init_complete ) )
        self waittill( "script_light_init_complete" );

    if ( isdefined( _id_48E6F4B3EF8464E5 ) && _id_48E6F4B3EF8464E5 )
        self notify( "stop_script_light_loop" );

    _id_18DFB209232C9D59 = self.intensity_01;
    _id_2ACD9B15B7E0178F = self.color_01;

    if ( isdefined( intensity ) )
        _id_18DFB209232C9D59 = intensity;

    if ( isdefined( color ) )
        _id_2ACD9B15B7E0178F = color;

    scripts\engine\utility::ent_flag_set( "light_on" );
    set_lights_values( _id_18DFB209232C9D59, _id_2ACD9B15B7E0178F );

    foreach ( scriptable in self.scriptables )
        scriptable setscriptablepartstate( "onoff", "on" );

    scripts\engine\utility::array_call( self.unlit_models, ::hide );

    foreach ( model in self.lit_models )
    {
        model show();

        if ( isdefined( model.effect ) )
            model.effect scripts\engine\sp\utility::restarteffect();
    }
}

lights_turn_off( name, key, intensity, color, _id_48E6F4B3EF8464E5 )
{
    lights = getentarray( name, key );
    scripts\engine\utility::array_thread( lights, ::turn_off_proc, intensity, color, _id_48E6F4B3EF8464E5 );
}

turn_off_proc( intensity, color, _id_48E6F4B3EF8464E5 )
{
    if ( !isdefined( self.init_complete ) )
        self waittill( "script_light_init_complete" );

    if ( isdefined( _id_48E6F4B3EF8464E5 ) && _id_48E6F4B3EF8464E5 )
        self notify( "stop_script_light_loop" );

    _id_18DFB209232C9D59 = self.intensity_02;
    _id_2ACD9B15B7E0178F = self.color_02;

    if ( isdefined( intensity ) )
        _id_18DFB209232C9D59 = intensity;

    if ( isdefined( color ) )
        _id_2ACD9B15B7E0178F = color;

    scripts\engine\utility::ent_flag_clear( "light_on" );
    set_lights_values( _id_18DFB209232C9D59, _id_2ACD9B15B7E0178F );

    foreach ( scriptable in self.scriptables )
        scriptable setscriptablepartstate( "onoff", "off" );

    foreach ( model in self.lit_models )
    {
        model hide();

        if ( isdefined( model.effect ) )
            model.effect scripts\engine\utility::pauseeffect();
    }

    scripts\engine\utility::array_call( self.unlit_models, ::show );
}

set_lights_values( intensity, color )
{
    if ( isdefined( intensity ) )
        intensity = max( 0, intensity );

    if ( isdefined( color ) )
        color = ( max( 0, color[0] ), max( 0, color[1] ), max( 0, color[2] ) );

    if ( isdefined( intensity ) )
    {
        self setlightintensity( intensity );

        if ( isdefined( self.linked_lights ) )
            scripts\engine\utility::array_call( self.linked_lights, ::setlightintensity, intensity );
    }

    if ( isdefined( color ) )
    {
        self _meth_8A5136D4D87795D4( color );

        if ( isdefined( self.linked_lights ) )
            scripts\engine\utility::array_call( self.linked_lights, ::_meth_8A5136D4D87795D4, color );
    }
}

is_light_entity( ent )
{
    return ent.classname == "light_spot" || ent.classname == "light_omni" || ent.classname == "light";
}

init_light_type( light_type )
{
    self.light_type = get_defined_value( [ self.script_type, light_type, "generic" ] );
    self.two_color = issubstr( self.light_type, "two_color" );
    self.type_on = issubstr( self.light_type, "on" );
    self.type_off = issubstr( self.light_type, "off" );
    self.type_run = issubstr( self.light_type, "running" );
    self.static_time = issubstr( self.light_type, "timed" );
    self.delay_start = issubstr( self.light_type, "delaystart" );
    self.random_intensity_on = issubstr( self.light_type, "on_random_intensity" );
    self.random_intensity_off = issubstr( self.light_type, "off_random_intensity" );
}

generic_pulsing()
{
    if ( isdefined( self.script_type ) )
        return;

    if ( getdvar( "dvar_E6AFCE2CF5CF7515" ) == "1" )
    {
        self setlightintensity( 0 );
        return;
    }

    on = self getlightintensity();
    _id_547B730434C29E96 = 0.05;
    curr = on;
    _id_E609F893B93936D6 = 0.3;
    _id_21474CE058F96998 = 0.6;
    _id_7FD9FF45A41D3522 = ( on - _id_547B730434C29E96 ) / ( _id_E609F893B93936D6 / 0.05 );
    _id_49C4DA27EC62D5D4 = ( on - _id_547B730434C29E96 ) / ( _id_21474CE058F96998 / 0.05 );

    for (;;)
    {
        time = 0;

        while ( time < _id_21474CE058F96998 )
        {
            curr = curr - _id_49C4DA27EC62D5D4;
            curr = clamp( curr, 0, 100 );
            self setlightintensity( curr );
            time = time + 0.05;
            wait 0.05;
        }

        wait 1;
        time = 0;

        while ( time < _id_E609F893B93936D6 )
        {
            curr = curr + _id_7FD9FF45A41D3522;
            curr = clamp( curr, 0, 100 );
            self setlightintensity( curr );
            time = time + 0.05;
            wait 0.05;
        }

        wait 0.5;
    }
}

generic_double_strobe()
{
    if ( isdefined( self.script_type ) )
        return;

    if ( getdvar( "dvar_E6AFCE2CF5CF7515" ) == "1" )
    {
        self setlightintensity( 0 );
        return;
    }

    on = self getlightintensity();
    _id_547B730434C29E96 = 0.05;
    _id_F9357BD3470FE9B7 = 0;
    _id_6CFE01CBC42FD83C = undefined;
    _id_776EFBD89210C3B1 = undefined;
    linked_lights = 0;
    _id_67C79FB91ABCBE6E = [];

    if ( isdefined( self.script_noteworthy ) )
    {
        _id_B9D12DB72E0592F0 = getentarray( self.script_noteworthy, "targetname" );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_B9D12DB72E0592F0.size; _id_AC0E594AC96AA3A8++ )
        {
            if ( is_light_entity( _id_B9D12DB72E0592F0[_id_AC0E594AC96AA3A8] ) )
            {
                linked_lights = 1;
                _id_67C79FB91ABCBE6E[_id_67C79FB91ABCBE6E.size] = _id_B9D12DB72E0592F0[_id_AC0E594AC96AA3A8];
            }

            if ( _id_B9D12DB72E0592F0[_id_AC0E594AC96AA3A8].classname == "script_model" )
            {
                _id_6CFE01CBC42FD83C = _id_B9D12DB72E0592F0[_id_AC0E594AC96AA3A8];
                _id_776EFBD89210C3B1 = getent( _id_6CFE01CBC42FD83C.target, "targetname" );
                _id_F9357BD3470FE9B7 = 1;
            }
        }
    }

    for (;;)
    {
        self setlightintensity( _id_547B730434C29E96 );

        if ( _id_F9357BD3470FE9B7 )
        {
            _id_6CFE01CBC42FD83C hide();
            _id_776EFBD89210C3B1 show();
        }

        wait 0.8;
        self setlightintensity( on );

        if ( _id_F9357BD3470FE9B7 )
        {
            _id_6CFE01CBC42FD83C show();
            _id_776EFBD89210C3B1 hide();
        }

        wait 0.1;
        self setlightintensity( _id_547B730434C29E96 );

        if ( _id_F9357BD3470FE9B7 )
        {
            _id_6CFE01CBC42FD83C hide();
            _id_776EFBD89210C3B1 show();
        }

        wait 0.12;
        self setlightintensity( on );

        if ( _id_F9357BD3470FE9B7 )
        {
            _id_6CFE01CBC42FD83C show();
            _id_776EFBD89210C3B1 hide();
        }

        wait 0.1;
    }
}

generic_spot()
{
    for (;;)
        waitframe();
}

burning_trash_fire()
{
    if ( isdefined( self.script_type ) )
        return;

    if ( getdvar( "dvar_E6AFCE2CF5CF7515" ) == "1" )
    {
        self setlightintensity( 0 );
        return;
    }

    _id_CFBA7E98AF704038 = self getlightintensity();
    _id_B5524BFA7931B674 = _id_CFBA7E98AF704038;

    for (;;)
    {
        intensity = randomfloatrange( _id_CFBA7E98AF704038 * 0.7, _id_CFBA7E98AF704038 * 1.2 );
        timer = randomfloatrange( 0.3, 0.6 );
        timer = timer * 20;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < timer; _id_AC0E594AC96AA3A8++ )
        {
            _id_A510AE7913007CD7 = intensity * ( _id_AC0E594AC96AA3A8 / timer ) + _id_B5524BFA7931B674 * ( ( timer - _id_AC0E594AC96AA3A8 ) / timer );
            self setlightintensity( _id_A510AE7913007CD7 );
            wait 0.05;
        }

        _id_B5524BFA7931B674 = intensity;
    }
}

_id_DA92CCFD1C9637E2()
{
    if ( isdefined( self.script_type ) )
        return;

    if ( getdvar( "dvar_E6AFCE2CF5CF7515" ) == "1" )
    {
        self setlightintensity( 0 );
        return;
    }

    _id_CFBA7E98AF704038 = self getlightintensity();
    _id_B5524BFA7931B674 = _id_CFBA7E98AF704038;

    for (;;)
    {
        intensity = randomfloatrange( _id_CFBA7E98AF704038 * 0.7, _id_CFBA7E98AF704038 * 1.3 );
        timer = randomfloatrange( 0.1, 0.4 );
        timer = timer * 20;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < timer; _id_AC0E594AC96AA3A8++ )
        {
            _id_A510AE7913007CD7 = intensity * ( _id_AC0E594AC96AA3A8 / timer ) + _id_B5524BFA7931B674 * ( ( timer - _id_AC0E594AC96AA3A8 ) / timer );
            self setlightintensity( _id_A510AE7913007CD7 );
            wait 0.05;
        }

        _id_B5524BFA7931B674 = intensity;
    }
}

strobelight( _id_6CEDF2C7344E7AE2, _id_6CEDF3C7344E7D15, _id_6B108FDA10E6B6A8, _id_0C32ADA7BE8E0120 )
{
    frequency = 360 / _id_6B108FDA10E6B6A8;
    time = 0;

    for (;;)
    {
        _id_12D4A3234A7F0591 = sin( time * frequency ) * 0.5 + 0.5;
        self setlightintensity( _id_6CEDF2C7344E7AE2 + ( _id_6CEDF3C7344E7D15 - _id_6CEDF2C7344E7AE2 ) * _id_12D4A3234A7F0591 );
        wait 0.05;
        time = time + 0.05;

        if ( time > _id_6B108FDA10E6B6A8 )
            time = time - _id_6B108FDA10E6B6A8;

        if ( isdefined( _id_0C32ADA7BE8E0120 ) )
        {
            if ( scripts\engine\utility::flag( _id_0C32ADA7BE8E0120 ) )
                return;
        }
    }
}

changelightcolorto( _id_D63D6DF0A89ECACB, totaltime, _id_1D5DB5EEFD5BE7C6, _id_B6689F84DACEB617 )
{
    if ( !isdefined( _id_1D5DB5EEFD5BE7C6 ) )
        _id_1D5DB5EEFD5BE7C6 = 0;

    if ( !isdefined( _id_B6689F84DACEB617 ) )
        _id_B6689F84DACEB617 = 0;

    thread changelightcolortoworkerthread( _id_D63D6DF0A89ECACB, totaltime, _id_1D5DB5EEFD5BE7C6, _id_B6689F84DACEB617 );
}

changelightcolortoworkerthread( _id_D63D6DF0A89ECACB, totaltime, _id_1D5DB5EEFD5BE7C6, _id_B6689F84DACEB617 )
{
    _id_CA915E775A538DA2 = self _meth_CDD36EB036403400();
    _id_805136F88545A0DB = 1 / ( totaltime * 2 - ( _id_1D5DB5EEFD5BE7C6 + _id_B6689F84DACEB617 ) );
    time = 0;

    if ( time < _id_1D5DB5EEFD5BE7C6 )
    {
        for ( _id_85138ED12B40FD22 = _id_805136F88545A0DB / _id_1D5DB5EEFD5BE7C6; time < _id_1D5DB5EEFD5BE7C6; time = time + 0.05 )
        {
            fraction = _id_85138ED12B40FD22 * time * time;
            self _meth_8A5136D4D87795D4( vectorlerp( _id_CA915E775A538DA2, _id_D63D6DF0A89ECACB, fraction ) );
            wait 0.05;
        }
    }

    while ( time < totaltime - _id_B6689F84DACEB617 )
    {
        fraction = _id_805136F88545A0DB * ( 2 * time - _id_1D5DB5EEFD5BE7C6 );
        self _meth_8A5136D4D87795D4( vectorlerp( _id_CA915E775A538DA2, _id_D63D6DF0A89ECACB, fraction ) );
        wait 0.05;
        time = time + 0.05;
    }

    time = totaltime - time;

    if ( time > 0 )
    {
        for ( _id_85138ED12B40FD22 = _id_805136F88545A0DB / _id_B6689F84DACEB617; time > 0; time = time - 0.05 )
        {
            fraction = 1 - _id_85138ED12B40FD22 * time * time;
            self _meth_8A5136D4D87795D4( vectorlerp( _id_CA915E775A538DA2, _id_D63D6DF0A89ECACB, fraction ) );
            wait 0.05;
        }
    }

    self _meth_8A5136D4D87795D4( _id_D63D6DF0A89ECACB );
}

flickerlightintensity( _id_A0418589DD81226A, _id_663D78F75F0EF168 )
{
    on = self getlightintensity();
    _id_547B730434C29E96 = 0;
    curr = on;
    num = 0;

    for (;;)
    {
        for ( num = randomintrange( 1, 10 ); num; num-- )
        {
            wait( randomfloatrange( 0.05, 0.1 ) );

            if ( curr > 0.2 )
                curr = randomfloatrange( 0, 0.3 );
            else
                curr = on;

            self setlightintensity( curr );
        }

        self setlightintensity( on );
        wait( randomfloatrange( _id_A0418589DD81226A, _id_663D78F75F0EF168 ) );
    }
}

sun_shadow_trigger( trigger )
{
    duration = 1;

    if ( isdefined( trigger.script_duration ) )
        duration = trigger.script_duration;

    for (;;)
    {
        trigger waittill( "trigger", other );
        trigger set_sun_shadow_params( duration );
    }
}

set_sun_shadow_params( duration )
{
    _id_5D31C6F56FA7130E = getdvarint( "dvar_531180C075033638", 1 );
    _id_FF6F85478474B8D5 = getdvarfloat( "dvar_8D3379C8854F3C37", 1.0 );
    sunsamplesizenear = getdvarfloat( "dvar_9AB6A766FC4E0C06", 0.25 );
    _id_E080DE7B131639AA = getdvarfloat( "dvar_485AFD6362225FB0", 1.0 );

    if ( isdefined( self.script_sunenable ) )
        _id_5D31C6F56FA7130E = self.script_sunenable;

    if ( isdefined( self.script_sunshadowscale ) )
        _id_FF6F85478474B8D5 = self.script_sunshadowscale;

    if ( isdefined( self.script_sunsamplesizenear ) )
        sunsamplesizenear = self.script_sunsamplesizenear;

    sunsamplesizenear = min( max( 0.016, sunsamplesizenear ), 32 );

    if ( isdefined( self.script_qualityspotshadow ) )
        _id_E080DE7B131639AA = self.script_qualityspotshadow;

    _id_CE005B1CC11AC933 = getdvarint( "dvar_531180C075033638", 1 );
    _id_F75F0121B866FC52 = getdvarfloat( "dvar_8D3379C8854F3C37", 1.0 );
    _id_D1DF8CA895B4A0AF = getdvarint( "dvar_485AFD6362225FB0", 1.0 );
    setsaveddvar( "dvar_531180C075033638", _id_5D31C6F56FA7130E );
    setsaveddvar( "dvar_8D3379C8854F3C37", _id_FF6F85478474B8D5 );
    setsaveddvar( "dvar_485AFD6362225FB0", _id_E080DE7B131639AA );
    lerp_sunsamplesizenear_overtime( sunsamplesizenear, duration );
}

lerp_sunsamplesizenear_overtime( value, time )
{
    level notify( "changing_sunsamplesizenear" );
    level endon( "changing_sunsamplesizenear" );
    _id_6AEC809BE13C61CC = getdvarfloat( "dvar_9AB6A766FC4E0C06", 0.25 );

    if ( value == _id_6AEC809BE13C61CC )
        return;

    _id_4573A8725DD3748E = value - _id_6AEC809BE13C61CC;
    times = time / 0.05;

    if ( times > 0 )
    {
        _id_AC0E564AC96A9D0F = _id_4573A8725DD3748E / times;
        v = _id_6AEC809BE13C61CC;

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < times; _id_AC0E594AC96AA3A8++ )
        {
            v = v + _id_AC0E564AC96A9D0F;
            setsaveddvar( "dvar_9AB6A766FC4E0C06", v );
            wait 0.05;
        }
    }

    setsaveddvar( "dvar_9AB6A766FC4E0C06", value );
}

lerp_intensity( intensity, time )
{
    _id_63F445469B886BF8 = int( time * 20 );
    curr = self getlightintensity();
    _id_FE747A03F612E963 = ( intensity - curr ) / _id_63F445469B886BF8;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_63F445469B886BF8; _id_AC0E594AC96AA3A8++ )
    {
        thread handle_linked_ents( intensity );
        self setlightintensity( curr + _id_AC0E594AC96AA3A8 * _id_FE747A03F612E963 );
        wait 0.05;
    }

    lights[0] = self;

    if ( isdefined( self.linked_lights ) )
        lights = scripts\engine\utility::array_combine( lights, self.linked_lights );

    foreach ( light in lights )
    {
        light thread handle_linked_ents( intensity );
        light setlightintensity( intensity );
    }
}

handle_linked_ents( intensity )
{
    if ( isdefined( self.script_threshold ) )
    {
        is_on = intensity > self.script_threshold;

        foreach ( ent in self.lit_models )
        {
            if ( is_on && !ent.visible )
            {
                ent.visible = is_on;
                ent show();

                if ( isdefined( ent.effect ) )
                    ent.effect thread scripts\engine\sp\utility::restarteffect();

                continue;
            }

            if ( !is_on && ent.visible )
            {
                ent.visible = is_on;
                ent hide();

                if ( isdefined( ent.effect ) )
                    ent.effect thread scripts\engine\utility::pauseeffect();
            }
        }

        foreach ( ent in self.unlit_models )
        {
            if ( !is_on && !ent.visible )
            {
                ent.visible = 1;
                ent show();
                continue;
            }

            if ( is_on && ent.visible )
            {
                ent.visible = 0;
                ent hide();
            }
        }
    }
}

_id_A817E534000A682A( _id_C1EC728A78781D65, _id_D1061BC5839AF0E8, _id_B7B721442AEE559A )
{
    _id_64E4650C59745203 = gettime();
    t = 0.0;

    while ( t <= _id_B7B721442AEE559A )
    {
        t = t + 0.05;
        _id_A1714A9AE7915519 = scripts\engine\math::lerp( _id_C1EC728A78781D65, _id_D1061BC5839AF0E8, t / _id_B7B721442AEE559A );
        self setlightintensity( _id_A1714A9AE7915519 );
        waitframe();
    }

    self setlightintensity( _id_D1061BC5839AF0E8 );
}
