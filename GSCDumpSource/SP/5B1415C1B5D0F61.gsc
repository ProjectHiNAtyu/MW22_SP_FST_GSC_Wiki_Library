// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_mover_candidates()
{
    level.mover_candidates = undefined;
}

trigger_moveto( trigger )
{
    if ( !isdefined( level.mover_candidates ) )
    {
        level.mover_candidates = getentarray( "script_brushmodel", "classname" );
        level.mover_candidates = scripts\engine\utility::array_combine( level.mover_candidates, getentarray( "script_model", "classname" ) );
    }

    volumes = getentarray( trigger.target, "targetname" );
    scripts\engine\utility::array_thread( volumes, ::moveto_volume_think, trigger );
}

moveto_volume_think( trigger )
{
    movers = [];
    _id_E62DC69923720FA9 = scripts\engine\utility::spawn_tag_origin();
    _id_38BE8443E2495529 = self;

    foreach ( _id_AC0E5D4AC96AAC74 in level.mover_candidates )
    {
        _id_E62DC69923720FA9.origin = _id_AC0E5D4AC96AAC74.origin;

        if ( _id_E62DC69923720FA9 istouching( _id_38BE8443E2495529 ) )
        {
            level.mover_candidates = scripts\engine\utility::array_remove( level.mover_candidates, _id_AC0E5D4AC96AAC74 );
            movers = scripts\engine\utility::array_add( movers, _id_AC0E5D4AC96AAC74 );
        }
    }

    _id_E62DC69923720FA9 delete();
    mover = undefined;

    foreach ( _id_AC0E5D4AC96AAC74 in movers )
    {
        if ( isdefined( _id_AC0E5D4AC96AAC74.script_parameters ) && _id_AC0E5D4AC96AAC74.script_parameters == "mover" )
        {
            mover = _id_AC0E5D4AC96AAC74;
            break;
        }

        if ( isdefined( _id_AC0E5D4AC96AAC74.script_parent ) && _id_AC0E5D4AC96AAC74.script_parent == "mover" )
        {
            mover = _id_AC0E5D4AC96AAC74;
            break;
        }
    }

    foreach ( _id_AC0E5D4AC96AAC74 in movers )
    {
        if ( mover != _id_AC0E5D4AC96AAC74 )
            _id_AC0E5D4AC96AAC74 linkto( mover );
    }

    _id_9D805AF60E474E1E = scripts\engine\utility::get_target_ent();

    if ( _id_9D805AF60E474E1E scripts\common\vehicle::isvehicle() )
    {
        mover moveto_volume_vehiclespline( _id_9D805AF60E474E1E, trigger );
        self notify( "done_moving" );
        return;
    }

    if ( !isdefined( _id_9D805AF60E474E1E.angles ) )
        _id_9D805AF60E474E1E.angles = ( 0, 0, 0 );

    trigger.mover = mover;
    mover.origin = _id_9D805AF60E474E1E.origin;
    mover.angles = _id_9D805AF60E474E1E.angles;
    _id_4D8CD161A8EAADC2 = undefined;
    exploder_name = undefined;
    duration = 5;
    accel = 0;
    decel = 0;
    _id_69298EA86A787593 = undefined;
    _id_E9AA975BB373E72F = undefined;

    if ( isdefined( _id_9D805AF60E474E1E.script_duration ) )
        duration = _id_9D805AF60E474E1E.script_duration;

    if ( isdefined( _id_9D805AF60E474E1E.script_accel ) )
        accel = _id_9D805AF60E474E1E.script_accel;

    if ( isdefined( _id_9D805AF60E474E1E.script_decel ) )
        decel = _id_9D805AF60E474E1E.script_decel;

    if ( isdefined( _id_9D805AF60E474E1E.script_earthquake ) )
        _id_4D8CD161A8EAADC2 = _id_9D805AF60E474E1E.script_earthquake;

    if ( isdefined( _id_9D805AF60E474E1E.script_exploder ) )
        exploder_name = _id_9D805AF60E474E1E.script_exploder;

    if ( isdefined( _id_9D805AF60E474E1E.script_flag_wait ) )
        _id_69298EA86A787593 = _id_9D805AF60E474E1E.script_flag_wait;

    if ( isdefined( _id_9D805AF60E474E1E._id_7FD486C78ED742F7 ) )
        _id_E9AA975BB373E72F = _id_9D805AF60E474E1E._id_7FD486C78ED742F7;

    trigger waittill( "trigger" );
    _id_9D805AF60E474E1E scripts\engine\utility::script_delay();

    if ( isdefined( _id_9D805AF60E474E1E.target ) )
        _id_9D805AF60E474E1E = _id_9D805AF60E474E1E scripts\engine\utility::get_target_ent();
    else
        _id_9D805AF60E474E1E = undefined;

    while ( isdefined( _id_9D805AF60E474E1E ) )
    {
        if ( isdefined( _id_69298EA86A787593 ) )
            scripts\engine\utility::flag_wait( _id_69298EA86A787593 );

        if ( isdefined( _id_E9AA975BB373E72F ) )
            scripts\engine\utility::flag_waitopen( _id_E9AA975BB373E72F );

        if ( isdefined( exploder_name ) )
        {
            scripts\engine\utility::exploder( exploder_name );
            level notify( "geo_mover_exploder", exploder_name );
        }
        else if ( isdefined( _id_4D8CD161A8EAADC2 ) )
        {
            if ( issubstr( _id_4D8CD161A8EAADC2, "constant" ) )
                mover thread constant_quake( _id_4D8CD161A8EAADC2 );
        }

        if ( !isdefined( _id_9D805AF60E474E1E.angles ) )
            _id_9D805AF60E474E1E.angles = ( 0, 0, 0 );

        mover moveto_rotateto( _id_9D805AF60E474E1E, duration, accel, decel );
        mover notify( "stop_constant_quake" );
        duration = 5;
        accel = 0;
        decel = 0;
        _id_4D8CD161A8EAADC2 = undefined;
        _id_9D805AF60E474E1E scripts\engine\utility::script_delay();

        if ( isdefined( _id_9D805AF60E474E1E.script_duration ) )
            duration = _id_9D805AF60E474E1E.script_duration;

        if ( isdefined( _id_9D805AF60E474E1E.script_accel ) )
            accel = _id_9D805AF60E474E1E.script_accel;

        if ( isdefined( _id_9D805AF60E474E1E.script_decel ) )
            decel = _id_9D805AF60E474E1E.script_decel;

        if ( isdefined( _id_9D805AF60E474E1E.script_earthquake ) )
            _id_4D8CD161A8EAADC2 = _id_9D805AF60E474E1E.script_earthquake;

        if ( isdefined( _id_9D805AF60E474E1E.script_exploder ) )
            exploder_name = _id_9D805AF60E474E1E.script_exploder;

        if ( isdefined( _id_9D805AF60E474E1E.script_flag_wait ) )
            _id_69298EA86A787593 = _id_9D805AF60E474E1E.script_flag_wait;

        if ( isdefined( _id_9D805AF60E474E1E._id_7FD486C78ED742F7 ) )
            _id_E9AA975BB373E72F = _id_9D805AF60E474E1E._id_7FD486C78ED742F7;

        linked = _id_9D805AF60E474E1E scripts\engine\utility::get_linked_ents();

        if ( linked.size > 0 )
        {
            if ( issubstr( linked[0].classname, "trigger" ) )
                linked[0] waittill( "trigger" );
        }

        if ( isdefined( _id_9D805AF60E474E1E.target ) )
        {
            _id_9D805AF60E474E1E = _id_9D805AF60E474E1E scripts\engine\utility::get_target_ent();
            continue;
        }

        _id_9D805AF60E474E1E = undefined;
    }

    self notify( "done_moving" );
}

moveto_volume_vehiclespline( _id_EA0FBAC82EEC8FC1, trigger )
{
    mover = self;
    _id_9D805AF60E474E1E = getvehiclenode( _id_EA0FBAC82EEC8FC1.target, "targetname" );

    if ( !isdefined( _id_9D805AF60E474E1E.angles ) )
        _id_9D805AF60E474E1E.angles = ( 0, 0, 0 );

    trigger.mover = mover;
    mover.origin = _id_9D805AF60E474E1E.origin;
    mover.angles = _id_9D805AF60E474E1E.angles;
    trigger waittill( "trigger" );
    vehicle = _id_EA0FBAC82EEC8FC1 _meth_BAD5378B67B1F0D0();
    vehicle vehicle_turnengineoff();
    vehicle hide();
    vehicle scripts\common\vehicle::godon();
    vehicle vehicle_turnengineoff();
    mover linkto( vehicle );
    vehicle attachpath( _id_9D805AF60E474E1E );
    vehicle startpath();
}

constant_quake( _id_4D8CD161A8EAADC2 )
{
    self endon( "stop_constant_quake" );

    for (;;)
    {
        thread scripts\engine\utility::do_earthquake( _id_4D8CD161A8EAADC2, self.origin );
        wait( randomfloatrange( 0.1, 0.2 ) );
    }
}

moveto_rotateto_speed( node, rate, accel, decel )
{
    point = node.origin;
    _id_D5685B7BAEE6505E = self.origin;
    dist = distance( _id_D5685B7BAEE6505E, point );
    time = dist / rate;

    if ( !isdefined( accel ) )
        accel = 0;

    if ( !isdefined( decel ) )
        decel = 0;

    self rotateto( node.angles, time, time * accel, time * decel );
    self moveto( point, time, time * accel, time * decel );
    self waittill( "movedone" );
}

moveto_rotateto( node, time, accel, decel )
{
    self moveto( node.origin, time, accel, decel );
    self rotateto( node.angles, time, accel, decel );
    self waittill( "movedone" );
}

set_start_positions( targetname )
{
    _id_E2A562F66D0C069C = scripts\engine\utility::getstructarray( targetname, "targetname" );

    foreach ( pos in _id_E2A562F66D0C069C )
    {
        switch ( pos.script_noteworthy )
        {
            case "player":
                level.player setorigin( pos.origin );
                level.player setplayerangles( pos.angles );
                break;
        }
    }
}
