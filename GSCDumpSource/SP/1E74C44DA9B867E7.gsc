// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

precache( offhand )
{
    precachemodel( "burntbody_male" );
    precachemodel( "equip_molotov_pool_mp" );
    level.g_effect["molotov_explosion"] = loadfx( "vfx/iw8/core/molotov/vfx_molotov_explosion.vfx" );
    level.g_effect["molotov_explosion_child"] = loadfx( "vfx/iw8/core/molotov/vfx_molotov_explosion_child.vfx" );
    level.g_effect["vfx_burn_lrg_high"] = loadfx( "vfx/iw8/weap/_fire/molotov/vfx_mtov_ontag_lrg_high.vfx" );
    level.g_effect["vfx_burn_lrg_low"] = loadfx( "vfx/iw8/weap/_fire/molotov/vfx_mtov_ontag_lrg_low.vfx" );
    level.g_effect["vfx_burn_med_high"] = loadfx( "vfx/iw8/weap/_fire/molotov/vfx_mtov_ontag_med_high.vfx" );
    level.g_effect["vfx_burn_med_low"] = loadfx( "vfx/iw8/weap/_fire/molotov/vfx_mtov_ontag_med_low.vfx" );
    level.g_effect["vfx_burn_sml_high"] = loadfx( "vfx/iw8/weap/_fire/molotov/vfx_mtov_ontag_sml_high.vfx" );
    level.g_effect["vfx_burn_sml_low"] = loadfx( "vfx/iw8/weap/_fire/molotov/vfx_mtov_ontag_sml_low.vfx" );
    level.g_effect["vfx_burn_sml_head_low"] = loadfx( "vfx/iw8/weap/_fire/molotov/vfx_mtov_ontag_head_low.vfx" );
    level.molotovdata = spawnstruct();
    level.molotovdata.active = [];
    scripts\sp\equipment\offhands::registeroffhandfirefunc( offhand, ::molotovfiremain );
}

molotovfiremain( grenade, weapon )
{
    if ( isplayer( self ) || isai( self ) )
        owner = self;
    else
    {
        _id_0B52529C404718C5 = getaiarray( "axis" );

        if ( _id_0B52529C404718C5.size > 0 )
            owner = sortandreturnowner( _id_0B52529C404718C5, grenade );
        else
        {
            _id_0B52529C404718C5 = getaiarray( "allies" );

            if ( _id_0B52529C404718C5.size > 0 )
                owner = sortandreturnowner( _id_0B52529C404718C5, grenade );
            else
                owner = level.player;
        }
    }

    owner thread _id_0F4E8D02D2F70888::evaluateattackevent( "molotov" );
    grenade endon( "entitydeleted" );

    if ( !isdefined( grenade ) )
        return;

    grenade.owner = owner;
    _id_673145AE1316069A = owner.origin;
    _id_811F337EFD111E98 = owner.angles;
    grenade waittill( "missile_stuck", stuckto, _id_B3FCD958F4D7876E, surfacetype, velocity, position, _id_3E293ABD063AA9F5 );
    _id_6951CF1F43BC8EBE = getlaunchangles( position, _id_673145AE1316069A, _id_811F337EFD111E98 );
    level notify( "molotov_impact", owner, position );

    if ( isdefined( owner ) && isdefined( owner.team ) )
        level notify( "bc_inform_weapon", "molotov", owner.team );

    owner thread molotov_stuck( grenade, stuckto, _id_6951CF1F43BC8EBE, velocity, 1 );
}

sortandreturnowner( _id_8B462903A1F84F9C, grenade )
{
    return sortbydistance( _id_8B462903A1F84F9C, grenade.origin )[0];
}

getlaunchangles( origin, _id_673145AE1316069A, _id_811F337EFD111E98 )
{
    if ( !isdefined( _id_673145AE1316069A ) )
        _id_673145AE1316069A = self.origin;

    if ( !isdefined( _id_811F337EFD111E98 ) )
        _id_811F337EFD111E98 = self.angles;

    _id_D972B258956D09CD = vectornormalize( origin - _id_673145AE1316069A );
    _id_8BC14603A27FA3E7 = vectortoangles( _id_D972B258956D09CD );
    _id_349BF4389F98802A = ( 0, _id_811F337EFD111E98[1], 0 );
    _id_6951CF1F43BC8EBE = _id_349BF4389F98802A + ( 45, 0, 0 );
    return _id_6951CF1F43BC8EBE;
}

molotovexplode( origin, normal, velocity, entity, _id_7FC04A14C0D36D24 )
{
    molotov = spawn( "script_model", origin );
    molotov setmodel( "projectile_molotov_v0" );
    _id_8BC14603A27FA3E7 = vectortoangles( normal );
    f = anglestoforward( _id_8BC14603A27FA3E7 );
    r = anglestoright( _id_8BC14603A27FA3E7 );
    _id_AC0E454AC96A77AC = anglestoup( _id_8BC14603A27FA3E7 );
    molotov.angles = axistoangles( r, _id_AC0E454AC96A77AC, f );
    molotov.owner = _id_7FC04A14C0D36D24;
    _id_6951CF1F43BC8EBE = _id_7FC04A14C0D36D24 getlaunchangles( origin );

    if ( isdefined( entity ) && isdefined( entity.classname ) && entity.classname == "worldspawn" )
        entity = undefined;

    thread molotov_stuck( molotov, entity, _id_6951CF1F43BC8EBE, velocity );
}

pool_damage_scriptables( origin )
{
    _id_D6456B3E618B3378 = self.pooldata.triggerradius * 3;

    foreach ( ent in self.shareddata.scriptables )
    {
        dist = distance( ent.origin, origin );

        if ( dist <= _id_D6456B3E618B3378 )
        {
            if ( ent getscriptableparthasstate( "base", "script_ignite" ) )
                ent setscriptablepartstate( "base", "script_ignite", 1 );
        }
    }
}

pool_damage_vehicles( origin, _id_5D02A89F45CC20D7 )
{
    _id_B37DFA15C484DC21 = self.pooldata.triggerradius * 5;

    foreach ( ent in self.shareddata.vehicles )
    {
        dist = distance( ent.origin, origin );

        if ( dist <= _id_B37DFA15C484DC21 )
        {
            if ( ent isscriptable() )
            {
                ent thread molotovburnscriptablevehicle( _id_5D02A89F45CC20D7 );
                continue;
            }

            ent thread molotovburnvehicle( _id_5D02A89F45CC20D7 );
        }
    }
}

molotovburnscriptablevehicle( _id_5D02A89F45CC20D7 )
{
    self endon( "death" );
    wait 1;
    _id_9307BB132B2C0B9F = self getscriptablepartstate( "body", 1 );

    if ( !isdefined( _id_9307BB132B2C0B9F ) )
    {
        states = [ "flareup", "onfire" ];

        foreach ( state in states )
        {
            if ( self getscriptableparthasstate( "body", state ) )
                self setscriptablepartstate( "body", state, 1 );

            wait 0.5;
        }
    }
    else
    {

    }
}

molotovburnvehicle( _id_5D02A89F45CC20D7 )
{
    self endon( "death" );
    _id_5D02A89F45CC20D7 endon( "molotov_pool_end" );

    for (;;)
    {
        scripts\sp\utility::do_damage( 75, self.origin, undefined, undefined, "MOD_FIRE" );
        wait 0.5;
    }
}

pool_damage_ai( origin, owner )
{
    self.shareddata.ai = scripts\engine\utility::array_removeundefined( self.shareddata.ai );
    self.shareddata.ai = scripts\engine\utility::array_removedead_or_dying( self.shareddata.ai, 0 );

    if ( isdefined( owner ) && isplayer( owner ) )
        level.moloachievementvictims = 0;

    foreach ( guy in self.shareddata.ai )
    {
        dist = distance( guy.origin, origin );
        _id_47D735016BAE708E = 100;

        if ( issameteam( guy.team, owner.team ) )
        {
            _id_8C517B9F2DDB52B3 = self.pooldata.aikillradius * 0.7;
            damageradius = self.pooldata.aidamageradius * 0.5;
        }
        else
        {
            _id_8C517B9F2DDB52B3 = self.pooldata.aikillradius;
            damageradius = self.pooldata.aidamageradius;
        }

        if ( dist <= _id_8C517B9F2DDB52B3 )
        {
            guy thread achievement_watcher( owner, self );
            molotovburnenemy( guy, 1, origin, owner );
            continue;
        }

        if ( dist <= damageradius )
        {
            guy thread achievement_watcher( owner, self );
            molotovburnenemy( guy, 0, origin, owner );
            continue;
        }
    }
}

issameteam( ownerteam, victimteam )
{
    return isdefined( ownerteam ) && isdefined( victimteam ) && ownerteam == victimteam;
}

molotovburnenemy( enemy, _id_1C9101A7B50E69D2, origin, _id_7FC04A14C0D36D24 )
{
    if ( istrue( enemy._id_EA62C0816535EE5F ) )
        _id_1C9101A7B50E69D2 = 0;

    enemy._blackboard.isburning = 1;
    enemy.burningtodeath = _id_1C9101A7B50E69D2;
    enemy.burningdirection = undefined;

    if ( _id_1C9101A7B50E69D2 )
    {
        if ( istrue( enemy.flashlight ) )
            enemy scripts\sp\nvg\nvg_ai::flashlight_off( 0 );

        enemy scripts\engine\sp\utility::anim_stopanimscripted();
        enemy scripts\sp\utility::do_damage( enemy.health + 9999, origin, _id_7FC04A14C0D36D24, _id_7FC04A14C0D36D24, "MOD_FIRE", "molotov" );
        currentstate = undefined;

        if ( enemy isscriptable() )
            currentstate = enemy getscriptablepartstate( "burn_to_death_by_molotov", 1 );

        if ( !isdefined( currentstate ) )
            enemy thread molotov_burn_sfx( _id_1C9101A7B50E69D2 );
    }
    else
    {
        _id_013E753F7FE12D1B = anglestoright( enemy.angles );
        _id_C669C03EE029EF20 = vectornormalize( origin - enemy.origin );

        if ( vectordot( _id_013E753F7FE12D1B, _id_C669C03EE029EF20 ) > 0 )
            enemy.burningdirection = "right";
        else
            enemy.burningdirection = "left";

        enemy scripts\sp\utility::do_damage( 1, origin, _id_7FC04A14C0D36D24, _id_7FC04A14C0D36D24, "MOD_FIRE", "molotov" );
        enemy thread molotov_burn_sfx();
    }

    level thread scripts\sp\equipment\offhands::remove_blackboard_isburning( enemy );
}

achievement_watcher( owner, _id_8D01E03C5C561B39 )
{
    if ( !isai( self ) )
        return;

    if ( !isdefined( owner ) || !isplayer( owner ) )
        return;

    if ( !istrue( _id_8D01E03C5C561B39.shareddata.thrownoffhand ) )
        return;

    level.moloachievementvictims = level.moloachievementvictims + 1;

    if ( level.moloachievementvictims > 3 )
        level thread scripts\sp\utility::giveachievement_wrapper( "ashes" );
}

vector_empty( _id_16290C9DDA466BCE )
{
    return _id_16290C9DDA466BCE == ( 0, 0, 0 );
}

molotov_burn_sfx( _id_1C9101A7B50E69D2 )
{
    if ( isdefined( _id_1C9101A7B50E69D2 ) )
        duration = 1;
    else
        duration = 0.5;

    if ( !isdefined( self.burnsfxenabled ) )
        self.burnsfxenabled = 0;

    if ( !isdefined( self.burnsfx ) )
    {
        burnsfx = spawn( "script_origin", self.origin );
        burnsfx linkto( self );
        self.burnsfx = burnsfx;
        wait 0.05;
    }
    else
        burnsfx = self.burnsfx;

    if ( isdefined( self ) && self.burnsfxenabled == 0 )
    {
        burnsfx playloopsound( "iw9_weap_molotov_fire_enemy_burn" );
        self.burnsfxenabled = 1;
        wait( duration );
        burnsfx playsound( "iw9_weap_molotov_fire_enemy_burn_end" );
        wait 0.15;
        burnsfx stoploopsound( "iw9_weap_molotov_fire_enemy_burn" );
        burnsfx delete();

        if ( isdefined( self ) )
            self.burnsfxenabled = 1;
    }
}

molotov_fire_sfx( origin, duration )
{
    wait 0.1;
    _id_4CF58793CC4F1AD6 = spawn( "script_origin", origin + ( 0, 0, 15 ) );
    _id_4CF58793CC4F1AD6 playloopsound( "iw9_weap_molotov_fire_lp" );
    wait( duration );
    thread scripts\engine\utility::play_sound_in_space( "iw9_weap_molotov_fire_end", _id_4CF58793CC4F1AD6.origin );
    _id_4CF58793CC4F1AD6 scripts\engine\sp\utility::sound_fade_and_delete( 1, 1 );
}

molotovviewmodelfiremanager()
{
    _id_FD59F476D7D139D1 = makeweapon( "molotov" );

    for (;;)
    {
        self waittill( "grenade_pullback", grenadeweapon );

        if ( grenadeweapon == _id_FD59F476D7D139D1 )
        {
            self setscriptablepartstate( "molotov", "molotov_fx_on" );
            self waittill( "offhand_end" );
            self setscriptablepartstate( "molotov", "molotov_fx_off" );
        }
    }
}

molotov_init()
{
    molotov_init_cast_data();
    molotov_init_pool_data();
}

molotov_init_cast_data()
{
    _id_962A30A9BB8C0F09 = level.molotovdata;

    if ( !isdefined( _id_962A30A9BB8C0F09 ) )
    {
        _id_962A30A9BB8C0F09 = spawnstruct();
        level.molotovdata = _id_962A30A9BB8C0F09;
    }

    castdata = _id_962A30A9BB8C0F09.castdata;

    if ( !isdefined( castdata ) )
    {
        castdata = spawnstruct();
        _id_962A30A9BB8C0F09.castdata = castdata;
    }

    castdata.distforward = [];
    castdata.distdown = [];
    castdata.distup = [];
    castdata.maxcasts = [];
    castdata.maxfails = [];
    castdata.maxents = [];
    castdata.firstforwarddist = [];
    castdata.firstforwardmindist = [];
    castdata.firstforwardmodanglesfunc = [];
    id = 8;
    castdata.distforward[id] = undefined;
    castdata.distdown[id] = undefined;
    castdata.distup[id] = undefined;
    castdata.maxcasts[id] = undefined;
    castdata.maxfails[id] = undefined;
    castdata.maxents[id] = 1;
    id = 16;
    castdata.distforward[id] = 50;
    castdata.distdown[id] = 50;
    castdata.distup[id] = 25;
    castdata.maxcasts[id] = 4;
    castdata.maxfails[id] = 3;
    castdata.maxents[id] = 1;
    castdata.distforwardwall[id] = 25;
    id = 32;
    castdata.distforward[id] = 15;
    castdata.distdown[id] = 50;
    castdata.distup[id] = 25;
    castdata.maxcasts[id] = 17;
    castdata.maxfails[id] = 3;
    castdata.maxents[id] = 3;
    castdata.firstforwarddist[id] = 85;
    castdata.firstforwardmindist[id] = 8;
    castdata.distforwardwall[id] = 8;
    castdata.firstforwarddistwall[id] = 44;
}

molotov_init_pool_data()
{
    _id_962A30A9BB8C0F09 = level.molotovdata;

    if ( !isdefined( _id_962A30A9BB8C0F09 ) )
    {
        _id_962A30A9BB8C0F09 = spawnstruct();
        level.molotovdata = _id_962A30A9BB8C0F09;
    }

    pooldata = _id_962A30A9BB8C0F09.pooldata;

    if ( !isdefined( pooldata ) )
    {
        pooldata = spawnstruct();
        _id_962A30A9BB8C0F09.pooldata = pooldata;
    }

    pooldata.triggerradius = [];
    pooldata.triggerheight = [];
    pooldata.triggeroffset = [];
    pooldata.startdelayms = [];
    id = 8;
    pooldata.triggerradius[id] = 30;
    pooldata.triggerheight[id] = 55;
    pooldata.aikillradius[id] = 100;
    pooldata.aidamageradius[id] = 130;
    pooldata.triggeroffset[id] = 15;
    pooldata.startdelayms[id] = 0;
    pooldata.dangerzoneradius[id] = 350;
    pooldata.dangerzoneheight[id] = 128;
    id = 16;
    pooldata.triggerradius[id] = 30;
    pooldata.triggerheight[id] = 55;
    pooldata.aikillradius[id] = 75;
    pooldata.aidamageradius[id] = 100;
    pooldata.triggeroffset[id] = 15;
    pooldata.startdelayms[id] = 100;
    id = 32;
    pooldata.triggerradius[id] = 10;
    pooldata.triggerheight[id] = 55;
    pooldata.aikillradius[id] = 50;
    pooldata.aidamageradius[id] = 80;
    pooldata.triggeroffset[id] = 15;
    pooldata.startdelayms[id] = 100;
    molotov_init_pool_mask();
}

molotov_init_pool_mask()
{
    _id_962A30A9BB8C0F09 = level.molotovdata;

    if ( !isdefined( _id_962A30A9BB8C0F09 ) )
    {
        _id_962A30A9BB8C0F09 = spawnstruct();
        level.molotovdata = _id_962A30A9BB8C0F09;
    }

    pooldata = _id_962A30A9BB8C0F09.pooldata;

    if ( !isdefined( pooldata ) )
    {
        pooldata = spawnstruct();
        _id_962A30A9BB8C0F09.pooldata = pooldata;
    }

    _id_6F6EFEC7E89387E8 = [];
    _id_6F6EFEC7E89387E8[1] = "flareUp";
    _id_6F6EFEC7E89387E8[2] = "burnLoop";
    _id_6F6EFEC7E89387E8[4] = "dieDown";
    _id_6F6EFEC7E89387E8[8] = "coreCenter";
    _id_6F6EFEC7E89387E8[16] = "core";
    _id_6F6EFEC7E89387E8[32] = "tendril";
    _id_6F6EFEC7E89387E8[64] = "";
    _id_6F6EFEC7E89387E8[128] = "wall";
    _id_6F6EFEC7E89387E8[256] = "ceil";
    _id_6F6EFEC7E89387E8[512] = "direct";
    _id_6F6EFEC7E89387E8[1024] = "";
    scriptableparts = [];
    scriptablestates = [];
    _id_E42C4A59211C25AA = 1;
    _id_A56FFA08FD7C6E21 = 8;
    _id_880B6BD9B71C4ABC = 64;
    _id_EC021596457D03C5 = 512;
    mask = 7;

    for ( _id_DFCFA94F575DB98D = _id_E42C4A59211C25AA; ( _id_DFCFA94F575DB98D & 7 ) > 0; _id_DFCFA94F575DB98D = _id_DFCFA94F575DB98D << 1 )
    {
        scriptableparts[_id_DFCFA94F575DB98D] = _id_6F6EFEC7E89387E8[_id_DFCFA94F575DB98D];

        for ( _id_5EE7711499BF12C4 = _id_A56FFA08FD7C6E21; ( _id_5EE7711499BF12C4 & 56 ) > 0; _id_5EE7711499BF12C4 = _id_5EE7711499BF12C4 << 1 )
        {
            for ( _id_EBB5A5E5F2FAFC4B = _id_880B6BD9B71C4ABC; ( _id_EBB5A5E5F2FAFC4B & 448 ) > 0; _id_EBB5A5E5F2FAFC4B = _id_EBB5A5E5F2FAFC4B << 1 )
            {
                for ( _id_2C78ADEE3F228D08 = _id_EC021596457D03C5; ( _id_2C78ADEE3F228D08 & 1536 ) > 0; _id_2C78ADEE3F228D08 = _id_2C78ADEE3F228D08 << 1 )
                {
                    mask = _id_DFCFA94F575DB98D | _id_5EE7711499BF12C4 | _id_EBB5A5E5F2FAFC4B | _id_2C78ADEE3F228D08;
                    scriptablestates[mask] = _id_6F6EFEC7E89387E8[_id_5EE7711499BF12C4] + _id_6F6EFEC7E89387E8[_id_EBB5A5E5F2FAFC4B] + _id_6F6EFEC7E89387E8[_id_2C78ADEE3F228D08];
                    mask = _id_5EE7711499BF12C4 | _id_EBB5A5E5F2FAFC4B | _id_2C78ADEE3F228D08;
                    scriptablestates[mask] = "neutral";
                }
            }
        }
    }

    pooldata.scriptableparts = scriptableparts;
    pooldata.scriptablestates = scriptablestates;
}

molotov_stuck( grenade, stuckto, _id_6951CF1F43BC8EBE, _id_CEAB23E7A7E95404, thrownoffhand )
{
    angles = undefined;
    forward = vectornormalize( _id_CEAB23E7A7E95404 );
    up = anglestoup( grenade.angles );
    right = anglestoright( _id_6951CF1F43BC8EBE );

    if ( abs( vectordot( forward, up ) ) >= 0.9848 )
        angles = molotov_rebuild_angles_up_right( up, right );
    else
        angles = molotov_rebuild_angles_up_forward( up, forward );

    grenade.angles = angles;
    grenade notify( "death" );
    grenade setscriptablepartstate( "effects", "explode", 0 );
    molotov_simulate_impact( grenade, grenade.origin, angles, stuckto, _id_CEAB23E7A7E95404, gettime(), thrownoffhand );

    if ( istrue( level._id_721B11EED320A2B5 ) )
        return;

    grenade detonate();
}

molotovbadplace( _id_183BDCC9E630D8DD )
{
    badplace = createnavbadplacebybounds( _id_183BDCC9E630D8DD, ( 128, 128, 100 ), ( 0, 0, 0 ) );

    if ( level.dbgmolodrawhits )
        _id_47D735016BAE708E = int( 6250.0 );

    return badplace;
}

molotov_simulate_impact( grenade, _id_183BDCC9E630D8DD, _id_4B65413211AF7033, _id_3AE043BBB7B2FDF0, _id_CEAB23E7A7E95404, impacttime, thrownoffhand )
{
    index = level.molotovdata.active.size;
    level.molotovdata.active[index] = spawnstruct();
    owner = grenade.owner;
    _id_DA984FE90CC9723C = anglestoup( _id_4B65413211AF7033 );
    caststart = _id_183BDCC9E630D8DD + _id_DA984FE90CC9723C * 1;
    castend = caststart + _id_DA984FE90CC9723C * 25;
    contents = molotov_get_cast_contents();
    ignore = getaiarray();
    ignore = scripts\engine\utility::array_add( ignore, grenade );

    if ( level.dbgmolodrawhits )
    {

    }

    _id_E021C2744CC7ED68 = physics_raycast( caststart, castend, contents, ignore, 0, "physicsquery_closest", 1 );

    if ( isdefined( _id_E021C2744CC7ED68 ) && _id_E021C2744CC7ED68.size > 0 )
        castend = _id_E021C2744CC7ED68[0]["position"] - _id_DA984FE90CC9723C * 1;

    _id_A862BFA81AEE2A1B = castend;
    burnsource = grenade;
    burnid = molotov_get_next_burning_id();
    _id_0E24E63386230E04 = 0;
    impactincidence = 512;
    _id_483380BBC108CDCE = vectordot( vectornormalize( _id_CEAB23E7A7E95404 ), -1 * _id_DA984FE90CC9723C );

    if ( _id_483380BBC108CDCE < 0.96593 )
    {
        _id_0E24E63386230E04 = 1;
        impactincidence = 1024;
    }

    shareddata = molotov_create_shared_data( owner, impacttime, impactincidence, burnsource, burnid, thrownoffhand );
    shareddata.badplace = molotovbadplace( _id_183BDCC9E630D8DD );
    shareddata.scriptables = moltovgetscriptables( _id_183BDCC9E630D8DD );
    shareddata.vehicles = moltovgetvehicles( _id_183BDCC9E630D8DD );
    shareddata.ai = moltovgetai( _id_183BDCC9E630D8DD );
    id = 8;
    castdata = molotov_get_cast_data( id );
    pooldata = molotov_get_pool_data( id );
    _id_8D01E03C5C561B39 = molotov_create_branch( shareddata, castdata, pooldata, undefined, _id_183BDCC9E630D8DD, _id_4B65413211AF7033, _id_3AE043BBB7B2FDF0 );
    shareddata.branches[shareddata.branches.size] = _id_8D01E03C5C561B39;
    _id_6F2B46872DF538DE = 25;
    _id_DF64BADCCF60FD69 = 65;
    _id_144E6D19329167BD = 115;
    _id_911981AE29F681E9 = gettime() + pooldata.startdelayms;
    id = 16;
    castdata = molotov_get_cast_data( id );
    pooldata = molotov_get_pool_data( id );
    oncompletedfunc = ::molotov_branch_create_tendril_radial;

    if ( _id_0E24E63386230E04 )
        oncompletedfunc = ::molotov_branch_create_forward_tendril_cone;

    _id_8D01E03C5C561B39 = molotov_create_branch( shareddata, castdata, pooldata, undefined, _id_A862BFA81AEE2A1B, _id_4B65413211AF7033, _id_3AE043BBB7B2FDF0, 0, _id_911981AE29F681E9, oncompletedfunc );
    shareddata.branches[shareddata.branches.size] = _id_8D01E03C5C561B39;
    forward = anglestoforward( _id_4B65413211AF7033 );
    right = anglestoright( _id_4B65413211AF7033 );
    up = anglestoup( _id_4B65413211AF7033 );
    castdata = molotov_get_cast_data( id );
    pooldata = molotov_get_pool_data( id );
    _id_17F0969AB028C296 = forward * -1;
    _id_87F08DF736795F51 = right * -1;
    _id_B644A203C149F9AC = up;
    _id_106F27F1BC233C55 = axistoangles( _id_17F0969AB028C296, _id_87F08DF736795F51, _id_B644A203C149F9AC );
    oncompletedfunc = ::molotov_branch_create_tendril_radial;

    if ( _id_0E24E63386230E04 )
        oncompletedfunc = undefined;

    _id_8D01E03C5C561B39 = molotov_create_branch( shareddata, castdata, pooldata, undefined, _id_A862BFA81AEE2A1B, _id_106F27F1BC233C55, _id_3AE043BBB7B2FDF0, 0, _id_911981AE29F681E9, oncompletedfunc );
    shareddata.branches[shareddata.branches.size] = _id_8D01E03C5C561B39;
    castdata = molotov_get_cast_data( id );
    pooldata = molotov_get_pool_data( id );
    _id_17F0969AB028C296 = rotatepointaroundvector( up, forward, _id_DF64BADCCF60FD69 );
    _id_87F08DF736795F51 = vectornormalize( vectorcross( _id_17F0969AB028C296, up ) );
    _id_B644A203C149F9AC = vectorcross( _id_87F08DF736795F51, forward );
    _id_106F27F1BC233C55 = axistoangles( _id_17F0969AB028C296, _id_87F08DF736795F51, _id_B644A203C149F9AC );
    oncompletedfunc = ::molotov_branch_create_tendril_radial;

    if ( _id_0E24E63386230E04 )
        oncompletedfunc = ::molotov_branch_create_right_tendril_cone;

    _id_8D01E03C5C561B39 = molotov_create_branch( shareddata, castdata, pooldata, undefined, _id_A862BFA81AEE2A1B, _id_106F27F1BC233C55, _id_3AE043BBB7B2FDF0, 0, _id_911981AE29F681E9, oncompletedfunc );
    shareddata.branches[shareddata.branches.size] = _id_8D01E03C5C561B39;
    castdata = molotov_get_cast_data( id );
    pooldata = molotov_get_pool_data( id );
    _id_17F0969AB028C296 = rotatepointaroundvector( up, forward, -1 * _id_DF64BADCCF60FD69 );
    _id_87F08DF736795F51 = vectornormalize( vectorcross( _id_17F0969AB028C296, up ) );
    _id_B644A203C149F9AC = vectorcross( _id_87F08DF736795F51, forward );
    _id_106F27F1BC233C55 = axistoangles( _id_17F0969AB028C296, _id_87F08DF736795F51, _id_B644A203C149F9AC );
    oncompletedfunc = ::molotov_branch_create_tendril_radial;

    if ( _id_0E24E63386230E04 )
        oncompletedfunc = ::molotov_branch_create_left_tendril_cone;

    _id_8D01E03C5C561B39 = molotov_create_branch( shareddata, castdata, pooldata, undefined, _id_A862BFA81AEE2A1B, _id_106F27F1BC233C55, _id_3AE043BBB7B2FDF0, 0, _id_911981AE29F681E9, oncompletedfunc );
    shareddata.branches[shareddata.branches.size] = _id_8D01E03C5C561B39;
    castdata = molotov_get_cast_data( id );
    pooldata = molotov_get_pool_data( id );
    _id_17F0969AB028C296 = rotatepointaroundvector( up, forward, _id_144E6D19329167BD );
    _id_87F08DF736795F51 = vectornormalize( vectorcross( _id_17F0969AB028C296, up ) );
    _id_B644A203C149F9AC = vectorcross( _id_87F08DF736795F51, forward );
    _id_106F27F1BC233C55 = axistoangles( _id_17F0969AB028C296, _id_87F08DF736795F51, _id_B644A203C149F9AC );
    oncompletedfunc = ::molotov_branch_create_tendril_radial;

    if ( _id_0E24E63386230E04 )
        oncompletedfunc = undefined;

    _id_8D01E03C5C561B39 = molotov_create_branch( shareddata, castdata, pooldata, undefined, _id_A862BFA81AEE2A1B, _id_106F27F1BC233C55, _id_3AE043BBB7B2FDF0, 0, _id_911981AE29F681E9, oncompletedfunc );
    shareddata.branches[shareddata.branches.size] = _id_8D01E03C5C561B39;
    castdata = molotov_get_cast_data( id );
    pooldata = molotov_get_pool_data( id );
    _id_17F0969AB028C296 = rotatepointaroundvector( up, forward, -1 * _id_144E6D19329167BD );
    _id_87F08DF736795F51 = vectornormalize( vectorcross( _id_17F0969AB028C296, up ) );
    _id_B644A203C149F9AC = vectorcross( _id_87F08DF736795F51, forward );
    _id_106F27F1BC233C55 = axistoangles( _id_17F0969AB028C296, _id_87F08DF736795F51, _id_B644A203C149F9AC );
    oncompletedfunc = ::molotov_branch_create_tendril_radial;

    if ( _id_0E24E63386230E04 )
        oncompletedfunc = undefined;

    _id_8D01E03C5C561B39 = molotov_create_branch( shareddata, castdata, pooldata, undefined, _id_A862BFA81AEE2A1B, _id_106F27F1BC233C55, _id_3AE043BBB7B2FDF0, 0, _id_911981AE29F681E9, oncompletedfunc );
    shareddata.branches[shareddata.branches.size] = _id_8D01E03C5C561B39;
    shareddata molotov_shared_data_register_cast();

    foreach ( _id_8D01E03C5C561B39 in shareddata.branches )
        _id_8D01E03C5C561B39 thread molotov_start_branch();

    shareddata thread molotov_cleanup();
    shareddata.initialized = 1;
    level.molotovdata.active[index] = shareddata;
}

moltovgetscriptables( _id_183BDCC9E630D8DD )
{
    _id_E414ABEC4672A375[0] = "scriptable_container_gas_tank_01";
    _id_E414ABEC4672A375[1] = "scriptable_equipment_propane_burner_stove_01_red";
    _id_E414ABEC4672A375[2] = "scriptable_equipment_propane_burner_stove_01_green";
    _id_E414ABEC4672A375[3] = "scriptable_equipment_propane_burner_stove_01_blue";
    _id_E414ABEC4672A375[4] = "scriptable_equipment_propane_burner_stove_01_white";
    _id_E414ABEC4672A375[5] = "scriptable_equipment_propane_burner_stove_01_yellow";
    _id_E414ABEC4672A375[6] = "scriptable_decor_propane_tank_01_en";
    _id_1BB27F14710C304F = [];

    foreach ( ent in _id_E414ABEC4672A375 )
    {
        scriptables = getscriptablearray( ent, "classname" );

        foreach ( ent in scriptables )
        {
            _id_4EB801042B324702 = distancesquared( ent.origin, _id_183BDCC9E630D8DD );

            if ( _id_4EB801042B324702 <= 65536 )
                _id_1BB27F14710C304F = scripts\engine\utility::array_add( _id_1BB27F14710C304F, ent );
        }
    }

    return _id_1BB27F14710C304F;
}

moltovgetvehicles( _id_183BDCC9E630D8DD )
{
    _id_8C33E181F5DDAE3C = [];
    vehicles = getscriptablearray( "scriptable", "code_classname" );
    vehicles = scripts\engine\utility::array_combine( vehicles, getentarray( "script_vehicle", "code_classname" ) );

    foreach ( vehicle in vehicles )
    {
        if ( !isdefined( vehicle.model ) || !isstartstr( vehicle.model, "veh8_" ) )
            continue;

        _id_4EB801042B324702 = distancesquared( vehicle.origin, _id_183BDCC9E630D8DD );

        if ( _id_4EB801042B324702 <= 65536 )
            _id_8C33E181F5DDAE3C = scripts\engine\utility::array_add( _id_8C33E181F5DDAE3C, vehicle );
    }

    return _id_8C33E181F5DDAE3C;
}

moltovgetai( _id_183BDCC9E630D8DD )
{
    ai = getaiarray();
    ai = scripts\engine\utility::array_removeundefined( ai );
    ai = scripts\engine\utility::array_removedead_or_dying( ai, 0 );
    _id_DC7F77838B035B27 = [];

    foreach ( guy in ai )
    {
        _id_4EB801042B324702 = distancesquared( guy.origin, _id_183BDCC9E630D8DD );

        if ( _id_4EB801042B324702 <= 65536 )
            _id_DC7F77838B035B27 = scripts\engine\utility::array_add( _id_DC7F77838B035B27, guy );
    }

    return _id_DC7F77838B035B27;
}

molotov_cleanup()
{
    self.burnsource scripts\engine\utility::waittill_notify_or_timeout( "entitydeleted", 6.25 );

    for (;;)
    {
        _id_3F9251D8CD3164A0 = 1;

        foreach ( _id_8D01E03C5C561B39 in self.branches )
        {
            if ( !istrue( _id_8D01E03C5C561B39.iscomplete ) )
            {
                _id_3F9251D8CD3164A0 = 0;
                break;
            }

            if ( !_id_3F9251D8CD3164A0 )
                break;
        }

        if ( _id_3F9251D8CD3164A0 )
            break;

        waitframe();
    }

    destroynavobstacle( self.badplace );

    if ( isdefined( self.burnsource ) )
        self.burnsource delete();

    level.molotovdata.active = scripts\engine\utility::array_remove( level.molotovdata.active, self );
}

molotov_create_shared_data( owner, impacttime, impactincidence, burnsource, burnid, thrownoffhand )
{
    shareddata = spawnstruct();
    shareddata.owner = owner;
    shareddata.team = owner.team;
    shareddata.impacttime = impacttime;
    shareddata.impactincidence = impactincidence;
    shareddata.burnsource = burnsource;
    shareddata.burnid = burnid;
    shareddata.branches = [];
    shareddata.thrownoffhand = thrownoffhand;
    shareddata.entstotal = 0;
    shareddata.caststotal = 0;
    shareddata.caststhisframe = 0;
    shareddata.frametimestamp = gettime();
    shareddata.castcontents = physics_createcontents( [ "physicscontents_missileclip", "physicscontents_glass", "physicscontents_water", "physicscontents_item", "physicscontents_vehicle" ] );
    shareddata.castignore = getaiarray();
    shareddata.castignore = scripts\engine\utility::array_add( shareddata.castignore, level.player );
    return shareddata;
}

molotov_shared_data_register_cast()
{
    self.caststotal++;
    self.caststhisframe++;
    self.frametimestamp = gettime();
}

molotov_shared_data_register_ent()
{
    self.entstotal++;
}

molotov_shared_data_can_cast_this_frame()
{
    if ( self.frametimestamp < gettime() )
    {
        self.frametimestamp = gettime();
        self.caststhisframe = 0;
    }

    return self.caststhisframe < 3;
}

molotov_shared_data_is_complete( _id_AF8745E2185687A8 )
{
    iscomplete = 0;

    if ( self.caststotal >= 60 )
        iscomplete = 1;
    else if ( self.entstotal >= 20 )
        iscomplete = 1;
    else if ( istrue( _id_AF8745E2185687A8 ) )
    {
        _id_3CE5D6EB962629FA = 1;

        foreach ( _id_8D01E03C5C561B39 in self.branches )
        {
            if ( !_id_8D01E03C5C561B39 molotov_branch_is_complete( 1, 1 ) )
            {
                _id_3CE5D6EB962629FA = 0;
                break;
            }
        }

        if ( _id_3CE5D6EB962629FA )
            iscomplete = 1;
    }

    if ( iscomplete )
    {
        self.iscomplete = 1;
        self.branches = [];
    }

    return iscomplete;
}

molotov_create_branch( shareddata, castdata, pooldata, parent, startingorigin, startingangles, startingstuckto, startingcasttype, preventstarttime, oncompletedfunc )
{
    _id_8D01E03C5C561B39 = spawnstruct();
    _id_8D01E03C5C561B39.shareddata = shareddata;
    _id_8D01E03C5C561B39.castdata = castdata;
    _id_8D01E03C5C561B39.pooldata = pooldata;
    _id_8D01E03C5C561B39.startingorigin = startingorigin;
    _id_8D01E03C5C561B39.startingangles = startingangles;
    _id_8D01E03C5C561B39.startingstuckto = startingstuckto;
    _id_8D01E03C5C561B39.startingcasttype = startingcasttype;
    _id_8D01E03C5C561B39.oncompletedfunc = oncompletedfunc;
    _id_8D01E03C5C561B39.ents = [];
    _id_8D01E03C5C561B39.branches = [];
    _id_8D01E03C5C561B39.hitpositions = [];
    _id_8D01E03C5C561B39.hittypes = [];
    _id_8D01E03C5C561B39.casts = 0;
    _id_8D01E03C5C561B39.castfails = 0;
    _id_8D01E03C5C561B39.preventstarttime = preventstarttime;
    return _id_8D01E03C5C561B39;
}

molotov_start_branch()
{
    if ( !isdefined( self.preventstarttime ) )
        self.preventstarttime = gettime();

    if ( !isdefined( self.startingcasttype ) )
    {
        if ( !self.shareddata molotov_shared_data_is_complete() )
        {
            _id_5D02A89F45CC20D7 = molotov_branch_create_pool( self.startingorigin, self.startingangles, self.shareddata.impactincidence, self.startingstuckto );
            _id_5D02A89F45CC20D7 thread molotov_pool_start();
            pool_damage_scriptables( _id_5D02A89F45CC20D7.origin );
            pool_damage_vehicles( _id_5D02A89F45CC20D7.origin, _id_5D02A89F45CC20D7 );
            pool_damage_ai( _id_5D02A89F45CC20D7.origin, self.shareddata.owner );
            self.iscomplete = 1;
            self.shareddata molotov_shared_data_is_complete( 1 );
        }
    }
    else
    {
        self.caststart = self.startingorigin;
        self.castend = undefined;
        self.castangles = self.startingangles;
        self.castdir = undefined;
        self.casttype = self.startingcasttype;
        self.startingorigin = undefined;
        self.startingangles = undefined;
        self.startingcasttype = undefined;

        for (;;)
        {
            if ( self.shareddata molotov_shared_data_is_complete() )
                break;

            if ( molotov_branch_is_complete( undefined, 1 ) )
                break;

            if ( !self.shareddata molotov_shared_data_can_cast_this_frame() )
            {
                waitframe();
                continue;
            }

            if ( self.casttype == 0 )
            {
                firstforwardmodanglesfunc = self.castdata.firstforwardmodanglesfunc;

                if ( isdefined( firstforwardmodanglesfunc ) )
                {
                    self.castangles = [[ firstforwardmodanglesfunc ]]( self.castangles );
                    self.castdata.firstforwardmodanglesfunc = undefined;
                    self.castdata.iswallcast = undefined;
                }
            }

            if ( !isdefined( self.iswallcast ) )
            {
                _id_89E70A63B116955B = vectordot( anglestoup( self.castangles ), ( 0, 0, 1 ) );
                self.iswallcast = _id_89E70A63B116955B > -0.81915 && _id_89E70A63B116955B <= 0.5;

                if ( isdefined( self.castdata.firstforwarddist ) )
                {
                    if ( self.iswallcast && isdefined( self.castdata.firstforwarddistwall ) )
                    {
                        self.castdata.firstforwarddist = self.castdata.firstforwarddistwall;
                        self.castdata.firstforwarddistwall = undefined;
                    }
                    else
                        self.castdata.firstforwarddistwall = undefined;
                }
            }

            self.castdir = molotov_get_cast_dir( self.castangles, self.casttype );
            self.castend = self.caststart + self.castdir * molotov_get_cast_dist( self.casttype, self.castdata, self.iswallcast );
            _id_10CFD730AD727443 = undefined;
            _id_488AE8E1536D02B3 = undefined;
            _id_A95D04F8F906E839 = undefined;
            _id_8D3DD4E0CA9BB1C0 = undefined;
            _id_D27F9A12A82F66E3 = undefined;

            if ( level.dbgmolodrawhits )
            {

            }

            _id_E021C2744CC7ED68 = physics_raycast( self.caststart, self.castend, self.shareddata.castcontents, undefined, 0, "physicsquery_closest", 1 );

            if ( isdefined( _id_E021C2744CC7ED68 ) && _id_E021C2744CC7ED68.size > 0 )
            {
                _id_10CFD730AD727443 = 1;
                _id_488AE8E1536D02B3 = _id_E021C2744CC7ED68[0]["position"];
                _id_A95D04F8F906E839 = _id_E021C2744CC7ED68[0]["normal"];
                _id_8D3DD4E0CA9BB1C0 = _id_E021C2744CC7ED68[0]["entity"];
            }

            switch ( self.casttype )
            {
                case 0:
                    if ( istrue( _id_10CFD730AD727443 ) )
                    {
                        molotov_branch_register_cast( self.casttype, 0, _id_488AE8E1536D02B3 );
                        _id_1DDC516959EF26A0 = 1;

                        if ( isdefined( self.castdata.firstforwarddist ) )
                        {
                            _id_D0914E2FC24E75F8 = _id_488AE8E1536D02B3 - self.caststart;
                            _id_64B62CB5DC1E7AF6 = vectordot( _id_D0914E2FC24E75F8, self.castdir );
                            self.castdata.firstforwarddist = self.castdata.firstforwarddist - _id_64B62CB5DC1E7AF6;

                            if ( self.castdata.firstforwarddist > self.castdata.firstforwardmindist )
                                _id_1DDC516959EF26A0 = 0;
                            else
                                self.castdata.firstforwarddist = undefined;
                        }

                        _id_D27F9A12A82F66E3 = molotov_rebuild_angles_up_right( _id_A95D04F8F906E839, anglestoright( self.castangles ) );

                        if ( _id_1DDC516959EF26A0 )
                        {
                            ent = molotov_branch_create_pool( _id_488AE8E1536D02B3, _id_D27F9A12A82F66E3, self.shareddata.impactincidence, _id_8D3DD4E0CA9BB1C0 );
                            ent thread molotov_pool_start();
                            pool_damage_ai( ent.origin, self.shareddata.owner );
                        }

                        self.casttype = 2;
                        self.caststart = _id_488AE8E1536D02B3 + _id_A95D04F8F906E839 * 1;
                        self.castangles = _id_D27F9A12A82F66E3;
                        self.iswallcast = undefined;
                    }
                    else
                    {
                        molotov_branch_register_cast( self.casttype, undefined, undefined );

                        if ( isdefined( self.castdata.firstforwarddist ) )
                        {
                            _id_D0914E2FC24E75F8 = self.castend - self.caststart;
                            _id_64B62CB5DC1E7AF6 = vectordot( _id_D0914E2FC24E75F8, self.castdir );
                            self.castdata.firstforwarddist = self.castdata.firstforwarddist - _id_64B62CB5DC1E7AF6;

                            if ( self.castdata.firstforwarddist <= self.castdata.firstforwardmindist )
                                self.castdata.firstforwarddist = undefined;
                        }

                        self.casttype = 1;
                        self.caststart = self.castend;
                    }

                    break;
                case 1:
                    if ( istrue( _id_10CFD730AD727443 ) )
                    {
                        _id_D27F9A12A82F66E3 = molotov_rebuild_angles_up_right( _id_A95D04F8F906E839, anglestoright( self.castangles ) );
                        ent = molotov_branch_create_pool( _id_488AE8E1536D02B3, _id_D27F9A12A82F66E3, self.shareddata.impactincidence, _id_8D3DD4E0CA9BB1C0 );
                        ent thread molotov_pool_start();
                        pool_damage_ai( ent.origin, self.shareddata.owner );
                        _id_970F97CB88D6B89E = vectordot( anglestoup( self.castangles ), _id_A95D04F8F906E839 );

                        if ( _id_970F97CB88D6B89E < 0.9848 )
                        {
                            molotov_branch_register_cast( self.casttype, 2, _id_488AE8E1536D02B3 );
                            self.casttype = 2;
                            self.caststart = _id_488AE8E1536D02B3 + _id_A95D04F8F906E839 * 1;
                            self.castangles = _id_D27F9A12A82F66E3;
                        }
                        else
                        {
                            molotov_branch_register_cast( self.casttype, 1, _id_488AE8E1536D02B3 );
                            self.casttype = 0;
                        }
                    }
                    else
                    {
                        molotov_branch_register_cast( self.casttype, undefined, undefined );
                        self.caststart = self.castend;
                    }

                    break;
                case 2:
                    if ( istrue( _id_10CFD730AD727443 ) )
                    {
                        molotov_branch_register_cast( self.casttype, 3, _id_488AE8E1536D02B3 );
                        self.casttype = 0;
                        self.caststart = _id_488AE8E1536D02B3 + _id_A95D04F8F906E839 * 1;
                    }
                    else
                    {
                        molotov_branch_register_cast( self.casttype, undefined, undefined );
                        self.casttype = 0;
                    }

                    break;
            }

            waittillframeend;
        }

        self.iscomplete = 1;
        self.shareddata molotov_shared_data_is_complete( 1 );
    }
}

molotov_branch_is_complete( _id_AF8745E2185687A8, _id_F7D3F0B0605B5824 )
{
    iscomplete = 0;
    _id_3CE5D6EB962629FA = undefined;

    if ( !istrue( _id_F7D3F0B0605B5824 ) )
        iscomplete = self.shareddata molotov_shared_data_is_complete();

    if ( !iscomplete )
    {
        if ( isdefined( self.castdata ) && isdefined( self.castdata.maxfails ) && self.castfails >= self.castdata.maxfails )
            iscomplete = 1;
        else if ( isdefined( self.castdata ) && isdefined( self.castdata.maxcasts ) && self.casts >= self.castdata.maxcasts )
            iscomplete = 1;
        else if ( isdefined( self.castdata ) && isdefined( self.castdata.maxents ) && self.ents.size >= self.castdata.maxents )
            iscomplete = 1;
        else if ( istrue( _id_AF8745E2185687A8 ) && self.branches.size > 0 )
        {
            _id_3CE5D6EB962629FA = 1;

            foreach ( _id_8D01E03C5C561B39 in self.branches )
            {
                if ( !_id_8D01E03C5C561B39 molotov_branch_is_complete( _id_AF8745E2185687A8, _id_F7D3F0B0605B5824 ) )
                {
                    _id_3CE5D6EB962629FA = 0;
                    break;
                }
            }

            if ( _id_3CE5D6EB962629FA )
                iscomplete = 1;
        }
    }

    if ( iscomplete && !istrue( self.iscomplete ) )
    {
        oncompletedfunc = self.oncompletedfunc;
        self.oncompletedfunc = undefined;

        if ( isdefined( oncompletedfunc ) )
            self [[ oncompletedfunc ]]();

        if ( istrue( _id_3CE5D6EB962629FA ) )
        {
            iscomplete = 0;

            foreach ( _id_8D01E03C5C561B39 in self.branches )
            {
                if ( !_id_8D01E03C5C561B39 molotov_branch_is_complete( 1, _id_F7D3F0B0605B5824 ) )
                {
                    _id_3CE5D6EB962629FA = 0;
                    break;
                }
            }

            if ( _id_3CE5D6EB962629FA )
                iscomplete = 1;
        }
    }

    if ( iscomplete )
    {
        self.iscomplete = 1;
        self.branches = [];
    }

    return iscomplete;
}

molotov_branch_register_cast( casttype, _id_8E87EBE279CDFCFB, _id_8A7FE8798602A3D1 )
{
    self.shareddata molotov_shared_data_register_cast();
    self.casts++;

    if ( isdefined( _id_8E87EBE279CDFCFB ) )
    {
        if ( _id_8E87EBE279CDFCFB == 0 || _id_8E87EBE279CDFCFB == 1 || _id_8E87EBE279CDFCFB == 2 )
            self.castfails = 0;
    }
    else if ( casttype == 1 )
        self.castfails++;
}

molotov_create_pool( origin, angles, stuckto, owner, burnsource, burnid, starttime, pooldata, poolmask )
{
    ent = spawn( "script_model", origin );
    ent.angles = angles;
    ent.stuckto = stuckto;
    ent.owner = owner;
    ent.burnsource = burnsource;
    ent.burnid = burnid;
    ent.starttime = starttime;
    ent.pooldata = pooldata;
    ent.poolmask = poolmask;
    ent setmodel( "equip_molotov_pool_mp" );

    if ( isdefined( owner ) )
    {
        ent setotherent( owner );
        ent setentityowner( owner );
    }

    if ( poolshouldlink( stuckto ) )
        ent linkto( stuckto );

    return ent;
}

poolshouldlink( stuckto )
{
    if ( !isdefined( stuckto ) )
        return 0;

    if ( stuckto == level.player )
        return 0;

    if ( isai( stuckto ) )
        return 0;

    return 1;
}

molotov_branch_create_pool( origin, angles, _id_1A1F0F50E7A6DE9D, stuckto )
{
    poolmask = self.pooldata.typeid;
    up = anglestoup( angles );
    dot = vectordot( up, ( 0, 0, 1 ) );

    if ( dot <= -0.81915 )
        poolmask = poolmask | 256;
    else if ( dot <= 0.5 )
        poolmask = poolmask | 128;
    else
        poolmask = poolmask | 64;

    poolmask = poolmask | _id_1A1F0F50E7A6DE9D;
    starttime = self.preventstarttime + self.pooldata.startdelayms;
    ent = molotov_create_pool( origin, angles, stuckto, self.shareddata.owner, self.shareddata.burnsource, self.shareddata.burnid, starttime, self.pooldata, poolmask );
    self.preventstarttime = starttime;
    self.ents[self.ents.size] = ent;
    self.shareddata molotov_shared_data_register_ent();
    return ent;
}

molotov_pool_start()
{
    if ( istrue( self.started ) )
        return;

    self.started = 1;
    self endon( "death" );
    self endon( "molotov_pool_end" );

    while ( gettime() < self.starttime )
        waitframe();

    self.ended = 0;
    molotov_watch_pool();

    if ( isdefined( self ) )
        thread molotov_pool_end();
}

molotov_watch_pool_explosion_extinguish()
{
    contents = physics_createcontents( [ "physicscontents_glass", "physicscontents_water", "physicscontents_item", "physicscontents_vehicle", "physicscontents_explosionclip" ] );

    for (;;)
    {
        level waittill( "explosion_extinguish", position, radius, owner, ignoreents );

        if ( distancesquared( position, self.origin ) > radius * radius )
            continue;

        if ( !isdefined( ignoreents ) )
        {
            ignoreents = [];
            ignoreents[ignoreents.size] = self;
            ignoreents[ignoreents.size] = self.burnsource;
        }
        else if ( isarray( ignoreents ) )
        {
            ignoreents[ignoreents.size] = self;
            ignoreents[ignoreents.size] = self.burnsource;
        }
        else
        {
            _id_447F40C814B97CDC = ignoreents;
            ignoreents = [];
            ignoreents[ignoreents.size] = self;
            ignoreents[ignoreents.size] = self.burnsource;
            ignoreents[ignoreents.size] = _id_447F40C814B97CDC;
        }

        _id_C929B62D2B2A99B5 = min( 15, self.pooldata.triggerheight );
        caststart = self.origin + anglestoup( self.angles ) * _id_C929B62D2B2A99B5;
        _id_E021C2744CC7ED68 = physics_raycast( self.origin, position, contents, ignoreents, 0, "physicsquery_closest", 1 );

        if ( isdefined( _id_E021C2744CC7ED68 ) && _id_E021C2744CC7ED68.size > 0 )
            continue;

        thread molotov_pool_end();
    }
}

molotov_watch_pool()
{
    if ( isdefined( self.stuckto ) )
        self.stuckto endon( "death" );

    childthread molotov_watch_pool_explosion_extinguish();

    if ( !istrue( level.dbgmoloburnlooponly ) && !istrue( level.dbgmolodiedownonly ) )
        self.poolmask = self.poolmask | 1;

    self.trigger = molotov_create_pool_trigger( self.pooldata.triggerradius, self.pooldata.triggerheight, self.pooldata.triggeroffset, self.pooldata.dangerzoneradius, self.pooldata.dangerzoneheight );
    molotov_pool_update_scriptable();
    wait 0.7;

    if ( !istrue( level.dbgmoloflareuponly ) && !istrue( level.dbgmolodiedownonly ) )
        self.poolmask = self.poolmask | 2;

    molotov_pool_update_scriptable();
    wait 0.3;
    self.poolmask = self.poolmask & ~1;
    molotov_pool_update_scriptable();
    _id_08FC4600D9C0CBB6 = randomfloatrange( 6.0, 6.25 );
    wait( _id_08FC4600D9C0CBB6 );
}

molotov_pool_end( immediate )
{
    self endon( "death" );

    if ( istrue( self.ended ) )
        return;

    self notify( "molotov_pool_end" );
    self.ended = 1;

    if ( isdefined( self.poolmask ) )
    {
        self.poolmask = self.poolmask & ~1;
        self.poolmask = self.poolmask & ~2;
    }

    if ( !istrue( level.dbgmoloflareuponly ) && !istrue( level.dbgmoloburnlooponly ) && isdefined( self.poolmask ) )
        self.poolmask = self.poolmask | 4;

    molotov_pool_update_scriptable();

    if ( !istrue( immediate ) )
        wait 1;

    if ( isdefined( self.trigger ) )
        self.trigger delete();

    self setscriptablepartstate( "decal", "neutral", 0 );
    wait 3.5;
    self delete();
}

molotov_create_pool_trigger( triggerradius, triggerheight, triggeroffset, dangerzoneradius, dangerzoneheight )
{
    origin = self.origin - anglestoup( self.angles ) * triggeroffset;
    trigger = spawn( "trigger_radius_fire", origin, 0, triggerradius, triggerheight );
    trigger.script_multiplier = 10;
    trigger.script_radius = triggerradius;
    trigger.angles = self.angles;
    thread scripts\sp\trigger::trigger_fire( trigger );
    level notify( "molotov_fire_trigger", trigger );
    trigger enablelinkto();
    trigger linkto( self );
    trigger hide();
    struct = spawnstruct();
    struct.trigger = trigger;
    struct.attacker = self.owner;
    struct.inflictor = self.burnsource;
    struct.killcament = self.burnsource;
    struct.burnid = self.burnid;
    struct.playersintrigger = [];
    trigger.struct = struct;

    if ( isdefined( dangerzoneradius ) )
    {

    }

    return trigger;
}

molotov_pool_update_scriptable()
{
    _id_0574DCC9E90F56B3 = level.molotovdata.pooldata;
    _id_D45FF0DE4242F3CA = self.poolmask & 7;
    _id_E42C4A59211C25AA = 1;

    for ( _id_DFCFA94F575DB98D = _id_E42C4A59211C25AA; ( _id_DFCFA94F575DB98D & 7 ) > 0; _id_DFCFA94F575DB98D = _id_DFCFA94F575DB98D << 1 )
    {
        mask = ~( 7 & ~_id_DFCFA94F575DB98D ) & self.poolmask;
        part = _id_0574DCC9E90F56B3.scriptableparts[_id_DFCFA94F575DB98D];
        state = _id_0574DCC9E90F56B3.scriptablestates[mask];
        self setscriptablepartstate( part, state, 0 );
    }
}

molotov_branch_create_sub_branch( id, starttime, firstforwarddist, firstforwardmindist, firstforwardmodanglesfunc, firstforwarddistwall, maxcasts, maxents, _id_94B720A60991D4DB )
{
    shareddata = self.shareddata;
    castdata = molotov_get_cast_data( id );
    pooldata = molotov_get_pool_data( id );

    if ( isdefined( self.castdata ) )
    {
        if ( self.castfails > self.castdata.maxfails )
            return;

        if ( self.castfails > castdata.maxfails )
            return;
    }

    if ( isdefined( firstforwarddist ) )
        castdata.firstforwarddist = firstforwarddist;

    if ( isdefined( firstforwardmindist ) )
        castdata.firstforwardmindist = firstforwardmindist;

    if ( isdefined( firstforwardmodanglesfunc ) )
        castdata.firstforwardmodanglesfunc = firstforwardmodanglesfunc;

    if ( isdefined( firstforwarddistwall ) )
        castdata.firstforwarddistwall = firstforwarddistwall;

    if ( isdefined( maxcasts ) )
        castdata.maxcasts = maxcasts;

    if ( isdefined( maxents ) )
        castdata.maxents = maxents;

    _id_8D01E03C5C561B39 = molotov_create_branch( shareddata, castdata, pooldata, self, self.caststart, self.castangles, undefined, self.casttype, self.preventstarttime );
    _id_8D01E03C5C561B39.castfails = self.castfails;
    self.branches[self.branches.size] = _id_8D01E03C5C561B39;
    shareddata.branches[shareddata.branches.size] = _id_8D01E03C5C561B39;

    if ( istrue( _id_94B720A60991D4DB ) )
        _id_8D01E03C5C561B39 thread molotov_start_branch();

    return _id_8D01E03C5C561B39;
}

molotov_branch_create_forward_tendril_cone()
{
    molotov_branch_create_sub_branch( 32, self.preventstarttime, 35, 8, undefined, 44, undefined, undefined, 1 );
}

molotov_branch_create_left_tendril_cone()
{
    molotov_branch_create_sub_branch( 32, self.preventstarttime, 35, 8, ::molotov_left_tendril_mod_angles, 44, undefined, undefined, 1 );
}

molotov_branch_create_right_tendril_cone()
{
    molotov_branch_create_sub_branch( 32, self.preventstarttime, 35, 8, ::molotov_right_tendril_mod_angles, 44, undefined, undefined, 1 );
}

molotov_branch_create_tendril_radial()
{
    molotov_branch_create_sub_branch( 32, self.preventstarttime, 35, 8, ::molotov_tendril_mod_angles_radial, 44, 6, 1, 1 );
}

molotov_rotate_angles_about_up( angles, amount )
{
    forward = anglestoforward( angles );
    up = anglestoup( angles );
    right = undefined;
    forward = rotatepointaroundvector( up, forward, amount );
    right = vectornormalize( vectorcross( forward, up ) );
    up = vectorcross( right, forward );
    return axistoangles( forward, right, up );
}

molotov_left_tendril_mod_angles( angles )
{
    amount = randomfloatrange( 50, 75 );
    return molotov_rotate_angles_about_up( angles, amount );
}

molotov_right_tendril_mod_angles( angles )
{
    amount = -1 * randomfloatrange( 50, 75 );
    return molotov_rotate_angles_about_up( angles, amount );
}

molotov_tendril_mod_angles_radial( angles )
{
    amount = randomfloatrange( -60, 60 );
    return molotov_rotate_angles_about_up( angles, amount );
}

molotov_get_cast_data( _id_2C6848D386785D9F )
{
    if ( !isdefined( level.molotovdata ) || !isdefined( level.molotovdata.castdata ) )
        molotov_init_cast_data();

    _id_CE2236333119FEA8 = level.molotovdata.castdata;
    castdata = spawnstruct();
    castdata.distforward = _id_CE2236333119FEA8.distforward[_id_2C6848D386785D9F];
    castdata.distdown = _id_CE2236333119FEA8.distdown[_id_2C6848D386785D9F];
    castdata.distup = _id_CE2236333119FEA8.distup[_id_2C6848D386785D9F];
    castdata.maxcasts = _id_CE2236333119FEA8.maxcasts[_id_2C6848D386785D9F];
    castdata.maxfails = _id_CE2236333119FEA8.maxfails[_id_2C6848D386785D9F];
    castdata.maxents = _id_CE2236333119FEA8.maxents[_id_2C6848D386785D9F];
    castdata.distforwardwall = _id_CE2236333119FEA8.distforwardwall[_id_2C6848D386785D9F];

    if ( isdefined( _id_CE2236333119FEA8.firstforwarddist[_id_2C6848D386785D9F] ) )
    {
        castdata.firstforwarddist = _id_CE2236333119FEA8.firstforwarddist[_id_2C6848D386785D9F];
        castdata.firstforwardmindist = _id_CE2236333119FEA8.firstforwardmindist[_id_2C6848D386785D9F];
        castdata.firstforwardmodanglesfunc = _id_CE2236333119FEA8.firstforwardmodanglesfunc[_id_2C6848D386785D9F];

        if ( isdefined( _id_CE2236333119FEA8.firstforwarddistwall[_id_2C6848D386785D9F] ) )
            castdata.firstforwarddistwall = _id_CE2236333119FEA8.firstforwarddistwall[_id_2C6848D386785D9F];
    }

    return castdata;
}

molotov_get_pool_data( typeid )
{
    if ( !isdefined( level.molotovdata ) || !isdefined( level.molotovdata.pooldata ) )
        molotov_init_pool_data();

    _id_0574DCC9E90F56B3 = level.molotovdata.pooldata;
    pooldata = spawnstruct();
    pooldata.typeid = typeid;
    pooldata.triggerradius = _id_0574DCC9E90F56B3.triggerradius[typeid];
    pooldata.triggerheight = _id_0574DCC9E90F56B3.triggerheight[typeid];
    pooldata.aikillradius = _id_0574DCC9E90F56B3.aikillradius[typeid];
    pooldata.aidamageradius = _id_0574DCC9E90F56B3.aidamageradius[typeid];
    pooldata.triggeroffset = _id_0574DCC9E90F56B3.triggeroffset[typeid];
    pooldata.startdelayms = _id_0574DCC9E90F56B3.startdelayms[typeid];
    pooldata.dangerzoneradius = _id_0574DCC9E90F56B3.dangerzoneradius[typeid];
    pooldata.dangerzoneheight = _id_0574DCC9E90F56B3.dangerzoneheight[typeid];
    return pooldata;
}

molotov_get_cast_dir( angles, casttype )
{
    switch ( casttype )
    {
        case 0:
            return anglestoforward( angles );
        case 1:
            return -1 * anglestoup( angles );
        case 2:
            return anglestoup( angles );
    }

    return undefined;
}

molotov_get_cast_dist( casttype, castdata, iswallcast )
{
    switch ( casttype )
    {
        case 0:
            if ( isdefined( castdata.firstforwarddist ) )
                return castdata.firstforwarddist;
            else if ( iswallcast && isdefined( castdata.distforwardwall ) )
                return castdata.distforwardwall;
            else
                return castdata.distforward;
        case 1:
            return castdata.distdown;
        case 2:
            return castdata.distup;
    }

    return undefined;
}

molotov_get_cast_contents()
{
    return physics_createcontents( [ "physicscontents_glass", "physicscontents_water", "physicscontents_item", "physicscontents_vehicle" ] );
}

molotov_rebuild_angles_up_right( up, right )
{
    forward = vectornormalize( vectorcross( up, right ) );
    right = vectorcross( forward, up );
    return axistoangles( forward, right, up );
}

molotov_rebuild_angles_up_forward( up, forward )
{
    right = vectornormalize( vectorcross( forward, up ) );
    forward = vectorcross( up, right );
    return axistoangles( forward, right, up );
}

molotov_get_next_burning_id()
{
    if ( !isdefined( level.molotovdata ) )
        level.molotovdata = spawnstruct();

    if ( !isdefined( level.molotovdata.burningid ) )
        level.molotovdata.burningid = 0;

    id = level.molotovdata.burningid;
    level.molotovdata.burningid++;
    return id;
}

molotov_watch_fx()
{
    self notify( "molotov_fx_race" );
    self endon( "molotov_fx_race" );
    _id_FB0B2F8F6AA55804 = 0;

    for (;;)
    {
        _id_C05958D616DDF1C5 = spawnstruct();

        if ( _id_FB0B2F8F6AA55804 )
            childthread molotov_fx_race_held_offhand_break( _id_C05958D616DDF1C5 );
        else
            childthread molotov_fx_race_pullback( _id_C05958D616DDF1C5 );

        childthread molotov_fx_race_grenade_fired( _id_C05958D616DDF1C5 );
        childthread molotov_fx_race_super_started( _id_C05958D616DDF1C5 );
        childthread molotov_fx_race_death( _id_C05958D616DDF1C5 );
        childthread molotov_fx_race_taken( _id_C05958D616DDF1C5 );
        _id_FB0B2F8F6AA55804 = 0;
        self waittill( "molotov_fx_race_start" );
        waittillframeend;
        pullback = istrue( _id_C05958D616DDF1C5.pullback );
        fire = istrue( _id_C05958D616DDF1C5.fire );
        superstarted = istrue( _id_C05958D616DDF1C5.superstarted );
        death = istrue( _id_C05958D616DDF1C5.death );
        taken = istrue( _id_C05958D616DDF1C5.taken );
        heldoffhandbreak = istrue( _id_C05958D616DDF1C5.heldoffhandbreak );

        if ( death )
        {
            self notify( "molotov_fx_race_end" );
            thread molotov_end_fx();
            return;
        }
        else if ( taken )
        {
            self notify( "molotov_fx_race_end" );
            thread molotov_end_fx();
            return;
        }
        else if ( superstarted )
            thread molotov_end_fx();
        else if ( heldoffhandbreak )
            thread molotov_end_fx();
        else if ( fire )
            thread molotov_end_fx();
        else if ( pullback )
        {
            thread molotov_begin_fx();
            _id_FB0B2F8F6AA55804 = 1;
        }

        self notify( "molotov_fx_race_end" );
    }
}

molotov_fx_race_pullback( _id_C05958D616DDF1C5 )
{
    self endon( "molotov_fx_race_end" );

    for (;;)
    {
        self waittill( "grenade_pullback", objweapon );

        if ( objweapon.basename == "molotov_mp" )
            break;
    }

    _id_C05958D616DDF1C5.pullback = 1;
    self notify( "molotov_fx_race_start" );
}

molotov_fx_race_grenade_fired( _id_C05958D616DDF1C5 )
{
    self endon( "molotov_fx_race_end" );

    for (;;)
    {
        self waittill( "grenade_fire", grenade, objweapon );

        if ( objweapon.basename == "molotov_mp" )
            break;
    }

    _id_C05958D616DDF1C5.fire = 1;
    self notify( "molotov_fx_race_start" );
}

molotov_fx_race_super_started( _id_C05958D616DDF1C5 )
{
    self endon( "molotov_fx_race_end" );
    self waittill( "super_started" );
    _id_C05958D616DDF1C5.superstarted = 1;
    self notify( "molotov_fx_race_start" );
}

molotov_fx_race_death( _id_C05958D616DDF1C5 )
{
    self endon( "molotov_fx_race_end" );
    self waittill( "death" );
    _id_C05958D616DDF1C5.death = 1;
    self notify( "molotov_fx_race_start" );
}

molotov_fx_race_taken( _id_C05958D616DDF1C5 )
{
    self endon( "molotov_fx_race_end" );
    self waittill( "molotov_taken" );
    _id_C05958D616DDF1C5.taken = 1;
    self notify( "molotov_fx_race_start" );
}

molotov_fx_race_held_offhand_break( _id_C05958D616DDF1C5 )
{
    self endon( "molotov_fx_race_end" );
    waitframe();
    weapon = makeweapon( "molotov_mp" );

    while ( self getheldoffhand() == weapon )
        waitframe();

    _id_C05958D616DDF1C5.heldoffhandbreak = 1;
    self notify( "molotov_fx_race_start" );
}

molotov_begin_fx()
{
    self notify( "molotov_begin_fx" );
    self endon( "molotov_begin_fx" );
    self endon( "molotov_end_fx" );
    self setscriptablepartstate( "equipMtovFXWorld", "neutral", 0 );
    self setscriptablepartstate( "equipMtovFXView", "active", 0 );
    wait 0.15;
    self setscriptablepartstate( "equipMtovFXWorld", "active", 0 );
}

molotov_end_fx()
{
    self notify( "molotov_end_fx" );
    self setscriptablepartstate( "equipMtovFXWorld", "neutral", 0 );
    self setscriptablepartstate( "equipMtovFXView", "neutral", 0 );
}

delete_all_molotovs()
{
    if ( isdefined( level.molotovdata ) )
    {
        foreach ( struct in level.molotovdata.active )
            thread delete_molotov( struct );
    }
}

delete_molotov( shareddata )
{
    if ( isdefined( shareddata.deleting ) )
        return;

    shareddata.deleting = 1;

    while ( !isdefined( shareddata.initialized ) )
        waitframe();

    while ( !shareddata molotov_shared_data_is_complete( 1 ) )
        waitframe();

    level notify( "explosion_extinguish", shareddata.burnsource.origin, 500 );
    shareddata.burnsource delete();
}
