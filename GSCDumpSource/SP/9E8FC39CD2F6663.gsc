// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.interactive_doors.snakecamvision = "snake_cam";
    level.interactive_doors.fndoorinit = ::_init_door_internal;
    precacheshader( "nightvision_overlay_goggles_grain" );
    precachemodel( "offhand_wm_c4" );
    scripts\engine\sp\utility::hudoutline_add_channel( "snake_cam" );
    scripts\engine\utility::flag_init( "snakecam_allow_exit" );
    scripts\engine\utility::flag_init( "exit_snakecam_immediately" );
    level.player scripts\engine\utility::ent_flag_init( "using_snakecam" );
    level._effect["c4_detonate"] = loadfx( "vfx/iw9/core/equipment/vfx_equip_frag.vfx" );
    level._effect["c4_light_green"] = loadfx( "vfx/iw8/core/c4/vfx_c4_light_green.vfx" );
    level._effect["c4_light_red"] = loadfx( "vfx/iw8/core/c4/vfx_c4_light_red.vfx" );
    level._effect["enemy_marker"] = loadfx( "vfx/iw8/ui/vfx_ui_snakecam_enemy_marker.vfx" );
}

_init_door_internal( reset )
{
    scripts\sp\door_internal::init_door_internal( reset );
    _id_EF82E2721F3C62B7 = undefined;
    _id_F851B6FAB0CD01BF = undefined;

    if ( isdefined( self.script_parameters ) )
    {
        values = strtok( self.script_parameters, " " );

        foreach ( value in values )
        {
            switch ( value )
            {
                case "c4":
                    _id_EF82E2721F3C62B7 = 1;
                    self.c4_breachable = 0;
                    break;
                case "snake_cam":
                    _id_F851B6FAB0CD01BF = 1;
                    self.cam_structs = [];
                    self.snakecam_active = 0;
                    break;
            }
        }
    }

    if ( isdefined( _id_EF82E2721F3C62B7 ) || isdefined( _id_F851B6FAB0CD01BF ) )
    {
        _id_9E4E1482CB40C9C5 = scripts\engine\utility::get_linked_structs();
        _id_2A0A2B97A561FA43 = [];

        foreach ( struct in _id_9E4E1482CB40C9C5 )
        {
            if ( isdefined( struct.script_noteworthy ) )
            {
                struct.door = self;

                switch ( struct.script_noteworthy )
                {
                    case "cam_hint":
                        if ( !isdefined( _id_F851B6FAB0CD01BF ) )
                            break;

                        if ( !isdefined( struct.radius ) )
                            struct.radius = 2.5;

                        struct thread snake_cam_logic();
                        self.cam_structs[self.cam_structs.size] = struct;
                        break;
                    case "c4":
                        if ( !isdefined( _id_EF82E2721F3C62B7 ) )
                            break;

                        if ( !isdefined( struct.radius ) )
                            struct.radius = 2.5;

                        _id_2A0A2B97A561FA43[_id_2A0A2B97A561FA43.size] = struct;
                        break;
                }
            }

            thread door_event_wait();
        }

        if ( _id_2A0A2B97A561FA43.size > 0 )
        {
            self.c4_struct = scripts\engine\utility::spawn_script_origin();
            self.c4_struct.origin = ( 0, 0, 0 );
            self.c4_struct.radius = 0;
            self.c4_struct.door = self;

            if ( isdefined( self.angles ) )
                self.c4_struct.angles = self.angles;
            else
                self.c4_struct.angles = ( 0, 0, 0 );

            foreach ( struct in _id_2A0A2B97A561FA43 )
            {
                self.c4_struct.origin = self.c4_struct.origin + struct.origin * ( 1 / _id_2A0A2B97A561FA43.size );
                self.c4_struct.radius = self.c4_struct.radius + struct.radius * ( 1 / _id_2A0A2B97A561FA43.size );
            }

            self.c4_struct.breachpoints = _id_2A0A2B97A561FA43;
        }
    }

    if ( !isdefined( self.script_spawn_open_yaw ) )
        thread scripts\sp\door_internal::cursor_hint_thread();
}

door_event_wait()
{
    self notify( "door_event_wait" );
    self endon( "door_event_wait" );
    self endon( "entitydeleted" );

    for (;;)
    {
        event = scripts\engine\utility::waittill_any_return( "locked", "door_unlock", "unusable", "opening" );

        if ( event == "locked" )
        {
            thread enable_c4_on_locked();
            continue;
        }

        if ( event == "unusable" || event == "opening" )
        {
            thread remove_door_snake_cam_ability();
            thread remove_door_c4_ability();
            continue;
        }

        if ( event == "door_unlock" )
            thread remove_door_c4_ability();
    }
}

enable_c4_on_locked()
{
    self endon( "stop_open_interact" );

    if ( !isdefined( self.c4_struct ) )
        return;

    self.c4_struct thread c4_breach();
    self.open_struct scripts\sp\door::remove_open_interact_hint();
    self.c4_struct endon( "c4_planted" );

    while ( distancesquared( level.player.origin, self.origin ) < squared( 200 ) )
        waitframe();

    remove_door_c4_ability();
    self.open_struct scripts\engine\utility::delaythread( 0.05, scripts\sp\door_internal::open_struct_logic );
}

set_snake_cam_ignore_ents( ents )
{
    if ( !isarray( ents ) )
        ents = [ ents ];

    door = self;
    _id_693EC2852A7DE810 = door.cam_structs[0];
    _id_693EC2852A7DE810.ignoremarkedents = ents;
}

remove_from_snakecam_immediate()
{
    if ( !scripts\engine\utility::ent_flag( "using_snakecam" ) )
        return;

    if ( scripts\engine\utility::flag( "exit_snakecam_immediately" ) )
        return;

    scripts\engine\utility::flag_set( "exit_snakecam_immediately" );
    scripts\engine\utility::ent_flag_waitopen( "using_snakecam" );
    scripts\engine\utility::flag_clear( "exit_snakecam_immediately" );
}

set_snake_cam_vision( _id_66C1FA3CB97E511D )
{
    if ( !isdefined( _id_66C1FA3CB97E511D ) )
        _id_66C1FA3CB97E511D = "snake_cam";

    level.interactive_doors.snakecamvision = _id_66C1FA3CB97E511D;

    if ( level.player scripts\engine\utility::ent_flag( "using_snakecam" ) )
        visionsetfadetoblack( level.interactive_doors.snakecamvision, 0.05 );
}

remove_door_snake_cam_ability()
{
    if ( !isdefined( self.cam_structs ) )
        return;

    foreach ( struct in self.cam_structs )
    {
        if ( isdefined( struct ) )
        {
            struct notify( "stop_snake_cam" );
            struct scripts\sp\player\cursor_hint::remove_cursor_hint();
        }
    }
}

snake_cam_logic()
{
    self endon( "stop_snake_cam" );
    _id_D436EA03D794B0B2 = anglestoup( self.angles * -1 );
    nvg_was_on = 0;

    for (;;)
    {
        scripts\sp\player\cursor_hint::create_cursor_hint( undefined, undefined, &"SCRIPT/DOOR_HINT_SNAKE_CAM", undefined, 120 * level.interactive_doors.hint_dist_scale, 100 * level.interactive_doors.hint_dist_scale, 0, undefined, undefined, undefined, undefined, undefined, undefined, 15 );
        self.door scripts\sp\door_internal::adjust_cursor_hint_side( self );
        self waittill( "trigger" );
        _id_F5DA26D4069ADB12 = self.door.lockedforai;
        level.player scripts\engine\utility::ent_flag_set( "using_snakecam" );
        self.door notify( "snake_cam" );
        scripts\sp\outline::outline_fade_alpha_for_index( 6, 0, 0 );

        if ( level.player isnightvisionon() )
        {
            nvg_was_on = 1;
            level.player _meth_ B2B409A0D3A40E3();
        }

        level.player _id_3B64EB40368C1450::set( "snakeCam", "nvg", -1 );

        if ( isdefined( self.door ) )
            self.door.snakecam_active = 1;

        level.player _meth_1D98630AA343510D( 115, 0.4 );
        level thread static_burst( 0.1 );
        level.player notify( "enter_cam" );
        level.player.og_origin = level.player.origin;
        level.player.og_angles = level.player getplayerangles();
        level.player.og_stance = level.player getstance();
        level.player freezecontrols( 1 );
        level.player disableweapons();

        if ( scripts\engine\utility::flag_exist( "hold_context_melee" ) )
            scripts\engine\utility::flag_set( "hold_context_melee" );

        level.player.ignore_stealth_sight = 1;
        level.player.ignoreme = 1;
        scripts\engine\utility::flag_wait_or_timeout( "exit_snakecam_immediately", 0.5 );
        fwd = anglestoforward( self.angles );
        _id_4392B13E68922C81 = vectornormalize( self.origin - level.player getorigin() );
        dot = vectordot( fwd, _id_4392B13E68922C81 );
        tag = level.player scripts\engine\utility::spawn_tag_origin();
        tag.origin = self.origin;
        tag.angles = self.angles;

        if ( isdefined( self.target ) )
        {
            _id_A88537B73E05F02A = scripts\engine\utility::getstruct( self.target, "targetname" );

            if ( !isdefined( _id_A88537B73E05F02A ) )
                _id_A88537B73E05F02A = getent( self.target, "targetname" );

            if ( isdefined( _id_A88537B73E05F02A ) )
            {
                tag.origin = _id_A88537B73E05F02A.origin;
                tag.angles = _id_A88537B73E05F02A.angles;
            }
        }

        if ( dot < 0 )
            tag.angles = tag.angles + ( 0, 180, 0 );

        put_player_on_cam( tag );
        temp = level.player scripts\engine\utility::spawn_script_origin();
        tag.tempmovesoundent = level.player scripts\engine\utility::spawn_script_origin();
        tag.rumbleent = level.player scripts\engine\utility::spawn_script_origin();
        temp _meth_F4604329F388A96F( 0, 0 );
        temp playloopsound( "snake_cam_roomtone" );
        temp _meth_F4604329F388A96F( 1, 1 );
        tag.tempmovesoundent playloopsound( "snake_cam_foley" );
        tag thread snake_cam_control();
        level.cam_hud = snake_door_cam_hud();

        while ( level.player usebuttonpressed() )
        {
            if ( scripts\engine\utility::flag( "exit_snakecam_immediately" ) )
                break;

            wait 0.05;
        }

        scripts\engine\utility::flag_wait( "snakecam_allow_exit" );
        waittill_player_exits_cam();
        _id_1B9B8DAF429DD199 = tag.origin + anglestoforward( tag.angles ) * -20;

        if ( scripts\engine\utility::flag( "exit_snakecam_immediately" ) )
            tag moveto( _id_1B9B8DAF429DD199, 0.05 );
        else
            tag moveto( _id_1B9B8DAF429DD199, 0.5, 0.125 );

        scripts\engine\utility::flag_wait_or_timeout( "exit_snakecam_immediately", 0.25 );
        level.player notify( "leave_cam" );

        foreach ( _id_A0DDCCC8DA0CA6AB in level.cam_hud )
            _id_A0DDCCC8DA0CA6AB destroy();

        level thread static_burst( 0.125 );
        level scripts\engine\sp\utility::add_wait( scripts\engine\utility::flag_wait, "exit_snakecam_immediately" );
        level scripts\engine\sp\utility::add_wait( scripts\engine\sp\utility::waittill_msg, "static_faded_in" );
        scripts\engine\sp\utility::do_wait_any();
        scripts\sp\outline::outline_fade_alpha_for_index( 6, 0.8, 0 );
        temp stoploopsound( "snake_cam_roomtone" );
        tag.tempmovesoundent stoploopsound( "snake_cam_foley" );
        visionsetfadetoblack( "", 0.05 );
        setsaveddvar( "dvar_83BBE73116F488D6", 0 );
        setsaveddvar( "dvar_ED28298C207316AE", 0 );
        setsaveddvar( "dvar_979B5474BE3B9B47", 0 );
        setsaveddvar( "dvar_960EF00238357BBC", 0 );

        if ( nvg_was_on )
            level.player _meth_A7994C6EC474E55F();

        scripts\engine\utility::flag_wait_or_timeout( "exit_snakecam_immediately", 0.1 );

        if ( !isdefined( level.fov_default ) )
            level.fov_default = 65;

        level.player _meth_1D98630AA343510D( level.fov_default, 0.05 );
        remove_player_from_cam();

        if ( scripts\engine\utility::flag_exist( "hold_context_melee" ) )
            scripts\engine\utility::flag_clear( "hold_context_melee" );

        level.player.ignore_stealth_sight = undefined;
        level.player.ignoreme = 0;
        tag.tempmovesoundent delete();
        tag.rumbleent delete();
        tag delete();
        temp delete();

        if ( isdefined( self.door ) )
            self.door.snakecam_active = 0;

        while ( level.player usebuttonpressed() )
        {
            if ( scripts\engine\utility::flag( "exit_snakecam_immediately" ) )
                break;

            wait 0.05;
        }

        self.door.lockedforai = _id_F5DA26D4069ADB12;
        level.player scripts\engine\utility::ent_flag_clear( "using_snakecam" );
        scripts\sp\outline::outline_fade_alpha_for_index( 6, 0, 6.0 );
    }
}

snake_cam_control( tempmovesoundent )
{
    level.player endon( "leave_cam" );
    og_angles = self.angles;
    _id_DDB680F3984C4777 = -24;
    _id_A5337F8300110201 = 0;
    _id_CB6680317BE1E374 = 55;
    _id_183D5EEC52A67366 = og_angles[1] - _id_CB6680317BE1E374;
    _id_3C5DF5BF59ED9678 = og_angles[1] + _id_CB6680317BE1E374;
    _id_F7DC3A5FD9572B94 = og_angles[2] - 10;
    _id_2EC0815DFA0F672E = og_angles[2] + 10;
    _id_827ABACD5CA8F6B3 = 20;
    _id_594240552B896878 = 10;
    _id_440EBEEB83BD05A8 = 0.6;
    _id_75EB1524AFEB7F2B = 0.8;
    _id_C9FF6EEAAF645CEE = 10;
    _id_2FCA29730A69EE8A = 4;
    _id_E47AE22EC47FCEDB = 1.2;
    _id_D296B0EAF4A6B00F = [ 0, 0 ];
    _id_D5E6310914396AC3 = 0.2;
    _id_848E35F763CE65B0 = 0.2;
    _id_91AB80BC6772504D = 0;

    for (;;)
    {
        _id_9DBC893FB4BE54F2 = self.angles;
        _id_B4F55166F66361E9 = level.player.cam_ent.angles;
        input = level.player _meth_2B02D04D86C0E740();
        _id_98EA5AFB293A76A2 = 0;
        _id_0E2DDA8FF32BB022 = ( input[0], input[1], 0 );
        _id_0E2DDA8FF32BB022 = length( _id_0E2DDA8FF32BB022 );
        _id_5EB5724F78D37C4C = scripts\engine\math::factor_value( _id_848E35F763CE65B0, _id_D5E6310914396AC3, _id_0E2DDA8FF32BB022 );
        _id_D296B0EAF4A6B00F[0] = scripts\engine\math::lerp( _id_D296B0EAF4A6B00F[0], input[0], _id_5EB5724F78D37C4C );
        _id_D296B0EAF4A6B00F[1] = scripts\engine\math::lerp( _id_D296B0EAF4A6B00F[1], input[1], _id_5EB5724F78D37C4C );

        if ( _id_9DBC893FB4BE54F2[0] > 0 && _id_D296B0EAF4A6B00F[0] < 0 )
            _id_13A3FD6DDFA8548F = 1 - scripts\engine\math::normalize_value( _id_A5337F8300110201 * _id_440EBEEB83BD05A8, _id_A5337F8300110201, _id_9DBC893FB4BE54F2[0] );
        else if ( _id_9DBC893FB4BE54F2[0] < 0 && _id_D296B0EAF4A6B00F[0] > 0 )
            _id_13A3FD6DDFA8548F = scripts\engine\math::normalize_value( _id_DDB680F3984C4777, _id_DDB680F3984C4777 * _id_440EBEEB83BD05A8, _id_9DBC893FB4BE54F2[0] );
        else
            _id_13A3FD6DDFA8548F = 1;

        if ( _id_9DBC893FB4BE54F2[1] > og_angles[1] && _id_D296B0EAF4A6B00F[1] < 0 )
            _id_8366082D034C6132 = 1 - scripts\engine\math::normalize_value( _id_3C5DF5BF59ED9678 - _id_CB6680317BE1E374 * _id_75EB1524AFEB7F2B, _id_3C5DF5BF59ED9678, _id_9DBC893FB4BE54F2[1] );
        else if ( _id_9DBC893FB4BE54F2[1] < og_angles[1] && _id_D296B0EAF4A6B00F[1] > 0 )
            _id_8366082D034C6132 = scripts\engine\math::normalize_value( _id_183D5EEC52A67366, _id_183D5EEC52A67366 + _id_CB6680317BE1E374 * _id_75EB1524AFEB7F2B, _id_9DBC893FB4BE54F2[1] );
        else
            _id_8366082D034C6132 = 1;

        _id_9210CEACE4810322 = _id_D296B0EAF4A6B00F[1] * -1;
        _id_181570543B8DA6F7 = _id_9DBC893FB4BE54F2[1] + _id_2FCA29730A69EE8A * _id_9210CEACE4810322 * _id_8366082D034C6132;

        if ( _id_181570543B8DA6F7 > og_angles[1] )
            _id_98EA5AFB293A76A2 = scripts\engine\math::normalized_float_smooth_out( scripts\engine\math::normalize_value( og_angles[1], _id_3C5DF5BF59ED9678, _id_181570543B8DA6F7 ) ) * -1;

        if ( _id_181570543B8DA6F7 < og_angles[1] )
            _id_98EA5AFB293A76A2 = 1 - scripts\engine\math::normalized_float_smooth_in( scripts\engine\math::normalize_value( _id_183D5EEC52A67366, og_angles[1], _id_181570543B8DA6F7 ) );

        _id_A810B9620521C338 = input[1];
        _id_D7F62313FFE99D1F = og_angles[2] + _id_594240552B896878 * _id_98EA5AFB293A76A2;
        _id_2EC0815DFA0F672E = _id_2EC0815DFA0F672E * _id_98EA5AFB293A76A2;
        _id_181570543B8DA6F7 = clamp( _id_181570543B8DA6F7, _id_183D5EEC52A67366, _id_3C5DF5BF59ED9678 );
        _id_74EEDD477F94F3A3 = _id_D296B0EAF4A6B00F[0] * -1;
        _id_6BF51480C3252112 = _id_9DBC893FB4BE54F2[0] + _id_E47AE22EC47FCEDB * _id_74EEDD477F94F3A3 * _id_13A3FD6DDFA8548F;
        _id_BC4B977758B3324E = _id_DDB680F3984C4777;
        _id_2F22DF6828A1BCB0 = _id_A5337F8300110201;
        _id_6BF51480C3252112 = clamp( _id_6BF51480C3252112, _id_BC4B977758B3324E, _id_2F22DF6828A1BCB0 );
        _id_6612315290576B0F = ( _id_6BF51480C3252112, _id_181570543B8DA6F7, _id_D7F62313FFE99D1F );
        _id_122923B7FD027A6F = length( _id_6612315290576B0F - self.angles );
        _id_122923B7FD027A6F = scripts\engine\math::normalize_value( 0, 1.5, _id_122923B7FD027A6F );
        _id_4D8CD161A8EAADC2 = scripts\engine\math::factor_value( 0.0, 0.105, _id_122923B7FD027A6F );
        rumble = scripts\engine\math::factor_value( 0.0, 0.08, _id_122923B7FD027A6F );
        volume = scripts\engine\math::factor_value( 0.0, 0.2, _id_122923B7FD027A6F );

        if ( _id_4D8CD161A8EAADC2 > 0.005 )
            earthquake( _id_4D8CD161A8EAADC2, 0.07, level.player.origin, 2000 );

        if ( rumble > 0.0001 )
        {
            if ( !_id_91AB80BC6772504D )
            {
                self.rumbleent playrumblelooponentity( "steady_rumble" );
                _id_91AB80BC6772504D = 1;
            }
        }
        else if ( _id_91AB80BC6772504D )
        {
            self.rumbleent stoprumble( "steady_rumble" );
            _id_91AB80BC6772504D = 0;
        }

        height = 1 - rumble;
        height = height * 1000;
        self.rumbleent.origin = level.player geteye() + ( 0, 0, height );
        self.tempmovesoundent _meth_F4604329F388A96F( volume, 0.05 );
        self.angles = _id_6612315290576B0F;
        _id_1B9B8DAF429DD199 = self.origin + anglestoforward( self.angles ) * 12 + anglestoup( self.angles ) * -55 + ( 0, 0, 3 );
        level.player.cam_ent.origin = _id_1B9B8DAF429DD199;
        level.player.cam_ent.angles = ( self.angles[0], self.angles[1], self.angles[2] );
        wait 0.05;
    }
}

put_player_on_cam( tag )
{
    _id_1B9B8DAF429DD199 = tag.origin + anglestoforward( tag.angles ) * 12 - ( 0, 0, 55 );
    level.player.cam_ent = scripts\engine\utility::spawn_tag_origin( _id_1B9B8DAF429DD199, tag.angles );
    level.player _id_3B64EB40368C1450::set( "snakeCam", "stand", 1 );
    level.player _id_3B64EB40368C1450::set( "snakeCam", "crouch", 0 );
    level.player _id_3B64EB40368C1450::set( "snakeCam", "prone", 0 );
    level.player _id_3B64EB40368C1450::set( "snakeCam", "usability", 0 );
    level.player _id_3B64EB40368C1450::set( "snakeCam", "weapon", 0 );
    level.player scripts\sp\utility::context_melee_enable( 0 );
    level.player _meth_3B9CD05243046E15();
    level.player setstance( "stand", 1, 1, 1 );
    level.player setorigin( level.player.cam_ent.origin );
    level.player playerlinktodelta( level.player.cam_ent, "tag_origin", 1, 20, 20, 20, 20, 1 );
    level.player _meth_1400799598E443EC( 0, 2, 1 );
    level.player setplayerangles( tag.angles );
    level.player freezecontrols( 0 );
}

snakecam_allow_exit()
{
    scripts\engine\utility::flag_set( "snakecam_allow_exit" );
}

snakecam_allow_exit_prompt()
{
    level.cam_hud[2] settext( "Press [{+activate}] To Exit" );
}

snakecam_force_exit()
{
    scripts\engine\utility::flag_set( "exit_snakecam_immediately" );
}

remove_player_from_cam()
{
    level.player unlink();
    level.player.cam_ent delete();
    level.player setorigin( level.player.og_origin );
    level.player setplayerangles( level.player.og_angles );
    level.player setstance( level.player.og_stance );
    scripts\engine\utility::flag_wait_or_timeout( "exit_snakecam_immediately", 0.25 );
    level.player.ignoreme = 0;
    level.player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "snakeCam" );
    level.player _meth_6841A0861D2686C2();
    level.player scripts\sp\utility::context_melee_enable( 1 );
}

waittill_player_exits_cam()
{
    for (;;)
    {
        if ( player_is_trying_to_exit_camera() )
            break;
        else if ( scripts\engine\utility::flag( "exit_snakecam_immediately" ) )
            break;
        else
            waitframe();
    }
}

player_is_trying_to_exit_camera()
{
    return level.player usebuttonpressed() || level.player fragbuttonpressed() || level.player meleebuttonpressed() || level.player buttonpressed( "BUTTON_B" ) || level.player jumpbuttonpressed() || level.player buttonpressed( "BUTTON_LSTICK" ) || level.player buttonpressed( "BUTTON_RSTICK" );
}

static_burst( duration )
{
    fade_time = 0.25;
    duration = scripts\engine\utility::ter_op( isdefined( duration ), duration, 0.5 );
    level.player playsound( "snake_cam_static" );
    _id_C1B9F1A971D8ED37 = scripts\sp\hud_util::create_client_overlay( "overlay_static", 1 );
    _id_C1B9F1A971D8ED37.alpha = 0;
    _id_C1B9F1A971D8ED37 fadeovertime( fade_time );
    _id_C1B9F1A971D8ED37.alpha = 1;
    wait( fade_time );
    level notify( "static_faded_in" );
    wait( duration );
    _id_C1B9F1A971D8ED37 fadeovertime( fade_time );
    _id_C1B9F1A971D8ED37.alpha = 0;
    wait( fade_time );
    level notify( "static_faded_out" );
    _id_C1B9F1A971D8ED37 destroy();
}

cam_enemy_marking()
{
    level.player endon( "leave_cam" );
    level.player notifyonplayercommand( "trigger_pressed", "+attack" );

    for (;;)
    {
        level.player waittill( "trigger_pressed" );
        _id_434C7BF5D1311252 = [ self.door, level.player ];

        if ( isdefined( self.ignoremarkedents ) )
            _id_434C7BF5D1311252 = scripts\engine\utility::array_combine( _id_434C7BF5D1311252, self.ignoremarkedents );

        fwd = anglestoforward( level.player getplayerangles() );
        endorigin = level.player geteye() + fwd * 1000;
        trace = scripts\engine\trace::sphere_trace( level.player geteye(), endorigin, 2, _id_434C7BF5D1311252 );
        ent = trace["entity"];

        if ( isdefined( ent ) )
        {
            if ( isai( ent ) && isalive( ent ) && ent.team == "axis" )
                ent thread handle_cam_enemy_marking();
        }
    }
}

snake_door_cam_hud()
{
    crosshair = newhudelem();
    crosshair.archived = 0;
    crosshair.location = 0;
    crosshair.alignx = "center";
    crosshair.aligny = "middle";
    crosshair.foreground = 1;
    crosshair.fontscale = 1;
    crosshair.sort = 20;
    crosshair.alpha = 0.7;
    crosshair.y = 233;
    crosshair settext( "+" );
    overlay = newhudelem();
    overlay.x = 292;
    overlay.y = 60;
    overlay.alignx = "center";
    overlay.aligny = "middle";
    overlay.font = "smallfixed";
    overlay.fontscale = 0.75;
    _id_083A337B15031DAB = scripts\sp\hud_util::create_client_overlay( "nightvision_overlay_goggles_grain", 1 );
    visionsetfadetoblack( level.interactive_doors.snakecamvision, 0.05 );
    setsaveddvar( "dvar_83BBE73116F488D6", 0.5 );
    setsaveddvar( "dvar_ED28298C207316AE", 0.2 );
    setsaveddvar( "dvar_979B5474BE3B9B47", -0.75 );
    setsaveddvar( "dvar_960EF00238357BBC", 0.011 );
    return [ crosshair, _id_083A337B15031DAB, overlay ];
}

snake_door_cam_hud_blur_v2()
{
    crosshair = newhudelem();
    crosshair.archived = 0;
    crosshair.location = 0;
    crosshair.alignx = "center";
    crosshair.aligny = "middle";
    crosshair.foreground = 1;
    crosshair.fontscale = 1;
    crosshair.sort = 20;
    crosshair.alpha = 0.7;
    crosshair.y = 233;
    crosshair settext( "+" );
    overlay = newhudelem();
    overlay.x = 400;
    overlay.y = 180;
    overlay.alignx = "center";
    overlay.aligny = "middle";
    overlay.font = "smallfixed";
    overlay.fontscale = 0.75;
    _id_083A337B15031DAB = scripts\sp\hud_util::create_client_overlay( "nightvision_overlay_goggles_grain", 1 );
    visionsetfadetoblack( level.interactive_doors.snakecamvision, 0.05 );
    setsaveddvar( "dvar_83BBE73116F488D6", 0.5 );
    setsaveddvar( "dvar_ED28298C207316AE", 0.2 );
    setsaveddvar( "dvar_979B5474BE3B9B47", -0.75 );
    setsaveddvar( "dvar_960EF00238357BBC", 0.011 );
    return [ crosshair, _id_083A337B15031DAB, overlay ];
}

handle_cam_enemy_marking()
{
    if ( !scripts\engine\utility::ent_flag_exist( "snake_cam_marked" ) )
        scripts\engine\utility::ent_flag_init( "snake_cam_marked" );

    if ( scripts\engine\utility::ent_flag( "snake_cam_marked" ) )
        return;

    scripts\engine\utility::ent_flag_set( "snake_cam_marked" );
    handle_cam_enemy_caret();

    if ( isalive( self ) && scripts\engine\utility::ent_flag( "snake_cam_marked" ) )
    {
        scripts\engine\sp\utility::hudoutline_enable_new( "outline_nodepth_red", "snake_cam" );
        scripts\engine\utility::ent_flag_clear( "snake_cam_marked" );
    }
}

handle_cam_enemy_caret()
{
    _id_D65A6191EEF579BC = scripts\engine\utility::spawn_tag_origin();
    level.player playsound( "support_drone_targeting" );
    playfxontag( scripts\engine\utility::getfx( "enemy_marker" ), _id_D65A6191EEF579BC, "tag_origin" );
    cam_enemy_caret_follow_target_til_cleanup( _id_D65A6191EEF579BC );
    _id_D65A6191EEF579BC delete();
}

cam_enemy_caret_follow_target_til_cleanup( _id_D65A6191EEF579BC )
{
    self endon( "death" );

    while ( level.player scripts\engine\utility::ent_flag( "using_snakecam" ) && scripts\engine\utility::ent_flag( "snake_cam_marked" ) )
    {
        org = self gettagorigin( "j_head" );
        _id_D65A6191EEF579BC.origin = org + ( 0, 0, 18 );
        wait 0.05;
    }
}

c4_breach()
{
    self.door endon( "entitydeleted" );
    self.door endon( "stop_c4_ability" );
    self.door.c4_breachable = 1;

    if ( !isbreachableinit() )
        return;

    scripts\sp\player\cursor_hint::create_cursor_hint( undefined, undefined, "Breach", undefined, 110 * level.interactive_doors.hint_dist_scale, 60 * level.interactive_doors.hint_dist_scale, 0 );
    self.door scripts\sp\door_internal::adjust_cursor_hint_side( self );
    self waittill( "trigger" );
    self notify( "stop_cursor_hint_thread" );
    self notify( "c4_planted" );
    self.door scripts\sp\door::create_navobstacle();
    self.breached = 1;
    self.door scripts\sp\door::remove_open_ability();
    self.door remove_door_snake_cam_ability();
    c4_on_door();
    c4_countdown();
    c4_detonate();
    self.door scripts\sp\door::clear_navobstacle();
    self.door scripts\sp\door::delete_door();
}

isbreachableinit()
{
    if ( self.door.locked )
        return 1;
    else
        return 0;
}

c4_on_door()
{
    self.breachpoints = sortbydistance( self.breachpoints, level.player.origin );
    _id_C5EA00180EC58E52 = self.breachpoints[0];
    level.player playgestureviewmodel( "ges_equip_frag_throw" );
    wait 0.5;
    self.door.c4 = spawn( "script_model", _id_C5EA00180EC58E52.origin );
    self.door.c4.angles = _id_C5EA00180EC58E52.angles;
    self.door.c4 setmodel( "offhand_wm_c4" );
    playworldsound( "sp_c4_plant", self.origin );
    self.door notify( "c4_planted" );
}

c4_monitor_dmg()
{
    self endon( "detonate" );
    self.door.c4 setcandamage( 1 );

    for (;;)
    {
        self.door.c4 waittill( "damage", _id_97282C14346A7FCF, attacker, _id_97282C14346A7FCF, _id_97282C14346A7FCF, type );

        if ( isdefined( attacker ) && attacker == level.player && isdefined( type ) )
        {
            if ( type == "MOD_MELEE" )
                continue;
            else
                self notify( "kill_timer" );
        }
    }
}

c4_detonate()
{
    self.door notify( "detonate" );
    playworldsound( "iw9_frag_grenade_expl_trans", self.origin );
    playfx( level._effect["c4_detonate"], self.origin );
    self.door.c4 delete();
    self.door hide();
    earthquake( 0.7, 0.8, self.origin, 600 );
    radiusdamage( self.origin, 120, 150, 30, level.player, "MOD_EXPLOSIVE" );
    self.door.clip notsolid();

    if ( isdefined( self.door.navmodifier ) )
        destroynavobstacle( self.door.navmodifier );

    scripts\engine\utility::delaythread( 0.5, scripts\sp\door_internal::stealth_broadcast, 500, "gunshot" );
}

c4_countdown()
{
    self endon( "kill_timer" );
    thread c4_monitor_dmg();
    wait 0.7;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 3; _id_AC0E594AC96AA3A8++ )
    {
        playworldsound( "hack_robot_explode_beep", self.origin );
        playfxontag( level._effect["c4_light_green"], self.door.c4, "tag_fx" );
        wait 0.5;
    }

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 6; _id_AC0E594AC96AA3A8++ )
    {
        playworldsound( "hack_robot_explode_beep", self.origin );
        playfxontag( level._effect["c4_light_green"], self.door.c4, "tag_fx" );
        wait 0.25;
    }

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 20; _id_AC0E594AC96AA3A8++ )
    {
        playworldsound( "hack_robot_explode_beep", self.origin );
        playfxontag( level._effect["c4_light_red"], self.door.c4, "tag_fx" );
        wait 0.1;
    }

    self notify( "detonate" );
}

remove_door_c4_ability()
{
    if ( !istrue( self.c4_breachable ) )
        return;

    self.c4_breachable = 0;
    self notify( "stop_c4_ability" );

    if ( isdefined( self.c4_struct ) )
        self.c4_struct scripts\sp\player\cursor_hint::remove_cursor_hint();
}
