// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_E342035D4BE91696()
{
    level._id_1B2599094F1AA7A3 = spawnstruct();
    level._id_1B2599094F1AA7A3.actors = [];
    level._id_1B2599094F1AA7A3.nodes = [];
    level._id_1B2599094F1AA7A3.current_node = undefined;
    level._id_1B2599094F1AA7A3 thread _id_511A5E11ACA48790();
}

_id_511A5E11ACA48790()
{
    _id_F57C69A240493994 = 0;

    for (;;)
    {
        waitframe();

        if ( !isdefined( level._id_1B2599094F1AA7A3.current_node ) )
        {
            _id_F57C69A240493994 = 0;
            continue;
        }

        if ( !_id_F57C69A240493994 )
            level notify( "dialogue_start" );

        _id_F57C69A240493994 = 1;
        next_node = _id_A375EF915E817D5D();

        if ( istrue( level._id_1B2599094F1AA7A3.aborted ) )
        {
            level._id_1B2599094F1AA7A3.aborted = undefined;
            continue;
        }

        level._id_1B2599094F1AA7A3.current_node = next_node;

        if ( !isdefined( next_node ) )
        {
            level notify( "dialogue_end" );
            continue;
        }

        level notify( "dialogue_next_node" );
    }
}

_id_A375EF915E817D5D()
{
    level endon( "dialogue_abort" );
    current_node = level._id_1B2599094F1AA7A3.current_node;
    next_node = undefined;
    current_node.visited = 1;

    if ( isdefined( current_node.func ) )
        next_node = current_node.owner [[ current_node.func ]]();
    else
        current_node.owner waittill( current_node.name + "_end", next_node );

    current_node._id_0AF8D4CC519C65DE = 1;

    if ( isdefined( next_node ) )
    {
        if ( isstring( next_node ) )
            next_node = _id_8C75A86890A649DC( next_node );

        next_node.owner = current_node.owner;
    }

    return next_node;
}

_id_3ECB520991A212FC( name, animname, team )
{
    if ( isdefined( name ) )
        self.ainame = name;

    if ( isdefined( animname ) )
        self.animname = animname;

    if ( isdefined( team ) )
        self.team = team;

    actors = level._id_1B2599094F1AA7A3.actors[self.animname];

    if ( isdefined( actors ) )
    {
        if ( !isarray( actors ) )
            actors = [ actors ];

        level._id_1B2599094F1AA7A3.actors[self.animname] = scripts\engine\utility::array_add( actors, self );
    }
    else
        level._id_1B2599094F1AA7A3.actors[self.animname] = self;
}

_id_3BCB10406AB4AD1D( animname )
{
    if ( !isdefined( animname ) )
        animname = self.animname;

    actors = level._id_1B2599094F1AA7A3.actors[animname];

    if ( isarray( actors ) )
    {
        actors = scripts\engine\utility::array_remove( actors, self );

        if ( actors.size > 1 )
            level._id_1B2599094F1AA7A3.actors[animname] = actors;
        else
            level._id_1B2599094F1AA7A3.actors[animname] = actors[0];
    }
    else
        level._id_1B2599094F1AA7A3.actors = scripts\engine\utility::array_remove_key( level._id_1B2599094F1AA7A3.actors, animname );
}

_id_88C416555BC21541( animname )
{
    actor = level._id_1B2599094F1AA7A3.actors[animname];

    if ( isarray( actor ) )
        actor = scripts\engine\utility::getclosest( level.player.origin, actor );

    return actor;
}

_id_2CA2807712501171()
{
    actors = [];

    foreach ( key, value in level._id_1B2599094F1AA7A3.actors )
    {
        if ( isarray( value ) )
        {
            actors = scripts\engine\utility::array_combine( actors, value );
            continue;
        }

        actors[actors.size] = value;
    }

    return actors;
}

_id_88E8F81BA53C8399( name )
{
    name = tolower( name );
    level._id_1B2599094F1AA7A3.current_node = level._id_1B2599094F1AA7A3.nodes[name];
}

_id_6B2794BE53922D6E()
{
    if ( _id_109CF9CC19F3D346::_id_FFDCE2654EA23D5A() )
        _id_109CF9CC19F3D346::_id_6F846E9519B4CFF2();

    if ( isdefined( level._id_1B2599094F1AA7A3.current_node ) )
    {
        level._id_1B2599094F1AA7A3.aborted = 1;
        level._id_1B2599094F1AA7A3.current_node = undefined;
    }

    level notify( "dialogue_abort" );
}

_id_0937C5DE25D5682B()
{
    return isdefined( level._id_1B2599094F1AA7A3.current_node );
}

_id_44768F37B1A9F788( leader, startnode )
{
    scene = spawnstruct();
    scene.leader = leader;
    scene._id_F087AC9BEE88F3DF = startnode;
    scene.started = 0;
    scene.running = 0;
    scene._id_37563FDBBEC9D7EE = 0;
    scene._id_DD9707A466EFA528 = 0;
    return scene;
}

_id_E0B639A16BF31BCF( name, params )
{
    node = spawnstruct();
    name = tolower( name );
    node.name = name;
    node.visited = 0;
    node._id_0AF8D4CC519C65DE = 0;
    node.owner = level;
    node._id_2A00712A0F9E0FE2 = 0;
    node._id_4ABCF020B39941E3 = 1;

    if ( isfunction( params ) )
        node.func = params;

    if ( isarray( params ) )
    {
        foreach ( key, value in params )
        {
            switch ( key )
            {
                case "options":
                    node.options = value;
                    break;
                case "results":
                    node.results = value;
                    break;
                case "owner":
                    node.owner = value;
                    break;
                case "resetOptions":
                    node._id_2A00712A0F9E0FE2 = value;
                    break;
                case "responseRequired":
                    node._id_4ABCF020B39941E3 = value;
                    break;
                case "timeoutNode":
                    node._id_3651A487C0CD9B88 = value;
                    break;
                default:
                    break;
            }
        }
    }

    level._id_1B2599094F1AA7A3.nodes[name] = node;
}

_id_BDA26C6B3A7D395A( owner, options, results, _id_2A00712A0F9E0FE2, _id_4ABCF020B39941E3, _id_3651A487C0CD9B88 )
{
    params = [];

    if ( isdefined( owner ) )
        params["owner"] = owner;

    if ( isdefined( options ) )
        params["options"] = options;

    if ( isdefined( results ) )
        params["results"] = results;

    if ( isdefined( _id_2A00712A0F9E0FE2 ) )
        params["resetOptions"] = _id_2A00712A0F9E0FE2;

    if ( isdefined( _id_4ABCF020B39941E3 ) )
        params["responseRequired"] = _id_4ABCF020B39941E3;

    if ( isdefined( _id_3651A487C0CD9B88 ) )
        params["timeoutNode"] = _id_3651A487C0CD9B88;

    return params;
}

_id_8C75A86890A649DC( name )
{
    name = tolower( name );
    return level._id_1B2599094F1AA7A3.nodes[name];
}

_id_BD86A7339819B9A4( name )
{
    name = tolower( name );
    node = level._id_1B2599094F1AA7A3.nodes[name];
    node.owner = self;
}

_id_CBD09EF58F58EFEF( name )
{
    node = _id_8C75A86890A649DC( name );
    return node.owner == self;
}

_id_D22210DB2062C3BA( name )
{
    name = tolower( name );
    return level._id_1B2599094F1AA7A3.nodes[name].visited;
}

_id_55F69519F0C8ADB9( name )
{
    name = tolower( name );
    return level._id_1B2599094F1AA7A3.nodes[name]._id_0AF8D4CC519C65DE;
}

_id_4E65800AA9026A50( name )
{
    name = tolower( name );
    return isdefined( level._id_1B2599094F1AA7A3.nodes[name] );
}

_id_BF2B4156C2AD2ECE( message )
{
    if ( !scripts\engine\utility::flag_exist( message ) )
        scripts\engine\utility::flag_init( message );

    return scripts\engine\utility::flag( message );
}

_id_B4FD13A02335DCD6( message )
{
    if ( !scripts\engine\utility::flag_exist( message ) )
        scripts\engine\utility::flag_init( message );

    scripts\engine\utility::flag_set( message );
}

_id_C3B8ADE88249F5FF( message )
{
    if ( !scripts\engine\utility::flag_exist( message ) )
        scripts\engine\utility::flag_init( message );
    else
        scripts\engine\utility::flag_clear( message );
}

_id_AC9F4287E5E75C03( message )
{
    if ( !scripts\engine\utility::ent_flag_exist( message ) )
        scripts\engine\utility::ent_flag_init( message );

    return scripts\engine\utility::ent_flag( message );
}

_id_670BF3283B391E01( message )
{
    if ( !scripts\engine\utility::ent_flag_exist( message ) )
        scripts\engine\utility::ent_flag_init( message );

    scripts\engine\utility::ent_flag_set( message );
}

_id_AAC7CC330B31B0EC( message )
{
    if ( !scripts\engine\utility::ent_flag_exist( message ) )
        scripts\engine\utility::ent_flag_init( message );
    else
        scripts\engine\utility::ent_flag_clear( message );
}
