// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    level.spawn_funcs = [];
    level.spawn_funcs["allies"] = [];
    level.spawn_funcs["axis"] = [];
    level.spawn_funcs["team3"] = [];
    level.spawn_funcs["neutral"] = [];
    thread goalvolumes();
    _id_520231D77C80A465 = getentarray( "flood_and_secure", "targetname" );
    scripts\engine\utility::array_thread( _id_520231D77C80A465, ::flood_and_secure );

    if ( !isdefined( level.ai_number ) )
        level.ai_number = 0;

    if ( getdvar( "dvar_0AA5B42E28956D94" ) == "" )
        setdvar( "dvar_0AA5B42E28956D94", "0" );

    if ( getdvar( "dvar_3869CCB5956E3577" ) == "" )
        setdvar( "dvar_3869CCB5956E3577", "off" );

    createthreatbiasgroup( "allies" );
    createthreatbiasgroup( "axis" );
    createthreatbiasgroup( "team3" );
    createthreatbiasgroup( "civilian" );
    createthreatbiasgroup( "equipment" );
    setthreatbias( "axis", "equipment", 250 );
    setthreatbias( "allies", "equipment", 250 );
    setthreatbias( "team3", "equipment", -1000 );
    scripts\sp\flags::init_sp_flags();
    scripts\sp\player::init();
    scripts\sp\gameskill::init_gameskill();

    foreach ( player in level.players )
        player setthreatbiasgroup( "allies" );

    level._ai_group = [];
    level.gather_delay = [];

    if ( !isdefined( level.deathflags ) )
        level.deathflags = [];

    level.spawner_number = 0;

    if ( !isdefined( level.unittype_spawn_functions ) )
        level.unittype_spawn_functions = [];

    level.unittype_spawn_functions["soldier"] = ::spawn_unittype_soldier;

    if ( !isdefined( level.subclass_spawn_functions ) )
        level.subclass_spawn_functions = [];

    level.subclass_spawn_functions["juggernaut"] = ::spawn_subclass_juggernaut;
    level.subclass_spawn_functions["tier2"] = _id_0A5D836E2CDE0EA2::_id_1DDCDF764C5BDD84;
    level.subclass_spawn_functions["tier3"] = _id_0A5D836E2CDE0EA2::_id_1DDCDF764C5BDD84;
    level.team_specific_spawn_functions = [];
    level.team_specific_spawn_functions["axis"] = ::spawn_team_axis;
    level.team_specific_spawn_functions["allies"] = ::spawn_team_allies;
    level.team_specific_spawn_functions["team3"] = ::spawn_team_team3;
    level.team_specific_spawn_functions["neutral"] = ::spawn_team_neutral;

    if ( !isdefined( level.default_goalradius ) )
        level.default_goalradius = 2048;

    if ( !isdefined( level.default_goalheight ) )
        level.default_goalheight = 512;

    level.portable_mg_gun_tag = "J_Shoulder_RI";
    level._max_script_health = 0;
    ai = getaispeciesarray();
    scripts\engine\utility::array_thread( ai, ::living_ai_prethink );
    level.ai_classname_in_level = [];
    level.drone_paths = [];
    spawners = _func_91E8F01DD90DE05A();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < spawners.size; _id_AC0E594AC96AA3A8++ )
        spawners[_id_AC0E594AC96AA3A8] thread spawn_prethink();

    level.drone_paths = undefined;
    scripts\engine\sp\utility::hudoutline_add_child_channel( "tracker", 1, "default" );
    thread process_deathflags();
    scripts\engine\utility::array_thread( ai, ::spawn_think );
    _id_662425DA496A7DD3 = getarraykeys( level.ai_classname_in_level );
    _id_0F8591C3C34A5520 = 0;
    _id_F55A7EC543C5AD6C = 0;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_662425DA496A7DD3.size; _id_AC0E594AC96AA3A8++ )
    {
        classname = tolower( _id_662425DA496A7DD3[_id_AC0E594AC96AA3A8] );

        if ( !_id_0F8591C3C34A5520 && issubstr( classname, "rpg" ) )
        {
            _id_0F8591C3C34A5520 = 1;
            _id_E4485DEA28EAA565 = "iw8_la_rpapa7";
            _func_A39466ADC48F650F( _id_E4485DEA28EAA565 );
            continue;
        }

        if ( !_id_F55A7EC543C5AD6C && issubstr( classname, "tier" ) )
        {
            _id_F55A7EC543C5AD6C = 1;
            _id_0A5D836E2CDE0EA2::precache();
        }

        if ( _id_0F8591C3C34A5520 && _id_F55A7EC543C5AD6C )
            break;
    }
}

aitype_check()
{

}

process_deathflags()
{
    foreach ( deathflag, array in level.deathflags )
    {
        if ( !isdefined( level.flag[deathflag] ) )
            scripts\engine\utility::flag_init( deathflag );
    }
}

spawn_guys_until_death_or_no_count()
{
    self endon( "death" );

    for (;;)
    {
        if ( self.count > 0 )
            self waittill( "spawned" );

        waittillframeend;

        if ( !self.count )
            return;
    }
}

ai_deathflag()
{
    level.deathflags[self.script_deathflag]["ai"][self.unique_id] = self;
    ai_number = self.unique_id;
    deathflag = self.script_deathflag;

    if ( isdefined( self.script_deathflag_longdeath ) )
        waittilldeathorpaindeath();
    else
        self waittill( "death" );

    level.deathflags[deathflag]["ai"][ai_number] = undefined;
    update_deathflag( deathflag );
}

vehicle_deathflag()
{
    ai_number = self.unique_id;
    deathflag = self.script_deathflag;

    if ( !isdefined( level.deathflags ) || !isdefined( level.deathflags[self.script_deathflag] ) )
    {
        waittillframeend;

        if ( !isdefined( self ) )
            return;
    }

    level.deathflags[deathflag]["vehicles"][ai_number] = self;
    self waittill( "death" );
    level.deathflags[deathflag]["vehicles"][ai_number] = undefined;
    update_deathflag( deathflag );
}

spawner_deathflag()
{
    level.deathflags[self.script_deathflag] = [];
    waittillframeend;

    if ( !isdefined( self ) || self.count == 0 )
        return;

    self.spawner_number = level.spawner_number;
    level.spawner_number++;
    level.deathflags[self.script_deathflag]["spawners"][self.spawner_number] = self;
    deathflag = self.script_deathflag;
    id = self.spawner_number;
    spawn_guys_until_death_or_no_count();
    level.deathflags[deathflag]["spawners"][id] = undefined;
    update_deathflag( deathflag );
}

vehicle_spawner_deathflag()
{
    level.deathflags[self.script_deathflag] = [];
    waittillframeend;

    if ( !isdefined( self ) )
        return;

    self.spawner_number = level.spawner_number;
    level.spawner_number++;
    level.deathflags[self.script_deathflag]["vehicle_spawners"][self.spawner_number] = self;
    deathflag = self.script_deathflag;
    id = self.spawner_number;
    spawn_guys_until_death_or_no_count();
    level.deathflags[deathflag]["vehicle_spawners"][id] = undefined;
    update_deathflag( deathflag );
}

update_deathflag( deathflag )
{
    level notify( "updating_deathflag_" + deathflag );
    level endon( "updating_deathflag_" + deathflag );
    waittillframeend;

    foreach ( index, array in level.deathflags[deathflag] )
    {
        if ( getarraykeys( array ).size > 0 )
            return;
    }

    scripts\engine\utility::flag_set( deathflag );
}

outdoor_think( trigger )
{
    trigger endon( "death" );

    for (;;)
    {
        trigger waittill( "trigger", guy );

        if ( !isai( guy ) )
            continue;

        guy thread scripts\engine\sp\utility::ignore_triggers( 0.15 );
        guy scripts\common\utility::disable_cqbwalk();
    }
}

indoor_think( trigger )
{
    trigger endon( "death" );

    for (;;)
    {
        trigger waittill( "trigger", guy );

        if ( !isai( guy ) )
            continue;

        guy thread scripts\engine\sp\utility::ignore_triggers( 0.15 );
        guy scripts\common\utility::enable_cqbwalk();
    }
}

trigger_spawner( trigger )
{
    trigger waittill( "trigger" );
    target = trigger.target;
    trigger scripts\engine\utility::script_delay();
    spawners = scripts\engine\utility::array_combine( _func_91E8F01DD90DE05A( target ), vehicle_getspawnerarray( target ) );

    foreach ( spawner in spawners )
    {
        if ( !_func_5777E76F57915DC7( spawner ) && spawner.code_classname == "script_vehicle" )
        {
            if ( isdefined( spawner.script_moveoverride ) && spawner.script_moveoverride == 1 || !isdefined( spawner.target ) )
                thread scripts\common\vehicle::vehicle_spawn( spawner );
            else
                spawner thread scripts\common\vehicle::spawn_vehicle_and_gopath();

            continue;
        }

        spawner thread scripts\engine\sp\utility::spawn_ai();
    }
}

trigger_spawner_reinforcement( trigger )
{
    target = trigger.target;
    _id_6C89A308769C131A = 0;
    spawners = _func_91E8F01DD90DE05A( target );

    foreach ( spawner in spawners )
    {
        if ( !isdefined( spawner.target ) )
            continue;

        _id_CB0A2EB26A741539 = _func_2387688936D207B1( spawner.target, "targetname" );

        if ( !isdefined( _id_CB0A2EB26A741539 ) )
        {
            if ( !isdefined( spawner.script_linkto ) )
                continue;

            _id_CB0A2EB26A741539 = _func_2387688936D207B1( spawner.script_linkto, "script_linkname" );

            if ( !isdefined( _id_CB0A2EB26A741539 ) )
                _id_CB0A2EB26A741539 = spawner scripts\engine\utility::get_linked_ent();

            if ( !isdefined( _id_CB0A2EB26A741539 ) )
                continue;

            if ( !isspawner( _id_CB0A2EB26A741539 ) )
                continue;
        }

        _id_6C89A308769C131A = 1;
        break;
    }

    trigger waittill( "trigger" );
    trigger scripts\engine\utility::script_delay();
    spawners = _func_91E8F01DD90DE05A( target );

    foreach ( spawner in spawners )
        spawner thread trigger_reinforcement_spawn_guys();
}

trigger_reinforcement_spawn_guys()
{
    _id_BFF0E26F729C5356 = trigger_reinforcement_get_reinforcement_spawner();
    guy = scripts\engine\sp\utility::spawn_ai();

    if ( !isdefined( guy ) )
    {
        self delete();

        if ( isdefined( _id_BFF0E26F729C5356 ) )
        {
            guy = _id_BFF0E26F729C5356 scripts\engine\sp\utility::spawn_ai();
            _id_BFF0E26F729C5356 delete();

            if ( !isdefined( guy ) )
                return;
        }
        else
            return;
    }

    if ( !isdefined( _id_BFF0E26F729C5356 ) )
        return;

    guy waittill( "death" );

    if ( !isdefined( _id_BFF0E26F729C5356 ) )
        return;

    if ( !isdefined( _id_BFF0E26F729C5356.count ) )
        _id_BFF0E26F729C5356.count = 1;

    for (;;)
    {
        if ( !isdefined( _id_BFF0E26F729C5356 ) )
            break;

        spawned = _id_BFF0E26F729C5356 scripts\engine\sp\utility::spawn_ai();

        if ( !isdefined( spawned ) )
        {
            _id_BFF0E26F729C5356 delete();
            break;
        }

        spawned thread reincrement_count_if_deleted( _id_BFF0E26F729C5356 );
        spawned waittill( "death", attacker );

        if ( !player_saw_kill( spawned, attacker ) )
        {
            if ( !isdefined( _id_BFF0E26F729C5356 ) )
                break;

            _id_BFF0E26F729C5356.count++;
        }

        if ( !isdefined( spawned ) )
            continue;

        if ( !isdefined( _id_BFF0E26F729C5356 ) )
            break;

        if ( !isdefined( _id_BFF0E26F729C5356.count ) )
            break;

        if ( _id_BFF0E26F729C5356.count <= 0 )
            break;

        if ( !scripts\engine\utility::script_wait() )
            wait( randomfloatrange( 1, 3 ) );
    }

    if ( isdefined( _id_BFF0E26F729C5356 ) )
        _id_BFF0E26F729C5356 delete();
}

trigger_reinforcement_get_reinforcement_spawner()
{
    if ( isdefined( self.target ) )
    {
        _id_BFF0E26F729C5356 = _func_2387688936D207B1( self.target, "targetname" );

        if ( isdefined( _id_BFF0E26F729C5356 ) && isspawner( _id_BFF0E26F729C5356 ) )
            return _id_BFF0E26F729C5356;
    }

    if ( isdefined( self.script_linkto ) )
    {
        _id_BFF0E26F729C5356 = _func_2387688936D207B1( self.script_linkto, "script_linkname" );

        if ( !isdefined( _id_BFF0E26F729C5356 ) )
            _id_BFF0E26F729C5356 = scripts\engine\utility::get_linked_ent();

        if ( isdefined( _id_BFF0E26F729C5356 ) && isspawner( _id_BFF0E26F729C5356 ) )
            return _id_BFF0E26F729C5356;
    }

    return undefined;
}

flood_spawner_scripted( spawners )
{
    scripts\engine\utility::array_thread( spawners, ::flood_spawner_init );
    scripts\engine\utility::array_thread( spawners, ::flood_spawner_think );
}

reincrement_count_if_deleted( spawner )
{
    spawner endon( "death" );

    if ( isdefined( self.script_force_count ) )
    {
        if ( self.script_force_count )
            return;
    }

    self waittill( "death" );

    if ( !isdefined( self ) )
        spawner.count++;
}

kill_spawner( trigger )
{
    _id_E7B46A5BE98BE42D = trigger.script_killspawner;
    trigger waittill( "trigger" );
    waittillframeend;
    waittillframeend;
    killspawner( _id_E7B46A5BE98BE42D );
    kill_trigger( trigger );
}

killspawner( _id_E7B46A5BE98BE42D )
{
    _id_13CAE3E72D89EC16 = _func_91E8F01DD90DE05A();
    _id_066221A308D9D371 = vehicle_getspawnerarray();
    spawners = scripts\engine\utility::array_combine( _id_13CAE3E72D89EC16, _id_066221A308D9D371 );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < spawners.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( isdefined( spawners[_id_AC0E594AC96AA3A8].script_killspawner ) && _id_E7B46A5BE98BE42D == spawners[_id_AC0E594AC96AA3A8].script_killspawner )
        {
            if ( _func_5777E76F57915DC7( spawners[_id_AC0E594AC96AA3A8] ) )
                spawners[_id_AC0E594AC96AA3A8] notify( "death" );

            spawners[_id_AC0E594AC96AA3A8] delete();
        }
    }
}

kill_trigger( trigger )
{
    if ( !isdefined( trigger ) )
        return;

    if ( isdefined( trigger.targetname ) && trigger.targetname != "flood_spawner" )
        return;

    trigger delete();
}

random_killspawner( trigger )
{
    trigger endon( "death" );
    random_killspawner = trigger.script_random_killspawner;
    waittillframeend;

    if ( !isdefined( level.killspawn_groups ) )
        level.killspawn_groups = [];

    if ( !isdefined( level.killspawn_groups[random_killspawner] ) )
        return;

    trigger waittill( "trigger" );
    cull_spawners_from_killspawner( random_killspawner );
}

cull_spawners_from_killspawner( random_killspawner )
{
    if ( !isdefined( level.killspawn_groups ) )
        level.killspawn_groups = [];

    if ( !isdefined( level.killspawn_groups[random_killspawner] ) )
        return;

    spawn_groups = level.killspawn_groups[random_killspawner];
    keys = getarraykeys( spawn_groups );

    if ( keys.size <= 1 )
        return;

    _id_C8F2803F103CFD68 = scripts\engine\utility::random( keys );
    spawn_groups[_id_C8F2803F103CFD68] = undefined;

    foreach ( key, spawners in spawn_groups )
    {
        foreach ( _id_AC0E424AC96A7113, spawner in spawners )
        {
            if ( isdefined( spawner ) )
                spawner delete();
        }

        level.killspawn_groups[random_killspawner][key] = undefined;
    }
}

empty_spawner( trigger )
{
    _id_947A8FB1B2EAA41A = trigger.script_emptyspawner;
    trigger waittill( "trigger" );
    spawners = _func_91E8F01DD90DE05A();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < spawners.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !isdefined( spawners[_id_AC0E594AC96AA3A8].script_emptyspawner ) )
            continue;

        if ( _id_947A8FB1B2EAA41A != spawners[_id_AC0E594AC96AA3A8].script_emptyspawner )
            continue;

        spawners[_id_AC0E594AC96AA3A8] scripts\engine\sp\utility::set_count( 0 );
        spawners[_id_AC0E594AC96AA3A8] notify( "emptied spawner" );
    }

    trigger notify( "deleted spawners" );
}

kill_spawnernum( number )
{
    spawners = _func_91E8F01DD90DE05A();

    foreach ( spawner in spawners )
    {
        if ( !isdefined( spawner.script_killspawner ) )
            continue;

        if ( number != spawner.script_killspawner )
            continue;

        spawner delete();
    }
}

spawn_grenade( origin, team )
{
    grenade = spawn( "weapon_frag", origin );
    grenade thread add_to_grenade_cache( team );
    return grenade;
}

add_to_grenade_cache( team )
{
    if ( !isdefined( level.grenade_cache ) || !isdefined( level.grenade_cache[team] ) )
    {
        level.grenade_cache_index[team] = 0;
        level.grenade_cache[team] = [];
    }

    index = level.grenade_cache_index[team];
    item = level.grenade_cache[team][index];

    if ( isdefined( item ) )
        item delete();

    level.grenade_cache[team][index] = self;
    level.grenade_cache_index[team] = ( index + 1 ) % 16;
}

waittilldeathorpaindeath()
{
    self endon( "death" );
    self waittill( "long_death" );
}

dronespawner_init()
{
    scripts\sp\drone_base::drone_init_path();
}

fakeactorspawner_init()
{
    scripts\sp\fakeactor::fakeactor_spawner_init();
}

spawn_prethink()
{
    level.ai_classname_in_level[self.classname] = 1;

    if ( isdefined( self.script_difficulty ) )
    {
        switch ( self.script_difficulty )
        {
            case "easy":
                if ( level.gameskill > 1 )
                    scripts\engine\sp\utility::set_count( 0 );

                break;
            case "hard":
                if ( level.gameskill < 2 )
                    scripts\engine\sp\utility::set_count( 0 );

                break;
        }
    }

    init_stealth();

    if ( isdefined( self.script_drone ) )
        thread dronespawner_init();

    if ( isdefined( self.script_fakeactor ) )
        thread fakeactorspawner_init();

    if ( isdefined( self.script_aigroup ) )
    {
        _id_57F8B4C321038A32 = self.script_aigroup;

        if ( !isdefined( level._ai_group[_id_57F8B4C321038A32] ) )
            aigroup_create( _id_57F8B4C321038A32 );

        thread aigroup_spawnerthink( level._ai_group[_id_57F8B4C321038A32] );
    }

    if ( isdefined( self.script_delete ) )
    {
        _id_12485DA956667AB6 = 0;

        if ( isdefined( level._ai_delete ) )
        {
            if ( isdefined( level._ai_delete[self.script_delete] ) )
                _id_12485DA956667AB6 = level._ai_delete[self.script_delete].size;
        }

        level._ai_delete[self.script_delete][_id_12485DA956667AB6] = self;
    }

    if ( isdefined( self.script_health ) )
    {
        if ( self.script_health > level._max_script_health )
            level._max_script_health = self.script_health;

        _id_12485DA956667AB6 = 0;

        if ( isdefined( level._ai_health ) )
        {
            if ( isdefined( level._ai_health[self.script_health] ) )
                _id_12485DA956667AB6 = level._ai_health[self.script_health].size;
        }

        level._ai_health[self.script_health][_id_12485DA956667AB6] = self;
    }

    if ( isdefined( self.script_deathflag ) )
        thread spawner_deathflag();

    if ( isdefined( self.target ) )
        crawl_targets_init_flags( self.target );

    if ( isdefined( self.script_spawngroup ) )
        add_to_spawngroup();

    if ( isdefined( self.script_random_killspawner ) )
        add_random_killspawner_to_spawngroup();

    if ( !isdefined( self.spawn_functions ) )
        self.spawn_functions = [];

    for (;;)
    {
        self waittill( "spawned", spawned );

        if ( !isalive( spawned ) )
            continue;

        if ( isdefined( level.spawnercallbackthread ) )
            self thread [[ level.spawnercallbackthread ]]( spawned );

        if ( isdefined( self.script_delete ) )
        {
            for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level._ai_delete[self.script_delete].size; _id_AC0E594AC96AA3A8++ )
            {
                if ( level._ai_delete[self.script_delete][_id_AC0E594AC96AA3A8] != self )
                    level._ai_delete[self.script_delete][_id_AC0E594AC96AA3A8] delete();
            }
        }

        spawned.spawn_funcs = self.spawn_functions;
        spawned.spawn_functions = undefined;
        spawned.spawner = self;

        if ( isdefined( self.targetname ) )
        {
            spawned thread spawn_think( self.targetname );
            continue;
        }

        spawned thread spawn_think();
    }
}

init_stealth()
{
    if ( !isdefined( self.script_stealth ) && !isdefined( self.script_stealthgroup ) )
        return;

    if ( isdefined( self.script_stealth ) && !isdefined( self.script_stealthgroup ) )
        self.script_stealthgroup = self.script_stealth;

    self.script_stealth = undefined;
}

spawn_think( targetname )
{
    level.ai_classname_in_level[self.classname] = 1;

    if ( isdefined( self.asmname ) && self.asmname == "seeker" )
        return;

    spawn_think_action( targetname );
    self endon( "death" );

    if ( shouldnt_spawn_because_of_script_difficulty() )
        self delete();

    thread run_spawn_functions();
    self.finished_spawning = 1;
    self notify( "finished spawning" );
}

shouldnt_spawn_because_of_script_difficulty()
{
    if ( !isdefined( self.script_difficulty ) )
        return 0;

    _id_941D1A5151CE73B8 = 0;

    switch ( self.script_difficulty )
    {
        case "easy":
            if ( level.gameskill > 1 )
                _id_941D1A5151CE73B8 = 1;

            break;
        case "hard":
            if ( level.gameskill < 2 )
                _id_941D1A5151CE73B8 = 1;

            break;
    }

    return _id_941D1A5151CE73B8;
}

run_spawn_functions()
{
    team = scripts\engine\utility::ter_op( isdefined( level.vehicle.spawn_functions_enable ) && level.vehicle.spawn_functions_enable && self.code_classname == "script_vehicle", self.script_team, self.team );

    if ( isdefined( team ) )
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.spawn_funcs[team].size; _id_AC0E594AC96AA3A8++ )
        {
            func = level.spawn_funcs[team][_id_AC0E594AC96AA3A8];

            if ( isdefined( func["param5"] ) )
            {
                thread [[ func["function"] ]]( func["param1"], func["param2"], func["param3"], func["param4"], func["param5"] );
                continue;
            }

            if ( isdefined( func["param4"] ) )
            {
                thread [[ func["function"] ]]( func["param1"], func["param2"], func["param3"], func["param4"] );
                continue;
            }

            if ( isdefined( func["param3"] ) )
            {
                thread [[ func["function"] ]]( func["param1"], func["param2"], func["param3"] );
                continue;
            }

            if ( isdefined( func["param2"] ) )
            {
                thread [[ func["function"] ]]( func["param1"], func["param2"] );
                continue;
            }

            if ( isdefined( func["param1"] ) )
            {
                thread [[ func["function"] ]]( func["param1"] );
                continue;
            }

            thread [[ func["function"] ]]();
        }
    }

    if ( !isdefined( self.spawn_funcs ) )
    {
        if ( !isdefined( self.script_suspend ) )
            self.spawner = undefined;

        return;
    }

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < self.spawn_funcs.size; _id_AC0E594AC96AA3A8++ )
    {
        func = self.spawn_funcs[_id_AC0E594AC96AA3A8];

        if ( isdefined( func["param5"] ) )
        {
            thread [[ func["function"] ]]( func["param1"], func["param2"], func["param3"], func["param4"], func["param5"] );
            continue;
        }

        if ( isdefined( func["param4"] ) )
        {
            thread [[ func["function"] ]]( func["param1"], func["param2"], func["param3"], func["param4"] );
            continue;
        }

        if ( isdefined( func["param3"] ) )
        {
            thread [[ func["function"] ]]( func["param1"], func["param2"], func["param3"] );
            continue;
        }

        if ( isdefined( func["param2"] ) )
        {
            thread [[ func["function"] ]]( func["param1"], func["param2"] );
            continue;
        }

        if ( isdefined( func["param1"] ) )
        {
            thread [[ func["function"] ]]( func["param1"] );
            continue;
        }

        thread [[ func["function"] ]]();
    }

    self.spawn_funcs = undefined;

    if ( !isdefined( self.script_suspend ) )
        self.spawner = undefined;
}

deathfunctions()
{
    self waittill( "death", attacker, cause, objweapon );
    weapon = undefined;

    if ( isdefined( objweapon ) )
        weapon = getcompleteweaponname( objweapon );

    level notify( "ai_killed", self, attacker, cause, weapon );

    if ( !isdefined( self ) )
        return;

    if ( isdefined( attacker ) )
    {
        if ( self.team == "axis" || self.team == "team3" )
        {
            _id_87F5148B60EED56D = undefined;

            if ( isdefined( attacker.attacker ) )
            {
                if ( isdefined( attacker.issentrygun ) && attacker.issentrygun )
                    _id_87F5148B60EED56D = "sentry";

                if ( isdefined( attacker.destructible_type ) )
                    _id_87F5148B60EED56D = "destructible";

                attacker = attacker.attacker;
            }
            else if ( isdefined( attacker.owner ) )
            {
                if ( isai( attacker ) && isplayer( attacker.owner ) )
                    _id_87F5148B60EED56D = "friendly";

                attacker = attacker.owner;
            }
            else if ( isdefined( attacker.damageowner ) )
            {
                if ( isdefined( attacker.destructible_type ) )
                    _id_87F5148B60EED56D = "destructible";

                attacker = attacker.damageowner;
            }

            _id_2D113E958C753976 = 0;

            if ( isplayer( attacker ) )
                _id_2D113E958C753976 = 1;

            if ( _id_2D113E958C753976 )
            {
                attacker.lastenemykilltime = gettime();
                attacker scripts\sp\player_stats::register_kill( self, cause, weapon, _id_87F5148B60EED56D );
            }

            scripts\sp\analytics::_id_7212C89168020E04( self, attacker, objweapon );
        }
    }
}

ai_damage_think()
{
    self endon( "entitydeleted" );
    self.damage_functions = [];

    for (;;)
    {
        self waittill( "damage", damage, attacker, direction_vec, point, type, modelname, tagname, partname, idflags, objweapon );
        self.paindamage = damage;

        if ( isdefined( attacker ) && isplayer( attacker ) )
        {
            _id_241AD90FA3096F1F = attacker.currentweapon;

            if ( isdefined( _id_241AD90FA3096F1F ) && scripts\sp\utility::isprimaryweapon( _id_241AD90FA3096F1F ) && isdefined( type ) && ( type == "MOD_PISTOL_BULLET" || type == "MOD_RIFLE_BULLET" ) )
            {
                attacker thread scripts\sp\player_stats::register_shot_hit();

                if ( self isbadguy() )
                    attacker.lastenemydmgtime = gettime();
            }
        }

        foreach ( func in self.damage_functions )
            thread [[ func ]]( damage, attacker, direction_vec, point, type, modelname, tagname, partname, idflags, objweapon );

        if ( !isalive( self ) || self.delayeddeath )
            break;
    }
}

living_ai_prethink()
{
    init_stealth();

    if ( isdefined( self.target ) )
        crawl_targets_init_flags( self.target );
}

crawl_targets_init_flags( target )
{
    goals = get_target_goals( target );

    if ( goals.size == 0 )
        return;

    index = -1;

    for (;;)
    {
        index++;

        if ( index >= goals.size )
            break;

        goal = goals[index];

        if ( isdefined( goal.crawled ) )
            continue;

        goal.crawled = 1;
        level thread remove_crawled( goal );

        if ( isdefined( goal.script_flag_set ) )
        {
            if ( !isdefined( level.flag[goal.script_flag_set] ) )
                scripts\engine\utility::flag_init( goal.script_flag_set );
        }

        if ( isdefined( goal.script_flag_wait ) )
        {
            if ( !isdefined( level.flag[goal.script_flag_wait] ) )
                scripts\engine\utility::flag_init( goal.script_flag_wait );
        }

        if ( isdefined( goal.script_flag_clear ) )
        {
            if ( !isdefined( level.flag[goal.script_flag_clear] ) )
                scripts\engine\utility::flag_init( goal.script_flag_clear );
        }

        if ( isdefined( goal._id_7FD486C78ED742F7 ) )
        {
            if ( !isdefined( level.flag[goal._id_7FD486C78ED742F7] ) )
                scripts\engine\utility::flag_init( goal._id_7FD486C78ED742F7 );
        }

        if ( isdefined( goal.script_idle ) )
        {
            if ( !isdefined( level.idle_funcs ) )
                scripts\sp\stealth\idle_sitting::main();
        }

        if ( isdefined( goal.target ) )
        {
            _id_889BE5A52999435E = get_target_goals( goal.target );

            foreach ( new in _id_889BE5A52999435E )
            {
                if ( !isdefined( new.crawled ) )
                    goals[goals.size] = new;
            }
        }
    }
}

remove_crawled( ent )
{
    waittillframeend;

    if ( isdefined( ent ) )
        ent.crawled = undefined;
}

spawn_team_allies()
{
    self.usechokepoints = 0;
    checkboosttraversal();
    self _meth_523285BABAB34E5B( "all", 1 );
}

spawn_team_axis()
{
    checkboosttraversal();

    if ( isdefined( self.script_combatmode ) )
        self.combatmode = self.script_combatmode;
}

checkboosttraversal()
{
    _id_5181F3DC1052495F["crew"] = 1;
    _id_5181F3DC1052495F["no_boost"] = 1;
    _id_5181F3DC1052495F["noboost"] = 1;

    if ( isdefined( self.subclass ) && isdefined( _id_5181F3DC1052495F[self.subclass] ) )
        self enabletraversals( 0, "soldier_boost" );
}

spawn_team_team3()
{
    spawn_team_axis();
    checkboosttraversal();
}

spawn_team_neutral()
{
    checkboosttraversal();
}

spawn_unittype_soldier()
{

}

spawn_think_game_skill_related()
{
    scripts\common\gameskill::default_door_node_flashbang_frequency();
    scripts\common\gameskill::grenadeawareness();
}

ai_lasers()
{
    if ( !isalive( self ) )
        return;

    if ( self.health <= 1 )
        return;

    self _meth_6F7BE4CB996E4D3E();
    self waittill( "death" );

    if ( !isdefined( self ) )
        return;

    self _meth_9BA253C26D6D6740();
}

spawn_think_script_inits()
{
    if ( isdefined( self.script_dontshootwhilemoving ) )
    {
        self.dontshootwhilemoving = 1;
        self.script_dontshootwhilemoving = undefined;
    }

    if ( isdefined( self.script_deathflag ) )
        thread ai_deathflag();

    if ( isdefined( self.script_attackeraccuracy ) )
    {
        self.attackeraccuracy = self.script_attackeraccuracy;
        self.script_attackeraccuracy = undefined;
    }

    if ( isdefined( self.script_startrunning ) )
    {
        thread start_off_running();
        self.script_startrunning = undefined;
    }

    if ( isdefined( self.script_deathtime ) )
        thread deathtime();

    if ( isdefined( self.script_nosurprise ) )
    {
        scripts\engine\sp\utility::disable_surprise();
        self.script_nosurprise = undefined;
    }

    if ( isdefined( self.script_nobloodpool ) )
    {
        self.skipbloodpool = 1;
        self.script_nobloodpool = undefined;
    }

    if ( isdefined( self.script_animname ) )
    {
        self.animname = self.script_animname;
        self.script_animname = undefined;
    }

    if ( isdefined( self.script_laser ) )
        thread ai_lasers();

    if ( isdefined( self.script_danger_react ) )
    {
        time = self.script_danger_react;

        if ( time == 1 )
            time = 8;

        scripts\engine\sp\utility::enable_danger_react( time );
    }

    if ( isdefined( self.script_faceenemydist ) )
        self.maxfaceenemydist = self.script_faceenemydist;

    if ( isdefined( self.script_forcecolor ) )
        scripts\engine\sp\utility::set_force_color( self.script_forcecolor );

    if ( isdefined( self.dontdropweapon ) )
        self.dropweapon = 0;

    if ( isdefined( self.script_team ) )
        self.team = self.script_team;

    if ( isdefined( self.script_fixednode ) )
    {
        self.fixednode = self.script_fixednode == 1;
        self.script_fixednode = undefined;
    }
    else
        self.fixednode = self.team == "allies";

    if ( isdefined( self.script_no_reorient ) && self.script_no_reorient == 1 )
    {
        self.no_reorient = 1;
        self.script_no_reorient = undefined;
    }

    self.providecoveringfire = self.team == "allies" && self.fixednode;

    if ( isdefined( self.script_noteworthy ) && self.script_noteworthy == "mgpair" )
        thread scripts\sp\mg_penetration::create_mg_team();

    if ( isdefined( self.script_goalvolume ) && !( isdefined( self.script_moveoverride ) && self.script_moveoverride == 1 || isdefined( self.script_stealthgroup ) ) )
        thread set_goal_volume();

    if ( isdefined( self.script_threatbiasgroup ) )
        self setthreatbiasgroup( self.script_threatbiasgroup );
    else if ( self.team == "neutral" )
        self setthreatbiasgroup( "civilian" );
    else
        self setthreatbiasgroup( self.team );

    if ( isdefined( self.script_bcdialog ) )
        scripts\engine\sp\utility::set_battlechatter( self.script_bcdialog );

    if ( isdefined( self.script_accuracy ) )
    {
        self.baseaccuracy = self.script_accuracy;
        self.script_accuracy = undefined;
    }

    if ( isdefined( self.script_ignoreme ) )
    {
        self.ignoreme = 1;
        self.script_ignoreme = undefined;
    }

    if ( isdefined( self.script_ignore_suppression ) )
    {
        self.ignoresuppression = 1;
        self.script_ignore_suppression = undefined;
    }

    if ( isdefined( self.script_ignoreall ) )
    {
        self.ignoreall = 1;
        self _meth_8A144CB1601C409A();
    }

    if ( isdefined( self.script_no_seeker ) )
    {
        self.no_seeker = 1;
        self.script_no_seeker = undefined;
    }

    if ( isdefined( self.script_offhands ) )
    {
        scripts\engine\sp\utility::set_grenadeweapon( self.script_offhands );
        self.script_offhands = undefined;
    }

    if ( isdefined( self.script_favoriteenemy ) )
    {
        if ( self.script_favoriteenemy == "player" )
        {
            self.favoriteenemy = level.player;
            level.player.targetname = "player";
        }
    }

    if ( isdefined( self.script_sightrange ) )
    {
        self.maxsightdistsqrd = squared( self.script_sightrange );
        self.script_sightrange = undefined;
    }

    if ( isdefined( self.script_fightdist ) )
    {
        self.pathenemyfightdist = self.script_fightdist;
        self.script_fightdist = undefined;
    }

    if ( isdefined( self.script_maxdist ) )
    {
        self.pathenemylookahead = self.script_maxdist;
        self.script_maxdist = undefined;
    }

    if ( isdefined( self.script_longdeath ) )
    {
        if ( self.script_longdeath == 0 )
            scripts\engine\sp\utility::disable_long_death();
        else if ( self.script_longdeath == 1 )
            scripts\engine\sp\utility::enable_long_death();
        else
        {
            scripts\engine\sp\utility::enable_long_death();
            self.forcelongdeath = self.script_longdeath;
        }
    }

    if ( isdefined( self.script_forcebalconydeath ) )
    {
        self.forcebalconydeath = 1;
        self.script_forcebalconydeath = undefined;
    }

    if ( isdefined( self.script_diequietly ) )
    {
        self.diequietly = 1;
        self.script_diequietly = undefined;
    }

    if ( isdefined( self.script_noragdoll ) )
    {
        self.noragdoll = 1;
        self.script_noragdoll = undefined;
    }

    if ( isdefined( self.script_pacifist ) )
    {
        self.pacifist = 1;
        self.script_pacifist = undefined;
    }

    if ( isdefined( self.script_bulletshield ) )
    {
        scripts\common\ai::magic_bullet_shield();
        self.script_bulletshield = undefined;
    }

    if ( isdefined( self.script_startinghealth ) )
    {
        self.health = self.script_startinghealth;
        self.script_startinghealth = undefined;
    }

    if ( isdefined( self.script_nodrop ) )
    {
        self.nodrop = self.script_nodrop;
        self.script_nodrop = undefined;
    }

    if ( isdefined( self.script_noloot ) )
    {
        self.noloot = self.script_noloot;
        self.script_noloot = undefined;
    }

    if ( isdefined( self._id_8CD7555E90FD46C3 ) )
    {
        self._id_F85AA26E953E8279 = self._id_8CD7555E90FD46C3;
        self._id_8CD7555E90FD46C3 = undefined;
    }

    if ( isdefined( self.script_demeanor ) )
    {
        scripts\common\utility::demeanor_override( self.script_demeanor );
        self.script_demeanor = undefined;
    }

    if ( isdefined( self.script_civilian_state ) )
    {
        scripts\asm\asm_bb::bb_setcivilianstate( self.script_civilian_state );
        self.script_civilian_state = undefined;
    }

    if ( isdefined( self.script_speed ) )
    {
        scripts\engine\utility::set_movement_speed( self.script_speed );
        self.script_speed = undefined;
    }

    if ( isdefined( self.script_noflashlight ) )
    {
        self.noflashlight = self.script_noflashlight;
        self.script_noflashlight = undefined;
    }

    if ( isdefined( self.script_bombplayer ) )
    {
        self.bombertarget = level.player;
        self getenemyinfo( level.player );
        self.script_bombplayer = undefined;
    }

    thread scripts\sp\loot::corpselootthink();
}

spawn_c6_script_inits()
{
    if ( isdefined( self.script_selfdestruct_delay ) )
    {
        self.bt.forceselfdestructtimer = gettime() + self.script_selfdestruct_delay * 1000;
        self.script_selfdestruct_delay = undefined;
    }
    else if ( isdefined( self.script_selfdestruct ) )
    {
        self.bt.forceselfdestructtimer = 1;
        self.script_selfdestruct = undefined;
    }

    if ( getdvarint( "dvar_2513D6D875C8473E" ) )
        self.dropweapon = 0;
}

spawn_think_action( targetname )
{
    thread ai_damage_think();
    thread tanksquish();

    if ( !isdefined( level.ai_dont_glow_in_thermal ) )
        self thermaldrawenable();

    self.spawner_number = undefined;

    if ( !isdefined( self.unique_id ) )
    {
        scripts\engine\utility::set_ai_number();
        scripts\engine\utility::_id_82581894F5A1C71C();
    }

    thread deathfunctions();
    level thread scripts\sp\friendlyfire::friendly_fire_think( self );
    self.walkdist = 16;
    init_reset_ai();
    spawn_think_game_skill_related();
    spawn_think_script_inits();

    switch ( self.unittype )
    {
        case "c6":
            spawn_c6_script_inits();
            break;
    }

    [[ level.team_specific_spawn_functions[self.team] ]]();

    if ( isdefined( level.unittype_spawn_functions[self.unittype] ) )
        self thread [[ level.unittype_spawn_functions[self.unittype] ]]();

    if ( isdefined( level.subclass_spawn_functions[self.subclass] ) )
        self thread [[ level.subclass_spawn_functions[self.subclass] ]]();

    if ( self.team == "axis" )
        thread scripts\engine\sp\utility::add_damage_function( scripts\sp\damagefeedback::damagefeedback_took_damage );

    set_goal_height_from_settings();

    if ( isdefined( self.script_combatbehavior ) )
    {
        if ( self.script_combatbehavior == "heat" )
            scripts\sp\utility::enable_heat_behavior();

        if ( self.script_combatbehavior == "cqb" )
            scripts\common\utility::enable_cqbwalk();
    }

    if ( isdefined( self.suspended_ai ) )
        postspawn_suspended_ai();

    if ( isdefined( self.script_playerseek ) )
    {
        self setgoalentity( level.player );
        return;
    }

    if ( isdefined( self.script_stealthgroup ) )
    {
        if ( !isdefined( level.stealth ) )
            scripts\sp\stealth\manager::main();

        scripts\stealth\callbacks::stealth_call_thread( "do_stealth" );
        return;
    }

    if ( isdefined( self.script_readystand ) && self.script_readystand == 1 )
        scripts\engine\sp\utility::enable_readystand();

    if ( isdefined( self.script_delayed_playerseek ) )
    {
        if ( !isdefined( self.script_radius ) )
            self.goalradius = 800;

        self setgoalentity( level.player );
        level thread delayed_player_seek_think( self );
        return;
    }

    if ( isdefined( self.script_moveoverride ) && self.script_moveoverride == 1 )
    {
        set_goal_from_settings();
        self setgoalpos( self.origin );
        return;
    }

    if ( !isdefined( self.script_stealthgroup ) )
    {

    }

    set_goal_from_settings();

    if ( isdefined( self.target ) )
        thread go_to_node();
}

init_reset_ai()
{
    if ( !isdefined( self._id_6C18812ECBD3B6AE ) || self._id_6C18812ECBD3B6AE )
        scripts\engine\sp\utility::set_default_pathenemy_settings();

    if ( isdefined( self.script_grenades ) )
        self.grenadeammo = self.script_grenades;

    if ( isdefined( self.primaryweapon ) )
        self.noattackeraccuracymod = self _meth_E8CA4080D02A0BB4();

    self.neversprintforvariation = 1;
}

scrub_guy()
{
    if ( self.team == "neutral" )
        self setthreatbiasgroup( "civilian" );
    else
        self setthreatbiasgroup( self.team );

    init_reset_ai();
    self.baseaccuracy = 1;
    scripts\common\gameskill::grenadeawareness();
    scripts\engine\sp\utility::clear_force_color();
    self.interval = 96;
    self.disablearrivals = 0;
    self.ignoreme = 0;
    self.ignoreall = 0;
    self.threatbias = 0;
    self.pacifist = 0;
    self.pacifistwait = 20;
    self.ignorerandombulletdamage = 0;
    self.pushable = 1;
    self.script_pushable = 1;
    self.allowdeath = 0;
    self.anglelerprate = 540;
    self.badplaceawareness = 0.75;
    self.dontavoidplayer = 0;
    self.drawoncompass = 1;
    self.dropweapon = 1;
    self.goalradius = level.default_goalradius;
    self.goalheight = level.default_goalheight;
    self.ignoresuppression = 0;
    self pushplayer( 0 );
    self.grenadeammo = 3;

    if ( isdefined( self.magic_bullet_shield ) && self.magic_bullet_shield )
        scripts\common\ai::stop_magic_bullet_shield();

    scripts\engine\sp\utility::disable_replace_on_death();
    self.maxsightdistsqrd = 67108864;
    self.script_forcegrenade = 0;
    self.walkdist = 16;
    self.pushable = 1;
    self.script_pushable = 1;
    _id_5C36B3719581F7CC::set_anim_playback_rate();
    self.fixednode = self.team == "allies";
}

delayed_player_seek_think( spawned )
{
    spawned endon( "death" );

    while ( isalive( spawned ) )
    {
        if ( spawned.goalradius > 200 )
            spawned.goalradius = spawned.goalradius - 200;

        wait 6;
    }
}

set_goal_volume()
{
    self endon( "death" );
    waittillframeend;

    if ( isdefined( self.team ) && self.team == "allies" )
        self.fixednode = 0;

    volume = level.goalvolumes[self.script_goalvolume];

    if ( !isdefined( volume ) )
        return;

    if ( isdefined( volume.target ) )
    {
        node = getnode( volume.target, "targetname" );
        ent = getent( volume.target, "targetname" );
        struct = scripts\engine\utility::getstruct( volume.target, "targetname" );
        pos = undefined;

        if ( isdefined( node ) )
        {
            pos = node;
            self setgoalnode( pos );
        }
        else if ( isdefined( ent ) )
        {
            pos = ent;
            self setgoalpos( pos.origin );
        }
        else if ( isdefined( struct ) )
        {
            pos = struct;
            self setgoalpos( pos.origin );
        }

        if ( isdefined( pos.radius ) && pos.radius != 0 )
            self.goalradius = pos.radius;

        if ( isdefined( pos.goalheight ) && pos.goalheight != 0 )
            self.goalheight = pos.goalheight;
    }

    if ( isdefined( self.target ) )
        self setgoalvolume( volume );
    else
        self setgoalvolumeauto( volume, volume scripts\engine\sp\utility::get_cover_volume_forward() );
}

get_target_goals( target )
{
    goals = getnodearray( target, "targetname" );
    _id_889BE5A52999435E = scripts\engine\utility::getstructarray( target, "targetname" );

    foreach ( new in _id_889BE5A52999435E )
        goals[goals.size] = new;

    _id_889BE5A52999435E = getentarray( target, "targetname" );

    foreach ( new in _id_889BE5A52999435E )
    {
        if ( !is_target_goal_valid( new ) )
            continue;

        goals[goals.size] = new;
    }

    return goals;
}

is_target_goal_valid( object )
{
    if ( isspawner( object ) )
        return 0;

    switch ( object.code_classname )
    {
        case "trigger_once":
        case "trigger_radius":
        case "misc_turret":
        case "trigger_multiple":
            return 0;
    }

    return 1;
}

node_has_radius( node )
{
    return isdefined( node.radius ) && node.radius != 0;
}

go_to_node( nodes, _id_D25339A42DEEAC35, _id_5E38F20C9628AE25 )
{
    if ( !isdefined( nodes ) )
    {
        nodes = get_target_goals( self.target );

        if ( nodes.size == 0 )
        {
            self notify( "reached_path_end" );
            return;
        }
    }
    else if ( !isarray( nodes ) )
        nodes = [ nodes ];

    go_to_node_internal( nodes, _id_D25339A42DEEAC35, _id_5E38F20C9628AE25 );
}

get_least_used_from_array( array )
{
    if ( array.size == 1 )
        return array[0];

    array = scripts\engine\utility::array_randomize( array );
    _id_AD98B0B8CE2A6FDE = array[0];

    if ( !isdefined( _id_AD98B0B8CE2A6FDE.used_time ) )
        _id_AD98B0B8CE2A6FDE.used_time = 0;

    foreach ( node in array )
    {
        if ( !isdefined( node.used_time ) )
            node.used_time = 0;

        if ( node.used_time < _id_AD98B0B8CE2A6FDE.used_time )
            _id_AD98B0B8CE2A6FDE = node;
    }

    _id_AD98B0B8CE2A6FDE.used_time = gettime();
    return _id_AD98B0B8CE2A6FDE;
}

go_to_node_internal( node, _id_D25339A42DEEAC35, _id_5E38F20C9628AE25 )
{
    self notify( "stop_going_to_node" );
    self endon( "stop_going_to_node" );
    self endon( "death" );

    if ( !isarray( node ) )
        node = [ node ];

    startnode = node[0];
    thread go_to_node_end();
    _id_A749CE9B52022669 = 0;
    patharray = undefined;

    for (;;)
    {
        if ( !_id_A749CE9B52022669 )
        {
            if ( isdefined( level._id_375B317CC772EF57 ) )
                node = [[ level._id_375B317CC772EF57 ]]( node );
            else
                node = get_least_used_from_array( node );

            patharray = get_path_array( node, startnode );
            self.patharray = patharray;
            self.patharrayindex = -1;

            if ( patharray.size > 1 )
                _id_A749CE9B52022669 = 1;
        }

        self.currentnode = node;

        if ( _id_A749CE9B52022669 )
        {
            node = patharray[patharray.size - 1];
            go_through_patharray( patharray, _id_D25339A42DEEAC35, _id_5E38F20C9628AE25 );
            patharray = undefined;
            _id_A749CE9B52022669 = 0;
        }
        else
        {
            node_fields_pre_goal( node );

            if ( isdefined( self.stealth ) )
                scripts\stealth\callbacks::stealth_call( "go_to_node_wait", ::go_to_node_set_goal, node );
            else
            {
                go_to_node_set_goal( node );
                self waittill( "goal" );
            }
        }

        node notify( "trigger", self );
        node_fields_after_goal( node, _id_D25339A42DEEAC35 );
        _id_F8D4ED108521E632 = self _meth_92435C7A6AE85C3C();

        if ( isdefined( _id_F8D4ED108521E632 ) )
            self waittill( "bseq_user_deleted" );
        else
            node scripts\engine\utility::script_delay();

        if ( isdefined( node.script_flag_wait ) )
            scripts\engine\utility::flag_wait( node.script_flag_wait );

        if ( isdefined( node._id_7FD486C78ED742F7 ) )
            scripts\engine\utility::flag_waitopen( node._id_7FD486C78ED742F7 );

        if ( isdefined( node.script_ent_flag_wait ) )
            scripts\engine\utility::ent_flag_wait( node.script_ent_flag_wait );

        if ( isdefined( node._id_043ADD43A57978CD ) )
            scripts\engine\utility::ent_flag_waitopen( node._id_043ADD43A57978CD );

        node scripts\engine\utility::script_wait();
        node_fields_after_goal_and_wait( node, _id_5E38F20C9628AE25 );

        if ( !isdefined( node.target ) )
            break;

        _id_6EC865F8E82F3AE6 = get_target_goals( node.target );

        if ( !_id_6EC865F8E82F3AE6.size )
            break;

        node = _id_6EC865F8E82F3AE6;
    }

    self notify( "reached_path_end" );

    if ( isdefined( self.script_forcegoal ) )
        return;

    volume = self getgoalvolume();

    if ( isdefined( volume ) )
        self setgoalvolumeauto( volume, volume scripts\engine\sp\utility::get_cover_volume_forward() );
    else
        self.goalradius = level.default_goalradius;
}

go_to_node_wait( _id_E2A7566FB8A29355, node )
{
    self endon( "death" );

    if ( !istrue( node._id_97C8A15D77788E5A ) )
    {
        if ( isdefined( node.target ) )
        {
            self._blackboard.idlenode = node;
            node._id_F8D4ED108521E632 = _func_5D6132045B29BAF5( node.target );
        }

        node._id_97C8A15D77788E5A = 1;
    }

    if ( isdefined( node.interaction ) && !isdefined( node._id_F8D4ED108521E632 ) )
    {
        self._blackboard.idlenode = node;
        angles = node.angles;

        if ( !isdefined( angles ) )
            angles = ( 0, 0, 0 );

        node._id_F8D4ED108521E632 = _func_72066AA981916ECC( node.interaction, node.origin, angles );
    }

    self [[ _id_E2A7566FB8A29355 ]]( node );
    self waittill( "goal" );

    if ( isdefined( node._id_F8D4ED108521E632 ) )
    {
        self _meth_76B3CFB91EF40B3B( node._id_F8D4ED108521E632 );
        self waittill( "bseq_user_deleted" );
        self._blackboard.idlenode = undefined;

        if ( isdefined( node.interaction ) )
        {
            _func_2A627FA5FD1CE263( node._id_F8D4ED108521E632 );
            node._id_F8D4ED108521E632 = undefined;
        }
    }
}

go_through_patharray( patharray, _id_D25339A42DEEAC35, _id_5E38F20C9628AE25 )
{
    self setgoalpath( patharray );

    foreach ( index, _id_E0386CBFBCCBBC5B in patharray )
    {
        node_fields_pre_goal( _id_E0386CBFBCCBBC5B );

        if ( index == 0 )
        {
            while ( istrue( self.arriving ) )
                waitframe();
        }

        patharrayindex = waittill_subgoal();
        self.patharrayindex = patharrayindex;

        if ( isdefined( self.patharray ) && !isdefined( self.patharrayindex ) )
            self.patharrayindex = self.patharray.size - 1;

        if ( index == patharray.size - 1 )
        {
            self waittill( "goal" );
            break;
        }

        _id_E0386CBFBCCBBC5B notify( "trigger", self );
        node_fields_after_goal( _id_E0386CBFBCCBBC5B, _id_D25339A42DEEAC35 );
        node_fields_after_goal_and_wait( _id_E0386CBFBCCBBC5B, _id_5E38F20C9628AE25 );
    }
}

waittill_subgoal()
{
    self endon( "goal" );
    self waittill( "subgoal", index );
    return index;
}

get_path_array( node, startnode )
{
    array = [];
    count = 0;

    for (;;)
    {
        if ( scripts\engine\utility::is_equal( node.code_classname, "info_volume" ) )
            break;

        array[array.size] = node;
        count++;

        if ( count == 16 )
            break;

        if ( go_to_node_should_stop( node ) )
            break;

        if ( !isdefined( node.target ) )
            break;

        _id_6EC865F8E82F3AE6 = get_target_goals( node.target );

        if ( !_id_6EC865F8E82F3AE6.size )
            break;

        if ( isdefined( level._id_375B317CC772EF57 ) )
            node = [[ level._id_375B317CC772EF57 ]]( _id_6EC865F8E82F3AE6 );
        else
            node = get_least_used_from_array( _id_6EC865F8E82F3AE6 );

        if ( !istrue( node._id_97C8A15D77788E5A ) )
        {
            if ( isdefined( node.target ) )
                node._id_F8D4ED108521E632 = _func_5D6132045B29BAF5( node.target );

            node._id_97C8A15D77788E5A = 1;
        }

        if ( isdefined( node._id_F8D4ED108521E632 ) )
            break;

        if ( node == startnode )
            break;
    }

    return array;
}

node_fields_pre_goal( node )
{
    if ( isdefined( node.radius ) )
        self.goalradius = node.radius;

    if ( isdefined( node.height ) )
        self.goalheight = node.height;

    if ( isdefined( node.script_demeanor ) )
    {
        if ( node.script_demeanor == "cqb" )
            scripts\common\utility::enable_cqbwalk();
        else
            scripts\common\utility::demeanor_override( node.script_demeanor );
    }

    if ( isdefined( node.script_civilian_state ) )
        scripts\asm\asm_bb::bb_setcivilianstate( node.script_civilian_state );

    if ( isdefined( node.script_pacifist ) )
        self.pacifist = node.script_pacifist;

    if ( isdefined( node.script_ignoreall ) )
        self.ignoreall = node.script_ignoreall;

    if ( isdefined( node.script_ignoreme ) )
        self.ignoreme = node.script_ignoreme;

    if ( isdefined( node.script_moveplaybackrate ) )
        scripts\engine\sp\utility::set_moveplaybackrate( node.script_moveplaybackrate, 0.25 );

    if ( isdefined( node.script_speed ) )
        scripts\engine\utility::set_movement_speed( node.script_speed );

    if ( isdefined( node.script_gunpose ) )
        scripts\common\ai::set_gunpose( node.script_gunpose );

    if ( isdefined( node.script_disable_arrivals ) )
    {
        if ( node.script_disable_arrivals )
            scripts\common\ai::disable_arrivals();
        else
            self.disablearrivals = 0;
    }

    if ( isdefined( node.script_disable_exits ) )
    {
        if ( node.script_disable_exits )
            scripts\common\ai::disable_exits();
        else
            scripts\common\ai::enable_exits();
    }

    if ( isdefined( node.script_combatmode ) )
        self.combatmode = node.script_combatmode;

    if ( isdefined( node.script_forcegoal ) )
        self.target = node.targetname;

    if ( isdefined( self._id_8068D435ADA84157 ) )
        thread [[ self._id_8068D435ADA84157 ]]();
}

node_fields_after_goal( node, _id_D25339A42DEEAC35 )
{
    if ( isdefined( self.stealth ) )
        scripts\stealth\callbacks::stealth_call( "go_to_node_arrive", ::go_to_node_set_goal, node );

    if ( self.team == "neutral" )
        go_to_node_wait( ::go_to_node_set_goal, node );

    if ( isdefined( _id_D25339A42DEEAC35 ) )
        [[ _id_D25339A42DEEAC35 ]]( node );

    if ( isdefined( node.script_flag_set ) )
        scripts\engine\utility::flag_set( node.script_flag_set );

    if ( isdefined( node.script_ent_flag_set ) )
        scripts\engine\utility::ent_flag_set( node.script_ent_flag_set );

    if ( isdefined( node.script_ent_flag_clear ) )
        scripts\engine\utility::ent_flag_clear( node.script_ent_flag_clear );

    if ( isdefined( node.script_flag_clear ) )
        scripts\engine\utility::flag_clear( node.script_flag_clear );

    if ( targets_and_uses_turret( node ) )
        return 1;
}

node_fields_after_goal_and_wait( node, _id_5E38F20C9628AE25 )
{
    if ( isdefined( node.script_soundalias ) )
        self playsound( node.script_soundalias );

    if ( isdefined( node.script_gesture ) )
        thread scripts\engine\sp\utility::gesture_simple( node.script_gesture );

    if ( isdefined( self.stealth ) )
        scripts\stealth\callbacks::stealth_call( "go_to_node_post_wait", ::go_to_node_set_goal, node );

    if ( isdefined( self.post_wait_func ) )
        [[ self.post_wait_func ]]();

    if ( isdefined( node.script_delay_post ) )
        wait( node.script_delay_post );

    while ( isdefined( node.script_requires_player ) )
    {
        if ( go_to_node_wait_for_player( node, ::get_target_goals ) )
        {
            node notify( "script_requires_player" );
            break;
        }

        wait 0.1;
    }

    if ( isdefined( node.script_demeanor_post ) )
    {
        if ( node.script_demeanor_post == "cqb" )
            scripts\common\utility::enable_cqbwalk();
        else
            scripts\common\utility::demeanor_override( node.script_demeanor_post );
    }

    if ( isdefined( _id_5E38F20C9628AE25 ) )
        [[ _id_5E38F20C9628AE25 ]]( node );

    if ( istrue( node.script_death ) )
        scripts\engine\sp\utility::die();

    if ( istrue( node.script_delete ) )
    {
        if ( istrue( node.script_nosight ) )
            level thread scripts\engine\sp\utility::ai_delete_when_out_of_sight( [ self ], 350 );
        else
        {
            if ( isdefined( self.magic_bullet_shield ) )
                scripts\common\ai::stop_magic_bullet_shield();

            self delete();
        }
    }
}

go_to_node_end()
{
    self endon( "death" );
    waittillframeend;
    self.using_goto_node = 1;
    scripts\engine\utility::waittill_any( "reached_path_end", "stop_going_to_node" );
    self.currentnode = undefined;
    self.using_goto_node = undefined;
    self.patharray = undefined;
    self.patharrayindex = undefined;
}

go_to_node_wait_for_player( node, _id_98EA791865528A70 )
{
    if ( distancesquared( level.player.origin, node.origin ) < distancesquared( self.origin, node.origin ) )
        return 1;

    if ( !isdefined( node.script_dist_only ) )
    {
        _id_06A3A1033FFC2699 = anglestoforward( self.angles );

        if ( isdefined( node.target ) )
        {
            temp = [[ _id_98EA791865528A70 ]]( node.target );

            if ( temp.size == 1 )
                _id_06A3A1033FFC2699 = vectornormalize( temp[0].origin - node.origin );
            else if ( isdefined( node.angles ) )
                _id_06A3A1033FFC2699 = anglestoforward( node.angles );
        }
        else if ( isdefined( node.angles ) )
            _id_06A3A1033FFC2699 = anglestoforward( node.angles );

        _id_9601C525B7890A11 = [];
        _id_9601C525B7890A11[_id_9601C525B7890A11.size] = vectornormalize( level.player.origin - self.origin );

        foreach ( value in _id_9601C525B7890A11 )
        {
            if ( vectordot( _id_06A3A1033FFC2699, value ) > 0 )
                return 1;
        }
    }

    dist = 32;

    if ( node.script_requires_player > dist )
        dist = node.script_requires_player;

    if ( distancesquared( level.player.origin, self.origin ) < squared( dist ) )
        return 1;

    return 0;
}

go_to_node_should_stop( _id_9DA7DD4834E89D17 )
{
    if ( !isdefined( _id_9DA7DD4834E89D17 ) )
        return 1;

    if ( !isdefined( _id_9DA7DD4834E89D17.target ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_delay ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_delay_min ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_delay_max ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_wait ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_wait_add ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_wait_min ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_wait_max ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_flag_wait ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17._id_7FD486C78ED742F7 ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_ent_flag_wait ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_delay_post ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_requires_player ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_idle ) )
        return 1;

    if ( isdefined( _id_9DA7DD4834E89D17.script_stopnode ) )
        return 1;

    return 0;
}

go_to_node_set_goal( ent )
{
    if ( isnode( ent ) )
        go_to_node_set_goal_node( ent );
    else if ( isstruct( ent ) )
        go_to_node_set_goal_pos( ent );
    else if ( isent( ent ) )
        go_to_node_set_goal_ent( ent );

    if ( isstruct( ent ) || isnode( ent ) )
        ent.patrol_stop = go_to_node_should_stop( ent );
}

go_to_node_set_goal_ent( ent )
{
    if ( ent.code_classname == "info_volume" )
    {
        self setgoalvolumeauto( ent, ent scripts\engine\sp\utility::get_cover_volume_forward() );
        self notify( "go_to_node_new_goal" );
        return;
    }

    go_to_node_set_goal_pos( ent );
}

go_to_node_set_goal_pos( ent )
{
    scripts\engine\sp\utility::set_goal_ent( ent );
    self notify( "go_to_node_new_goal" );
}

go_to_node_set_goal_node( node )
{
    scripts\engine\sp\utility::set_goal_node( node );
    self notify( "go_to_node_new_goal" );
}

targets_and_uses_turret( node )
{
    if ( !isdefined( node.target ) )
        return 0;

    turrets = getentarray( node.target, "targetname" );

    if ( !turrets.size )
        return 0;

    turret = turrets[0];

    if ( !issubstr( turret.classname, "misc_turret" ) )
        return 0;

    thread use_a_turret( turret );
    return 1;
}

set_goal_height_from_settings()
{
    if ( isdefined( self.script_goalheight ) )
        self.goalheight = self.script_goalheight;
    else
        self.goalheight = level.default_goalheight;
}

set_goal_from_settings( node )
{
    if ( isdefined( self.script_radius ) )
    {
        self.goalradius = self.script_radius;
        return;
    }

    if ( isdefined( self.script_forcegoal ) )
    {
        if ( isdefined( node ) && isdefined( node.radius ) )
        {
            self.goalradius = node.radius;
            return;
        }
    }

    if ( !isdefined( self getgoalvolume() ) )
    {
        if ( self.unittype == "juggernaut" )
            return;

        if ( self.type == "civilian" )
            self.goalradius = 128;
        else
            self.goalradius = level.default_goalradius;
    }
}

autotarget( targets )
{
    for (;;)
    {
        _id_EEE718E33217DC9E = self getturretowner();

        if ( !isalive( _id_EEE718E33217DC9E ) )
        {
            wait 1.5;
            continue;
        }

        if ( !isdefined( _id_EEE718E33217DC9E.enemy ) )
        {
            self settargetentity( scripts\engine\utility::random( targets ) );
            self notify( "startfiring" );
            self startfiring();
        }

        wait( 2 + randomfloat( 1 ) );
    }
}

manualtarget( targets )
{
    for (;;)
    {
        self settargetentity( scripts\engine\utility::random( targets ) );
        self notify( "startfiring" );
        self startfiring();
        wait( 2 + randomfloat( 1 ) );
    }
}

use_a_turret( turret )
{
    self endon( "stop_using_turret" );
    self endon( "death" );

    if ( self isbadguy() && self.health == 150 )
    {
        self.health = 100;
        self._id_98ADD129A7ECB962 = 0;
    }

    scripts\asm\asm_bb::bb_requestturret( turret );

    while ( !isdefined( self getturret() ) || self getturret() != turret )
        wait 0.05;

    if ( isdefined( turret.target ) && turret.target != turret.targetname )
    {
        ents = getentarray( turret.target, "targetname" );
        targets = [];

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < ents.size; _id_AC0E594AC96AA3A8++ )
        {
            if ( ents[_id_AC0E594AC96AA3A8].classname == "script_origin" )
                targets[targets.size] = ents[_id_AC0E594AC96AA3A8];
        }

        if ( isdefined( turret.script_autotarget ) )
            turret thread autotarget( targets );
        else if ( isdefined( turret.script_manualtarget ) )
        {
            turret setmode( "manual_ai" );
            turret thread manualtarget( targets );
        }
        else if ( targets.size > 0 )
        {
            if ( targets.size == 1 )
            {
                turret.manual_target = targets[0];
                turret settargetentity( targets[0] );
                thread scripts\sp\mgturret::manual_think( turret );
            }
            else
                turret thread scripts\sp\mgturret::mg42_suppressionfire( targets );
        }
    }

    thread player_use_turret_watcher( turret );
    thread scripts\sp\mgturret::mg42_firing( turret );
    turret notify( "startfiring" );
}

player_use_turret_watcher( turret )
{
    self endon( "death" );

    if ( self.team != "allies" )
        return;

    trigger = spawn( "trigger_radius", turret.origin, 0, 56, 56 );
    thread scripts\engine\utility::delete_on_death( trigger );
    _id_9FA895F4959EFA2D = 0;

    while ( !_id_9FA895F4959EFA2D )
    {
        trigger waittill( "trigger" );

        while ( level.player istouching( trigger ) )
        {
            if ( level.player usebuttonpressed() )
            {
                _id_9FA895F4959EFA2D = 1;
                break;
            }

            wait 0.05;
        }
    }

    trigger delete();
    stop_using_turret();
}

stop_using_turret()
{
    self notify( "stop_using_turret" );
    self notify( "stop_using_built_in_burst_fire" );
    turret = self getturret();

    if ( !isdefined( turret ) )
        return;

    self stopuseturret();
    scripts\asm\asm_bb::bb_requestturret( undefined );
    self stopanimscripted();
    turret stopfiring();
}

friendly_mgturret( trigger )
{
    node = getnode( trigger.target, "targetname" );
    mg42 = getent( node.target, "targetname" );
    mg42 setmode( "auto_ai" );
    mg42 cleartargetentity();
    in_use = 0;

    for (;;)
    {
        trigger waittill( "trigger", other );

        if ( !isai( other ) )
            continue;

        if ( !isdefined( other.team ) )
            continue;

        if ( other.team != "allies" )
            continue;

        if ( isdefined( other.script_usemg42 ) && other.script_usemg42 == 0 )
            continue;

        if ( other thread friendly_mg42_useable( mg42, node ) )
        {
            other thread friendly_mg42_think( mg42, node );
            mg42 waittill( "friendly_finished_using_mg42" );

            if ( isalive( other ) )
                other.turret_use_time = gettime() + 10000;
        }

        wait 1;
    }
}

friendly_mg42_death_notify( guy, mg42 )
{
    mg42 endon( "friendly_finished_using_mg42" );
    guy waittill( "death" );
    mg42 notify( "friendly_finished_using_mg42" );
}

friendly_mg42_wait_for_use( mg42 )
{
    mg42 endon( "friendly_finished_using_mg42" );
    self.useable = 1;
    self setcursorhint( "HINT_NOICON" );
    self sethintstring( &"PLATFORM_USEAIONMG42" );
    self waittill( "trigger" );
    self.useable = 0;
    self sethintstring( "" );
    self stopuseturret();
    self notify( "stopped_use_turret" );
    mg42 notify( "friendly_finished_using_mg42" );
}

friendly_mg42_useable( mg42, node )
{
    if ( self.useable )
        return 0;

    if ( isdefined( self.turret_use_time ) && gettime() < self.turret_use_time )
        return 0;

    if ( distance( level.player.origin, node.origin ) < 100 )
        return 0;

    return 1;
}

friendly_mg42_endtrigger( mg42, guy )
{
    mg42 endon( "friendly_finished_using_mg42" );
    self waittill( "trigger" );
    mg42 notify( "friendly_finished_using_mg42" );
}

nofour()
{
    self endon( "death" );
    self waittill( "goal" );
    self.goalradius = self.oldradius;

    if ( self.goalradius < 32 )
        self.goalradius = 400;
}

friendly_mg42_think( mg42, node )
{
    self endon( "death" );
    mg42 endon( "friendly_finished_using_mg42" );
    level thread friendly_mg42_death_notify( self, mg42 );
    self.oldradius = self.goalradius;
    self.goalradius = 28;
    thread nofour();
    self setgoalnode( node );
    self.ignoresuppression = 1;
    self waittill( "goal" );
    self.goalradius = self.oldradius;

    if ( self.goalradius < 32 )
        self.goalradius = 400;

    self.ignoresuppression = 0;
    self.goalradius = self.oldradius;

    if ( distance( level.player.origin, node.origin ) < 32 )
    {
        mg42 notify( "friendly_finished_using_mg42" );
        return;
    }

    self.friendly_mg42 = mg42;
    thread friendly_mg42_wait_for_use( mg42 );
    thread friendly_mg42_cleanup( mg42 );
    self useturret( mg42 );

    if ( isdefined( mg42.target ) )
    {
        _id_058632C1CC65E0F7 = getent( mg42.target, "targetname" );

        if ( isdefined( _id_058632C1CC65E0F7 ) )
            _id_058632C1CC65E0F7 thread friendly_mg42_endtrigger( mg42, self );
    }

    for (;;)
    {
        if ( distance( self.origin, node.origin ) < 32 )
            self useturret( mg42 );
        else
            break;

        wait 1;
    }

    mg42 notify( "friendly_finished_using_mg42" );
}

friendly_mg42_cleanup( mg42 )
{
    self endon( "death" );
    mg42 waittill( "friendly_finished_using_mg42" );
    friendly_mg42_doneusingturret();
}

friendly_mg42_doneusingturret()
{
    self endon( "death" );
    turret = self.friendly_mg42;
    self.friendly_mg42 = undefined;
    self stopuseturret();
    self notify( "stopped_use_turret" );
    self.useable = 0;
    self.goalradius = self.oldradius;

    if ( !isdefined( turret ) )
        return;

    if ( !isdefined( turret.target ) )
        return;

    node = getnode( turret.target, "targetname" );
    oldradius = self.goalradius;
    self.goalradius = 8;
    self setgoalnode( node );
    wait 2;
    self.goalradius = 384;
    return;
    self waittill( "goal" );

    if ( isdefined( self.target ) )
    {
        node = getnode( self.target, "targetname" );

        if ( isdefined( node.target ) )
            node = getnode( node.target, "targetname" );

        if ( isdefined( node ) )
            self setgoalnode( node );
    }

    self.goalradius = oldradius;
}

tanksquish()
{
    if ( isdefined( level.notanksquish ) )
        return;

    if ( isdefined( level.vehicle.has_vehicles ) && !level.vehicle.has_vehicles )
        return;

    scripts\engine\sp\utility::add_damage_function( ::tanksquish_damage_check );
}

tanksquish_damage_check( _id_8BBC2903A2793B49, _id_FA8D840338038893, _id_F8048727716242B0, point, type, modelname, tagname, partname, idflags, weapon )
{
    if ( !isdefined( self ) )
        return;

    if ( isalive( self ) )
        return;

    if ( !isalive( _id_FA8D840338038893 ) )
        return;

    if ( !isdefined( _id_FA8D840338038893.vehicletype ) )
        return;

    if ( _id_FA8D840338038893 scripts\common\vehicle::ishelicopter() )
        return;

    if ( !isdefined( self.noragdoll ) )
    {
        if ( isdefined( self.fnpreragdoll ) )
            self [[ self.fnpreragdoll ]]();

        self startragdoll();
    }

    if ( !isdefined( self ) )
        return;

    scripts\engine\sp\utility::remove_damage_function( ::tanksquish_damage_check );
}

flood_and_secure( _id_5596C947F769FFEE )
{
    if ( !isdefined( _id_5596C947F769FFEE ) )
        _id_5596C947F769FFEE = 0;

    if ( isdefined( self.script_noteworthy ) && self.script_noteworthy == "instant_respawn" )
        _id_5596C947F769FFEE = 1;

    level.spawnerwave = [];
    spawners = _func_91E8F01DD90DE05A( self.target );
    scripts\engine\utility::array_thread( spawners, ::flood_and_secure_spawner, _id_5596C947F769FFEE );
    playertriggered = 0;
    _id_D9927AEC9E57D515 = 0;

    for (;;)
    {
        self waittill( "trigger", other );

        if ( !_id_D9927AEC9E57D515 )
        {
            _id_D9927AEC9E57D515 = 1;
            scripts\engine\utility::script_delay();
        }

        if ( self istouching( level.player ) )
            playertriggered = 1;
        else
        {
            if ( !isalive( other ) )
                continue;

            if ( isplayer( other ) )
                playertriggered = 1;
            else if ( !isdefined( other.issquad ) || !other.issquad )
                continue;
        }

        spawners = _func_91E8F01DD90DE05A( self.target );

        if ( isdefined( spawners[0] ) )
        {
            if ( isdefined( spawners[0].script_randomspawn ) )
                cull_spawners_from_killspawner( spawners[0].script_randomspawn );
        }

        spawners = _func_91E8F01DD90DE05A( self.target );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < spawners.size; _id_AC0E594AC96AA3A8++ )
        {
            spawners[_id_AC0E594AC96AA3A8].playertriggered = playertriggered;
            spawners[_id_AC0E594AC96AA3A8] notify( "flood_begin" );
        }

        if ( playertriggered )
        {
            wait 5;
            continue;
        }

        wait 0.1;
    }
}

flood_and_secure_spawner( _id_5596C947F769FFEE )
{
    if ( isdefined( self.securestarted ) )
        return;

    self.securestarted = 1;
    self.triggerunlocked = 1;
    target = self.target;
    targetname = self.targetname;

    if ( !isdefined( target ) && !isdefined( self.script_moveoverride ) )
        waittillframeend;

    spawners = [];

    if ( isdefined( target ) )
    {
        _id_2A741591B19F50D7 = _func_91E8F01DD90DE05A( target );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_2A741591B19F50D7.size; _id_AC0E594AC96AA3A8++ )
        {
            if ( !issubstr( _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8].classname, "actor" ) )
                continue;

            spawners[spawners.size] = _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8];
        }
    }

    ent = spawnstruct();
    org = self.origin;
    flood_and_secure_spawner_think( ent, spawners.size > 0, _id_5596C947F769FFEE );

    if ( isalive( ent.ai ) )
        ent.ai waittill( "death" );

    if ( !isdefined( target ) )
        return;

    _id_2A741591B19F50D7 = _func_91E8F01DD90DE05A( target );

    if ( !_id_2A741591B19F50D7.size )
        return;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_2A741591B19F50D7.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !issubstr( _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8].classname, "actor" ) )
            continue;

        _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8].targetname = targetname;
        newtarget = target;

        if ( isdefined( _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8].target ) )
        {
            targetent = _func_2387688936D207B1( _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8].target, "targetname" );

            if ( !isdefined( targetent ) || !issubstr( targetent.classname, "actor" ) )
                newtarget = _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8].target;
        }

        _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8].target = newtarget;
        _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8] thread flood_and_secure_spawner( _id_5596C947F769FFEE );
        _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8].playertriggered = 1;
        _id_2A741591B19F50D7[_id_AC0E594AC96AA3A8] notify( "flood_begin" );
    }
}

flood_and_secure_spawner_think( ent, _id_226C3BA8B109BD7B, _id_5596C947F769FFEE )
{
    self endon( "death" );
    count = self.count;

    if ( !_id_226C3BA8B109BD7B )
        _id_226C3BA8B109BD7B = isdefined( self.script_noteworthy ) && self.script_noteworthy == "delete";

    scripts\engine\sp\utility::set_count( 2 );

    if ( isdefined( self.script_delay ) )
        delay = self.script_delay;
    else
        delay = 0;

    for (;;)
    {
        self waittill( "flood_begin" );

        if ( self.playertriggered )
            break;

        if ( delay )
            continue;

        break;
    }

    dist = distance( level.player.origin, self.origin );

    while ( count )
    {
        self.truecount = count;
        scripts\engine\sp\utility::set_count( 2 );
        wait( delay );
        spawn = scripts\engine\sp\utility::spawn_ai();

        if ( scripts\common\ai::spawn_failed( spawn ) )
        {
            _id_946D786D9A1DFA2C = 0;

            if ( delay < 2 )
                wait 2;

            continue;
        }
        else
        {
            thread addtowavespawner( spawn );
            spawn thread flood_and_secure_spawn( self );

            if ( isdefined( self.script_accuracy ) )
                spawn.baseaccuracy = self.script_accuracy;

            ent.ai = spawn;
            ent notify( "got_ai" );
            self waittill( "spawn_died", _id_8328C84B012DE0E6, _id_946D786D9A1DFA2C );

            if ( delay > 2 )
                delay = randomint( 4 ) + 2;
            else
                delay = 0.5 + randomfloat( 0.5 );
        }

        if ( _id_8328C84B012DE0E6 )
        {
            waittillrestartordistance( dist );
            continue;
        }

        if ( playerwasnearby( _id_946D786D9A1DFA2C || _id_226C3BA8B109BD7B, ent.ai ) )
            count--;

        if ( !_id_5596C947F769FFEE )
            waituntilwaverelease();
    }

    self delete();
}

waittilldeletedordeath( spawn )
{
    self endon( "death" );
    spawn waittill( "death" );
}

addtowavespawner( spawn )
{
    name = self.targetname;

    if ( !isdefined( level.spawnerwave[name] ) )
    {
        level.spawnerwave[name] = spawnstruct();
        level.spawnerwave[name] scripts\engine\sp\utility::set_count( 0 );
        level.spawnerwave[name].total = 0;
    }

    if ( !isdefined( self.addedtowave ) )
    {
        self.addedtowave = 1;
        level.spawnerwave[name].total++;
    }

    level.spawnerwave[name].count++;
    waittilldeletedordeath( spawn );
    level.spawnerwave[name].count--;

    if ( !isdefined( self ) )
        level.spawnerwave[name].total--;

    if ( level.spawnerwave[name].total )
    {
        if ( level.spawnerwave[name].count / level.spawnerwave[name].total < 0.32 )
            level.spawnerwave[name] notify( "waveReady" );
    }
}

waituntilwaverelease()
{
    name = self.targetname;

    if ( level.spawnerwave[name].count )
        level.spawnerwave[name] waittill( "waveReady" );
}

playerwasnearby( _id_946D786D9A1DFA2C, ai )
{
    if ( _id_946D786D9A1DFA2C )
        return 1;

    if ( isdefined( ai ) && isdefined( ai.origin ) )
        org = ai.origin;
    else
        org = self.origin;

    if ( distance( level.player.origin, org ) < 700 )
        return 1;

    return scripts\engine\trace::_bullet_trace_passed( level.player geteye(), ai geteye(), 0, undefined );
}

waittillrestartordistance( dist )
{
    self endon( "flood_begin" );
    dist = dist * 0.75;

    while ( distance( level.player.origin, self.origin ) > dist )
        wait 1;
}

flood_and_secure_spawn( spawner )
{
    thread flood_and_secure_spawn_goal();
    self waittill( "death", other );
    _id_946D786D9A1DFA2C = isalive( other ) && isplayer( other );

    if ( !_id_946D786D9A1DFA2C && isdefined( other ) && other.classname == "worldspawn" )
        _id_946D786D9A1DFA2C = 1;

    _id_8328C84B012DE0E6 = !isdefined( self );
    spawner notify( "spawn_died", _id_8328C84B012DE0E6, _id_946D786D9A1DFA2C );
}

flood_and_secure_spawn_goal()
{
    if ( isdefined( self.script_moveoverride ) )
        return;

    self endon( "death" );
    node = getnode( self.target, "targetname" );

    if ( isdefined( node ) )
        self setgoalnode( node );
    else
    {
        node = getent( self.target, "targetname" );

        if ( isdefined( node ) )
            self setgoalpos( node.origin );
    }

    if ( isdefined( level.fightdist ) )
    {
        self.pathenemyfightdist = level.fightdist;
        self.pathenemylookahead = level.maxdist;
    }

    if ( isdefined( node.radius ) && node.radius >= 0 )
        self.goalradius = node.radius;
    else
        self.goalradius = 256;

    self waittill( "goal" );

    while ( isdefined( node.target ) )
    {
        _id_0C84F6220E6636C5 = getnode( node.target, "targetname" );

        if ( isdefined( _id_0C84F6220E6636C5 ) )
            node = _id_0C84F6220E6636C5;
        else
            break;

        self setgoalnode( node );

        if ( node_has_radius( node ) )
            self.goalradius = node.radius;
        else
            self.goalradius = 256;

        self waittill( "goal" );
    }

    if ( isdefined( self.script_noteworthy ) )
    {
        if ( self.script_noteworthy == "delete" )
        {
            self kill();
            return;
        }
    }

    if ( isdefined( node.target ) )
    {
        turret = getent( node.target, "targetname" );

        if ( isdefined( turret ) && turret.code_classname == "misc_turret" )
        {
            self setgoalnode( node );
            self.goalradius = 4;
            self waittill( "goal" );

            if ( !isdefined( self.script_forcegoal ) )
                self.goalradius = level.default_goalradius;

            use_a_turret( turret );
        }
    }

    if ( isdefined( self.script_noteworthy ) )
    {
        if ( self.script_noteworthy == "hide" )
        {
            thread scripts\engine\sp\utility::set_battlechatter( 0 );
            return;
        }
    }

    if ( !isdefined( self.script_forcegoal ) && !isdefined( self getgoalvolume() ) )
        self.goalradius = level.default_goalradius;
}

goalvolumes()
{
    volumes = getentarray( "info_volume", "classname" );
    volumes = scripts\engine\utility::array_combine( volumes, getentarray( "info_volume_color", "classname" ) );
    level.deathchain_goalvolume = [];
    level.goalvolumes = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < volumes.size; _id_AC0E594AC96AA3A8++ )
    {
        volume = volumes[_id_AC0E594AC96AA3A8];

        if ( isdefined( volume.script_deathchain ) )
            level.deathchain_goalvolume[volume.script_deathchain] = volume;

        if ( isdefined( volume.script_goalvolume ) )
            level.goalvolumes[volume.script_goalvolume] = volume;
    }
}

aigroup_create( _id_57F8B4C321038A32 )
{
    level._ai_group[_id_57F8B4C321038A32] = spawnstruct();
    level._ai_group[_id_57F8B4C321038A32].aicount = 0;
    level._ai_group[_id_57F8B4C321038A32].aideaths = 0;
    level._ai_group[_id_57F8B4C321038A32].spawnercount = 0;
    level._ai_group[_id_57F8B4C321038A32].ai = [];
    level._ai_group[_id_57F8B4C321038A32].spawners = [];
}

aigroup_spawnerthink( _id_8912763E32CFB6BF )
{
    self endon( "death" );
    self endon( "stop_aigroup_spawnerthink" );
    self.decremented = 0;
    _id_8912763E32CFB6BF.spawnercount++;
    _id_8912763E32CFB6BF.spawners = scripts\engine\utility::array_add( _id_8912763E32CFB6BF.spawners, self );
    thread aigroup_spawnerdeath( _id_8912763E32CFB6BF );
    thread aigroup_spawnerempty( _id_8912763E32CFB6BF );
    self waittill( "spawned", soldier );

    if ( !scripts\common\ai::spawn_failed( soldier ) )
        soldier thread aigroup_soldierthink( _id_8912763E32CFB6BF );

    aigroup_decrement( _id_8912763E32CFB6BF );
}

aigroup_decrement( _id_8912763E32CFB6BF )
{
    if ( self.decremented )
        return;

    self.decremented = 1;
    _id_8912763E32CFB6BF.spawnercount--;
    self notify( "stop_aigroup_spawnerthink" );
}

aigroup_spawnerdeath( _id_8912763E32CFB6BF )
{
    self waittill( "death" );

    if ( isdefined( self ) )
        aigroup_decrement( _id_8912763E32CFB6BF );
}

aigroup_spawnerempty( _id_8912763E32CFB6BF )
{
    self endon( "death" );
    self waittill( "emptied spawner" );
    aigroup_decrement( _id_8912763E32CFB6BF );
}

aigroup_soldierthink( _id_8912763E32CFB6BF )
{
    _id_8912763E32CFB6BF.aicount++;
    _id_8912763E32CFB6BF.ai[_id_8912763E32CFB6BF.ai.size] = self;

    if ( isdefined( self.script_deathflag_longdeath ) )
        waittilldeathorpaindeath();
    else
        self waittill( "death" );

    _id_8912763E32CFB6BF.aicount--;
    _id_8912763E32CFB6BF.aideaths++;
}

camper_trigger_think( trigger )
{
    _id_67F14F8315CB0F2F = strtok( trigger.script_linkto, " " );
    spawners = [];
    nodes = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_67F14F8315CB0F2F.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_E921CD2D3FB29B66 = _id_67F14F8315CB0F2F[_id_AC0E594AC96AA3A8];
        ai = _func_2387688936D207B1( _id_E921CD2D3FB29B66, "script_linkname" );

        if ( isdefined( ai ) )
        {
            spawners = scripts\engine\utility::array_add_safe( spawners, ai );
            continue;
        }

        node = getnode( _id_E921CD2D3FB29B66, "script_linkname" );

        if ( !isdefined( node ) )
            continue;

        nodes = scripts\engine\utility::array_add_safe( nodes, node );
    }

    trigger waittill( "trigger" );
    nodes = scripts\engine\utility::array_randomize( nodes );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < nodes.size; _id_AC0E594AC96AA3A8++ )
        nodes[_id_AC0E594AC96AA3A8].claimed = 0;

    _id_AC0E5C4AC96AAA41 = 0;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < spawners.size; _id_AC0E594AC96AA3A8++ )
    {
        spawner = spawners[_id_AC0E594AC96AA3A8];

        if ( !isdefined( spawner ) )
            continue;

        if ( isdefined( spawner.script_spawn_here ) )
            continue;

        while ( isdefined( nodes[_id_AC0E5C4AC96AAA41].script_noteworthy ) && nodes[_id_AC0E5C4AC96AAA41].script_noteworthy == "dont_spawn" )
            _id_AC0E5C4AC96AAA41++;

        spawner.origin = nodes[_id_AC0E5C4AC96AAA41].origin;
        spawner.angles = nodes[_id_AC0E5C4AC96AAA41].angles;
        spawner scripts\engine\sp\utility::add_spawn_function( ::claim_a_node, nodes[_id_AC0E5C4AC96AAA41] );
        _id_AC0E5C4AC96AAA41++;
    }

    scripts\engine\utility::array_thread( spawners, scripts\engine\sp\utility::add_spawn_function, ::camper_guy );
    scripts\engine\utility::array_thread( spawners, scripts\engine\sp\utility::add_spawn_function, ::move_when_enemy_hides, nodes );
    scripts\engine\utility::array_thread( spawners, scripts\engine\sp\utility::spawn_ai );
}

camper_guy()
{
    self.goalradius = 8;
    self.fixednode = 1;
}

move_when_enemy_hides( nodes )
{
    self endon( "death" );
    _id_8FEB02C67161A30D = 0;

    for (;;)
    {
        if ( !isalive( self.enemy ) )
        {
            self waittill( "enemy" );
            _id_8FEB02C67161A30D = 0;
            continue;
        }

        if ( isplayer( self.enemy ) )
        {
            if ( self.enemy scripts\sp\player::belowcriticalhealththreshold() || self.enemy scripts\engine\utility::isflashed() )
            {
                self.fixednode = 0;

                for (;;)
                {
                    self.goalradius = 180;
                    self setgoalpos( level.player.origin );
                    wait 1;
                }

                return;
            }
        }

        if ( _id_8FEB02C67161A30D )
        {
            if ( self cansee( self.enemy ) )
            {
                wait 0.05;
                continue;
            }

            _id_8FEB02C67161A30D = 0;
        }
        else
        {
            if ( self cansee( self.enemy ) )
                _id_8FEB02C67161A30D = 1;

            wait 0.05;
            continue;
        }

        if ( randomint( 3 ) > 0 )
        {
            node = find_unclaimed_node( nodes );

            if ( isdefined( node ) )
            {
                claim_a_node( node, self.claimed_node );
                self waittill( "goal" );
            }
        }
    }
}

claim_a_node( claimed_node, _id_5398A02809086D75 )
{
    self setgoalnode( claimed_node );
    self.claimed_node = claimed_node;
    claimed_node.claimed = 1;

    if ( isdefined( _id_5398A02809086D75 ) )
        _id_5398A02809086D75.claimed = 0;
}

find_unclaimed_node( nodes )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < nodes.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( nodes[_id_AC0E594AC96AA3A8].claimed )
            continue;
        else
            return nodes[_id_AC0E594AC96AA3A8];
    }

    return undefined;
}

flood_trigger_think( trigger )
{
    _id_947494E6971F2162 = _func_91E8F01DD90DE05A( trigger.target );
    scripts\engine\utility::array_thread( _id_947494E6971F2162, ::flood_spawner_init );
    trigger waittill( "trigger" );
    _id_947494E6971F2162 = _func_91E8F01DD90DE05A( trigger.target );
    scripts\engine\utility::array_thread( _id_947494E6971F2162, ::flood_spawner_think, trigger );
}

flood_spawner_init()
{

}

trigger_requires_player( trigger )
{
    if ( !isdefined( trigger ) )
        return 0;

    return isdefined( trigger.script_requires_player );
}

flood_spawner_think( trigger )
{
    if ( isspawner( self ) )
        self endon( "death" );

    self notify( "stop current floodspawner" );
    self endon( "stop current floodspawner" );

    if ( is_pyramid_spawner() )
    {
        pyramid_spawn( trigger );
        return;
    }

    _id_1603E1240684A0BB = trigger_requires_player( trigger );
    scripts\engine\utility::script_delay();

    while ( self.count > 0 )
    {
        while ( _id_1603E1240684A0BB && !level.player istouching( trigger ) )
            wait 0.5;

        soldier = scripts\engine\sp\utility::spawn_ai();

        if ( scripts\common\ai::spawn_failed( soldier ) )
        {
            wait 2;
            continue;
        }

        soldier thread reincrement_count_if_deleted( self );
        soldier waittill( "death", attacker );

        if ( !player_saw_kill( soldier, attacker ) )
            self.count++;

        if ( !isdefined( soldier ) )
            continue;

        if ( !scripts\engine\utility::script_wait() )
            wait( randomfloatrange( 5, 9 ) );
    }
}

player_saw_kill( guy, attacker )
{
    if ( isdefined( self.script_force_count ) )
    {
        if ( self.script_force_count )
            return 1;
    }

    if ( !isdefined( guy ) )
        return 0;

    if ( isalive( attacker ) )
    {
        if ( isplayer( attacker ) )
            return 1;

        if ( distance( attacker.origin, level.player.origin ) < 200 )
            return 1;
    }
    else if ( isdefined( attacker ) )
    {
        if ( attacker.classname == "worldspawn" )
            return 0;

        if ( distance( attacker.origin, level.player.origin ) < 200 )
            return 1;
    }

    if ( distance( guy.origin, level.player.origin ) < 200 )
        return 1;

    return scripts\engine\trace::_bullet_trace_passed( level.player geteye(), guy geteye(), 0, undefined );
}

is_pyramid_spawner()
{
    if ( !isdefined( self.target ) )
        return 0;

    ent = _func_91E8F01DD90DE05A( self.target );

    if ( !ent.size )
        return 0;

    return issubstr( ent[0].classname, "actor" );
}

pyramid_death_report( spawner )
{
    spawner.spawn waittill( "death" );
    self notify( "death_report" );
}

pyramid_spawn( trigger )
{
    self endon( "death" );
    _id_1603E1240684A0BB = trigger_requires_player( trigger );
    scripts\engine\utility::script_delay();

    if ( _id_1603E1240684A0BB )
    {
        while ( !level.player istouching( trigger ) )
            wait 0.5;
    }

    spawners = _func_91E8F01DD90DE05A( self.target );
    self.spawners = 0;
    scripts\engine\utility::array_thread( spawners, ::pyramid_spawner_reports_death, self );
    offset = randomint( spawners.size );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < spawners.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( self.count <= 0 )
            return;

        offset++;

        if ( offset >= spawners.size )
            offset = 0;

        spawner = spawners[offset];
        spawner scripts\engine\sp\utility::set_count( 1 );
        soldier = spawner scripts\engine\sp\utility::spawn_ai();

        if ( scripts\common\ai::spawn_failed( soldier ) )
        {
            wait 2;
            continue;
        }

        self.count--;
        spawner.spawn = soldier;
        soldier thread reincrement_count_if_deleted( self );
        soldier thread expand_goalradius( trigger );
        thread pyramid_death_report( spawner );
    }

    _id_AAF538144199DA10 = 0.01;

    while ( self.count > 0 )
    {
        self waittill( "death_report" );
        issuspended = 0;

        foreach ( spawner in spawners )
        {
            spawner.postspawnresetorigin = 1;

            if ( isdefined( spawner.suspended_ai ) )
                issuspended = 1;
        }

        if ( issuspended )
            trigger waittill( "trigger" );

        scripts\engine\utility::script_wait();
        offset = randomint( spawners.size );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < spawners.size; _id_AC0E594AC96AA3A8++ )
        {
            spawners = scripts\engine\utility::array_removeundefined( spawners );

            if ( !spawners.size )
            {
                if ( isdefined( self ) )
                    self delete();

                return;
            }

            offset++;

            if ( offset >= spawners.size )
                offset = 0;

            spawner = spawners[offset];

            if ( isalive( spawner.spawn ) )
                continue;

            if ( isdefined( spawner.target ) )
                self.target = spawner.target;
            else
                self.target = undefined;

            soldier = scripts\engine\sp\utility::spawn_ai();

            if ( scripts\common\ai::spawn_failed( soldier ) )
            {
                wait 2;
                continue;
            }

            soldier thread reincrement_count_if_deleted( self );
            soldier thread expand_goalradius( trigger );
            spawner.spawn = soldier;
            thread pyramid_death_report( spawner );

            if ( self.count <= 0 )
                return;
        }
    }
}

pyramid_spawner_reports_death( parent )
{
    parent endon( "death" );
    parent.spawners++;
    self waittill( "death" );
    parent.spawners--;

    if ( !parent.spawners )
        parent delete();
}

expand_goalradius( trigger )
{
    if ( isdefined( self.script_forcegoal ) )
        return;

    radius = level.default_goalradius;

    if ( isdefined( trigger ) )
    {
        if ( isdefined( trigger.script_radius ) )
        {
            if ( trigger.script_radius == -1 )
                return;

            radius = trigger.script_radius;
        }
    }

    if ( isdefined( self.script_forcegoal ) )
        return;

    self endon( "death" );
    self waittill( "goal" );
    self.goalradius = radius;
}

show_bad_path()
{

}

random_spawn( trigger )
{
    trigger waittill( "trigger" );
    spawners = _func_91E8F01DD90DE05A( trigger.target );

    if ( !spawners.size )
        return;

    spawner = scripts\engine\utility::random( spawners );
    spawners = [];
    spawners[spawners.size] = spawner;

    if ( isdefined( spawner.script_linkto ) )
    {
        _id_B69AA7B59AA1F9E2 = strtok( spawner.script_linkto, " " );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_B69AA7B59AA1F9E2.size; _id_AC0E594AC96AA3A8++ )
            spawners[spawners.size] = _func_2387688936D207B1( _id_B69AA7B59AA1F9E2[_id_AC0E594AC96AA3A8], "script_linkname" );
    }

    waittillframeend;
    scripts\engine\utility::array_thread( spawners, scripts\engine\sp\utility::add_spawn_function, ::blowout_goalradius_on_pathend );
    scripts\engine\utility::array_thread( spawners, scripts\engine\sp\utility::spawn_ai );
}

blowout_goalradius_on_pathend()
{
    if ( isdefined( self.script_forcegoal ) )
        return;

    self endon( "death" );
    self waittill( "reached_path_end" );

    if ( !isdefined( self getgoalvolume() ) )
        self.goalradius = level.default_goalradius;
}

_id_7A2464DFDA234E36()
{
    drone = self;

    if ( !isundefinedweapon( drone.weapon ) )
    {
        defaults = scripts\sp\utility::getweapondefaults( drone.weapon.basename );
        _id_840A19C4093B71AD = 0;

        if ( defaults.size == 0 )
        {
            _id_B8F5AC23CE0DFDE3 = getweaponmodel( drone.weapon );

            if ( _func_FED3925EB5331836( _id_B8F5AC23CE0DFDE3, "tag_flash" ) )
            {
                drone attach( _id_B8F5AC23CE0DFDE3, "tag_weapon_right" );
                _id_95C88D03E8DDCA77 = _func_9E337D91B4634016( drone.weapon );

                for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_95C88D03E8DDCA77.size; _id_AC0E594AC96AA3A8++ )
                {
                    tag = _id_95C88D03E8DDCA77[_id_AC0E594AC96AA3A8];

                    if ( scripts\engine\utility::hastag( _id_B8F5AC23CE0DFDE3, tag ) )
                        drone hidepart( tag, _id_B8F5AC23CE0DFDE3 );
                }

                _id_840A19C4093B71AD = 1;
            }
        }

        if ( !_id_840A19C4093B71AD )
        {
            if ( !istrue( drone.usescriptedweapon ) )
            {
                _id_A131CF18850EAEE0 = scripts\sp\utility::removeconflictingattachments( drone.weapon.attachments, defaults );
                drone.weapon = drone.weapon _meth_69F3ABFE2626532B();
                drone.weapon = drone.weapon _meth_ 1BD5B3BEF3D9A61( scripts\engine\utility::array_combine( _id_A131CF18850EAEE0, drone.weapon.attachments ) );
            }

            drone scripts\common\ai::gun_create_fake( getweaponattachmentworldmodels( drone.weapon ) );

            if ( !istrue( self.nodrop ) )
                drone.weapon_object = drone.weapon;

            drone.weapon = nullweapon();
        }
    }

    drone scripts\sp\utility::enable_procedural_bones();
}

spawner_dronespawn( spawner )
{
    drone = spawner _meth_6730504C445AC916();
    drone _id_7A2464DFDA234E36();
    drone.spawner = spawner;
    drone.drone_delete_on_unload = isdefined( spawner.script_noteworthy ) && spawner.script_noteworthy == "drone_delete_on_unload";
    drone.finished_spawning = 1;
    drone notify( "finished spawning" );
    spawner notify( "drone_spawned", drone );
    return drone;
}

spawner_makerealai( drone, _id_79372F4FE4115EF1 )
{
    if ( !isdefined( drone.spawner ) )
    {

    }

    orgorg = drone.spawner.origin;
    _id_9BB10CECB2B35F3B = drone.spawner.angles;
    _id_CD86F8BCCDAE9C69 = drone.spawner.target;
    drone.spawner.origin = drone.origin;
    drone.spawner.angles = drone.angles;

    if ( isdefined( _id_79372F4FE4115EF1 ) )
        drone.spawner.target = _id_79372F4FE4115EF1;

    drone.spawner.count = drone.spawner.count + 1;
    guy = drone.spawner _meth_514FCB5326AE8D5F();
    failed = scripts\common\ai::spawn_failed( guy );

    if ( failed )
    {

    }

    guy.vehicle_idling = drone.vehicle_idling;
    guy.vehicle_position = drone.vehicle_position;
    guy.standing = drone.standing;
    guy.forcecolor = drone.forcecolor;
    drone.spawner.origin = orgorg;
    drone.spawner.angles = _id_9BB10CECB2B35F3B;
    drone.spawner.target = _id_CD86F8BCCDAE9C69;
    drone delete();
    return guy;
}

spawner_makefakeactor( ai, _id_79372F4FE4115EF1 )
{
    if ( !isdefined( ai.spawner ) )
    {

    }

    orgorg = ai.spawner.origin;
    _id_9BB10CECB2B35F3B = ai.spawner.angles;
    _id_CD86F8BCCDAE9C69 = ai.spawner.target;
    ai.spawner.origin = ai.origin;
    ai.spawner.angles = ai.angles;

    if ( isdefined( _id_79372F4FE4115EF1 ) )
        ai.spawner.target = _id_79372F4FE4115EF1;

    ai.spawner.count = ai.spawner.count + 1;
    guy = scripts\engine\sp\utility::fakeactorspawn( ai.spawner );
    failed = scripts\common\ai::spawn_failed( guy );

    if ( failed )
    {

    }

    guy.vehicle_idling = ai.vehicle_idling;
    guy.vehicle_position = ai.vehicle_position;
    guy.standing = ai.standing;
    guy.forcecolor = ai.forcecolor;
    ai.spawner.origin = orgorg;
    ai.spawner.angles = _id_9BB10CECB2B35F3B;
    ai.spawner.target = _id_CD86F8BCCDAE9C69;
    ai delete();
    return guy;
}

add_random_killspawner_to_spawngroup()
{
    spawngroup = self.script_random_killspawner;
    _id_A361F927714F14A8 = self.script_randomspawn;

    if ( !isdefined( level.killspawn_groups ) )
        level.killspawn_groups = [];

    if ( !isdefined( level.killspawn_groups[spawngroup] ) )
        level.killspawn_groups[spawngroup] = [];

    if ( !isdefined( level.killspawn_groups[spawngroup][_id_A361F927714F14A8] ) )
        level.killspawn_groups[spawngroup][_id_A361F927714F14A8] = [];

    level.killspawn_groups[spawngroup][_id_A361F927714F14A8][self.export] = self;
}

add_to_spawngroup()
{
    spawngroup = self.script_spawngroup;
    _id_A361F927714F14A8 = self.script_spawnsubgroup;

    if ( !isdefined( level.spawn_groups[spawngroup] ) )
        level.spawn_groups[spawngroup] = [];

    if ( !isdefined( level.spawn_groups[spawngroup][_id_A361F927714F14A8] ) )
        level.spawn_groups[spawngroup][_id_A361F927714F14A8] = [];

    level.spawn_groups[spawngroup][_id_A361F927714F14A8][self.export] = self;
}

start_off_running()
{
    self endon( "death" );
    self.disableexits = 1;
    wait 3;
    self.disableexits = 0;
}

deathtime()
{
    self endon( "death" );
    wait( self.script_deathtime );
    wait( randomfloat( 10 ) );
    self kill();
}

tracker_bullet_hit( point )
{
    self notify( "tracker_bullet_hit" );
    self endon( "tracker_bullet_hit" );

    if ( self.team != "axis" )
        return;

    if ( !isalive( self ) )
        return;

    scripts\engine\sp\utility::hudoutline_enable_new( "outlinefill_nodepth_red", "tracker" );
    scripts\engine\utility::waittill_notify_or_timeout( "death", 5.0 );
    scripts\engine\sp\utility::hudoutline_disable( "tracker" );

    if ( isalive( self ) )
    {
        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 3; _id_AC0E594AC96AA3A8++ )
        {
            wait 0.2;
            scripts\engine\sp\utility::hudoutline_enable_new( "outlinefill_nodepth_red", "tracker" );
            wait 0.15;
            scripts\engine\sp\utility::hudoutline_disable( "tracker" );
        }
    }
}

prespawn_suspended_ai()
{
    if ( !isdefined( self.script_suspend ) )
        return undefined;

    if ( !isdefined( self.suspended_ai ) )
        return 0;

    self.count++;

    if ( !isdefined( self.og_spawner_origin ) )
        self.og_spawner_origin = self.origin;

    if ( !isdefined( self.og_spawner_angles ) )
        self.og_spawner_angles = self.angles;

    if ( isdefined( self.try_og_origin ) )
    {
        self.origin = self.og_spawner_origin;
        self.angles = self.og_spawner_angles;
    }
    else
    {
        self.origin = self.suspended_ai.origin;
        self.angles = self.suspended_ai.angles;
    }

    if ( isdefined( self.suspended_ai.suspendvars ) )
        self.suspendvars = self.suspended_ai.suspendvars;

    return 1;
}

postspawn_suspended_ai()
{
    _id_75CD41B6FD79C2A6 = self.spawner.suspended_ai;

    if ( isdefined( self.spawner.postspawnresetorigin ) )
    {
        self.spawner.origin = self.og_spawner_origin;
        self.spawner.angles = self.og_spawner_angles;
    }

    thread postspawn_suspend_ai_framedelay( _id_75CD41B6FD79C2A6 );

    if ( !isdefined( _id_75CD41B6FD79C2A6.suspendvars ) )
        return;

    self.suspendvars = _id_75CD41B6FD79C2A6.suspendvars;
    self.spawner.suspended_ai = undefined;
}

postspawn_suspend_ai_framedelay( _id_75CD41B6FD79C2A6 )
{
    waittillframeend;
    waittillframeend;

    if ( !isdefined( self ) )
        return;

    if ( isdefined( _id_75CD41B6FD79C2A6.stealth ) )
    {
        bsmstate = _id_75CD41B6FD79C2A6._id_101AA746178235CB;

        if ( bsmstate > 1 )
        {
            bsmstate = _id_75CD41B6FD79C2A6._id_101AA746178235CB - int( ( gettime() - _id_75CD41B6FD79C2A6.suspendtime ) / 10000 );
            bsmstate = int( max( 2, bsmstate ) );
        }
        else if ( bsmstate > 0 )
        {
            bsmstate = _id_75CD41B6FD79C2A6._id_101AA746178235CB - int( ( gettime() - _id_75CD41B6FD79C2A6.suspendtime ) / 5000 );
            bsmstate = int( max( 0, bsmstate ) );
        }

        state = int_to_stealth_state( bsmstate );
        scripts\stealth\enemy::bt_set_stealth_state( state, _id_75CD41B6FD79C2A6.stealth.investigateevent );
    }
}

int_to_stealth_state( num )
{
    switch ( num )
    {
        case 0:
            return "idle";
        case 1:
            return "investigate";
        case 2:
            return "hunt";
        case 3:
            return "combat";
    }
}

trigger_zone_spawn( trigger )
{
    trigger endon( "death" );
    script_suspend = undefined;

    if ( isdefined( trigger.script_suspend ) )
        script_suspend = trigger.script_suspend;

    script_suspend_group = undefined;

    if ( isdefined( trigger.script_suspend_group ) )
        script_suspend_group = trigger.script_suspend_group;

    spawners = _func_91E8F01DD90DE05A( trigger.target );

    foreach ( spawner in spawners )
    {
        if ( !isdefined( spawner.script_suspend ) )
            spawner.script_suspend = script_suspend;

        if ( !isdefined( spawner.script_suspend_group ) )
            spawner.script_suspend_group = script_suspend_group;
    }

    for (;;)
    {
        trigger waittill( "trigger", other );
        trigger scripts\engine\utility::script_delay();
        spawners = _func_91E8F01DD90DE05A( trigger.target );

        foreach ( spawner in spawners )
            spawner thread scripts\engine\sp\utility::spawn_ai();

        while ( isalive( other ) && other istouching( trigger ) )
            wait 0.1;
    }
}

spawn_subclass_juggernaut()
{
    if ( !isdefined( level.juggernaut_initialized ) )
    {
        level.juggernaut_initialized = 1;
        level.juggernaut_next_alert_time = 0;
    }

    scripts\common\ai::disable_turnanims();
    scripts\engine\sp\utility::disable_surprise();

    if ( isdefined( level._id_BF8AA3F39F981625 ) )
    {
        foreach ( func in level._id_BF8AA3F39F981625 )
            self thread [[ func ]]();
    }

    thread juggernaut_sound_when_close();
}

juggernaut_sound_when_close()
{
    self endon( "death" );

    for (;;)
    {
        waitframe();

        if ( gettime() < level.juggernaut_next_alert_time )
            continue;

        if ( !isalive( level.player ) )
            continue;

        if ( distancesquared( level.player.origin, self.origin ) > 2250000 )
            continue;

        if ( !self cansee( level.player ) )
            continue;

        break;
    }

    level.juggernaut_next_alert_time = gettime() + 15000;
    level notify( "juggernaut_attacking" );

    if ( isdefined( self.skip_intro_sound ) )
        return;

    level.player scripts\engine\sp\utility::playlocalsoundwrapper( "mx_juggernaut_intro" );
}
