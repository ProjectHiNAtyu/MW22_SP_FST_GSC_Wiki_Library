// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    firstinit();

    if ( !scripts\engine\utility::flag_exist( "load_finished" ) )
        scripts\engine\utility::flag_init( "load_finished" );

    self.a = spawnstruct();

    if ( !isdefined( self.export ) )
        self.export = -1;

    setupuniqueanims();
    scripts\asm\shared\utility::setupsoldierdefaults();
    thread _id_3433EE6B63C7E243::setupweapons();
    thread scripts\sp\equipment\offhands::offhandfiremanager();

    if ( !isdefined( level.disablemonitorflash ) )
        thread _id_13D1C402F1421C35::monitorflash();

    thread ondeath();

    if ( !getdvarint( "dvar_E6AFCE2CF5CF7515" ) )
    {
        self pushplayer( 0 );
        scripts\asm\asm::asm_init_blackboard();
        scripts\aitypes\bt_util::bt_init();

        if ( getdvarint( "dvar_5E3944ACAEBDD5A0", 0 ) == 1 )
        {
            if ( self.asmasset == "soldier" )
            {
                self.asmasset = "soldier_dev";

                if ( self.animationarchetype != "juggernaut" )
                    self.animationarchetype = "soldier_dev";
            }
        }

        self._id_A942DD31D55102C9 = self.asmasset;
        scripts\asm\asm_sp::asm_init( self.asmasset, self.animationarchetype );
        thread ai_update();
    }

    thread setnameandrank_andaddtosquad();

    if ( isdefined( level.aitypeinitfuncs ) && isdefined( level.aitypeinitfuncs[self.classname] ) )
        self [[ level.aitypeinitfuncs[self.classname] ]]();

    self.fnachievements = ::achievement_death_tracker;
}

shouldforceupdatebt()
{
    return isdefined( self.bt.forceupdate ) && self.bt.forceupdate;
}

ai_update()
{
    self endon( "terminate_ai_threads" );
    self endon( "entitydeleted" );
    thread scripts\asm\asm_sp::deletehandler();
}

weapons_with_ir( weapon )
{
    weapons[0] = "m4_grenadier";
    weapons[1] = "m4_grunt";
    weapons[2] = "m4_silencer";
    weapons[3] = "m4m203";

    if ( !isdefined( weapon ) )
        return 0;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < weapons.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( issubstr( weapon, weapons[_id_AC0E594AC96AA3A8] ) )
            return 1;
    }

    return 0;
}

setnameandrank_andaddtosquad()
{
    self endon( "death" );
    scripts\sp\names::get_name();
    thread _id_0C11D6400BA31ED7::addtosquad();
}

pollallowedstancesthread()
{
    for (;;)
    {
        if ( self isstanceallowed( "stand" ) )
        {
            line[0] = "stand allowed";
            color[0] = ( 0, 1, 0 );
        }
        else
        {
            line[0] = "stand not allowed";
            color[0] = ( 1, 0, 0 );
        }

        if ( self isstanceallowed( "crouch" ) )
        {
            line[1] = "crouch allowed";
            color[1] = ( 0, 1, 0 );
        }
        else
        {
            line[1] = "crouch not allowed";
            color[1] = ( 1, 0, 0 );
        }

        if ( self isstanceallowed( "prone" ) )
        {
            line[2] = "prone allowed";
            color[2] = ( 0, 1, 0 );
        }
        else
        {
            line[2] = "prone not allowed";
            color[2] = ( 1, 0, 0 );
        }

        _id_3CA3C774A3D57BC0 = self getshootatpos() + ( 0, 0, 30 );
        offset = ( 0, 0, -10 );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < line.size; _id_AC0E594AC96AA3A8++ )
            _id_C290FA34CB77DD58 = ( _id_3CA3C774A3D57BC0[0] + offset[0] * _id_AC0E594AC96AA3A8, _id_3CA3C774A3D57BC0[1] + offset[1] * _id_AC0E594AC96AA3A8, _id_3CA3C774A3D57BC0[2] + offset[2] * _id_AC0E594AC96AA3A8 );

        wait 0.05;
    }
}

setupuniqueanims()
{
    if ( !isdefined( self.animplaybackrate ) || !isdefined( self.moveplaybackrate ) )
        set_anim_playback_rate();
}

set_anim_playback_rate()
{
    self.animplaybackrate = 0.97 + randomfloat( 0.13 );
    self.movetransitionrate = 0.97 + randomfloat( 0.13 );
    self.moveplaybackrate = self.movetransitionrate;
    self.sidesteprate = 1.35;
}

infiniteloop( _id_54588204349C77DB, _id_E94F7B032A5F1695, _id_6CAD5DC7F6D9541F, _id_7FAFD0DB06FDAA23 )
{
    anim waittill( "new exceptions" );
}

empty( _id_54588204349C77DB, _id_E94F7B032A5F1695, _id_6CAD5DC7F6D9541F, _id_7FAFD0DB06FDAA23 )
{

}

initdeveloperdvars()
{

}

initbattlechatter()
{
    if ( !isdefined( anim.player.team ) )
        anim.player.team = "allies";

    _id_3433EE6B63C7E243::init_squadmanager();
    _id_35DE402EFC5ACFB3::init_battlechatter();
    anim.player thread scripts\sp\player\playerchatter::playeranimnameswitch();
    anim.player thread _id_0C11D6400BA31ED7::addtosquad();
}

initgrenades()
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.players.size; _id_AC0E594AC96AA3A8++ )
    {
        player = level.players[_id_AC0E594AC96AA3A8];
        _func_B4EBE6632D7E8EFE( player, "lethal", randomintrange( 1000, 20000 ) );
        _func_B4EBE6632D7E8EFE( player, "tactical", randomintrange( 1000, 20000 ) );
        player thread setnextplayergrenadetime();
    }

    _func_B4EBE6632D7E8EFE( undefined, "lethal", randomintrange( 0, 20000 ) );
    _func_B4EBE6632D7E8EFE( undefined, "tactical", randomintrange( 0, 20000 ) );
}

setnextplayergrenadetime()
{
    waittillframeend;

    if ( isdefined( self.gs.playergrenaderangetime ) )
    {
        maxtime = int( self.gs.playergrenaderangetime * 0.7 );

        if ( maxtime < 1 )
            maxtime = 1;

        _func_B4EBE6632D7E8EFE( self, "lethal", randomintrange( 0, maxtime ) );
    }

    if ( isdefined( self.gs.playerdoublegrenadetime ) )
    {
        maxtime = int( self.gs.playerdoublegrenadetime );
        mintime = int( maxtime / 2 );

        if ( maxtime <= mintime )
            maxtime = mintime + 1;

        _func_E4DA167DC330B3D3( self, randomintrange( mintime, maxtime ) );
    }
}

ondeath()
{
    if ( isdefined( level.disablestrangeondeath ) )
        return;

    self waittill( "death" );

    if ( !isdefined( self ) )
    {
        if ( isdefined( self.a.usingturret ) )
            self.a.usingturret delete();
    }
}

firstinit()
{
    if ( isdefined( anim.notfirsttime ) )
        return;

    anim.notfirsttime = 1;
    scripts\sp\load::anim_earlyinit();
    level.nextgrenadedrop = randomint( 3 );
    level.lastplayersighted = 100;
    anim.defaultexception = ::empty;

    if ( !isdefined( level.g_effect ) )
        level.g_effect = [];

    initdeveloperdvars();
    scripts\sp\names::setup_names();
    _id_3433EE6B63C7E243::initanimvars();
    scripts\asm\asm_sp::_id_A2B8F8B0891EE7FE();
    scripts\common\ai::_id_67EC1DF786CAD61A();
    initgrenades();
    _id_3433EE6B63C7E243::initmeleecharges();
    level.fngetcorpsearrayfunc = ::getcorpsearraysp;
    level.fnsetcorpseremovetimerfunc = ::setcorpseremovetimersp;

    if ( !isdefined( anim.optionalstepeffectfunction ) )
    {
        anim.fnfootstepeffectsmall = _id_55B3046625FB79B6::playfootstepeffectsmall;
        anim.fnfootstepeffect = _id_55B3046625FB79B6::playfootstepeffect;
    }

    if ( !isdefined( anim.fnfootprinteffect ) )
        anim.fnfootprinteffect = _id_55B3046625FB79B6::playfootprinteffect;

    if ( getdvarint( "dvar_5E3944ACAEBDD5A0", 0 ) == 1 )
    {

    }

    _id_55B3046625FB79B6::registernotetracks();
    scripts\engine\sp\utility::setupglobalcallbackfunctions_sp();
    level.painai = undefined;
    _id_4ADE3AE5C138C8B3::initlevelface();

    if ( !isdefined( anim.chatinitialized ) )
    {
        if ( scripts\engine\utility::player_is_in_jackal() )
            anim.player = level.player_jackal;
        else
            anim.player = getentarray( "player", "classname" )[0];

        initbattlechatter();
    }

    _id_3433EE6B63C7E243::initwindowtraverse();
    _id_6FB5933380201A3A::setupcqbpointsofinterest();
    scripts\smartobjects\utility::init_smartobjects();
    _id_3433EE6B63C7E243::setuprandomtable();
    level.player thread _id_13D1C402F1421C35::watchreloading();
}

getcorpsearraysp()
{
    result = getcorpsearray();
    return result;
}

setcorpseremovetimersp( time )
{
    return self _meth_22BDC6F6A8DB6068( time );
}

achievement_death_tracker()
{
    if ( !isdefined( self.attacker ) || !isplayer( self.attacker ) )
        return;

    if ( !isdefined( self.team ) || self.team != "axis" && self.team != "team3" )
        return;

    if ( isdefined( self.damagemod ) && isdefined( self.damageweapon ) && isdefined( self.damageweapon.basename ) )
    {
        if ( self.damagemod == "MOD_IMPACT" && isstartstr( self.damageweapon.basename, "smoke" ) )
            level thread scripts\sp\utility::giveachievement_wrapper( "smokedirect" );
    }

    if ( level.player isonladder() )
    {
        _id_32963B8862F62085 = level.player _meth_2583E4BC5ABCA7B5( "achievementHangtime" );

        if ( _id_32963B8862F62085 < 3 )
        {
            if ( isdefined( self.damagemod ) && ( self.damagemod == "MOD_PISTOL_BULLET" || self.damagemod == "MOD_RIFLE_BULLET" || self.damagemod == "MOD_EXPLOSIVE_BULLET" ) )
            {
                if ( _id_32963B8862F62085 == 2 )
                    level thread scripts\sp\utility::giveachievement_wrapper( "hangtime" );

                level.player _meth_8E232755197D2A79( "achievementHangtime", _id_32963B8862F62085 + 1 );
            }
        }
    }
}
