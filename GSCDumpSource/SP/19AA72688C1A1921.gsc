// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_stats()
{
    self.stats["kills"] = 0;
    self.stats["kills_melee"] = 0;
    self.stats["kills_explosives"] = 0;
    self.stats["kills_juggernaut"] = 0;
    self.stats["kills_vehicle"] = 0;
    self.stats["kills_sentry"] = 0;
    self.stats["headshots"] = 0;
    self.stats["shots_fired"] = 0;
    self.stats["shots_hit"] = 0;
    self.stats["weapon"] = [];
    thread shots_fired_recorder();
}

was_headshot()
{
    if ( isdefined( self.died_of_headshot ) && self.died_of_headshot )
        return 1;

    if ( !isdefined( self.damagelocation ) )
        return 0;

    return self.damagelocation == "helmet" || self.damagelocation == "head" || self.damagelocation == "neck";
}

register_kill( _id_C991A0BED398CA91, cause, weaponname, _id_87F5148B60EED56D )
{
    player = self;

    if ( isdefined( self.owner ) )
        player = self.owner;

    if ( !isplayer( player ) )
    {
        if ( isdefined( level.pmc_match ) && level.pmc_match )
            player = level.players[randomint( level.players.size )];
    }

    if ( !isplayer( player ) )
        return;

    if ( isdefined( level.skip_pilot_kill_count ) && isdefined( _id_C991A0BED398CA91.drivingvehicle ) && _id_C991A0BED398CA91.drivingvehicle )
        return;

    player.stats["kills"]++;

    if ( isdefined( _id_C991A0BED398CA91 ) )
    {
        if ( _id_C991A0BED398CA91 was_headshot() )
            player.stats["headshots"]++;

        if ( isdefined( _id_C991A0BED398CA91.juggernaut ) )
            player.stats["kills_juggernaut"]++;

        if ( isdefined( _id_C991A0BED398CA91.issentrygun ) )
            player.stats["kills_sentry"]++;

        if ( _id_C991A0BED398CA91.code_classname == "script_vehicle" )
        {
            player.stats["kills_vehicle"]++;

            if ( isdefined( _id_C991A0BED398CA91.riders ) )
            {
                foreach ( rider in _id_C991A0BED398CA91.riders )
                {
                    if ( isdefined( rider ) )
                        player register_kill( rider, cause, weaponname, _id_87F5148B60EED56D );
                }
            }
        }
    }

    if ( cause_is_explosive( cause ) )
        player.stats["kills_explosives"]++;

    if ( isdefined( weaponname ) )
        weapon = makeweaponfromstring( weaponname );
    else
        weapon = player getcurrentweapon();

    if ( issubstr( tolower( cause ), "melee" ) )
    {
        player.stats["kills_melee"]++;

        if ( weaponinventorytype( weapon ) == "primary" )
            return;
    }

    if ( player is_new_weapon( weapon ) )
        player register_new_weapon( weapon );

    player.stats["weapon"][getcompleteweaponname( weapon )].kills++;
}

register_shot_hit()
{
    if ( !isplayer( self ) )
        return;

    if ( isdefined( self.registeringshothit ) )
        return;

    self.registeringshothit = 1;
    self.stats["shots_hit"]++;
    weapon = self getcurrentweapon();

    if ( is_new_weapon( weapon ) )
        register_new_weapon( weapon );

    self.stats["weapon"][getcompleteweaponname( weapon )].shots_hit++;
    waittillframeend;
    self.registeringshothit = undefined;
}

shots_fired_recorder()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "weapon_fired" );
        weapon = self getcurrentweapon();

        if ( !isdefined( weapon ) || !scripts\sp\utility::isprimaryweapon( weapon ) )
            continue;

        self.stats["shots_fired"]++;

        if ( is_new_weapon( weapon ) )
            register_new_weapon( weapon );

        self.stats["weapon"][getcompleteweaponname( weapon )].shots_fired++;
    }
}

is_new_weapon( weapon )
{
    if ( isdefined( self.stats["weapon"][getcompleteweaponname( weapon )] ) )
        return 0;

    return 1;
}

cause_is_explosive( cause )
{
    cause = tolower( cause );

    switch ( cause )
    {
        case "splash":
        case "mod_explosive":
        case "mod_projectile_splash":
        case "mod_projectile":
        case "mod_grenade_splash":
        case "mod_grenade":
            return 1;
        default:
            return 0;
    }

    return 0;
}

register_new_weapon( weapon )
{
    weaponname = getcompleteweaponname( weapon );
    self.stats["weapon"][weaponname] = spawnstruct();
    self.stats["weapon"][weaponname].name = weaponname;
    self.stats["weapon"][weaponname].shots_fired = 0;
    self.stats["weapon"][weaponname].shots_hit = 0;
    self.stats["weapon"][weaponname].kills = 0;
}

set_stat_dvars()
{
    _id_6EA8E24D4901E87C = 1;

    foreach ( player in level.players )
    {
        setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_kills_melee", player.stats["kills_melee"] ) );
        setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_kills_juggernaut", player.stats["kills_juggernaut"] ) );
        setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_kills_explosives", player.stats["kills_explosives"] ) );
        setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_kills_vehicle", player.stats["kills_vehicle"] ) );
        setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_kills_sentry", player.stats["kills_sentry"] ) );
        weapons = player get_best_weapons( 5 );

        foreach ( weapon in weapons )
        {
            weapon.accuracy = 0;

            if ( weapon.shots_fired > 0 )
                weapon.accuracy = int( weapon.shots_hit / weapon.shots_fired * 100 );
        }

        for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < 6; _id_AC0E594AC96AA3A8++ )
        {
            setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_weapon", _id_AC0E594AC96AA3A8, "_name" ), " " );
            setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_weapon", _id_AC0E594AC96AA3A8, "_kills" ), " " );
            setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_weapon", _id_AC0E594AC96AA3A8, "_shots" ), " " );
            setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_weapon", _id_AC0E594AC96AA3A8, "_accuracy" ), " " );
        }

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < weapons.size; _id_AC0E594AC96AA3A8++ )
        {
            if ( !isdefined( weapons[_id_AC0E594AC96AA3A8] ) )
                break;

            setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_weapon", _id_AC0E594AC96AA3A8 + 1, "_name" ), weapons[_id_AC0E594AC96AA3A8].name );
            setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_weapon", _id_AC0E594AC96AA3A8 + 1, "_kills" ), weapons[_id_AC0E594AC96AA3A8].kills );
            setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_weapon", _id_AC0E594AC96AA3A8 + 1, "_shots" ), weapons[_id_AC0E594AC96AA3A8].shots_fired );
            setdvar( _func_2EF675C13CA1C4AF( "dvar_6D4BAC28BD2BE3F2", _id_6EA8E24D4901E87C, "_weapon", _id_AC0E594AC96AA3A8 + 1, "_accuracy" ), weapons[_id_AC0E594AC96AA3A8].accuracy + "%" );
        }

        _id_6EA8E24D4901E87C++;
    }
}

get_best_weapons( _id_1391E661D0C70D36 )
{
    _id_5AD85C368D320244 = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_1391E661D0C70D36; _id_AC0E594AC96AA3A8++ )
        _id_5AD85C368D320244[_id_AC0E594AC96AA3A8] = get_weapon_with_most_kills( _id_5AD85C368D320244 );

    return _id_5AD85C368D320244;
}

get_weapon_with_most_kills( _id_6342A5CD84590602 )
{
    if ( !isdefined( _id_6342A5CD84590602 ) )
        _id_6342A5CD84590602 = [];

    _id_FCB005BA59DA2C8B = undefined;

    foreach ( weapon in self.stats["weapon"] )
    {
        _id_D9D651E140802775 = 0;

        foreach ( _id_80BF5812193E7385 in _id_6342A5CD84590602 )
        {
            if ( weapon.name == _id_80BF5812193E7385.name )
            {
                _id_D9D651E140802775 = 1;
                break;
            }
        }

        if ( _id_D9D651E140802775 )
            continue;

        if ( !isdefined( _id_FCB005BA59DA2C8B ) )
        {
            _id_FCB005BA59DA2C8B = weapon;
            continue;
        }

        if ( weapon.kills > _id_FCB005BA59DA2C8B.kills )
            _id_FCB005BA59DA2C8B = weapon;
    }

    return _id_FCB005BA59DA2C8B;
}
