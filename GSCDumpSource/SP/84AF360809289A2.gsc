// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

drone_give_soul()
{
    assign_drone_tree();
    self _meth_4F784BBF1E69DDB3();

    if ( isdefined( self.script_moveplaybackrate ) )
        self.moveplaybackrate = self.script_moveplaybackrate;
    else
        self.moveplaybackrate = 1;

    if ( self.team == "allies" )
    {
        scripts\sp\names::get_name();
        self _meth_407DD8B9E942496A( self.name, &"" );
    }

    if ( isdefined( level.dronecallbackthread ) )
        self thread [[ level.dronecallbackthread ]]();

    if ( !isdefined( self.script_friendly_fire_disable ) )
        level thread scripts\sp\friendlyfire::friendly_fire_think( self );

    if ( !isdefined( level.ai_dont_glow_in_thermal ) )
        thermaldrawenabledrone();
}

thermaldrawenabledrone()
{
    if ( !isdefined( level.dronesthermalteamselect ) )
        level.dronesthermalteamselect = "all";

    _id_2DC225905EA86379 = 0;

    switch ( level.dronesthermalteamselect )
    {
        case "all":
            _id_2DC225905EA86379 = 1;
            break;
        case "axis":
            _id_2DC225905EA86379 = self.team == "axis";
            break;
        default:
            break;
    }

    if ( _id_2DC225905EA86379 )
        self thermaldrawenable();
}

drone_init_path()
{
    if ( !isdefined( self.target ) )
        return;

    if ( isdefined( level.drone_paths[self.target] ) )
        return;

    level.drone_paths[self.target] = 1;
    target = self.target;
    node = scripts\engine\utility::getstruct( target, "targetname" );

    if ( !isdefined( node ) )
        return;

    _id_02B27C2708DEF0A7 = [];
    _id_AD7EE73EEAF14390 = [];
    _id_F1E6B7EF99E38943 = node;

    for (;;)
    {
        node = _id_F1E6B7EF99E38943;
        _id_42B4575E536FB56F = 0;

        for (;;)
        {
            if ( !isdefined( node.target ) )
                break;

            _id_B45BD7C79FC01491 = scripts\engine\utility::getstructarray( node.target, "targetname" );

            if ( _id_B45BD7C79FC01491.size )
                break;

            nextnode = undefined;

            foreach ( _id_0C84F6220E6636C5 in _id_B45BD7C79FC01491 )
            {
                if ( isdefined( _id_AD7EE73EEAF14390[_id_0C84F6220E6636C5.origin + ""] ) )
                    continue;

                nextnode = _id_0C84F6220E6636C5;
                break;
            }

            if ( !isdefined( nextnode ) )
                break;

            _id_AD7EE73EEAF14390[nextnode.origin + ""] = 1;
            _id_02B27C2708DEF0A7[node.targetname] = nextnode.origin - node.origin;
            node.angles = vectortoangles( _id_02B27C2708DEF0A7[node.targetname] );
            node = nextnode;
            _id_42B4575E536FB56F = 1;
        }

        if ( !_id_42B4575E536FB56F )
            break;
    }

    target = self.target;
    node = scripts\engine\utility::getstruct( target, "targetname" );
    prevnode = node;
    _id_AD7EE73EEAF14390 = [];

    for (;;)
    {
        node = _id_F1E6B7EF99E38943;
        _id_42B4575E536FB56F = 0;

        for (;;)
        {
            if ( !isdefined( node.target ) )
                return;

            if ( !isdefined( _id_02B27C2708DEF0A7[node.targetname] ) )
                return;

            _id_B45BD7C79FC01491 = scripts\engine\utility::getstructarray( node.target, "targetname" );

            if ( _id_B45BD7C79FC01491.size )
                break;

            nextnode = undefined;

            foreach ( _id_0C84F6220E6636C5 in _id_B45BD7C79FC01491 )
            {
                if ( isdefined( _id_AD7EE73EEAF14390[_id_0C84F6220E6636C5.origin + ""] ) )
                    continue;

                nextnode = _id_0C84F6220E6636C5;
                break;
            }

            if ( !isdefined( nextnode ) )
                break;

            if ( isdefined( node.radius ) )
            {
                _id_9601C225B7890378 = _id_02B27C2708DEF0A7[prevnode.targetname];
                _id_9601C525B7890A11 = _id_02B27C2708DEF0A7[node.targetname];
                _id_06A3A1033FFC2699 = ( _id_9601C225B7890378 + _id_9601C525B7890A11 ) * 0.5;
                node.angles = vectortoangles( _id_06A3A1033FFC2699 );
            }

            _id_42B4575E536FB56F = 1;
            prevnode = node;
            node = nextnode;
        }

        if ( !_id_42B4575E536FB56F )
            break;
    }
}

assign_drone_tree()
{
    if ( isdefined( self.type ) )
    {
        if ( self.type == "dog" )
            assign_animals_tree();
        else
            assign_generic_human_tree();
    }
}

#using_animtree("generic_human");

assign_generic_human_tree()
{
    self useanimtree( #animtree );
}

#using_animtree("animals");

assign_animals_tree()
{
    self useanimtree( #animtree );
}
