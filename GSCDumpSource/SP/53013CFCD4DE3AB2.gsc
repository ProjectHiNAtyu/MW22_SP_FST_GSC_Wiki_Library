// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( getdvarint( "dvar_F07AE454D79D2299" ) )
        return;

    precacheshader( "damage_feedback_thin" );
    level.hitmarkerpriorities = [];
    level.hitmarkerpriorities["low_damage"] = 35;
    level.hitmarkerpriorities["standard"] = 50;
    level.hitmarkerpriorities["standard_cp"] = 50;
    level.hitmarkerpriorities["high_damage"] = 85;
}

damagefeedback_took_damage( damage, attacker, direction_vec, point, meansofdeath, modelname, tagname, partname, idflags, objweapon )
{
    if ( getdvarint( "dvar_F07AE454D79D2299" ) )
        return;

    if ( !isdefined( attacker ) || !isplayer( attacker ) || attacker == self || damage <= 0 )
        return;

    _id_CDCEDB142F61B43E = "standard";
    _id_B98146816886D3C4 = "standard";

    if ( isdefined( objweapon ) )
    {
        if ( damage <= _func_6DF279245A885AAA( objweapon ) )
            _id_B98146816886D3C4 = "low_damage";
        else if ( damage >= weapongetdamagemax( objweapon ) )
            _id_B98146816886D3C4 = "high_damage";
    }

    _id_4FFE32F42D51A763 = 0;
    headshot = 0;

    if ( isai( self ) )
    {
        _id_4FFE32F42D51A763 = !isalive( self );
        headshot = isheadshot( partname );
    }

    level.player thread updatedamagefeedback( _id_CDCEDB142F61B43E, _id_4FFE32F42D51A763, headshot, _id_B98146816886D3C4, self );
}

updatedamagefeedback( _id_DC382B1157307F94, _id_D7198CEB7D51DB5B, headshot, _id_B98146816886D3C4, victim )
{
    if ( !isplayer( self ) )
        return;

    if ( !isdefined( _id_B98146816886D3C4 ) )
        _id_B98146816886D3C4 = "standard";

    switch ( _id_DC382B1157307F94 )
    {
        case "hitmotionsensor":
        case "hitcritical":
        case "thermobaric_debuff":
        case "hithealthshield":
        case "hitbulletstorm":
        case "hitmorehealth":
        case "hitlightarmor":
        case "hitjuggernaut":
        case "hitblastshield":
        case "hitspawnprotect":
            setomnvar( "damage_feedback_icon", _id_DC382B1157307F94 );
            self setclientomnvar( "damage_feedback_icon_notify", gettime() );
            updatehitmarker( _id_B98146816886D3C4, _id_D7198CEB7D51DB5B, headshot );
            break;
        case "none":
            break;
        default:
            updatehitmarker( _id_B98146816886D3C4, _id_D7198CEB7D51DB5B, headshot, victim );
            break;
    }
}

updatehitmarker( _id_E0EA2C8DF06F13EB, _id_D7198CEB7D51DB5B, headshot, victim )
{
    if ( getdvarint( "dvar_2FB5684532AD1A80" ) )
        return;

    if ( !isdefined( _id_E0EA2C8DF06F13EB ) )
        return;

    if ( !isdefined( _id_D7198CEB7D51DB5B ) )
        _id_D7198CEB7D51DB5B = 0;

    if ( !isdefined( headshot ) )
        headshot = 0;

    if ( isdefined( victim ) && victim.team == "allies" )
        return;

    priority = gethitmarkerpriority( _id_E0EA2C8DF06F13EB );

    if ( isdefined( self.lasthitmarkertime ) && self.lasthitmarkertime == gettime() && priority <= self.lasthitmarkerpriority && !_id_D7198CEB7D51DB5B )
        return;

    self.lasthitmarkertime = gettime();
    self.lasthitmarkerpriority = priority;
    setomnvar( "damage_feedback", _id_E0EA2C8DF06F13EB );
    self setclientomnvar( "damage_feedback_notify", gettime() );

    if ( _id_D7198CEB7D51DB5B )
        setomnvar( "damage_feedback_kill", 1 );
    else
        setomnvar( "damage_feedback_kill", 0 );

    if ( headshot )
        setomnvar( "damage_feedback_headshot", 1 );
    else
        setomnvar( "damage_feedback_headshot", 0 );
}

gethitmarkerpriority( _id_B98146816886D3C4 )
{
    if ( !isdefined( level.hitmarkerpriorities[_id_B98146816886D3C4] ) )
        return 0;

    return level.hitmarkerpriorities[_id_B98146816886D3C4];
}

isheadshot( partname )
{
    switch ( partname )
    {
        case "j_head_pv_horizontal":
        case "j_head_pv_z":
        case "j_head":
        case "j_neck":
            return 1;
        default:
            return 0;
    }

    return 0;
}
