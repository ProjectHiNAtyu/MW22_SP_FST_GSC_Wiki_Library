// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

tagging_player_thread()
{
    if ( !isdefined( self.tagging ) )
        tagging_player_init();

    if ( istrue( level.ship_assault ) )
    {

    }
    else
        thread tagging_think();

    tagging_set_enabled( 1 );
}

tagging_player_stop()
{
    tagging_set_enabled( 0 );
    self notify( "tagging_think" );
}

tagging_set_enabled( enabled, _id_BEFE25CB1383F7C8 )
{
    if ( !isdefined( self.tagging ) )
        tagging_player_init();

    if ( !isdefined( _id_BEFE25CB1383F7C8 ) )
        _id_BEFE25CB1383F7C8 = 4;

    self.tagging["enabled"] = enabled;
    self.tagging["action_slot"] = _id_BEFE25CB1383F7C8;
    tagging_set_marking_enabled( enabled );
}

tagging_set_marking_enabled( enabled )
{
    if ( !isdefined( self.tagging ) )
        tagging_player_init();

    self.tagging["marking_enabled"] = enabled;
    _id_DCB5FD0CC07E40A2 = tagging_entity_list();

    if ( !self.tagging["marking_enabled"] )
    {
        foreach ( entity in _id_DCB5FD0CC07E40A2 )
        {
            if ( !isdefined( entity ) )
                continue;

            if ( issentient( entity ) && !isalive( entity ) )
                continue;

            entity tag_trace_update( "none", self );
            entity notify( "tagged_entity_death_cleanup" );
            entity tagged_status_hide();
        }
    }
    else
    {
        foreach ( entity in _id_DCB5FD0CC07E40A2 )
        {
            if ( !isdefined( entity ) )
                continue;

            if ( issentient( entity ) && !isalive( entity ) )
                continue;

            if ( isdefined( entity.tagged ) && isdefined( entity.tagged[self getentitynumber()] ) )
                entity tag_entity( self );
        }
    }
}

tag_entity( player, _id_47EB02BF85DE33E5 )
{
    if ( !isdefined( level.tagginginit ) )
    {
        level tracking_init();
        level.tagginginit = 1;
    }

    if ( !isdefined( _id_47EB02BF85DE33E5 ) )
        _id_47EB02BF85DE33E5 = 1;

    if ( !isdefined( self ) || issentient( self ) && !isalive( self ) )
    {
        if ( isdefined( self ) )
            tag_outline_entity( 0 );

        return;
    }

    if ( _id_47EB02BF85DE33E5 && ( !isdefined( self.tagged ) || !isdefined( self.tagged[player getentitynumber()] ) || !self.tagged[player getentitynumber()] ) )
        player thread scripts\engine\sp\utility::play_sound_on_entity( "drone_tag_success" );

    self.tagged[player getentitynumber()] = 1;
    tag_outline_entity( 1 );
    self.tag_trace_state = undefined;
    self.tag_trace_pulse = undefined;
    self.tag_trace_track = undefined;
    tagged_status_show();
}

tag_flash_entity( player, _id_9E76FE13C19DA9A3 )
{
    if ( isdefined( self.tag_flashing ) && self.tag_flashing == _id_9E76FE13C19DA9A3 )
        return;

    self.tag_flashing = _id_9E76FE13C19DA9A3;
    self notify( "tag_flash_entity" );
    self endon( "tag_flash_entity" );
    self endon( "death" );
    player endon( "death" );
    player endon( "disconnect" );

    if ( !isdefined( self ) || issentient( self ) && !isalive( self ) )
    {
        if ( isdefined( self ) )
            tag_outline_entity( 0 );

        return;
    }

    _id_C53E78332A6C514F = player getentitynumber();

    if ( !isdefined( player.tag_next_flash ) )
        player.tag_next_flash = 0;

    _id_870DF669EFFDB2B1 = isdefined( self.tagged ) && istrue( self.tagged[_id_C53E78332A6C514F] );

    for ( flash = 1; _id_9E76FE13C19DA9A3 && getdvarint( "dvar_A9F8DFE902285D4A", 1 ); _id_870DF669EFFDB2B1 = isdefined( self.tagged ) && istrue( self.tagged[_id_C53E78332A6C514F] ) )
    {
        self.tagged_flickered = 1;

        if ( flash )
            tag_outline_entity( 1, "dead" );
        else
            tag_outline_entity( _id_870DF669EFFDB2B1 );

        waittime = player.tag_next_flash - gettime();

        if ( waittime > 0 )
            wait( float( waittime ) / 1000.0 );

        flash = !flash;
        player.tag_next_flash = gettime() + 200;
    }

    tag_outline_entity( _id_870DF669EFFDB2B1 );
}

tagging_player_init()
{
    if ( !isdefined( level.tagginginit ) )
    {
        level tracking_init();
        level.tagginginit = 1;
    }

    self.tagging = [];
    self.tagging["enabled"] = undefined;
    self.tagging["marking_enabled"] = 1;
    self.tagging["outline_enabled"] = 1;
    self.tagging["tagging_mode"] = 0;
    self.tagging["last_tag_start"] = 0;
    self.tagging["action_slot"] = 4;
    self.tagging["tagging_fade_min"] = 500.0;
    self.tagging["tagging_fade_max"] = 3000.0;
}

tracking_init()
{
    setdvarifuninitialized( "dvar_F05C8F3735320C7C", 3000 );
    setdvarifuninitialized( "dvar_804A2291B4A8B92E", 10.0 );
    setdvarifuninitialized( "dvar_0A51875D7D6ABF72", 50 );
    setdvarifuninitialized( "dvar_AF0E1BDDFB8D06F7", 250 );
    setdvarifuninitialized( "dvar_744C07D95523175F", 500 );
    setdvarifuninitialized( "dvar_2C74E15F8D4B6C58", 100 );
    setdvarifuninitialized( "dvar_0F3A9396CA64643D", 500 );
    setdvarifuninitialized( "dvar_3FD7F3A2C9CCFDA1", 1000 );
    setdvarifuninitialized( "dvar_B1C9CC21222CA5F1", 0 );
    setdvarifuninitialized( "dvar_D7FB76123EDD5B2D", 0 );
    scripts\engine\sp\utility::hudoutline_add_channel( "tagging", -1, ::tagging_hudoutline_settings );
    thread lerp_hudoutline_occlusion();
    setsaveddvar( "dvar_5F5C12C95C44F093", 1 );
}

tagging_hudoutline_settings()
{
    hudoutlinesettings = [];
    hudoutlinesettings["r_hudoutlineFillColor0"] = "0.5 0.5 0.5 0";
    hudoutlinesettings["r_hudoutlineFillColor1"] = "0.5 0.5 0.5 0";
    hudoutlinesettings["r_hudoutlineOccludedOutlineColor"] = "0.5 0.5 0.5 0";
    hudoutlinesettings["r_hudoutlineOccludedInlineColor"] = "0.5 0.5 0.5 0";
    hudoutlinesettings["r_hudoutlineOccludedInteriorColor"] = "0.5 0.5 0.5 0";
    hudoutlinesettings["r_hudOutlineOccludedColorFromFill"] = 1;
    return hudoutlinesettings;
}

lerp_hudoutline_occlusion()
{
    alpha = 0;
    time = 0.05;
    value = "0.5 0.5 0.5";
    _id_E3108E412AFB3811 = 1;
    _id_3020022D05244862 = 0;

    for (;;)
    {
        for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < 11; _id_AC0E594AC96AA3A8++ )
        {
            if ( isdefined( level.hudoutlinecurchannel ) && level.hudoutlinecurchannel == "tagging" )
            {
                setsaveddvar( "dvar_9457F5E8293A0C84", value + alpha + "" );
                setsaveddvar( "dvar_AA498F5035D9EF17", value + alpha + "" );
                setsaveddvar( "dvar_5AEB9EF51530DEFC", value + alpha + "" );

                if ( _id_E3108E412AFB3811 )
                    alpha = scripts\engine\utility::ter_op( _id_AC0E594AC96AA3A8 == 10, 0.9, alpha + 0.1 );
                else
                    alpha = scripts\engine\utility::ter_op( _id_AC0E594AC96AA3A8 == 10, 0, alpha - 0.1 );

                wait( time );
            }
        }

        _id_3020022D05244862++;

        if ( _id_3020022D05244862 == 2 )
        {
            level notify( "tagging_cycle" );
            wait 2;
            _id_3020022D05244862 = 0;
        }
        else
            wait 0.05;

        if ( _id_E3108E412AFB3811 )
        {
            _id_E3108E412AFB3811 = 0;
            continue;
        }

        _id_E3108E412AFB3811 = 1;
    }
}

tagging_shutdown_player()
{
    self notify( "tagging_shutdown" );
    tagging_set_enabled( 0 );

    if ( isdefined( self.tagging ) && isdefined( self.tagging["camera"] ) )
        self.tagging["camera"] delete();

    self.tagging = undefined;
}

tagging_entity_list()
{
    _id_C5F4970069850479 = level.stealth.enemies[self.team];
    _id_4417DDF013B240BA = getentarray( "rss_static_robot", "script_noteworthy" );
    allies = getaiarray( self.team );
    enemies = scripts\engine\utility::array_combine( _id_C5F4970069850479, _id_4417DDF013B240BA );
    result = scripts\engine\utility::array_combine( enemies, allies );
    return result;
}

tagging_think()
{
    self notify( "tagging_think" );
    self endon( "tagging_think" );
    self endon( "death" );
    self endon( "disconnect" );

    while ( isdefined( self ) && isdefined( self.tagging ) )
    {
        if ( !isdefined( self.tagging["enabled"] ) )
            return;

        if ( !isdefined( self.tagging["outline_enabled"] ) )
            return;

        _id_E025306F5374186A = self.tagging["enabled"] && self.tagging["outline_enabled"] && !level.player islinked();

        if ( _id_E025306F5374186A && scripts\engine\sp\utility::isads() )
            tag_update_enemy_in_sights();

        wait 0.05;
    }
}

tag_update_enemy_in_sights()
{
    _id_DCB5FD0CC07E40A2 = tagging_entity_list();
    _id_C2F4EC03C9EC610E = self geteye();
    _id_87EA8542A557D603 = anglestoforward( self getplayerangles() );
    _id_BFFAC07B1B82AF17 = undefined;
    _id_5C5BC7719E4B1C11 = max( 0.01, getdvarfloat( "dvar_F05C8F3735320C7C" ) );
    _id_2CEBD0C753447713 = cos( getdvarfloat( "dvar_804A2291B4A8B92E" ) );
    _id_761C3A588103E918 = [ 0.0, 0.5, 1.0 ];

    if ( scripts\stealth\utility::tagging_shield() )
    {
        _id_5C5BC7719E4B1C11 = level.player.tagging["tagging_fade_max"];
        _id_2CEBD0C753447713 = cos( getdvarfloat( "dvar_DF1DC712C4A91588" ) );
    }

    trace = scripts\engine\trace::_bullet_trace( _id_C2F4EC03C9EC610E, _id_C2F4EC03C9EC610E + _id_87EA8542A557D603 * 32000, 1, self );
    _id_BFFAC07B1B82AF17 = trace["entity"];

    foreach ( entity in _id_DCB5FD0CC07E40A2 )
    {
        if ( !isdefined( entity ) )
            continue;

        if ( issentient( entity ) && !isalive( entity ) )
            continue;

        if ( isdefined( entity.tagged ) && isdefined( entity.tagged[self getentitynumber()] ) )
            continue;

        if ( !getdvarint( "dvar_D7FB76123EDD5B2D" ) && isdefined( entity.vehicle_ride ) && entity.vehicle_ride.veh_speed > 0 )
            continue;

        _id_9494C6C93E7D2D40 = isdefined( _id_BFFAC07B1B82AF17 ) && _id_BFFAC07B1B82AF17 == entity;

        if ( !_id_9494C6C93E7D2D40 )
        {
            _id_A2825DE7E3791A80 = entity gettagorigin( "tag_origin" );

            if ( isai( entity ) )
                _id_A2825DE7E3791A80 = entity geteye();

            dist = distance( _id_A2825DE7E3791A80, _id_C2F4EC03C9EC610E );

            if ( dist <= _id_5C5BC7719E4B1C11 )
            {
                _id_F290DE2119E68C76 = min( 1.0, _id_2CEBD0C753447713 + ( 1.0 - _id_2CEBD0C753447713 ) * ( dist / _id_5C5BC7719E4B1C11 ) );

                foreach ( _id_DAC2FE2E7CCCDA53 in _id_761C3A588103E918 )
                {
                    _id_208B20B100E6C745 = vectorlerp( entity.origin, _id_A2825DE7E3791A80, _id_DAC2FE2E7CCCDA53 );
                    _id_3777ECE6A73EADA5 = _id_208B20B100E6C745 - _id_C2F4EC03C9EC610E;
                    dir = vectornormalize( _id_3777ECE6A73EADA5 );
                    dot = vectordot( dir, _id_87EA8542A557D603 );

                    if ( dot > _id_F290DE2119E68C76 )
                    {
                        if ( enemy_sight_trace_passed( entity ) )
                        {
                            _id_9494C6C93E7D2D40 = 1;
                            break;
                        }
                    }
                }
            }
        }

        if ( _id_9494C6C93E7D2D40 )
        {
            entity tag_trace_update( "tracking", self, 1 );
            continue;
        }

        entity tag_trace_update( "none", self, 0 );
    }
}

enemy_sight_trace_request()
{
    if ( isdefined( self.tagging_sight_traced_queued ) )
        return;

    if ( !isdefined( self.tagging_sight_trace_passed ) )
        self.tagging_sight_trace_passed = 0;

    if ( !isdefined( level.tagging_sight_trace_queue ) )
    {
        level.tagging_sight_trace_queue = [];
        level thread enemy_sight_trace_process();
    }

    level.tagging_sight_trace_queue = scripts\engine\utility::array_add( level.tagging_sight_trace_queue, self );
    self.tagging_sight_traced_queued = 1;
}

enemy_sight_trace_process()
{
    self notify( "enemy_sight_trace_process" );
    self endon( "enemy_sight_trace_process" );
    _id_098CFCDBEE7100D1 = 3;

    for (;;)
    {
        level.tagging_sight_trace_queue = scripts\engine\utility::array_removeundefined( level.tagging_sight_trace_queue );

        for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < min( _id_098CFCDBEE7100D1, level.tagging_sight_trace_queue.size ); _id_AC0E594AC96AA3A8++ )
        {
            enemy = level.tagging_sight_trace_queue[0];
            level.tagging_sight_trace_queue = scripts\engine\utility::array_remove( level.tagging_sight_trace_queue, enemy );
            enemy.tagging_sight_trace_passed = enemy_sight_trace( enemy );
            enemy.tagging_sight_traced_queued = undefined;
        }

        wait 0.05;
    }
}

enemy_sight_trace_passed( enemy )
{
    enemy enemy_sight_trace_request();
    return enemy.tagging_sight_trace_passed;
}

enemy_sight_trace( enemy )
{
    result = 0;
    _id_52241BCC3A205EF4 = level.player geteye();

    if ( !result && enemy scripts\engine\utility::hastag( enemy.model, "j_head" ) )
    {
        if ( sighttracepassed( _id_52241BCC3A205EF4, enemy gettagorigin( "j_head" ), 0, enemy.sight_ignore, enemy, 0 ) )
            result = 1;
    }

    if ( !result && enemy scripts\engine\utility::hastag( enemy.model, "j_spinelower" ) )
    {
        if ( sighttracepassed( _id_52241BCC3A205EF4, enemy gettagorigin( "j_spinelower" ), 0, enemy.sight_ignore, enemy, 0 ) )
            result = 1;
    }

    if ( !result && enemy scripts\engine\utility::hastag( enemy.model, "tag_attach" ) )
    {
        if ( sighttracepassed( _id_52241BCC3A205EF4, enemy gettagorigin( "tag_attach" ), 0, enemy.sight_ignore, enemy, 0 ) )
            result = 1;
    }

    if ( !result && sighttracepassed( _id_52241BCC3A205EF4, enemy.origin, 0, enemy.sight_ignore, enemy, 0 ) )
        result = 1;

    return result;
}

tag_trace_update( _id_1B84BE526A9C06F2, player, _id_CC6F6A269EF25DCA )
{
    _id_64F88D0441939203 = gettime();

    if ( !isdefined( _id_CC6F6A269EF25DCA ) )
        _id_CC6F6A269EF25DCA = 0;

    _id_7A183572664C48B8 = getdvarint( "dvar_0A51875D7D6ABF72" );
    _id_321A8156113CFDEA = getdvarint( "dvar_AF0E1BDDFB8D06F7" );
    _id_A39F3DC28ACD7EDC = getdvarint( "dvar_744C07D95523175F" );
    _id_93ECB4F01FF773FF = 0;

    if ( !player.tagging["marking_enabled"] )
        _id_1B84BE526A9C06F2 = "range";

    switch ( _id_1B84BE526A9C06F2 )
    {
        case "view":
            _id_93ECB4F01FF773FF = 1;
            self.tag_trace_state = 0;
            self.tag_trace_track = undefined;
            break;
        case "range":
            self.tag_trace_state = 0;
            self.tag_trace_track = undefined;
            break;
        case "tracking_slow":
            _id_7A183572664C48B8 = getdvarint( "dvar_2C74E15F8D4B6C58" );
            _id_321A8156113CFDEA = getdvarint( "dvar_0F3A9396CA64643D" );
            _id_A39F3DC28ACD7EDC = getdvarint( "dvar_3FD7F3A2C9CCFDA1" );
        case "tracking":
            if ( !isdefined( self.tag_trace_track ) )
            {
                if ( ( gettime() - player.tagging["last_tag_start"] ) / 1000 <= 0.25 )
                    return;

                self.tag_trace_track = _id_64F88D0441939203;
                player.tagging["last_tag_start"] = _id_64F88D0441939203;
            }

            break;
        case "obstructed":
        case "none":
        default:
            tag_outline_entity( 0 );
            self.tag_trace_track = undefined;
            return;
    }

    _id_F4FA69353BA530AE = _id_A39F3DC28ACD7EDC + _id_321A8156113CFDEA;
    _id_B6024BB6422C13B9 = 0;

    if ( isdefined( self.tag_trace_track ) )
        _id_B6024BB6422C13B9 = _id_64F88D0441939203 - self.tag_trace_track;

    if ( _id_B6024BB6422C13B9 >= _id_F4FA69353BA530AE )
    {
        if ( _id_CC6F6A269EF25DCA )
            player.tagged_ads = 1;

        tag_entity( player );
    }
}

tag_outline_entity( outline, _id_B5ECD32577A250AD )
{
    if ( !isdefined( self ) )
        return;

    if ( outline )
    {
        tagged_status_show( _id_B5ECD32577A250AD );
        thread tagged_entity_death_cleanup();
        thread tagged_entity_update();
    }
    else
    {
        tagged_status_hide();
        self notify( "tagged_entity_update" );
    }
}

tagged_entity_update()
{
    self endon( "death" );
    self notify( "tagged_entity_update" );
    self endon( "tagged_entity_update" );

    for (;;)
    {
        if ( !getdvarint( "dvar_D7FB76123EDD5B2D" ) && isdefined( self.vehicle_ride ) && self.vehicle_ride.veh_speed > 0 )
        {
            tag_outline_entity( 0 );
            self notify( "tagged_entity_death_cleanup" );
            self.tagged = undefined;
            return;
        }

        if ( !isdefined( self.tagged_flickered ) )
        {
            if ( !isdefined( self.tagged_time ) )
                self.tagged_time = gettime();

            _id_6B554CCF6D238865 = int( ( gettime() - self.tagged_time ) / 100 );

            if ( _id_6B554CCF6D238865 % 2 )
                tagged_status_hide();
            else
                tagged_status_show();

            if ( _id_6B554CCF6D238865 > 3 )
            {
                tagged_status_show();
                self.tagged_flickered = 1;
            }
        }

        if ( isdefined( self.shieldhudoutline ) )
            thread tagged_wait_shield_off();

        wait 0.05;
    }
}

tagged_wait_shield_off()
{
    self notify( "tagged_wait_shield_off" );
    self endon( "tagged_wait_shield_off" );
    self endon( "death" );
    self waittill( "hudoutline_off" );
    tagged_status_show();
}

tagged_hudoutline()
{
    _id_9C3219AB2E3B0D50["allies"] = "outlinefill_nodepth_cyan";
    _id_9C3219AB2E3B0D50["axis"] = "outlinefill_nodepth_red";
    _id_9C3219AB2E3B0D50["team3"] = "outlinefill_nodepth_white";
    _id_9C3219AB2E3B0D50["dead"] = "outlinefill_nodepth_white";
    team = "dead";

    if ( isdefined( self.team ) )
        team = self.team;

    return _id_9C3219AB2E3B0D50[team];
}

tagged_status_show( _id_B5ECD32577A250AD )
{
    if ( !isdefined( self ) )
        return;

    tagged_status_hide();
    hudoutlineasset = tagged_hudoutline();
    scripts\engine\sp\utility::hudoutline_enable_new( hudoutlineasset, "tagging" );
    thread tagged_status_update();
    self.tagging_visible = 1;
}

_create_tagging_highlight( color )
{
    if ( isdefined( self.highlight_ent ) )
        return;

    if ( isdefined( self.model ) && scripts\engine\utility::hastag( self.model, "j_mainroot" ) )
    {
        self.highlight_ent = scripts\engine\utility::spawn_script_origin( self gettagorigin( "tag_eye" ) + ( 0, 0, 20 ), self.angles );
        self.highlight_ent linkto( self, "tag_origin" );
        range = 3000;
        self.highlight_ent makeusable();
        self.highlight_ent setcursorhint( "hint_button" );
        self.highlight_ent sethintdisplayrange( range );
        self.highlight_ent setuserange( 1 );
        self.highlight_ent sethintonobstruction( "show" );
        thread _remove_tagging_highlight_on_death();
    }
}

tagging_highlight_dist_fade( range )
{
    self endon( "death" );
    _id_3426AF371F511F64 = squared( range / 2 );

    for (;;)
    {
        while ( distance2dsquared( self.origin, level.player.origin ) > _id_3426AF371F511F64 )
            wait 0.1;

        self.highlight_ent sethintdisplayrange( 0 );

        while ( distance2dsquared( self.origin, level.player.origin ) < _id_3426AF371F511F64 )
            wait 0.1;

        self.highlight_ent sethintdisplayrange( range );
    }
}

_remove_tagging_highlight_on_death()
{
    highlight_ent = self.highlight_ent;
    scripts\engine\utility::waittill_any( "death", "tagging_remove_highlight" );

    if ( isdefined( highlight_ent ) )
    {
        if ( _func_C0B60941B91A2B44( highlight_ent ) )
            _func_9FE98BC24A686E91( highlight_ent );

        highlight_ent delete();
    }

    if ( isdefined( self ) )
        self.highlight_ent = undefined;
}

_end_tagging_highlighting()
{
    level notify( "end_tagging_highlighting" );

    foreach ( ai in getaiarray( "axis", "allies" ) )
        ai notify( "tagging_remove_highlight" );
}

tagged_status_hide()
{
    if ( !isdefined( self ) )
        return;

    self notify( "tagged_status_update" );
    scripts\engine\sp\utility::hudoutline_disable( "tagging" );
    self.tagging_visible = undefined;
}

tagged_status_update()
{
    self notify( "tagged_status_update" );
    self endon( "tagged_status_update" );
    self endon( "death" );

    while ( isdefined( self ) && ( !issentient( self ) || isalive( self ) ) )
    {
        maxdist = level.player.tagging["tagging_fade_max"];
        _id_CDC5DD6C28C9709D = maxdist * maxdist;
        distsq = lengthsquared( level.player.origin - self.origin );

        if ( distsq > _id_CDC5DD6C28C9709D )
            tagged_status_hide();
        else
            tagged_status_show();

        wait 0.05;
    }
}

tagged_entity_death_cleanup()
{
    if ( isdefined( self.tagged_entity_death_cleanup ) )
        return;

    self notify( "tagged_entity_death_cleanup" );
    self endon( "tagged_entity_death_cleanup" );
    self.tagged_entity_death_cleanup = 1;
    self waittill( "death", _id_6181DE250AFA5BB6, _id_9812B2551104F651 );

    if ( isplayer( _id_6181DE250AFA5BB6 ) )
    {
        wait 0.1;

        if ( isdefined( self ) && distancesquared( self.origin, level.player.origin ) > 90000 )
        {
            start = gettime();
            state = 1;

            while ( isdefined( self ) && gettime() - start < 1000 )
            {
                if ( state == 0 && randomint( 100 ) < 30 )
                {
                    tag_outline_entity( 1 );
                    state = 1;
                }
                else if ( state == 1 )
                {
                    tag_outline_entity( 0 );
                    state = 0;
                }

                wait 0.05;
            }
        }
    }

    if ( isdefined( self ) )
        tag_outline_entity( 0 );

    self.tagged_entity_death_cleanup = undefined;
}
