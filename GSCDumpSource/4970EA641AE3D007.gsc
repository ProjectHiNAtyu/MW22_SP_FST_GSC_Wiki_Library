// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_BBD25202175D7F6F( player, ally )
{
    return isdefined( player ) && isdefined( ally ) && isalliedsentient( player, ally ) && ( istrue( ally.jailed ) || istrue( ally.gulagarena ) );
}

_id_78D176299D2E0714( player, _id_E8F714BAB38B613C )
{
    ascenders = getentitylessscriptablearray( undefined, undefined, player.origin, _id_E8F714BAB38B613C, "ascender" );
    return ascenders.size > 0;
}

_id_331E465C203522E0( _id_6E8B41E0A5648F49 )
{
    self endon( "disconnect" );
    _id_2695A20D4011076D::_id_64AEDA8C8A4179C5( 1 );
    _id_4E90F9DA20872429::_id_9E0151BAA208FE9E( "gasMiniMapOpenTip", 5 );
    self._id_6AB0FD4589F5AEA5 = 0;

    for (;;)
    {
        if ( isdefined( self ) )
        {
            self waittill( "luinotifyserver", message, value );

            if ( isdefined( message ) && message == "ftue_minimap_clicked" )
            {
                [[ _id_6E8B41E0A5648F49 ]]( self );
                break;
            }
        }

        waitframe();
    }

    _id_2695A20D4011076D::_id_64AEDA8C8A4179C5( 0 );
}

_id_152B922C52A79E9E( player )
{
    player._id_6AB0FD4589F5AEA5 = 1;
    _id_4E90F9DA20872429::_id_7FD621B8BA80E652();
}

_id_506621F96F8313A5( player )
{
    if ( !player._id_64A66C71D00E6F50 )
        player thread _id_C6C53EA9225F6FC2();
}

_id_C6C53EA9225F6FC2()
{
    self endon( "disconnect" );
    _id_4E90F9DA20872429::_id_9E0151BAA208FE9E( "gasMiniMapCloseTip", ::_id_F3FDF43101042F63 );

    while ( !self._id_64A66C71D00E6F50 )
        waitframe();

    _id_4E90F9DA20872429::_id_7FD621B8BA80E652();
    return;
}

_id_F3FDF43101042F63( _id_4B2538E850DF3357 )
{
    if ( isdefined( _id_4B2538E850DF3357 ) && _id_4B2538E850DF3357 == "gasMiniMapCloseTip" )
        self._id_64A66C71D00E6F50 = 1;
}

_id_18FCD72DFEA6CAC1( player )
{
    if ( !player._id_CA031FD3734A1C62 )
        player thread _id_52974897AD9887A8();
}

_id_52974897AD9887A8()
{
    self endon( "disconnect" );
    _id_4E90F9DA20872429::_id_9E0151BAA208FE9E( "openParachuteTip", ::_id_5C6C946F52BE9A50 );

    while ( !self._id_CA031FD3734A1C62 )
        waitframe();

    _id_4E90F9DA20872429::_id_7FD621B8BA80E652();
    return;
}

_id_5C6C946F52BE9A50( _id_4B2538E850DF3357 )
{
    self._id_CA031FD3734A1C62 = 1;
}

_id_914E9D5E71CC6EFB()
{
    self endon( "disconnect" );

    while ( !self _meth_3C6BB30AE7106B7A() )
        waitframe();

    self._id_CA031FD3734A1C62 = 1;
}

_id_8584A8A9B5FA0463()
{
    return _id_58F20490049AF6AC::_id_A465E3C1371D7DAB( self.origin );
}

_id_92A5F74F5ACC64D9( callback )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self waittill( "last_stand_start" );
    self [[ callback ]]();
}

_id_AF7551BF62570371( callback )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    _id_3C16F726F502E7D8 = undefined;

    while ( _id_3C16F726F502E7D8 == undefined )
    {
        foreach ( player in level.players )
        {
            if ( isalliedsentient( self, player ) && !scripts\mp\utility\player::isreallyalive( player ) )
            {
                _id_3C16F726F502E7D8 = player;
                break;
            }
        }

        waitframe();
    }

    [[ callback ]]( _id_3C16F726F502E7D8 );
}

_id_BA481C5CD3C4F5B4( _id_8CDF4FF04B7775EC, _id_DAD9B8459425C9D8 )
{
    thread _id_C6CC9D3A7ADFDA0F( _id_8CDF4FF04B7775EC, _id_DAD9B8459425C9D8 );
}

_id_C6CC9D3A7ADFDA0F( _id_8CDF4FF04B7775EC, _id_DAD9B8459425C9D8 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );

    if ( isdefined( _id_DAD9B8459425C9D8 ) )
        self [[ _id_DAD9B8459425C9D8 ]]();

    while ( !self isskydiving() )
        waitframe();

    self [[ _id_8CDF4FF04B7775EC ]]();
    return;
}

_id_8C217F41A2B69BFE( _id_A7BC06075641900E, _id_C4BCD19C674B2B94, _id_8CDF4FF04B7775EC, _id_DAD9B8459425C9D8 )
{
    thread _id_632855E1721D2685( _id_A7BC06075641900E, _id_C4BCD19C674B2B94, _id_8CDF4FF04B7775EC, _id_DAD9B8459425C9D8 );
}

_id_632855E1721D2685( _id_A7BC06075641900E, _id_C4BCD19C674B2B94, _id_8CDF4FF04B7775EC, _id_DAD9B8459425C9D8 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    _id_D49294F78A5BD8B0 = 0;
    init_pos = self.origin;
    _id_DB1111B1B4C72B10 = self getplayerangles();

    while ( !self _meth_3C6BB30AE7106B7A() )
        waitframe();

    if ( isdefined( _id_DAD9B8459425C9D8 ) )
        self [[ _id_DAD9B8459425C9D8 ]]();

    while ( self isparachuting() )
    {
        _id_E4BF20377D250593 = distance( ( self.origin[0], self.origin[1], 0 ), ( init_pos[0], init_pos[1], 0 ) );
        _id_98BF6D2E08A18443 = distance( self getplayerangles(), _id_DB1111B1B4C72B10 );

        if ( _id_98BF6D2E08A18443 >= _id_C4BCD19C674B2B94 && _id_E4BF20377D250593 * 10 > _id_A7BC06075641900E )
        {
            _id_D49294F78A5BD8B0 = 1;
            break;
        }

        waitframe();
    }

    self [[ _id_8CDF4FF04B7775EC ]]( _id_D49294F78A5BD8B0 );
    return;
}

_id_6C19FA9B1A676FE5( _id_8CDF4FF04B7775EC, _id_DAD9B8459425C9D8 )
{
    thread _id_2AB50AE603BC51CC( _id_8CDF4FF04B7775EC, _id_DAD9B8459425C9D8 );
}

_id_2AB50AE603BC51CC( _id_8CDF4FF04B7775EC, _id_DAD9B8459425C9D8 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );

    while ( !self _meth_3C6BB30AE7106B7A() )
        waitframe();

    if ( isdefined( _id_DAD9B8459425C9D8 ) )
        self [[ _id_DAD9B8459425C9D8 ]]();

    while ( self _meth_3C6BB30AE7106B7A() )
        waitframe();

    self [[ _id_8CDF4FF04B7775EC ]]();
    return;
}
