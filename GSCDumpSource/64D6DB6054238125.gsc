// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

attachmentgroup( _id_659F734FC2A248FF )
{
    return tablelookup( "mp/attachmenttable.csv", 4, _id_659F734FC2A248FF, 2 );
}

init()
{
    level.scavenger_altmode = 1;
    level.scavenger_secondary = 1;
    level.maxperplayerexplosives = max( scripts\mp\utility\dvars::getintproperty( "dvar_B62EAC49CCA8C84B", 2 ), 1 );
    level.riotshieldxpbullets = scripts\mp\utility\dvars::getintproperty( "dvar_ECD162FFA953CAC1", 15 );
    createthreatbiasgroup( "DogsDontAttack" );
    createthreatbiasgroup( "Dogs" );
    setignoremegroup( "DogsDontAttack", "Dogs" );

    switch ( scripts\mp\utility\dvars::getintproperty( "dvar_EFE12003DDFAA46E", 0 ) )
    {
        case 1:
            level.scavenger_altmode = 0;
            break;
        case 2:
            level.scavenger_secondary = 0;
            break;
        case 3:
            level.scavenger_altmode = 0;
            level.scavenger_secondary = 0;
            break;
    }

    _id_2669878CF5A1B6BC::buildweaponmap();
    _id_2669878CF5A1B6BC::buildattachmentmaps();
    level._effect["emp_stun"] = loadfx( "vfx/core/mp/equipment/vfx_emp_grenade" );
    level._effect["equipment_explode"] = loadfx( "vfx/iw7/_requests/mp/vfx_generic_equipment_exp.vfx" );
    level._effect["equipment_smoke"] = loadfx( "vfx/core/mp/killstreaks/vfx_sg_damage_blacksmoke" );
    level._effect["equipment_sparks"] = loadfx( "vfx/core/mp/killstreaks/vfx_sentry_gun_explosion" );
    level._effect["glsmoke"] = loadfx( "vfx/iw8_mp/equipment/smoke_grenade/vfx_smoke_gren_ch" );
    level._effect["xmike109ThermiteBounce"] = loadfx( "vfx/iw8_mp/equipment/vfx_xmike109_thermite_bounce" );
    scripts\mp\utility\entity::placeequipmentfailedinit();
    level.weaponconfigs = [];

    if ( !isdefined( level.weapondropfunction ) )
        level.weapondropfunction = ::dropweaponfordeath;

    level._id_20F39C8ACB381AD5["pi"] = "weap_drop_pistol";
    level._id_20F39C8ACB381AD5["sm"] = "weap_drop_small";
    level._id_20F39C8ACB381AD5["ar"] = "weap_drop_med";
    level._id_20F39C8ACB381AD5["sh"] = "weap_drop_med";
    level._id_20F39C8ACB381AD5["sn"] = "weap_drop_large";
    level._id_20F39C8ACB381AD5["lm"] = "weap_drop_xlarge";
    level._id_20F39C8ACB381AD5["la"] = "weap_drop_launcher";
    _id_07522D80D673F6F7 = 25;
    level.sticky_minedetectiondot = cos( _id_07522D80D673F6F7 );
    level.sticky_minedetectionmindist = 15;
    level.sticky_minedetectiongraceperiod = 0.35;
    level.sticky_minedetonateradius = 256;
    level.minedetectiongraceperiod = 0.3;
    level.primary_weapon_array = [];
    level.side_arm_array = [];
    level.grenade_array = [];
    level.missile_array = [];
    level.inventory_array = [];
    level.mines = [];
    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawned );
    level thread onplayerconnect();
    scripts\mp\utility\outline::initoutlineoccluders();
    init_function_refs();
    level.onweapondropcreated = scripts\cp_mp\utility\callback_group::callback_create();
    level.onweapondroppickedup = scripts\cp_mp\utility\callback_group::callback_create();

    if ( getdvarint( "dvar_EB1E94069D5150F2" ) == 1 )
        level thread savegraverobberammo();
}

savegraverobberammo()
{
    for (;;)
    {
        if ( isdefined( level.players ) )
        {
            foreach ( player in level.players )
            {
                if ( !isdefined( player ) )
                    continue;

                if ( player scripts\mp\utility\perk::_hasperk( "specialty_scrap_weapons" ) )
                {
                    weapon = player getcurrentweapon();
                    player getcurrentweapon();

                    if ( !isdefined( weapon ) )
                        continue;

                    if ( !isdefined( player.graverobberammo ) )
                    {
                        player.graverobberammo = spawnstruct();
                        player.graverobberammo = spawnstruct();
                        player.graverobberammo = spawnstruct();
                    }

                    if ( isdefined( player.graverobberammo.currentweapon ) && player.graverobberammo.currentweapon.weapon.basename != "none" && player.graverobberammo.currentweapon.weapon != weapon )
                    {
                        player.graverobberammo.lastweapon = player.graverobberammo.currentweapon;
                        player.graverobberammo.currentweapon = spawnstruct();
                    }

                    player.graverobberammo.currentweapon = spawnstruct();
                    player.graverobberammo.currentweapon.weapon = weapon;
                    player.graverobberammo.currentweapon.rightclip = player getweaponammoclip( weapon, "right" );
                    player.graverobberammo.currentweapon.leftclip = player getweaponammoclip( weapon, "left" );
                    player.graverobberammo.currentweapon.stock = player getweaponammostock( weapon );
                    continue;
                }

                player.graverobberammo = undefined;
            }
        }

        waitframe();
    }
}

enablevisibilitycullingforclient( _id_2C6CA80E296FED3A )
{
    self hudoutlinedisableforclient( _id_2C6CA80E296FED3A );
}

onplayerconnect()
{
    for (;;)
    {
        level waittill( "connected", player );
        player.hits = 0;
        scripts\mp\gamelogic::sethasdonecombat( player, 0 );
        player thread watchmissileusage();
    }
}

watchchangeweapon()
{
    self endon( "death_or_disconnect" );
    self endon( "joined_spectators" );
    self endon( "faux_spawn" );
    level endon( "game_ended" );

    for (;;)
    {
        objweapon = self getcurrentweapon();

        if ( isdefined( objweapon ) )
            dochangeweapon( objweapon );

        self waittill( "weapon_change" );
    }
}

dochangeweapon( objweapon )
{
    logchangeweapon( objweapon );
    updateweaponspeed( objweapon );
    _id_C49A0D832ACE8E5E();
    updatelastweaponobj( objweapon );
    savealtstates();
    updatelauncherusage();
    updateweaponperks();
    updatesniperglint( objweapon );
    _id_0F377C26C6B6F729( objweapon );
    _id_8A02236BFEED8A54( objweapon );
    scripts\mp\perks\perkfunctions::updatedefaultflinchreduction();
    scripts\mp\events::updateweaponchangetime();
    scripts\mp\class::riotshieldonweaponchange( objweapon );
    scripts\mp\perks\perkfunctions::updateweaponkick();
    thread scripts\cp_mp\gestures::tryreenablescriptablevfx();
}

_id_8A02236BFEED8A54( objweapon )
{
    if ( istrue( level.disablemount ) )
        return;

    if ( _id_DD461671D4007C1F( objweapon ) )
    {
        _id_3B64EB40368C1450::set( "scriptedMountDisable", "mount_top", 0 );
        _id_3B64EB40368C1450::set( "scriptedMountDisable", "mount_side", 0 );
        thread _id_5845DD5192F930B7();
    }
}

_id_5845DD5192F930B7()
{
    self endon( "disconnect" );
    scripts\engine\utility::waittill_any_2( "death", "weapon_change" );
    _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "scriptedMountDisable" );
}

_id_0F377C26C6B6F729( objweapon )
{
    _id_AB501F397D3CD312 = _id_2669878CF5A1B6BC::getweaponrootname( objweapon );

    if ( _id_AB501F397D3CD312 == "iw8_knife" && objweapon.basename == "iw8_knife_mphatchetv4" )
    {
        thread _id_48790F7021C99C88();
        thread _id_AA2B66B0C21E1B41();
    }

    return 1;
}

_id_48790F7021C99C88()
{
    self endon( "weapon_change" );
    self endon( "death_or_disconnect" );
    childthread _id_7263296FF446ACBF();

    for (;;)
    {
        self waittill( "weapon_switch_started" );

        if ( self isthrowinggrenade() )
        {
            self notify( "cancel_hatchet_VFX" );
            _id_D6E3EA36379445C3();
            self waittill( "offhand_end" );
            childthread _id_7263296FF446ACBF();
        }
    }
}

_id_7263296FF446ACBF()
{
    self endon( "cancel_hatchet_VFX" );
    self._id_CDC102791847539D = 1;
    self setscriptablepartstate( "equipFlamingHatchet", "active" );
    waittime = 0.4;
    wait( waittime );
    self setscriptablepartstate( "equipMtovFXWorld", "active", 0 );
}

_id_D6E3EA36379445C3()
{
    if ( istrue( self._id_CDC102791847539D ) )
    {
        self setscriptablepartstate( "equipFlamingHatchet", "neutral" );
        self setscriptablepartstate( "equipMtovFXWorld", "neutral" );
    }

    self._id_CDC102791847539D = undefined;
}

_id_AA2B66B0C21E1B41()
{
    self endon( "disconnect" );
    scripts\engine\utility::waittill_any_2( "death", "weapon_change" );
    _id_D6E3EA36379445C3();
}

_id_DD461671D4007C1F( objweapon )
{
    _id_AB501F397D3CD312 = _id_2669878CF5A1B6BC::getweaponrootname( objweapon );

    if ( _id_AB501F397D3CD312 == "iw8_lm_sierrax" && objweapon hasattachment( "stocksaw_sierrax" ) )
        return 1;

    return 0;
}

logchangeweapon( objweapon )
{
    if ( !istrue( self.canlogchangeweapon ) )
    {
        self.canlogchangeweapon = 1;
        return;
    }

    _id_03549C153A27C9BD = objweapon.basename;
    _id_A39E6237E3F658CA = "none";

    if ( !isdefined( _id_03549C153A27C9BD ) || _id_03549C153A27C9BD == "none" )
        return;

    if ( isdefined( self.lastweaponobj ) && objweapon == self.lastweaponobj )
        return;

    if ( self.equippedweapons.size > 1 )
    {
        _id_A39E6237E3F658CA = self.equippedweapons[1].basename;

        if ( _id_A39E6237E3F658CA == _id_03549C153A27C9BD )
            _id_A39E6237E3F658CA = self.equippedweapons[0].basename;
    }

    self setclientweaponinfo( 0, getcompleteweaponname( self.equippedweapons[0] ) );

    if ( isdefined( self.equippedweapons[1] ) )
        self setclientweaponinfo( 1, getcompleteweaponname( self.equippedweapons[1] ) );

    if ( getdvarint( "dvar_4B12BCEACCF1E3BB", 0 ) == 1 )
        self dlog_recordplayerevent( "dlog_event_weapon_change", [ "current_weapon", _id_03549C153A27C9BD, "secondary_weapon", _id_A39E6237E3F658CA ] );
}

updateweaponperks()
{
    self.prevweaponobj = doweaponperkupdate( self.prevweaponobj );
}

updatesniperglint( objweapon )
{
    if ( sniperglint_supported( objweapon ) )
        childthread sniperglint_manage();
}

_id_DAEF03172B217E78( objweapon )
{
    if ( 1 )
    {
        _id_1960B715ABE16306 = _id_B3E5F50A0D4A9C86( objweapon );
        _id_A7ADACDB4C7641C9( _id_1960B715ABE16306 );
    }
}

updatelauncherusage()
{
    weapon = self getcurrentweapon();
    _id_21C8AABCB09F7094 = isdefined( game["inLiveLobby"] );

    if ( !_id_21C8AABCB09F7094 && !scripts\mp\flags::gameflag( "prematch_done" ) && scripts\cp_mp\utility\weapon_utility::islockonlauncher( weapon ) )
        _id_3B64EB40368C1450::set( "prematch", "ads", 0 );

    _id_AB501F397D3CD312 = _id_2669878CF5A1B6BC::getweaponrootname( weapon.basename );

    switch ( _id_AB501F397D3CD312 )
    {
        default:
            break;
        case "iw9_la_gromeo":
        case "iw8_la_gromeo":
            thread scripts\mp\missilelauncher::initmissilelauncherusage();
            break;
        case "iw9_la_juliet":
        case "iw8_la_juliet":
            thread scripts\mp\javelin::javelin_reset();
            break;
        case "iw9_dm_crossbow":
        case "iw8_sn_crossbow":
            thread scripts\cp_mp\crossbow::initcrossbowusage();
            break;
        case "iw9_dm_recondartcrossbow":
            thread _id_202D9F0EA7DB3A23::initcrossbowusage();
            break;
        case "iw8_sn_xmike109":
            thread scripts\cp_mp\xmike109::initusage();
            break;
    }

    self notify( "end_launcher" );

    if ( scripts\mp\utility\perk::_hasperk( "specialty_fastreload_launchers" ) )
    {
        _id_589C33F399FE5F5D = weaponclass( weapon.basename ) == "rocketlauncher" || weapon.basename == "iw8_la_kgolf_mp";

        if ( _id_589C33F399FE5F5D && !istrue( self.fastreloadlaunchers ) )
        {
            scripts\mp\utility\perk::giveperk( "specialty_fastreload" );
            self.fastreloadlaunchers = 1;
        }
        else if ( istrue( self.fastreloadlaunchers ) )
        {
            scripts\mp\utility\perk::removeperk( "specialty_fastreload" );
            self.fastreloadlaunchers = undefined;
        }
    }

    switch ( weapon.basename )
    {
        default:
            break;
        case "iw8_la_gromeo_mp":
        case "iw9_la_gromeo_mp":
            thread scripts\mp\missilelauncher::missilelauncherusageloop();
            break;
        case "iw8_la_juliet_mp":
        case "iw9_la_juliet_mp":
            thread scripts\mp\javelin::javelinusageloop();
            break;
        case "iw8_sn_crossbow_mp":
        case "iw9_dm_crossbow_mp":
            thread scripts\cp_mp\crossbow::crossbowusageloop( weapon );
            break;
        case "iw9_dm_recondartcrossbow_mp":
            thread _id_202D9F0EA7DB3A23::crossbowusageloop( weapon );
            break;
        case "iw8_sn_xmike109_mp":
            thread scripts\cp_mp\xmike109::usageloop( weapon );
            break;
    }
}

setlastdroppableweaponobj( weaponobj )
{
    self.lastdroppableweaponobj = weaponobj;

    if ( isdefined( level.lastdroppableweaponchanged ) )
        self [[ level.lastdroppableweaponchanged ]]();
}

updatelastweaponobj( _id_82533969B4683DE4 )
{
    _id_DD9181EB18C4DB69 = _id_82533969B4683DE4 getnoaltweapon();

    if ( isnullweapon( _id_DD9181EB18C4DB69 ) )
        _id_DD9181EB18C4DB69 = _id_82533969B4683DE4;

    self.lastweaponobj = _id_82533969B4683DE4;

    if ( isnormallastweapon( _id_82533969B4683DE4 ) )
        self.lastnormalweaponobj = _id_82533969B4683DE4;

    if ( isdroppableweapon( _id_DD9181EB18C4DB69 ) )
        setlastdroppableweaponobj( _id_DD9181EB18C4DB69 );

    if ( scripts\mp\utility\weapon::iscacprimaryorsecondary( _id_82533969B4683DE4 ) )
        self.lastcacweaponobj = _id_82533969B4683DE4;
}

updateweaponspeed( _id_82533969B4683DE4 )
{
    if ( _id_82533969B4683DE4.basename == "none" )
        return;
    else if ( scripts\mp\utility\weapon::issuperweapon( _id_82533969B4683DE4.basename ) )
    {
        updatemovespeedscale();
        return;
    }
    else if ( _id_2669878CF5A1B6BC::iskillstreakweapon( _id_82533969B4683DE4.basename ) )
    {
        updatemovespeedscale();
        return;
    }
    else if ( _id_82533969B4683DE4.basename == "iw9_me_fists_mp_ls" )
    {
        updatemovespeedscale();
        return;
    }
    else if ( _id_82533969B4683DE4.inventorytype != "primary" && _id_82533969B4683DE4.inventorytype != "altmode" )
        return;

    updatemovespeedscale();
}

_id_C49A0D832ACE8E5E()
{
    if ( isdefined( self.lastweaponobj ) )
    {
        weaponname = self.lastweaponobj.basename;
        _id_33802B6339AD8B00 = getsubstr( weaponname, 0, 3 );

        if ( _id_33802B6339AD8B00 == "iw8" || _id_33802B6339AD8B00 == "s4_" )
            weaponname = _id_2669878CF5A1B6BC::getweaponrootname( self.lastweaponobj );

        currenttime = _id_4A6760982B403BAD::_id_1B15450E092933CF( gettime() ) / 1000;

        if ( !isdefined( self._id_9388AE85E69C7A67 ) )
            self._id_9388AE85E69C7A67 = 0;

        totaltime = currenttime - self._id_9388AE85E69C7A67;
        _id_7E2C53B0BCF117D9 = spawnstruct();
        _id_7E2C53B0BCF117D9.weaponname = weaponname;
        _id_7E2C53B0BCF117D9.fullweaponname = getcompleteweaponname( self.lastweaponobj );
        _id_7E2C53B0BCF117D9._id_629757F5C9E770D8 = "timeUsed";
        _id_7E2C53B0BCF117D9._id_A1D4E7D5EF9DA660 = totaltime;
        _id_7E2C53B0BCF117D9.variantid = getweaponvariantindex( self.lastweaponobj );
        _id_4A6760982B403BAD::_id_80820D6D364C1836( "callback_update_weapon_stats", _id_7E2C53B0BCF117D9 );
        self._id_9388AE85E69C7A67 = currenttime;
    }
}

onplayerspawned()
{
    self.hits = 0;
    scripts\mp\gamelogic::sethasdonecombat( self, 0 );

    if ( !isdefined( self.trackingweapon ) )
    {
        self.trackingweapon = nullweapon();
        self.trackingweaponshots = 0;
        self.trackingweaponkills = 0;
        self.trackingweaponhits = 0;
        self.trackingweaponheadshots = 0;
        self.trackingweapondeaths = 0;
    }

    if ( !isdefined( self.plantedlethalequip ) )
        self.plantedlethalequip = [];

    if ( !isdefined( self.plantedtacticalequip ) )
        self.plantedtacticalequip = [];

    if ( !isdefined( self.plantedsuperequip ) )
        self.plantedsuperequip = [];

    if ( !isdefined( self.plantedhackedequip ) )
        self.plantedhackedequip = [];

    self.prevweaponobj = undefined;
    thread watchchangeweapon();
    thread watchweaponusage();
    thread watchgrenadeusage();
    thread watchequipmentonspawn();

    if ( scripts\mp\utility\game::onlinestatsenabled() )
        thread watchfornearmisswhizby();

    if ( !scripts\mp\utility\game::runleanthreadmode() )
        thread watchdropweapons();

    self.lasthittime = [];
    self.droppeddeathweapon = undefined;
    self.tookweaponfrom = [];
    self.lastnormalweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, nullweapon() );
    self.lastweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, nullweapon() );
    self.lastcacweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ) && scripts\mp\utility\weapon::iscacprimaryorsecondary( self.spawnweaponobj ), self.spawnweaponobj, nullweapon() );
    setlastdroppableweaponobj( scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, nullweapon() ) );
    scripts\mp\gamescore::initassisttrackers();
    _id_B029006BEFA9CF56 = getweaponcamoname( self getcurrentweapon() );
    thread runcamoscripts( _id_B029006BEFA9CF56 );
}

savealtstates()
{
    self.pers["altStates"] = [];
    weapons = self.primaryinventory;

    foreach ( objweapon in weapons )
    {
        if ( !isundefinedweapon( self.primaryweaponobj ) && objweapon == self.primaryweaponobj || !isundefinedweapon( self.secondaryweaponobj ) && objweapon == self.secondaryweaponobj )
        {
            if ( shouldweaponsavealtstate( objweapon ) && self isalternatemode( objweapon, 1 ) )
            {
                _id_366B0ECC2F28AEAD = scripts\mp\utility\weapon::getcompleteweaponnamenoalt( objweapon );
                self.pers["altStates"][_id_366B0ECC2F28AEAD] = 1;
            }
        }
    }
}

savetogglescopestates()
{
    self.pers["toggleScopeStates"] = [];
    weapons = self.primaryinventory;

    foreach ( objweapon in weapons )
    {
        if ( !isundefinedweapon( self.primaryweaponobj ) && objweapon == self.primaryweaponobj || !isundefinedweapon( self.secondaryweaponobj ) && objweapon == self.secondaryweaponobj )
        {
            if ( isdefined( objweapon.scope ) && istogglescope( objweapon, objweapon.scope ) && !_id_C4ACD7ABA0C828DB( objweapon.backpiece ) )
            {
                _id_366B0ECC2F28AEAD = scripts\mp\utility\weapon::getcompleteweaponnamenoalt( objweapon );
                self.pers["toggleScopeStates"][_id_366B0ECC2F28AEAD] = self gethybridscopestate( objweapon );
            }
        }
    }
}

updatetogglescopestate( objweapon )
{
    _id_366B0ECC2F28AEAD = scripts\mp\utility\weapon::getcompleteweaponnamenoalt( objweapon );

    if ( isdefined( self.pers["toggleScopeStates"] ) && isdefined( self.pers["toggleScopeStates"][_id_366B0ECC2F28AEAD] ) )
        self sethybridscopestate( objweapon, self.pers["toggleScopeStates"][_id_366B0ECC2F28AEAD] );
    else if ( _id_DAB7BC436F0B0BDE( objweapon ) )
        self sethybridscopestate( objweapon, 1 );
}

_id_DAB7BC436F0B0BDE( objweapon )
{
    if ( isdefined( objweapon.scope ) && ( objweapon.scope == "hybrid03" || objweapon.scope == "hybridtherm01" || objweapon.scope == "hybridrange01" ) )
        return 1;

    return 0;
}

updatesavedaltstate( objweapon )
{
    if ( isdefined( self.pers["altStates"] ) && istrue( objweapon.hasalternate ) )
    {
        _id_366B0ECC2F28AEAD = scripts\mp\utility\weapon::getcompleteweaponnamenoalt( objweapon );

        if ( isdefined( self.pers["altStates"][_id_366B0ECC2F28AEAD] ) && self.pers["altStates"][_id_366B0ECC2F28AEAD] )
            objweapon = objweapon getaltweapon();
    }

    return objweapon;
}

istogglescope( weapon, attachment )
{
    _id_1439F86640D42E34 = _func_7C612AC92BA98DCB( weapon, attachment );
    return _id_1439F86640D42E34 == "hybrid";
}

_id_C4ACD7ABA0C828DB( _id_ACD3280C3E566807 )
{
    return isdefined( _id_ACD3280C3E566807 ) && _id_ACD3280C3E566807 == "stocksaw_sierrax";
}

shouldweaponsavealtstate( objweapon )
{
    if ( istrue( objweapon.hasalternate ) )
    {
        if ( shouldattachmentsavealtstate( objweapon, objweapon.underbarrel ) )
            return 1;
    }

    return 0;
}

shouldattachmentsavealtstate( objweapon, _id_ACD3280C3E566807 )
{
    return isattachmentselectfire( objweapon, _id_ACD3280C3E566807 );
}

isattachmentselectfire( weapon, attachment )
{
    _id_1439F86640D42E34 = _func_7C612AC92BA98DCB( weapon, attachment );
    return _id_1439F86640D42E34 == "selectfire";
}

isattachmentgrenadelauncher( _id_ACD3280C3E566807 )
{
    return 0;
}

weaponperkupdate( _id_4DA99B8AAFF6E52A, prevweaponobj )
{
    if ( !isundefinedweapon( prevweaponobj ) )
    {
        _id_9586602EBC60B765 = _id_2669878CF5A1B6BC::getweaponrootname( prevweaponobj.basename );
        _id_B46BA6B5339521F1 = scripts\mp\utility\weapon::weaponperkmap( _id_9586602EBC60B765 );

        if ( isdefined( _id_B46BA6B5339521F1 ) )
            scripts\mp\utility\perk::removeperk( _id_B46BA6B5339521F1 );
    }

    if ( !isundefinedweapon( _id_4DA99B8AAFF6E52A ) )
    {
        _id_98EFD9D21DA41D1A = _id_2669878CF5A1B6BC::getweaponrootname( _id_4DA99B8AAFF6E52A.basename );
        _id_CA1CCAC233079978 = scripts\mp\utility\weapon::weaponperkmap( _id_98EFD9D21DA41D1A );

        if ( isdefined( _id_CA1CCAC233079978 ) )
            scripts\mp\utility\perk::giveperk( _id_CA1CCAC233079978 );
    }
}

weaponattachmentperkupdate( _id_4DA99B8AAFF6E52A, prevweaponobj )
{
    _id_503110DC18B08AB9 = undefined;
    _id_88C1658D6B22A174 = undefined;

    if ( !isundefinedweapon( prevweaponobj ) )
    {
        _id_88C1658D6B22A174 = getweaponattachments( prevweaponobj );

        if ( isdefined( _id_88C1658D6B22A174 ) && _id_88C1658D6B22A174.size > 0 )
        {
            foreach ( _id_4B974A0C3AE8192B in _id_88C1658D6B22A174 )
            {
                perks = _id_2669878CF5A1B6BC::attachmentperkmap( prevweaponobj, _id_4B974A0C3AE8192B );

                if ( !isdefined( perks ) )
                    continue;

                foreach ( perk in perks )
                    scripts\mp\utility\perk::removeperk( perk );
            }
        }
    }

    if ( !isundefinedweapon( _id_4DA99B8AAFF6E52A ) )
    {
        _id_503110DC18B08AB9 = getweaponattachments( _id_4DA99B8AAFF6E52A );

        if ( isdefined( _id_503110DC18B08AB9 ) && _id_503110DC18B08AB9.size > 0 )
        {
            foreach ( _id_8EC829625D9FFE8C in _id_503110DC18B08AB9 )
            {
                perks = _id_2669878CF5A1B6BC::attachmentperkmap( _id_4DA99B8AAFF6E52A, _id_8EC829625D9FFE8C );

                if ( !isdefined( perks ) )
                    continue;

                foreach ( perk in perks )
                    scripts\mp\utility\perk::giveperk( perk );
            }
        }
    }
}

doweaponperkupdate( prevweaponobj )
{
    _id_4DA99B8AAFF6E52A = self getcurrentweapon();
    weaponattachmentperkupdate( _id_4DA99B8AAFF6E52A, prevweaponobj );
    weaponperkupdate( _id_4DA99B8AAFF6E52A, prevweaponobj );
    return _id_4DA99B8AAFF6E52A;
}

watchweaponperkupdates()
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    self endon( "giveLoadout_start" );
    prevweaponobj = undefined;

    for (;;)
    {
        prevweaponobj = doweaponperkupdate( prevweaponobj );
        self waittill( "weapon_change" );
    }
}

_id_A7ADACDB4C7641C9( _id_89B8F50D9A20F2AB )
{
    if ( _id_89B8F50D9A20F2AB )
        self _meth_5762CF97C6F1A2C1( "first_person" );
    else
        self _meth_5762CF97C6F1A2C1( "third_person" );
}

sniperglint_supported( weapon )
{
    if ( isnullweapon( weapon ) || !isdefined( weapon.scope ) || weaponclass( weapon ) == "rocketlauncher" )
        return 0;

    class = weaponclass( weapon );

    if ( self isalternatemode( weapon ) && ( class == "grenade" || class == "spread" ) )
        return 0;

    return _id_CB81EB90DDC79AB7();
}

_id_CB81EB90DDC79AB7()
{
    if ( scripts\mp\utility\perk::_hasperk( "specialty_glintxsml" ) || scripts\mp\utility\perk::_hasperk( "specialty_glintsml" ) || scripts\mp\utility\perk::_hasperk( "specialty_glintmed" ) || scripts\mp\utility\perk::_hasperk( "specialty_glintlrg" ) || scripts\mp\utility\perk::_hasperk( "specialty_glintxlrg" ) )
        return 1;

    return 0;
}

_id_B3E5F50A0D4A9C86( weapon )
{
    if ( isnullweapon( weapon ) || !isdefined( weapon.scope ) )
        return 0;

    if ( issubstr( weapon.scope, "snprscope" ) || issubstr( weapon.scope, "vzscope" ) || issubstr( weapon.scope, "thermal" ) )
        return 1;

    return 0;
}

sniperglint_manage()
{
    self notify( "manageSniperGlint" );
    self endon( "manageSniperGlint" );
    self endon( "weapon_change" );
    waitframe();
    thread sniperglint_cleanup();
    self.glinton = 0;

    for (;;)
    {
        if ( self playerads() > 0.5 )
        {
            if ( !self.glinton )
                sniperglint_add();
        }
        else if ( self.glinton )
            sniperglint_remove();

        waitframe();
    }
}

sniperglint_cleanup()
{
    scripts\engine\utility::waittill_any_2( "death_or_disconnect", "weapon_change" );

    if ( isdefined( self.glinton ) && self.glinton )
    {
        sniperglint_remove();
        self.glinton = undefined;
    }
}

sniperglint_add()
{
    if ( scripts\mp\utility\perk::_hasperk( "specialty_glintxsml" ) )
        self setscriptablepartstate( "sniperGlint", "sniperGlintXsml", 0 );
    else if ( scripts\mp\utility\perk::_hasperk( "specialty_glintsml" ) )
        self setscriptablepartstate( "sniperGlint", "sniperGlintSml", 0 );
    else if ( scripts\mp\utility\perk::_hasperk( "specialty_glintmed" ) )
        self setscriptablepartstate( "sniperGlint", "sniperGlintMed", 0 );
    else if ( scripts\mp\utility\perk::_hasperk( "specialty_glintlrg" ) )
        self setscriptablepartstate( "sniperGlint", "sniperGlintLrg", 0 );
    else if ( scripts\mp\utility\perk::_hasperk( "specialty_glintxlrg" ) )
        self setscriptablepartstate( "sniperGlint", "sniperGlintXlrg", 0 );

    self.glinton = 1;
}

sniperglint_remove()
{
    if ( isdefined( self ) )
    {
        self setscriptablepartstate( "sniperGlint", "sniperGlintOff", 0 );
        self.glinton = 0;
    }
}

sniperadsblur( weapon )
{
    self endon( "weapon_change" );
    self.sniperblur = 0;

    for (;;)
    {
        if ( self playerads() > 0.65 && !self.sniperblur )
            thread sniperadsblur_execute( weapon );
        else if ( self playerads() <= 0.65 )
            sniperadsblur_remove();

        waitframe();
    }
}

sniperadsblur_execute( weapon )
{
    self notify( "sniperBlurReset" );
    self endon( "sniperBlurReset" );
    self.sniperblur = 1;
    self setblurforplayer( 25, 0.1 );
    wait 0.1;
    self setblurforplayer( 0, getsniperadsblurtime( weapon ) );
}

sniperadsblur_remove()
{
    self notify( "sniperBlurReset" );
    self setblurforplayer( 0, 0 );
    self.sniperblur = 0;
}

getsniperadsblurtime( weapon )
{
    _id_6159317EB912F3E5 = 0.3;

    switch ( weapon.basename )
    {
        case "iw8_sn_kilo98_mp":
            _id_6159317EB912F3E5 = 0.18;
            break;
        case "iw8_sn_mike14_mp":
            _id_6159317EB912F3E5 = 0.12;
            break;
        case "iw8_sn_sbeta_mp":
            _id_6159317EB912F3E5 = 0.12;
            break;
    }

    return _id_6159317EB912F3E5;
}

watchsniperboltactionkills()
{
    self endon( "death_or_disconnect" );
    thread watchsniperboltactionkills_ondeath();

    if ( !isdefined( self.pers["recoilReduceKills"] ) )
        self.pers["recoilReduceKills"] = 0;

    self setclientomnvar( "weap_sniper_display_state", self.pers["recoilReduceKills"] );

    for (;;)
    {
        self waittill( "got_a_kill", victim, sweapon, meansofdeath );
        weapon = makeweaponfromstring( sweapon );

        if ( isrecoilreducingweapon( weapon ) )
        {
            kills = self.pers["recoilReduceKills"] + 1;
            self.pers["recoilReduceKills"] = int( min( kills, 4 ) );
            self setclientomnvar( "weap_sniper_display_state", self.pers["recoilReduceKills"] );

            if ( kills <= 4 )
                stancerecoilupdate( self getstance() );
        }
    }
}

watchsniperboltactionkills_ondeath()
{
    self notify( "watchSniperBoltActionKills_onDeath" );
    self endon( "watchSniperBoltActionKills_onDeath" );
    self endon( "disconnect" );
    self waittill( "death" );
    self.pers["recoilReduceKills"] = 0;
}

isrecoilreducingweapon( weapon )
{
    return 0;
}

getrecoilreductionvalue()
{
    if ( !isdefined( self.pers["recoilReduceKills"] ) )
        self.pers["recoilReduceKills"] = 0;

    return self.pers["recoilReduceKills"] * 3;
}

ishackweapon( weapon )
{
    if ( weapon == "radar_mp" || weapon == "airstrike_mp" || weapon == "helicopter_mp" )
        return 1;

    if ( weapon == "briefcase_bomb_mp" )
        return 1;

    return 0;
}

isfistweapon( weapon )
{
    weapon = _id_2669878CF5A1B6BC::getweaponrootname( weapon );
    return weapon == "iw9_me_fists";
}

isbombplantweapon( weapon )
{
    return weapon == "briefcase_bomb_mp" || weapon == "briefcase_bomb_defuse_mp" || weapon == "briefcase_silent_mp" || weapon == "briefcase_defuse_silent_mp";
}

dropweaponfordeath( attacker, smeansofdeath, weaponoverride, damage )
{
    if ( isdefined( level.blockweapondrops ) )
        return;

    if ( isdefined( self.droppeddeathweapon ) )
        return;

    if ( isdefined( attacker ) && attacker == self || smeansofdeath == "MOD_SUICIDE" )
        return;

    objweapon = self.lastdroppableweaponobj;

    if ( isdefined( weaponoverride ) )
        objweapon = weaponoverride;

    if ( !isdefined( objweapon ) )
        return;

    if ( objweapon.basename == "none" )
        return;

    if ( !self hasweapon( objweapon ) )
        return;

    if ( isdefined( level.gamemodemaydropweapon ) && !self [[ level.gamemodemaydropweapon ]]( objweapon ) )
        return;

    objweapon = objweapon getnoaltweapon();
    _id_E44EE9F7066F4D05 = 0;
    _id_E44EFBF7066F749B = 0;
    stockammo = 0;

    if ( !scripts\cp_mp\utility\weapon_utility::isriotshield( objweapon.basename ) )
    {
        if ( !self anyammoforweaponmodes( objweapon ) )
            return;

        _id_E44EE9F7066F4D05 = self getweaponammoclip( objweapon, "right" );
        _id_E44EFBF7066F749B = self getweaponammoclip( objweapon, "left" );

        if ( !_id_E44EE9F7066F4D05 && !_id_E44EFBF7066F749B )
            return;

        stockammo = self getweaponammostock( objweapon );
        _id_CBC510A5CFA3D48D = weaponmaxammo( objweapon );

        if ( stockammo > _id_CBC510A5CFA3D48D )
            stockammo = _id_CBC510A5CFA3D48D;

        item = self dropitem( objweapon );

        if ( !isdefined( item ) )
            return;

        if ( istrue( level.clearstockondrop ) )
            stockammo = 0;

        item itemweaponsetammo( _id_E44EE9F7066F4D05, stockammo, _id_E44EFBF7066F749B );
        _id_CF4209C200F8BBF4 = scripts\mp\utility\weapon::getweapongroup( objweapon );

        if ( smeansofdeath != "MOD_EXECUTION" )
            thread scripts\cp_mp\utility\weapon_utility::dropweaponfordeathlaunch( item, _id_CF4209C200F8BBF4, damage, self.angles );
    }
    else
    {
        item = self dropitem( objweapon );

        if ( !isdefined( item ) )
            return;

        item itemweaponsetammo( 1, 1, 0 );
    }

    item sethintdisplayrange( 96 );
    item setuserange( 96 );
    self.droppeddeathweapon = 1;
    item.owner = self;
    item.targetname = "dropped_weapon";
    item.objweapon = objweapon;
    item thread watchpickup( self );
    item thread deletepickupafterawhile();
    item thread _id_AEABBB3B58E1D822( self );
}

forcedropweapon( weaponoverride )
{
    if ( isdefined( level.blockweapondrops ) )
        return 0;

    if ( isdefined( self.droppeddeathweapon ) )
        return 0;

    objweapon = self.lastdroppableweaponobj;

    if ( isdefined( weaponoverride ) )
        objweapon = weaponoverride;

    if ( !isdefined( objweapon ) )
        return 0;

    if ( objweapon.basename == "none" )
        return 0;

    if ( !self hasweapon( objweapon ) )
        return -1;

    if ( isdefined( level.gamemodemaydropweapon ) && !self [[ level.gamemodemaydropweapon ]]( objweapon ) )
        return 0;

    objweapon = objweapon getnoaltweapon();
    _id_E44EE9F7066F4D05 = 0;
    _id_E44EFBF7066F749B = 0;
    stockammo = 0;

    if ( !scripts\cp_mp\utility\weapon_utility::isriotshield( objweapon.basename ) )
    {
        if ( !self anyammoforweaponmodes( objweapon ) )
            return 0;

        _id_E44EE9F7066F4D05 = self getweaponammoclip( objweapon, "right" );
        _id_E44EFBF7066F749B = self getweaponammoclip( objweapon, "left" );

        if ( !_id_E44EE9F7066F4D05 && !_id_E44EFBF7066F749B )
            return 0;

        stockammo = self getweaponammostock( objweapon );
        _id_CBC510A5CFA3D48D = weaponmaxammo( objweapon );

        if ( stockammo > _id_CBC510A5CFA3D48D )
            stockammo = _id_CBC510A5CFA3D48D;

        item = self dropitem( objweapon );

        if ( !isdefined( item ) )
            return 0;

        if ( istrue( level.clearstockondrop ) )
            stockammo = 0;

        item itemweaponsetammo( _id_E44EE9F7066F4D05, stockammo, _id_E44EFBF7066F749B );
    }
    else
    {
        item = self dropitem( objweapon );

        if ( !isdefined( item ) )
            return 0;

        item itemweaponsetammo( 1, 1, 0 );
    }

    item sethintdisplayrange( 96 );
    item setuserange( 96 );
    item.owner = self;
    item.targetname = "dropped_weapon";
    item.objweapon = objweapon;
    item thread watchpickup( self );
    item thread deletepickupafterawhile();
    return 1;
}

detachifattached( model, _id_A666A0C4297F3F54 )
{
    _id_076651B5D03AD861 = self getattachsize();

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_076651B5D03AD861; _id_AC0E594AC96AA3A8++ )
    {
        attach = self getattachmodelname( _id_AC0E594AC96AA3A8 );

        if ( attach != model )
            continue;

        tag = self getattachtagname( _id_AC0E594AC96AA3A8 );
        self detach( model, tag );

        if ( tag != _id_A666A0C4297F3F54 )
        {
            _id_076651B5D03AD861 = self getattachsize();

            for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_076651B5D03AD861; _id_AC0E594AC96AA3A8++ )
            {
                tag = self getattachtagname( _id_AC0E594AC96AA3A8 );

                if ( tag != _id_A666A0C4297F3F54 )
                    continue;

                model = self getattachmodelname( _id_AC0E594AC96AA3A8 );
                self detach( model, tag );
                break;
            }
        }

        return 1;
    }

    return 0;
}

deletepickupafterawhile()
{
    self endon( "death" );
    wait 60;
    _id_3C4A286CB4CF549E( self );
}

_id_AEABBB3B58E1D822( player )
{
    self endon( "death" );
    player endon( "death_or_disconnect" );
    player waittill( "trigger_removed" );
    _id_3C4A286CB4CF549E( self );
}

_id_3C4A286CB4CF549E( pickup )
{
    if ( !isdefined( pickup ) )
        return;

    pickup notify( "weapon_pickup_cancelled" );
    pickup delete();
}

getitemweaponname()
{
    classname = self.classname;
    _id_C27E2A04BAB78C1F = getsubstr( classname, 7 );
    return _id_C27E2A04BAB78C1F;
}

watchpickup( _id_2CA201D5906CDBA5 )
{
    self endon( "weapon_pickup_cancelled" );
    _id_3F6103D9666B07CC = self.owner;
    weaponobj = self.objweapon;
    level.onweapondropcreated scripts\cp_mp\utility\callback_group::callback_trigger( self, _id_2CA201D5906CDBA5, weaponobj );
    _id_C27E2A04BAB78C1F = getitemweaponname();

    for (;;)
    {
        self waittill( "trigger", player, _id_76F4143215683892 );
        _id_17372FFC28DC7D78 = undefined;
        _id_70582DA4FF904336 = isdefined( level.cyberemp ) && isdefined( level.cyberemp.carrier ) && level.cyberemp.carrier == player;
        _id_280079773A9459A5 = scripts\mp\utility\game::getgametype() == "cyber" && ( isdefined( _id_76F4143215683892 ) || _id_70582DA4FF904336 );

        if ( _id_280079773A9459A5 )
        {
            weapons = player scripts\cp_mp\utility\inventory_utility::getcurrentprimaryweaponsminusalt();

            if ( weapons.size > 2 )
            {
                _id_66C1BF2EADF04D65 = 0;
                _id_04819A5499215519 = 0;
                _id_5B70A9307F104360 = 0;

                foreach ( weapon in weapons )
                {
                    if ( weapon.basename == "iw9_cyberemp_mp" )
                        _id_66C1BF2EADF04D65 = 1;

                    if ( scripts\mp\utility\weapon::ismeleeoverrideweapon( weapon ) )
                        _id_04819A5499215519 = 1;

                    if ( weapon.basename == "iw8_lm_dblmg_mp" )
                        _id_5B70A9307F104360 = 1;
                }

                if ( isdefined( player.primaryweapon ) && player.primaryweapon != "iw9_cyberemp_mp" )
                    _id_17372FFC28DC7D78 = player.primaryweaponobj;
                else if ( isdefined( player.secondaryweapon ) && player.secondaryweapon != "iw9_cyberemp_mp" )
                    _id_17372FFC28DC7D78 = player.secondaryweaponobj;

                _id_BFBB389447A5262C = weapons.size;

                if ( _id_04819A5499215519 )
                    _id_BFBB389447A5262C--;

                if ( _id_5B70A9307F104360 )
                    _id_BFBB389447A5262C--;

                if ( !_id_66C1BF2EADF04D65 || _id_BFBB389447A5262C > 3 )
                {
                    _id_AE8C4B58168DA1A2 = undefined;

                    if ( _id_17372FFC28DC7D78.basename != "none" )
                        _id_AE8C4B58168DA1A2 = _id_17372FFC28DC7D78;

                    result = player forcedropweapon( _id_AE8C4B58168DA1A2 );

                    if ( _id_70582DA4FF904336 )
                    {
                        player _id_3B64EB40368C1450::set( "cyber_emp", "weapon_switch", 0 );
                        player _id_3B64EB40368C1450::set( "cyber_emp", "weapon_pickup", 0 );
                        player _id_3B64EB40368C1450::set( "cyber_emp", "usability", 0 );
                        player thread waitthengivecyberweapon( result == 0 );
                    }

                    if ( result == 1 )
                    {

                    }
                    else if ( result == 0 )
                    {
                        player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "cyber_emp" );
                        return;
                    }
                    else if ( result == -1 )
                    {

                    }
                }
            }
            else if ( _id_70582DA4FF904336 )
            {
                player _id_3B64EB40368C1450::set( "cyber_emp", "weapon_switch", 0 );
                player _id_3B64EB40368C1450::set( "cyber_emp", "weapon_pickup", 0 );
                player _id_3B64EB40368C1450::set( "cyber_emp", "usability", 0 );
                player thread waitthengivecyberweapon();
            }
            else if ( isdefined( _id_76F4143215683892 ) )
                _id_17372FFC28DC7D78 = player.lastdroppableweaponobj;
            else
                _id_17372FFC28DC7D78 = player getcurrentweapon();
        }
        else if ( isdefined( _id_76F4143215683892 ) )
            _id_17372FFC28DC7D78 = player.lastdroppableweaponobj;
        else
            _id_17372FFC28DC7D78 = player getcurrentweapon();

        _id_FEE12400D8814B47 = player scripts\mp\utility\perk::_hasperk( "specialty_scrap_weapons" ) && getdvarint( "dvar_EB1E94069D5150F2" ) == 1;
        player thread watchpickupcomplete( weaponobj, _id_17372FFC28DC7D78, _id_FEE12400D8814B47 );
        level.onweapondroppickedup scripts\cp_mp\utility\callback_group::callback_trigger( self, player, weaponobj );
        player notify( "weapon_pickup", weaponobj );

        if ( isdefined( _id_76F4143215683892 ) )
        {
            player.lastweaponpickuptime = gettime();
            player scripts\mp\utility\stats::incpersstat( "weaponPickups", 1 );
        }

        dirty = fixupplayerweapons( player, _id_C27E2A04BAB78C1F );

        if ( isdefined( _id_76F4143215683892 ) && _id_FEE12400D8814B47 )
            _id_76F4143215683892 delete();

        if ( isdefined( _id_76F4143215683892 ) || dirty )
            break;
    }

    if ( isdefined( _id_76F4143215683892 ) )
    {
        _id_66DA0A5F69E8DD56 = _id_76F4143215683892 getitemweaponname();
        objweapon = makeweaponfromstring( _id_66DA0A5F69E8DD56 );

        if ( isdefined( player.tookweaponfrom[_id_66DA0A5F69E8DD56] ) )
        {
            _id_76F4143215683892.owner = player.tookweaponfrom[_id_66DA0A5F69E8DD56];
            player.tookweaponfrom[_id_66DA0A5F69E8DD56] = undefined;
        }

        _id_76F4143215683892.objweapon = objweapon;
        _id_76F4143215683892.targetname = "dropped_weapon";
        _id_76F4143215683892 thread watchpickup( player );
    }

    player.tookweaponfrom[_id_C27E2A04BAB78C1F] = _id_3F6103D9666B07CC;
}

waitthengivecyberweapon( _id_8A5ABCCE61604B23 )
{
    self endon( "death_or_disconnect" );
    self notify( "cancelGiveEmp" );
    self endon( "cancelGiveEmp" );

    while ( isdefined( self.currentweapon.basename ) && self.currentweapon.basename == "none" )
        waitframe();

    scripts\cp_mp\utility\inventory_utility::_giveweapon( "iw9_cyberemp_mp" );

    if ( !istrue( _id_8A5ABCCE61604B23 ) )
        _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "cyber_emp" );
}

watchpickupcomplete( _id_F42F309550E65575, _id_17372FFC28DC7D78, _id_FEE12400D8814B47 )
{
    self endon( "death_or_disconnect" );
    self notify( "watchPickupComplete()" );
    self endon( "watchPickupComplete()" );
    startingweapon = self.currentweapon;
    success = 0;

    if ( startingweapon == _id_F42F309550E65575 )
        success = 1;
    else
    {
        for (;;)
        {
            waitframe();
            currentweapon = self.currentweapon;

            if ( issameweapon( startingweapon, currentweapon, 0 ) )
                continue;

            if ( issameweapon( _id_F42F309550E65575, currentweapon, 0 ) )
                success = 1;
            else
                success = 0;

            break;
        }
    }

    if ( success )
    {
        if ( _id_2669878CF5A1B6BC::isminigunweapon( _id_F42F309550E65575 ) )
            scripts\mp\killstreaks\juggernaut_mp::juggernautweaponpickedup( _id_F42F309550E65575, _id_17372FFC28DC7D78 );

        thread notifyuiofpickedupweapon();

        if ( isdefined( level.onweapontaken ) )
            [[ level.onweapontaken ]]( _id_F42F309550E65575 );
    }
}

getrandomgraverobberattachment( currentweapon, _id_79583F5B5010A954 )
{
    return undefined;
}

addattachmenttoweapon( _id_DD515FCF025B2E79, _id_EFFB4AE1788A8B10 )
{
    variantid = getweaponvariantindex( _id_DD515FCF025B2E79 );
    _id_DD515FCF025B2E79 = _id_DD515FCF025B2E79 getnoaltweapon();
    _id_91BBF8D2294A656E = _id_DD515FCF025B2E79.attachmentvarindices;
    attachments = [];

    foreach ( attachment, id in _id_91BBF8D2294A656E )
        attachments[attachments.size] = attachment;

    failed = 0;

    if ( scripts\engine\utility::array_contains( attachments, _id_EFFB4AE1788A8B10 ) )
        failed = 1;
    else if ( !_id_DD515FCF025B2E79 canuseattachment( _id_EFFB4AE1788A8B10 ) )
        failed = 1;

    if ( failed )
        return undefined;

    attachments = scripts\mp\utility\weapon::weaponattachremoveextraattachments( attachments, _id_DD515FCF025B2E79 );
    _id_7809AD191E44FE6A = [];

    foreach ( _id_FE8F7703F6313ED4, attachment in attachments )
        _id_7809AD191E44FE6A[_id_FE8F7703F6313ED4] = _id_91BBF8D2294A656E[attachment];

    attachments[attachments.size] = _id_EFFB4AE1788A8B10;
    _id_7809AD191E44FE6A[_id_7809AD191E44FE6A.size] = 0;
    camo = _id_DD515FCF025B2E79.camo;
    stickers = [];

    if ( isdefined( _id_DD515FCF025B2E79.stickerslot0 ) )
        stickers[stickers.size] = _id_DD515FCF025B2E79.stickerslot0;

    if ( isdefined( _id_DD515FCF025B2E79.stickerslot1 ) )
        stickers[stickers.size] = _id_DD515FCF025B2E79.stickerslot1;

    if ( isdefined( _id_DD515FCF025B2E79.stickerslot2 ) )
        stickers[stickers.size] = _id_DD515FCF025B2E79.stickerslot2;

    if ( isdefined( _id_DD515FCF025B2E79.stickerslot3 ) )
        stickers[stickers.size] = _id_DD515FCF025B2E79.stickerslot3;

    if ( isdefined( _id_DD515FCF025B2E79._id_B39AC546CC8621F8 ) )
        stickers[stickers.size] = _id_DD515FCF025B2E79._id_B39AC546CC8621F8;

    _id_11A1FA68AEB971C0 = scripts\cp_mp\utility\game_utility::isnightmap();
    _id_C1F45BF103F82583 = _func_4ADD228B999C26AA( _id_DD515FCF025B2E79, _id_EFFB4AE1788A8B10 );

    foreach ( _id_FE8F7703F6313ED4, a in attachments )
    {
        _id_E571ECDD21DDCEE6 = _func_4ADD228B999C26AA( _id_DD515FCF025B2E79, attachments[_id_FE8F7703F6313ED4] );

        if ( _id_C1F45BF103F82583 == _id_E571ECDD21DDCEE6 && _id_C1F45BF103F82583 != "other" )
            attachments[_id_FE8F7703F6313ED4] = _id_EFFB4AE1788A8B10;
    }

    _id_DD515FCF025B2E79 = _id_2669878CF5A1B6BC::buildweapon( _id_2669878CF5A1B6BC::getweaponrootname( _id_DD515FCF025B2E79 ), attachments, camo, "none", variantid, _id_7809AD191E44FE6A, undefined, stickers, _id_11A1FA68AEB971C0 );
    return _id_DD515FCF025B2E79;
}

_id_71DC088DC384EF8D( weaponname, _id_C8616C37BC30098B, _id_A4D5E0F6B90DF7EB )
{
    _id_72672CD81EC1093D = makeweapon( weaponname );
    _id_66B3DB972AC1531E = undefined;
    attachments = _id_8DF87E6B1D13C15A( _id_72672CD81EC1093D, _id_C8616C37BC30098B, _id_A4D5E0F6B90DF7EB );

    foreach ( attachment in attachments )
    {
        _id_66B3DB972AC1531E = addattachmenttoweapon( _id_72672CD81EC1093D, attachment );

        if ( isdefined( _id_66B3DB972AC1531E ) )
            _id_72672CD81EC1093D = _id_66B3DB972AC1531E;
    }

    return _id_72672CD81EC1093D;
}

_id_8DF87E6B1D13C15A( weaponobj, _id_C8616C37BC30098B, _id_A4D5E0F6B90DF7EB )
{
    _id_D7CB31EA2A8B6E87 = [];
    _id_738063F99716D177 = _id_2669878CF5A1B6BC::_id_C471A035D22DF5EB();
    _id_738063F99716D177 = scripts\engine\utility::array_randomize( _id_738063F99716D177 );

    foreach ( _id_BF0CC21ADE72123C in _id_738063F99716D177 )
    {
        if ( istrue( _id_A4D5E0F6B90DF7EB ) && _id_BF0CC21ADE72123C == "scope" )
            continue;

        _id_39ACC07A4F70F5CA = _func_75B035199842693D( weaponobj, _id_BF0CC21ADE72123C );

        if ( _id_39ACC07A4F70F5CA.size > 0 && _id_D7CB31EA2A8B6E87.size < _id_C8616C37BC30098B )
        {
            _id_109EBF347B2F2ECE = randomint( _id_39ACC07A4F70F5CA.size );
            _id_D7CB31EA2A8B6E87 = scripts\engine\utility::array_add( _id_D7CB31EA2A8B6E87, _id_39ACC07A4F70F5CA[_id_109EBF347B2F2ECE] );
        }

        if ( _id_D7CB31EA2A8B6E87.size >= _id_C8616C37BC30098B )
            break;
    }

    if ( istrue( _id_A4D5E0F6B90DF7EB ) )
    {
        _id_CBDD60DFEE68493D = _func_75B035199842693D( weaponobj, "scope" );

        if ( _id_CBDD60DFEE68493D.size > 0 )
        {
            _id_109EBF347B2F2ECE = randomint( _id_CBDD60DFEE68493D.size );
            _id_D7CB31EA2A8B6E87 = scripts\engine\utility::array_add( _id_D7CB31EA2A8B6E87, _id_CBDD60DFEE68493D[_id_109EBF347B2F2ECE] );

            if ( _id_D7CB31EA2A8B6E87.size > _id_C8616C37BC30098B )
                _id_D7CB31EA2A8B6E87 = scripts\engine\utility::array_remove_index( _id_D7CB31EA2A8B6E87, 0 );
        }
    }

    return _id_D7CB31EA2A8B6E87;
}

getammooverride( weaponobj )
{
    baseweapon = weaponobj getbaseweapon();
    _id_A7CF832E6613FC43 = weaponclipsize( baseweapon );
    _id_2BE3302E3767CC7D = weaponclipsize( weaponobj );
    clipsize = _id_A7CF832E6613FC43;

    switch ( weaponobj.basename )
    {
        case "iw8_lm_mkilo3_mp":
        case "iw8_sh_mike26_mp":
        case "iw8_sn_sksierra_mp":
            break;
        default:
            clipsize = int( min( _id_A7CF832E6613FC43, _id_2BE3302E3767CC7D ) );
    }

    _id_AB501F397D3CD312 = _id_2669878CF5A1B6BC::getweaponrootname( weaponobj );
    _id_6C79B6B69A253E2B = 30;

    if ( weaponobj.isalternate )
    {

    }
    else
    {
        switch ( weaponobj.classname )
        {
            case "spread":
                switch ( _id_AB501F397D3CD312 )
                {
                    case "iw8_sh_charlie725":
                        _id_6C79B6B69A253E2B = 6;
                        break;
                    case "iw8_sh_dpapa12":
                        _id_6C79B6B69A253E2B = 8;
                        break;
                    default:
                        _id_6C79B6B69A253E2B = int( min( clipsize, 30 ) );
                        break;
                }

                break;
            case "sniper":
                switch ( _id_AB501F397D3CD312 )
                {
                    case "iw8_sn_crossbow":
                        _id_6C79B6B69A253E2B = 3;
                        break;
                    default:
                        _id_6C79B6B69A253E2B = int( min( clipsize, 30 ) );
                        break;
                }

                break;
            default:
                _id_6C79B6B69A253E2B = int( min( clipsize, 30 ) );
        }
    }

    return _id_6C79B6B69A253E2B;
}

isgraverobberattachment( weapon, _id_55F8624E7216D9AA )
{
    if ( !scripts\mp\utility\weapon::attachmentisselectable( weapon, _id_55F8624E7216D9AA ) )
        return 0;

    switch ( _id_55F8624E7216D9AA )
    {
        case "laserbalanced":
        case "laserrange":
        case "akimbo":
            return 0;
    }

    if ( issubstr( _id_55F8624E7216D9AA, "thermal" ) )
        return 0;

    if ( issubstr( _id_55F8624E7216D9AA, "burst" ) )
        return 0;

    if ( getsubstr( _id_55F8624E7216D9AA, 0, 3 ) == "cal" )
        return 0;

    return 1;
}

notifyuiofpickedupweapon()
{

}

fixupplayerweapons( player, weapon )
{
    _id_E3B59C80BF16DE8C = player getweaponslistprimaries();
    _id_45005959354D69FF = 1;
    _id_39E00B498B7A3C1B = 1;
    weaponname = undefined;

    if ( isweapon( weapon ) )
        weaponname = getcompleteweaponname( weapon );
    else
        weaponname = weapon;

    foreach ( currentweapon in _id_E3B59C80BF16DE8C )
    {
        if ( isdefined( player.primaryweaponobj ) && player.primaryweaponobj == currentweapon )
        {
            _id_45005959354D69FF = 0;
            continue;
        }

        if ( isdefined( player.secondaryweaponobj ) && player.secondaryweaponobj == currentweapon )
            _id_39E00B498B7A3C1B = 0;
    }

    if ( _id_45005959354D69FF )
    {
        player.primaryweapon = weaponname;
        player.primaryweaponobj = makeweaponfromstring( weaponname );
    }
    else if ( _id_39E00B498B7A3C1B )
    {
        player.secondaryweapon = weaponname;
        player.secondaryweaponobj = makeweaponfromstring( weaponname );
    }

    return _id_45005959354D69FF || _id_39E00B498B7A3C1B;
}

itemremoveammofromaltmodes()
{
    _id_B2CAC67DCE789126 = getitemweaponname();
    _id_F3A75B200CEDF31F = weaponaltweaponname( _id_B2CAC67DCE789126 );

    for ( _id_2B1A2FA844ACE41C = 1; _id_F3A75B200CEDF31F != "none" && _id_F3A75B200CEDF31F != _id_B2CAC67DCE789126; _id_2B1A2FA844ACE41C++ )
    {
        self itemweaponsetammo( 0, 0, 0, _id_2B1A2FA844ACE41C );
        _id_F3A75B200CEDF31F = weaponaltweaponname( _id_F3A75B200CEDF31F );
    }
}

onscavengerbagpickup( player )
{
    if ( isdefined( level.onscavengerbagpickup ) )
        [[ level.onscavengerbagpickup ]]( player );
    else
    {
        scavengergiveammo( player );
        player scripts\mp\equipment::givescavengerammo();
    }
}

handlescavengerbagpickup( _id_2A1C444DEF60A416 )
{
    self endon( "scavengerBagRemoved" );
    level endon( "game_ended" );
    player = undefined;

    for (;;)
    {
        self waittill( "scavenger", player );

        if ( !player scripts\cp_mp\utility\player_utility::isinvehicle() )
            break;
    }

    player notify( "scavenger_pickup" );
    onscavengerbagpickup( player );

    if ( !isdefined( player.pers["scavengerPickedUp"] ) )
        player.pers["scavengerPickedUp"] = 0;

    player scripts\mp\utility\stats::incpersstat( "scavengerPickedUp", 1 );
    player scripts\mp\perks\perks::_id_5A3FEF8CB39336B8( "specialty_scavenger_plus" );

    if ( isdefined( self.useobj ) )
        self.useobj delete();

    self notify( "death" );
    self notify( "scavengerBagRemoved" );
}

_id_208E1193F12B970A()
{
    self endon( "scavengerBagRemoved" );
    level endon( "game_ended" );
    self waittill( "death" );
    waittillframeend;
    self notify( "scavengerBagRemoved" );
}

scavengergiveammo( player )
{
    primaryweapons = player getweaponslistprimaries();

    foreach ( primary in primaryweapons )
        addscavengercliptoweapon( player, primary, 1 );

    if ( player scripts\mp\utility\perk::_hasperk( "specialty_scavenger_equipment" ) )
        player scripts\mp\equipment::_id_363048ECEEABBCC6();
}

addscavengercliptoweapon( player, weapon, _id_B153A3F2C4662B5E )
{
    if ( !scripts\mp\utility\weapon::iscacprimaryweapon( weapon ) && !level.scavenger_secondary )
        return;

    if ( weapon.isalternate )
        return;

    if ( scripts\mp\utility\weapon::getweapongroup( weapon ) == "weapon_projectile" )
        return;

    if ( weapon.basename == "iw9_pi_stimpistol_mp" )
        return;

    _id_9938D9499DF221D6 = player getweaponammostock( weapon );
    _id_410E327689185850 = getammooverride( weapon );
    _id_410E327689185850 = int( ceil( _id_B153A3F2C4662B5E * _id_410E327689185850 ) );

    if ( weapon._id_318338AA880DFAC6 )
        _id_410E327689185850 = _id_410E327689185850 * 1;

    player setweaponammostock( weapon, _id_9938D9499DF221D6 + _id_410E327689185850 );
}

scavenger_budget_delete()
{
    if ( isdefined( self.useobj ) )
        self.useobj delete();

    self delete();
}

dropscavengerfordeath( attacker, meansofdeath )
{
    self endon( "spawned_player" );
    level endon( "game_ended" );

    if ( !shoulddropscavengerbag( attacker, meansofdeath ) )
        return;

    delay = 0;

    if ( isdefined( meansofdeath ) && meansofdeath == "MOD_EXECUTION" )
        delay = 1.5;

    wait( delay );

    if ( delay > 0 && !shoulddropscavengerbag( attacker, meansofdeath ) )
        return;

    dropscavengerfordeathinternal( attacker );
}

dropscavengerfordeathinternal( attacker )
{
    _id_600FE02C99AEFBAE = self dropscavengerbag( "scavenger_bag_mp", "j_head" );

    if ( !isdefined( _id_600FE02C99AEFBAE ) )
        return;

    _id_600FE02C99AEFBAE scripts\cp_mp\ent_manager::registerspawn( 2, ::scavenger_budget_delete );
    _id_600FE02C99AEFBAE _meth_DFB78B3E724AD620( 0 );
    _id_600FE02C99AEFBAE.owner = attacker;
    _id_600FE02C99AEFBAE.team = attacker.team;
    _id_600FE02C99AEFBAE thread handlescavengerbagpickup( self );
    _id_600FE02C99AEFBAE thread scavengerbagcleanupthink();
    _id_600FE02C99AEFBAE thread scavengerbagtimeoutthink();
    _id_600FE02C99AEFBAE thread _id_208E1193F12B970A();
    _id_653E9F15896017ED( self );

    if ( isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["bots_add_scavenger_bag"] ) )
        [[ level.bot_funcs["bots_add_scavenger_bag"] ]]( _id_600FE02C99AEFBAE );
}

shoulddropscavengerbag( attacker, meansofdeath )
{
    if ( !isdefined( attacker ) )
        return 0;

    if ( attacker == self )
        return 0;

    return 1;
}

scavengerbagcleanupthink()
{
    self endon( "death" );
    level endon( "game_ended" );
    self.owner scripts\engine\utility::waittill_any_3( "death_or_disconnect", "joined_team", "bag_timeout" );

    if ( isdefined( self ) )
    {
        if ( isdefined( self.useobj ) )
            self.useobj delete();

        scripts\cp_mp\ent_manager::deregisterspawn();
        self delete();
    }
}

scavengerbagtimeoutthink()
{
    self endon( "death" );
    self.owner endon( "disconnect" );
    level endon( "game_ended" );
    wait 20;

    if ( isdefined( self ) )
        self.owner notify( "bag_timeout" );
}

scavengerbagusesetup()
{
    self endon( "death" );
    self.owner endon( "disconnect" );
    level endon( "game_ended" );
    hintstring = &"PERKS/HOLD_TO_SCAVENGE";
    self.useobj = scripts\mp\gameobjects::createhintobject( self.origin + anglestoup( self.angles ) * 1, "HINT_BUTTON", undefined, hintstring, undefined, undefined, "show", 200, 160, 100, 160 );
    self.useobj.owner = self.owner;
    self.useobj.team = self.team;
    self.useobj linkto( self );

    foreach ( player in level.players )
        self.useobj disableplayeruse( player );

    thread scavengebagthink();
    thread scavengebagusemonitoring();

    for (;;)
    {
        self waittill( "pickedUpScavengerBag", player );

        if ( isplayer( player ) )
        {
            player notify( "scavenger_pickup" );
            onscavengerbagpickup( player );
            player scripts\mp\perks\perks::_id_5A3FEF8CB39336B8( "specialty_scavenger_plus" );

            if ( isdefined( self.useobj ) )
                self.useobj delete();

            self notify( "death" );
        }
    }
}

scavengebagusemonitoring()
{
    self endon( "death" );
    self.owner endon( "disconnect" );
    level endon( "game_ended" );
    _id_E82152475C1CA370 = 1;

    while ( _id_E82152475C1CA370 )
    {
        wait 0.1;

        foreach ( player in level.players )
        {
            if ( !isdefined( self ) )
            {
                _id_E82152475C1CA370 = 0;
                continue;
            }

            if ( player.team != self.team || player scripts\mp\utility\perk::_hasperk( "specialty_scavenger" ) )
            {
                self.useobj disableplayeruse( player );
                continue;
            }

            self.useobj enableplayeruse( player );
        }
    }
}

scavengebagthink()
{
    self endon( "restarting_physics" );
    _id_88032DC5704DA634 = self.useobj;
    _id_DBCE45A33308630D = undefined;

    if ( istrue( level.gameended ) && !isdefined( _id_88032DC5704DA634 ) )
        return;

    while ( isdefined( self ) )
    {
        _id_88032DC5704DA634 waittill( "trigger", player );
        player.iscapturingcrate = 1;
        _id_DBCE45A33308630D = createuseent();
        _id_DBCE45A33308630D.id = "use";
        result = _id_DBCE45A33308630D useholdthink( player, getdvarfloat( "dvar_E9CBDB751424E4AB" ) );

        if ( !isdefined( player ) )
            return;

        player.iscapturingcrate = 0;

        if ( result )
            self notify( "pickedUpScavengerBag", player );
    }
}

_id_653E9F15896017ED( victim )
{
    if ( !getdvarint( "dvar_6225EC2A193F0934", 0 ) )
        return;

    if ( isdefined( victim ) )
    {
        _id_CB4FAD49263E20C4 = _id_7E52B56769FA7774::getitemdropinfo( victim.origin );
        _id_7E52B56769FA7774::spawnpickup( "brloot_armor_plate", _id_CB4FAD49263E20C4 );
    }
}

useholdthink( player, usetime )
{
    self.curprogress = 0;
    self.inuse = 1;
    self.userate = 0;
    self.usetime = usetime;
    scripts\mp\movers::script_mover_link_to_use_object( player );
    player _id_3B64EB40368C1450::set( "useHold", "weapon", 0 );
    result = useholdthinkloop( player );

    if ( isalive( player ) )
        player _id_3B64EB40368C1450::_id_C9D0B43701BDBA00( "useHold" );

    if ( isdefined( player ) )
        scripts\mp\movers::script_mover_unlink_from_use_object( player );

    if ( !isdefined( self ) )
        return 0;

    self.inuse = 0;
    self.curprogress = 0;
    return result;
}

useholdthinkloop( player )
{
    result = internal_useholdthinkloop( player );

    if ( isdefined( self ) )
        player scripts\mp\gameobjects::updateuiprogress( self, 0 );

    return istrue( result );
}

internal_useholdthinkloop( player )
{
    self endon( "endUseHoldThink" );

    while ( player isplayerusing( self ) )
    {
        if ( !player scripts\mp\movers::script_mover_use_can_link( self ) )
            return 0;

        self.curprogress = self.curprogress + level.framedurationseconds * self.userate;

        if ( isdefined( self.objectivescaler ) )
            self.userate = 1 * self.objectivescaler;
        else
            self.userate = 1;

        player scripts\mp\gameobjects::updateuiprogress( self, 1 );

        if ( self.curprogress >= self.usetime )
            return scripts\mp\utility\player::isreallyalive( player );

        waitframe();
    }

    return 0;
}

createuseent()
{
    _id_DBCE45A33308630D = spawn( "script_origin", self.origin );
    _id_DBCE45A33308630D.curprogress = 0;
    _id_DBCE45A33308630D.usetime = 0;
    _id_DBCE45A33308630D.userate = 3000;
    _id_DBCE45A33308630D.inuse = 0;
    _id_DBCE45A33308630D.id = self.id;
    _id_DBCE45A33308630D linkto( self );
    _id_DBCE45A33308630D thread deleteuseent( self );
    return _id_DBCE45A33308630D;
}

deleteuseent( owner )
{
    self endon( "death" );
    owner waittill( "death" );

    if ( isdefined( self.usedby ) )
    {
        foreach ( player in self.usedby )
        {
            player setclientomnvar( "ui_securing", 0 );
            player.ui_securing = undefined;
        }
    }

    self delete();
}

isplayerusing( weapon )
{
    return !level.gameended && isdefined( weapon ) && scripts\mp\utility\player::isreallyalive( self ) && self usebuttonpressed() && !self isonladder() && !self meleebuttonpressed() && weapon.curprogress < weapon.usetime && ( !isdefined( self.teleporting ) || !self.teleporting );
}

weaponcanstoreaccuracystats( objweapon )
{
    if ( scripts\mp\utility\weapon::iscacmeleeweapon( objweapon.basename ) )
        return 0;

    return scripts\mp\utility\weapon::iscacprimaryweapon( objweapon.basename ) || scripts\mp\utility\weapon::iscacsecondaryweapon( objweapon.basename );
}

setweaponstat( weapon, _id_A1D4E7D5EF9DA660, _id_629757F5C9E770D8 )
{
    scripts\mp\gamelogic::setweaponstat( weapon, _id_A1D4E7D5EF9DA660, _id_629757F5C9E770D8 );
}

watchweaponusage( _id_E9A9DC280D811788 )
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "weapon_fired", objweapon );
        onweaponfired( objweapon );
    }
}

onweaponfired( objweapon )
{
    scripts\mp\gamelogic::sethasdonecombat( self, 1 );
    _id_6B7BEE46F2C6DA28 = gettime();

    if ( !isdefined( self.lastshotfiredtime ) )
        self.lastshotfiredtime = 0;

    _id_D6DF3D735D181A6E = gettime() - self.lastshotfiredtime;
    self.lastshotfiredtime = _id_6B7BEE46F2C6DA28;
    scripts\mp\codcasterclientmatchdata::_id_1882F80B14421089( 0, 1 );

    if ( !isdefined( self.pers["shotsFired"] ) )
        scripts\mp\utility\stats::initpersstat( "shotsFired" );

    if ( isai( self ) )
    {
        if ( istrue( level._id_0C1D58BF29DCAE79 ) )
            scripts\mp\utility\stats::incpersstat( "shotsFired", 1 );

        return;
    }

    if ( !weaponcanstoreaccuracystats( objweapon ) )
        return;

    thread watchformiss( objweapon );

    if ( scripts\mp\utility\game::onlinestatsenabled() )
    {
        _id_C1480A81B0387196 = scripts\mp\playerstats_interface::getplayerstat( "combatStats", "totalShots" ) + 1;
        hits = scripts\mp\playerstats_interface::getplayerstat( "combatStats", "hits" );
        scripts\mp\playerstats_interface::setplayerstatbuffered( _id_C1480A81B0387196, "combatStats", "totalShots" );
        scripts\mp\playerstats_interface::setplayerstatbuffered( int( _id_C1480A81B0387196 - hits ), "combatStats", "misses" );
    }

    shotsfired = 1;
    setweaponstat( objweapon, shotsfired, "shots" );
    setweaponstat( objweapon, self.hits, "hits" );
    scripts\mp\utility\stats::incpersstat( "shotsFired", 1 );
    self.hits = 0;

    if ( self getweaponammoclip( objweapon ) == 0 && self getweaponammostock( objweapon ) == 0 )
        level thread scripts\mp\battlechatter_mp::trysaylocalsound( self, "stat_C8122B0900BA529D" );
}

watchformiss( objweapon )
{
    self endon( "death_or_disconnect" );
    _id_366B0ECC2F28AEAD = getcompleteweaponname( objweapon );
    self endon( "watchForMiss_" + _id_366B0ECC2F28AEAD );
    waitframe();
    self.consecutivehitsperweapon[_id_366B0ECC2F28AEAD] = 0;
    scripts\mp\events::shotmissed();
    scripts\mp\events::_id_CF1CFBBEC7D07D44();
}

clearmiss( objweapon )
{
    self endon( "death_or_disconnect" );
    _id_366B0ECC2F28AEAD = getcompleteweaponname( objweapon );
    self notify( "watchForMiss_" + _id_366B0ECC2F28AEAD );
}

watchfornearmisswhizby()
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "attackerbulletwhizby" );
        scripts\mp\playerstats_interface::addtoplayerstatbuffered( 1, "combatStats", "nearMisses" );
    }
}

checkhit( objweapon, victim, shitloc, idamage )
{
    self endon( "disconnect" );

    if ( objweapon.isalternate )
    {
        attachments = getweaponattachments( objweapon );

        if ( scripts\engine\utility::array_contains( attachments, "shotgun" ) || scripts\engine\utility::array_contains( attachments, "gl" ) || scripts\engine\utility::array_contains( attachments, "glsmoke" ) || scripts\engine\utility::array_contains( attachments, "glgas" ) || scripts\engine\utility::array_contains( attachments, "glconc" ) || scripts\engine\utility::array_contains( attachments, "glflash" ) || scripts\engine\utility::array_contains( attachments, "glincendiary" ) || scripts\engine\utility::array_contains( attachments, "glsemtex" ) || scripts\engine\utility::array_contains( attachments, "glsnap" ) )
            self.hits = 1;
    }

    if ( !weaponcanstoreaccuracystats( objweapon ) )
        return;

    _id_881576B7106F54CE = self meleebuttonpressed();

    if ( _id_881576B7106F54CE && objweapon.basename != "iw8_knife_mp" )
        return;

    switch ( weaponclass( objweapon ) )
    {
        case "sniper":
        case "rifle":
        case "pistol":
        case "mg":
        case "smg":
            self.hits++;
            break;
        case "spread":
            self.hits = 1;
            break;
        default:
            break;
    }

    _id_366B0ECC2F28AEAD = getcompleteweaponname( objweapon );

    if ( scripts\cp_mp\utility\weapon_utility::isriotshield( objweapon.basename ) || objweapon.basename == "iw8_knife_mp" )
    {
        thread scripts\mp\gamelogic::threadedsetweaponstatbyname( _id_366B0ECC2F28AEAD, self.hits, "hits" );
        self.hits = 0;
    }

    if ( !_id_881576B7106F54CE )
        scripts\mp\codcasterclientmatchdata::_id_1882F80B14421089( 1, 1 );

    waittillframeend;
    thread clearmiss( objweapon );

    if ( !isdefined( self.lasthittime[_id_366B0ECC2F28AEAD] ) )
        self.lasthittime[_id_366B0ECC2F28AEAD] = 0;

    if ( self.lasthittime[_id_366B0ECC2F28AEAD] == gettime() )
        return;

    self.lasthittime[_id_366B0ECC2F28AEAD] = gettime();

    if ( !isdefined( self.consecutivehitsperweapon ) || !isdefined( self.consecutivehitsperweapon[_id_366B0ECC2F28AEAD] ) )
        self.consecutivehitsperweapon[_id_366B0ECC2F28AEAD] = 1;
    else
        self.consecutivehitsperweapon[_id_366B0ECC2F28AEAD]++;

    if ( scripts\mp\utility\game::onlinestatsenabled() )
    {
        _id_C1480A81B0387196 = scripts\mp\playerstats_interface::getplayerstat( "combatStats", "totalShots" );
        hits = scripts\mp\playerstats_interface::getplayerstat( "combatStats", "hits" ) + 1;

        if ( hits <= _id_C1480A81B0387196 )
        {
            scripts\mp\playerstats_interface::setplayerstatbuffered( hits, "combatStats", "hits" );
            scripts\mp\playerstats_interface::setplayerstatbuffered( int( _id_C1480A81B0387196 - hits ), "combatStats", "misses" );
        }
    }

    thread scripts\cp_mp\challenges::onsuccessfulhit( objweapon );
    thread scripts\mp\events::shothit();
    thread scripts\mp\events::_id_2FCA19675EB69F1A( victim, shitloc, idamage );
    _id_CF4209C200F8BBF4 = scripts\mp\utility\weapon::getweapongroup( objweapon.basename );

    if ( _id_CF4209C200F8BBF4 == "weapon_lmg" )
    {
        if ( !isdefined( self.shotslandedlmg ) )
            self.shotslandedlmg = 1;
        else
            self.shotslandedlmg++;
    }

    currenttime = gettime();
    self.pers["lastDamageTime"] = currenttime;

    if ( isdefined( victim ) )
        victim.lasttimedamaged = currenttime;
}

friendlyfirecheck( owner, attacker, _id_361E36D990201511, _id_D4380FBE5B18F83C )
{
    if ( !isdefined( owner ) || !isdefined( owner.team ) )
        return 1;

    if ( !level.teambased )
        return 1;

    _id_EAF0A0E98E12BCD0 = level.friendlyfire;

    if ( isdefined( _id_361E36D990201511 ) )
        _id_EAF0A0E98E12BCD0 = _id_361E36D990201511;

    if ( _id_EAF0A0E98E12BCD0 != 0 )
        return 1;

    if ( attacker == owner || isdefined( attacker.owner ) && attacker.owner == owner )
        return 1;

    attackerteam = undefined;

    if ( isdefined( attacker.owner ) )
        attackerteam = attacker.owner.team;
    else if ( isdefined( attacker.team ) )
        attackerteam = attacker.team;

    if ( !isdefined( attackerteam ) )
        return 1;

    if ( attackerteam != owner.team )
        return 1;

    return 0;
}

watchequipmentonspawn()
{
    self notify( "watchEquipmentOnSpawn" );
    self endon( "watchEquipmentOnSpawn" );
    self endon( "spawned_player" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );
    deletedisparateplacedequipment();
    _id_7A9A49126147A952 = scripts\mp\utility\dvars::getintproperty( "dvar_B287E80BC7B40EA8", 1 ) && ( !scripts\mp\utility\perk::_hasperk( "specialty_rugged_eqp" ) || !checkequipforrugged() );

    if ( _id_7A9A49126147A952 )
        deleteplacedequipment();

    _id_194EDBE6D906C4E6 = self.plantedtacticalequip.size;
    _id_C7E5188314606729 = self.plantedlethalequip.size;
    _id_9DF2225241E8340A = self.plantedsuperequip.size;
    _id_A81B9997DA958D97 = self.plantedhackedequip.size;
}

getallequip()
{
    _id_7C3CE7FF13FBD7FC = [];

    if ( isdefined( self.plantedlethalequip ) )
        _id_7C3CE7FF13FBD7FC = scripts\engine\utility::array_combine( _id_7C3CE7FF13FBD7FC, self.plantedlethalequip );

    if ( isdefined( self.plantedtacticalequip ) )
        _id_7C3CE7FF13FBD7FC = scripts\engine\utility::array_combine( _id_7C3CE7FF13FBD7FC, self.plantedtacticalequip );

    if ( isdefined( self.plantedsuperequip ) )
        _id_7C3CE7FF13FBD7FC = scripts\engine\utility::array_combine( _id_7C3CE7FF13FBD7FC, self.plantedsuperequip );

    if ( isdefined( self.plantedhackedequip ) )
        _id_7C3CE7FF13FBD7FC = scripts\engine\utility::array_combine( _id_7C3CE7FF13FBD7FC, self.plantedhackedequip );

    return _id_7C3CE7FF13FBD7FC;
}

removeequip( _id_2EB789D043254817 )
{
    if ( isdefined( self.plantedlethalequip ) )
        self.plantedlethalequip = scripts\engine\utility::array_remove( self.plantedlethalequip, _id_2EB789D043254817 );

    if ( isdefined( self.plantedtacticalequip ) )
        self.plantedtacticalequip = scripts\engine\utility::array_remove( self.plantedtacticalequip, _id_2EB789D043254817 );

    if ( isdefined( self.plantedsuperequip ) )
        self.plantedsuperequip = scripts\engine\utility::array_remove( self.plantedsuperequip, _id_2EB789D043254817 );

    if ( isdefined( self.plantedhackedequip ) )
        self.plantedhackedequip = scripts\engine\utility::array_remove( self.plantedhackedequip, _id_2EB789D043254817 );
}

checkequipforrugged()
{
    equipment = scripts\engine\utility::array_combine( self.plantedtacticalequip, self.plantedlethalequip );

    foreach ( _id_2EB789D043254817 in equipment )
    {
        if ( isdefined( _id_2EB789D043254817.hasruggedeqp ) )
            return 1;
    }

    return 0;
}

watchgrenadeusage()
{
    self notify( "watchGrenadeUsage" );
    self endon( "watchGrenadeUsage" );
    self endon( "spawned_player" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );

    for (;;)
        watchgrenadethrows();
}

watchgrenadethrows()
{
    grenade = waittill_grenade_throw();
    _id_3FCE58C2642EBECC( grenade );

    if ( isdefined( grenade ) )
        grenade _meth_5226227BCE83EBE9( 3, self.team );
}

_id_3FCE58C2642EBECC( grenade )
{
    if ( !isdefined( grenade ) )
        return;

    if ( !isdefined( grenade.weapon_name ) )
        return;

    if ( isplayer( self ) )
    {
        setweaponstat( grenade.weapon_object, 1, "shots" );
        scripts\mp\battlechatter_mp::ongrenadeuse( grenade );
        scripts\mp\gamelogic::sethasdonecombat( self, 1 );

        if ( isdefined( grenade.equipmentref ) )
        {
            _id_4918B66CEBC7FBE7 = scripts\mp\equipment::isequipmentlethal( grenade.equipmentref );
            istactical = scripts\mp\equipment::isequipmenttactical( grenade.equipmentref );
            scripts\mp\potg_events::grenadethrownevent( _id_4918B66CEBC7FBE7 );

            if ( isdefined( istactical ) && self isthrowingbackgrenade() && getdvarint( "dvar_61A8D5707F364581", 1 ) )
            {
                self _meth_9B5704D0633B87FA();
                objweapon = makeweapon( grenade.weapon_name );
                ammo = self getweaponammoclip( objweapon );
                _id_2AA9CAEF99C9AF77 = int( max( ammo - 1, 0 ) );
                self setweaponammoclip( objweapon, _id_2AA9CAEF99C9AF77 );
            }
        }
    }

    if ( scripts\mp\utility\weapon::isaxeweapon( grenade.weapon_name ) )
    {
        grenade thread watchgrenadeaxepickup( self );
        return;
    }

    grenade thread scripts\mp\battlechatter_mp::grenadeproximitytracking();
    grenade.spawnpos = grenade.origin;
    _id_49E6EF3EDADD524E = _func_F581838CE4328F7A( grenade.weapon_object );

    switch ( _id_49E6EF3EDADD524E )
    {
        case "frag_grenade":
            if ( grenade.ticks >= 1 )
                grenade.iscooked = 1;

            grenade.originalowner = self;
            grenade thread scripts\mp\shellshock::grenade_earthquake();
            break;
        case "pop_rocket":
            if ( grenade.ticks >= 1 )
                grenade.iscooked = 1;

            grenade.originalowner = self;
            thread scripts\mp\equipment\wristrocket::wristrocketused( grenade );
            grenade thread scripts\mp\shellshock::grenade_earthquake( 0.6 );
            break;
        case "semtex":
            thread semtex_used( grenade );
            grenade thread scripts\mp\shellshock::grenade_earthquake();
            break;
        case "c4":
            thread scripts\mp\equipment\c4::c4_used( grenade );
            break;
        case "emp_grenade":
            thread scripts\mp\equipment\emp_grenade::emp_grenade_used( grenade );
            break;
        case "snapshot_grenade":
            thread scripts\mp\equipment\snapshot_grenade::snapshot_grenade_used( grenade, 0 );
            break;
        case "smoke_grenade":
            grenade thread _id_4B6CDCD3C396ABAB::smokegrenadeused( 0 );
            break;
        case "trophy":
            thread scripts\mp\equipment\trophy_system::trophy_used( grenade );
            break;
        case "claymore":
            thread scripts\mp\equipment\claymore::claymore_use( grenade );
            break;
        case "at_mine":
            thread scripts\mp\equipment\at_mine::at_mine_use( grenade );
            break;
        case "throwingknife":
            thread scripts\cp_mp\equipment\throwing_knife::throwing_knife_used( grenade );
            break;
        case "molotov":
            grenade thread scripts\mp\shellshock::grenade_earthquake();
            thread scripts\mp\equipment\molotov::molotov_used( grenade );
            break;
        case "thermite":
            thread scripts\mp\equipment\thermite::thermite_used( grenade );
            break;
        case "tac_ops_spawn_grenade":
            thread scripts\mp\supers\spawnbeacon::thrown( grenade );
            break;
        case "leader_box":
        case "armor_box":
        case "ammo_box":
        case "blastshield_box":
            thread scripts\mp\equipment\support_box::supportbox_used( grenade );
            break;
        case "decoy_grenade":
            thread scripts\mp\equipment\decoy_grenade::decoy_used( grenade );
            break;
        case "gas":
            thread scripts\mp\equipment\gas_grenade::gas_used( grenade );
            break;
        case "hb_sensor":
            thread _id_0EC0F9AD939B29E0::hb_sensor_used( grenade );
            break;
        case "offhand_spotter_scope":
            thread scripts\mp\equipment\binoculars::binoculars_used( grenade );
            break;
        case "tac_cover":
            thread scripts\mp\equipment\tactical_cover::tac_cover_used( grenade );
            break;
        case "flare":
            thread scripts\mp\equipment\tac_insert::tacinsert_used( grenade );
            break;
        case "advanced_supply_drop_marker":
            thread scripts\mp\equipment\advanced_supply_drop::advanced_supply_drop_marker_used( grenade );
            break;
        case "deploy_weapondrop":
            thread scripts\mp\equipment\weapon_drop::weapondrop_used( grenade );
            break;
        case "concussion_grenade":
            grenade thread concussionused();
            break;
        case "tac_camera":
            thread _id_51F5154861435B1E::_id_DBECA4D95F44293D( grenade );
            break;
        case "sonar_pulse":
            thread _id_28B451B2EA6DAE46::_id_2D117EEB564F6EA3( grenade );
            break;
        case "sound_veil":
            thread _id_45C10CA5CB8409BF::_id_06D91F8514005D18( grenade );
            break;
        case "geiger_counter":
            thread _id_479E458F6F530F0D::_id_3D5C1674387C936E( grenade );
            break;
        case "deployed_decoy":
            thread _id_1CF2ED809496BF4E::_id_255BED505249BC85( grenade );
            break;
        case "shock_stick":
            thread _id_0A35012B9B75A996::_id_054655641D3957E3( grenade );
            break;
        case "bunkerbuster":
            thread _id_6E2BB9330396AFCB::_id_3D78DD516C25EF77( grenade );
            break;
        case "blinding_turret_device":
            thread _id_7EC79670452EC186::_id_B02438CF4822A79E( grenade );
            break;
        case "deploy_loadout_drop":
            thread _id_19818A4D668D8841::_id_4CA6B5FEBA808692( grenade );
            break;
        case "iodine_pills":
            break;
        default:
            if ( isdefined( level.ongrenadeused ) )
                [[ level.ongrenadeused ]]( grenade.weapon_name, grenade );

            break;
    }

    if ( isplayer( self ) )
        logequipmentuse( grenade );
}

logequipmentuse( grenade )
{
    if ( !isdefined( grenade ) )
        return;

    _id_1E51A290CEA8B604 = scripts\mp\utility\weapon::getequipmenttype( grenade.weapon_object );

    if ( !isdefined( _id_1E51A290CEA8B604 ) )
        _id_1E51A290CEA8B604 = "none";

    self dlog_recordplayerevent( "dlog_event_equipment_use", [ "weapon_used", grenade.weapon_name, "equipment_type", _id_1E51A290CEA8B604 ] );
}

concussionused()
{
    thread scripts\mp\utility\script::notifyafterframeend( "death", "end_explode" );
    self endon( "end_explode" );
    owner = self.owner;
    self waittill( "explode", position );
    thread scripts\mp\equipment\concussion_grenade::onexplode( owner, position );
}

watchgrenadedeath()
{
    self waittill( "death" );

    if ( isdefined( self.knife_trigger ) )
        self.knife_trigger delete();

    if ( isdefined( self.useobj_trigger ) )
        self.useobj_trigger delete();
}

lockonlaunchers_gettargetarray( _id_FE608D14719843BC )
{
    targets = [];
    _id_E688B198AA9A4B3F = 0;

    if ( level.teambased )
    {
        if ( isdefined( _id_FE608D14719843BC ) && _id_FE608D14719843BC == 1 )
        {
            foreach ( _id_B5517D24E9DC9A49 in level.characters )
            {
                if ( isdefined( _id_B5517D24E9DC9A49 ) && isalive( _id_B5517D24E9DC9A49 ) && ( _id_B5517D24E9DC9A49.team != self.team || _id_E688B198AA9A4B3F ) )
                    targets[targets.size] = _id_B5517D24E9DC9A49;
            }
        }

        if ( isdefined( level.activekillstreaks ) )
        {
            foreach ( _id_153FDEE861E0F06F in level.activekillstreaks )
            {
                if ( isdefined( _id_153FDEE861E0F06F ) && isdefined( _id_153FDEE861E0F06F.affectedbylockon ) && ( _id_153FDEE861E0F06F.team != self.team || _id_E688B198AA9A4B3F ) )
                    targets[targets.size] = _id_153FDEE861E0F06F;
            }
        }

        if ( isdefined( level.cratedropdata ) )
        {
            if ( isdefined( level.cratedropdata.ac130s ) )
            {
                foreach ( ac130 in level.cratedropdata.ac130s )
                {
                    if ( isdefined( ac130 ) && ( ac130.team != self.team || _id_E688B198AA9A4B3F ) )
                        targets[targets.size] = ac130;
                }
            }
        }

        foreach ( _id_7731ADEF63E19B0C in scripts\cp_mp\vehicles\vehicle::_id_9005B7FC076293F8() )
        {
            vehicles = scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_getgameinstances( _id_7731ADEF63E19B0C );

            foreach ( vehicle in vehicles )
            {
                if ( isdefined( vehicle ) && ( !scripts\cp_mp\vehicles\vehicle::vehicle_isfriendlytoplayer( vehicle, self ) || _id_E688B198AA9A4B3F ) )
                    targets[targets.size] = vehicle;
            }
        }
    }
    else
    {
        if ( isdefined( _id_FE608D14719843BC ) && _id_FE608D14719843BC == 1 )
        {
            foreach ( _id_B5517D24E9DC9A49 in level.characters )
            {
                if ( ( !isdefined( _id_B5517D24E9DC9A49 ) || !isalive( _id_B5517D24E9DC9A49 ) ) && !_id_E688B198AA9A4B3F )
                    continue;

                targets[targets.size] = _id_B5517D24E9DC9A49;
            }
        }

        if ( isdefined( level.activekillstreaks ) )
        {
            foreach ( _id_153FDEE861E0F06F in level.activekillstreaks )
            {
                if ( isdefined( _id_153FDEE861E0F06F.affectedbylockon ) && ( isdefined( _id_153FDEE861E0F06F.owner ) && _id_153FDEE861E0F06F.owner != self || _id_E688B198AA9A4B3F ) )
                    targets[targets.size] = _id_153FDEE861E0F06F;
            }
        }

        if ( isdefined( level.cratedropdata ) )
        {
            if ( isdefined( level.cratedropdata.ac130s ) )
            {
                foreach ( ac130 in level.cratedropdata.ac130s )
                {
                    if ( ac130.owner != self || _id_E688B198AA9A4B3F )
                        targets[targets.size] = ac130;
                }
            }
        }

        foreach ( _id_7731ADEF63E19B0C in scripts\cp_mp\vehicles\vehicle::_id_9005B7FC076293F8() )
        {
            vehicles = scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_getgameinstances( _id_7731ADEF63E19B0C );

            foreach ( vehicle in vehicles )
            {
                if ( !isdefined( vehicle.owner ) )
                {
                    targets[targets.size] = vehicle;
                    continue;
                }

                if ( vehicle.owner != self || _id_E688B198AA9A4B3F )
                    targets[targets.size] = vehicle;
            }
        }
    }

    return targets;
}

watchmissileusage()
{
    self endon( "disconnect" );

    for (;;)
    {
        missile = waittill_missile_fire();
        updatemissilefire( missile );
    }
}

updatemissilefire( missile )
{
    _id_6D87867F43E1D612 = undefined;
    _id_54A24336CC9A143D = 0;

    switch ( missile.weapon_name )
    {
        case "iw8_la_gromeoks_mp":
        case "iw8_la_rpapa7_mp":
        case "iw8_la_gromeo_mp":
        case "iw9_la_gromeo_mp":
            _id_6D87867F43E1D612 = self.missilelaunchertarget;
            level thread scripts\mp\battlechatter_mp::launcherfired( missile );
            break;
        case "iw8_la_juliet_mp":
        case "iw9_la_juliet_mp":
            _id_6D87867F43E1D612 = self.javelin.target;
            level thread scripts\mp\battlechatter_mp::javelinfired( self.team, self.javelin.target.origin );
            break;
        case "ub_glmini01_xmags":
        case "ub_glmini01":
        case "ub_gl_scharlie":
        case "ub_gl_akilo":
        case "ub_gl01_xmags":
        case "ub_gl01_p01":
        case "ub_gl01":
        case "gl":
            _id_54A24336CC9A143D = 1;
            break;
        case "glsmoke":
            _id_54A24336CC9A143D = 1;
            missile thread _id_4B6CDCD3C396ABAB::smokegrenadeused( 1 );
            break;
        case "glgas":
            _id_54A24336CC9A143D = 1;
            thread scripts\mp\equipment\gas_grenade::gas_used( missile );
            break;
        case "glflash":
        case "glconc":
            _id_54A24336CC9A143D = 1;
            break;
        case "glincendiary":
            _id_54A24336CC9A143D = 1;
            missile thread scripts\mp\shellshock::grenade_earthquake();
            thread scripts\mp\equipment\thermite::thermite_used( missile, 1 );
            break;
        case "glsemtex":
            _id_54A24336CC9A143D = 1;
            break;
        case "glsnap":
            _id_54A24336CC9A143D = 1;
            thread scripts\mp\equipment\snapshot_grenade::snapshot_grenade_used( missile, _id_54A24336CC9A143D );
            break;
        default:
            break;
    }

    if ( scripts\cp_mp\utility\weapon_utility::islockonlauncher( missile.weapon_name ) && isdefined( _id_6D87867F43E1D612 ) )
    {
        missile.lockontarget = _id_6D87867F43E1D612;
        level notify( "stinger_fired", self, missile, _id_6D87867F43E1D612 );
        thread scripts\cp_mp\utility\weapon_utility::watchtargetlockedontobyprojectile( _id_6D87867F43E1D612, missile );
    }

    if ( isplayer( self ) )
        missile.adsfire = scripts\mp\utility\player::isplayerads();

    if ( !_id_54A24336CC9A143D && isexplosivemissile( missile.weapon_name ) )
    {
        scale = 1.0;

        if ( issmallmissile( missile.weapon_name ) )
            scale = 0.65;

        missile thread scripts\mp\shellshock::grenade_earthquake( scale );
    }

    scripts\mp\events::missilefired( missile );
}

issmallmissile( weapon )
{
    return 0;
}

isexplosivemissile( weapon )
{
    _id_92FCE7B1696254E3 = getweaponbasename( weapon );

    switch ( _id_92FCE7B1696254E3 )
    {
        case "pop_rocket_proj_mp":
        case "gunship_105mm_mp":
        case "gunship_25mm_mp":
        case "gunship_hellfire_mp":
        case "gunship_40mm_mp":
            return 0;
    }

    return 1;
}

movingplatformdetonate( data )
{
    if ( !isdefined( data.lasttouchedplatform ) || !isdefined( data.lasttouchedplatform.destroyexplosiveoncollision ) || data.lasttouchedplatform.destroyexplosiveoncollision )
        self notify( "detonateExplosive" );
}

monitordisownedequipment( player, equipment, _id_93494D8D17D67D84 )
{
    level endon( "game_ended" );
    equipment endon( "death" );
    equipment notify( "monitorDisownedEquipment()" );
    equipment endon( "monitorDisownedEquipment()" );

    if ( istrue( _id_93494D8D17D67D84 ) )
        player scripts\engine\utility::waittill_any_2( "joined_team", "disconnect" );
    else
        player scripts\engine\utility::waittill_any_3( "joined_team", "joined_spectators", "disconnect" );

    equipment deleteexplosive();
}

monitordisownedgrenade( player, grenade )
{
    level endon( "game_ended" );
    grenade endon( "death" );
    grenade endon( "mine_planted" );
    scripts\engine\utility::waittill_any_ents( player, "joined_team", player, "joined_spectators", player, "disconnect", level, "prematch_cleanup" );

    if ( isdefined( grenade ) )
        grenade delete();
}

isplantedequipment( ent )
{
    return isdefined( level.mines[ent getentitynumber()] ) || istrue( ent.planted );
}

getmaxplantedlethalequip( player )
{
    _id_E416DE928081866D = 2;

    if ( scripts\mp\utility\perk::_hasperk( "specialty_extra_planted_equipment" ) )
        _id_E416DE928081866D++;

    return _id_E416DE928081866D;
}

getmaxplantedtacticalequip( player )
{
    _id_30DC1C5E4B8568B0 = 2;

    if ( scripts\mp\utility\perk::_hasperk( "specialty_extra_planted_equipment" ) )
        _id_30DC1C5E4B8568B0++;

    return _id_30DC1C5E4B8568B0;
}

getmaxplantedsuperequip( equipmentref )
{
    if ( scripts\cp_mp\utility\game_utility::_id_0BEFF479639E6508() )
        return 1;

    return 2;
}

_id_80809994F5A396D0()
{
    return 2;
}

getmaxplantedhackedequip()
{
    return 3;
}

onequipmentplanted( _id_FEBA29CE82D4980F, equipmentref, deletefunc )
{
    _id_FEBA29CE82D4980F.equipmentref = equipmentref;
    _id_FEBA29CE82D4980F.deletefunc = deletefunc;
    _id_FEBA29CE82D4980F.planted = 1;
    updateplantedarray( _id_FEBA29CE82D4980F );
    entnum = _id_FEBA29CE82D4980F getentitynumber();
    level.mines[entnum] = _id_FEBA29CE82D4980F;

    if ( equipmentref != "equip_tac_cover" )
    {
        _id_FEBA29CE82D4980F enableplayermarks( "equipment" );

        if ( level.teambased )
            _id_FEBA29CE82D4980F filteroutplayermarks( self.team );
        else
            _id_FEBA29CE82D4980F filteroutplayermarks( self );
    }

    _id_FEBA29CE82D4980F notify( "mine_planted" );
}

updateplantedarray( equipment )
{
    _id_749469570D9D7CBC = undefined;
    _id_20F2244C14CD5D6C = 0;
    slot = scripts\mp\equipment::findequipmentslot( equipment.equipmentref );

    if ( istrue( equipment.ishacked ) )
    {
        _id_749469570D9D7CBC = equipment.owner.plantedhackedequip;
        _id_20F2244C14CD5D6C = getmaxplantedhackedequip();
    }
    else if ( istrue( equipment.issuper ) )
    {
        if ( equipment.equipmentref == "equip_tac_cover" )
        {
            _id_20F2244C14CD5D6C = _id_80809994F5A396D0();
            _id_749469570D9D7CBC = equipment.owner.plantedsuperequip;
        }
        else
        {
            _id_749469570D9D7CBC = equipment.owner.plantedsuperequip;
            _id_20F2244C14CD5D6C = getmaxplantedsuperequip( equipment.equipmentref );
        }
    }
    else if ( isdefined( slot ) && slot == "primary" || scripts\mp\equipment::isequipmentlethal( equipment.equipmentref ) )
    {
        _id_749469570D9D7CBC = equipment.owner.plantedlethalequip;
        _id_20F2244C14CD5D6C = getmaxplantedlethalequip( self );
    }
    else if ( isdefined( slot ) && slot == "secondary" || scripts\mp\equipment::isequipmenttactical( equipment.equipmentref ) )
    {
        _id_749469570D9D7CBC = equipment.owner.plantedtacticalequip;
        _id_20F2244C14CD5D6C = getmaxplantedtacticalequip( self );
    }

    if ( !isdefined( _id_749469570D9D7CBC ) )
    {
        message = "isSuper: " + equipment.issuper + ", slot: " + slot + ", equipmentRef: " + equipment.equipmentref + ", allowed: " + scripts\mp\equipment::is_equipment_slot_allowed( "super" );
        scripts\mp\utility\script::demoforcesre( message );
    }

    if ( _id_749469570D9D7CBC.size > 0 )
    {
        if ( _id_749469570D9D7CBC.size && _id_749469570D9D7CBC.size >= _id_20F2244C14CD5D6C )
        {
            _id_E472D6DEDB41ACFD = _id_749469570D9D7CBC[0];
            _id_749469570D9D7CBC = scripts\engine\utility::array_remove( _id_749469570D9D7CBC, _id_E472D6DEDB41ACFD );
            _id_E472D6DEDB41ACFD deleteexplosive();
        }
    }

    _id_749469570D9D7CBC[_id_749469570D9D7CBC.size] = equipment;

    if ( istrue( equipment.ishacked ) )
        equipment.owner.plantedhackedequip = _id_749469570D9D7CBC;
    else if ( istrue( equipment.issuper ) )
        equipment.owner.plantedsuperequip = _id_749469570D9D7CBC;
    else if ( isdefined( slot ) && slot == "primary" || scripts\mp\equipment::isequipmentlethal( equipment.equipmentref ) )
        equipment.owner.plantedlethalequip = _id_749469570D9D7CBC;
    else if ( isdefined( slot ) && slot == "secondary" || scripts\mp\equipment::isequipmenttactical( equipment.equipmentref ) )
        equipment.owner.plantedtacticalequip = _id_749469570D9D7CBC;
}

setplantedequipmentuse( enabled )
{
    _id_7C3CE7FF13FBD7FC = getallequip();

    foreach ( _id_2EB789D043254817 in _id_7C3CE7FF13FBD7FC )
    {
        if ( isdefined( _id_2EB789D043254817.trigger ) && isdefined( _id_2EB789D043254817.owner ) )
        {
            if ( enabled )
            {
                _id_2EB789D043254817.trigger enableplayeruse( _id_2EB789D043254817.owner );
                continue;
            }

            _id_2EB789D043254817.trigger disableplayeruse( _id_2EB789D043254817.owner );
        }
    }
}

cleanupequipment( _id_3397EC8092BCDDE5, _id_E9CAE9957EACB9FB, _id_63B78A72AA2DF5F9 )
{
    if ( isdefined( _id_3397EC8092BCDDE5 ) )
        level.mines[_id_3397EC8092BCDDE5] = undefined;

    if ( isdefined( _id_E9CAE9957EACB9FB ) )
        _id_E9CAE9957EACB9FB delete();

    if ( isdefined( _id_63B78A72AA2DF5F9 ) )
        _id_63B78A72AA2DF5F9 delete();
}

equipmenthit( owner, attacker, objweapon, meansofdeath )
{
    if ( scripts\cp_mp\utility\player_utility::playersareenemies( attacker, owner ) )
    {
        if ( !isdefined( objweapon ) )
            return;

        if ( _id_2669878CF5A1B6BC::iskillstreakweapon( objweapon.basename ) )
            return;

        _id_366B0ECC2F28AEAD = getcompleteweaponname( objweapon );

        if ( !isdefined( attacker.lasthittime ) )
            attacker.lasthittime = [];

        if ( !isdefined( attacker.lasthittime[_id_366B0ECC2F28AEAD] ) )
            attacker.lasthittime[_id_366B0ECC2F28AEAD] = 0;

        if ( attacker.lasthittime[_id_366B0ECC2F28AEAD] == gettime() )
            return;

        attacker.lasthittime[_id_366B0ECC2F28AEAD] = gettime();
        attacker thread scripts\mp\gamelogic::threadedsetweaponstatbyname( _id_366B0ECC2F28AEAD, 1, "hits" );

        if ( scripts\mp\utility\game::onlinestatsenabled() )
        {
            _id_C1480A81B0387196 = attacker scripts\mp\playerstats_interface::getplayerstat( "combatStats", "totalShots" );
            hits = attacker scripts\mp\playerstats_interface::getplayerstat( "combatStats", "hits" ) + 1;

            if ( hits <= _id_C1480A81B0387196 )
            {
                scripts\mp\playerstats_interface::setplayerstatbuffered( hits, "combatStats", "hits" );
                scripts\mp\playerstats_interface::setplayerstatbuffered( int( _id_C1480A81B0387196 - hits ), "combatStats", "misses" );
            }
        }

        if ( isdefined( meansofdeath ) && scripts\engine\utility::isbulletdamage( meansofdeath ) || scripts\mp\utility\damage::isprojectiledamage( meansofdeath ) )
        {
            attacker.pers["lastDamageTime"] = gettime();
            _id_CF4209C200F8BBF4 = scripts\mp\utility\weapon::getweapongroup( objweapon.basename );

            if ( _id_CF4209C200F8BBF4 == "weapon_lmg" )
            {
                if ( !isdefined( attacker.shotslandedlmg ) )
                    attacker.shotslandedlmg = 1;
                else
                    attacker.shotslandedlmg++;
            }
        }
    }
}

deleteexplosive()
{
    if ( !isdefined( self ) )
        return;

    scripts\mp\sentientpoolmanager::unregistersentient( self.sentientpool, self.sentientpoolindex );
    _id_3397EC8092BCDDE5 = self getentitynumber();
    level.mines[_id_3397EC8092BCDDE5] = undefined;
    self disableplayermarks( "equipment" );

    if ( isdefined( self.deletefunc ) )
    {
        self thread [[ self.deletefunc ]]();
        self notify( "deleted_equipment" );
    }
    else
    {
        _id_E9CAE9957EACB9FB = self.killcament;
        _id_63B78A72AA2DF5F9 = self.trigger;
        cleanupequipment( _id_3397EC8092BCDDE5, _id_E9CAE9957EACB9FB, _id_63B78A72AA2DF5F9 );
        self notify( "deleted_equipment" );
        self delete();
    }
}

makeexplosiveusable( offset )
{
    self setotherent( self.owner );

    if ( !isdefined( offset ) )
        offset = 10;

    trigger = spawn( "script_origin", self.origin + offset * anglestoup( self.angles ) );
    trigger linkto( self );
    self.trigger = trigger;
    trigger.owner = self;
    thread makeexplosiveusableinternal();
    return trigger;
}

makeexplosiveusableinternal()
{
    self endon( "makeExplosiveUnusable" );
    trigger = self.trigger;
    watchexplosiveusable();

    if ( isdefined( self ) )
    {
        trigger = self.trigger;
        self.trigger = undefined;
    }

    if ( isdefined( trigger ) )
        trigger delete();
}

makeexplosiveunusable()
{
    self notify( "makeExplosiveUnusable" );
    trigger = self.trigger;
    self.trigger = undefined;

    if ( isdefined( trigger ) )
        trigger delete();
}

watchexplosiveusable()
{
    owner = self.owner;
    trigger = self.trigger;
    self endon( "death" );
    trigger endon( "death" );
    owner endon( "disconnect" );
    level endon( "game_ended" );
    trigger setcursorhint( "HINT_NOICON" );
    trigger scripts\mp\utility\usability::setselfusable( owner );
    trigger childthread scripts\mp\utility\usability::notusableforjoiningplayers( owner );
    trigger childthread scripts\mp\utility\usability::notusableafterownerchange( owner, self );
    trigger setexplosiveusablehintstring( self.weapon_name );

    for (;;)
    {
        trigger waittillmatch( "trigger", owner );

        if ( isdefined( self.weapon_name ) )
        {
            switch ( self.weapon_name )
            {
                case "trophy_mp":
                    thread scripts\mp\equipment\trophy_system::trophy_pickup();
                    break;
            }

            owner thread scripts\mp\equipment\c4::c4_resetaltdetonpickup();
        }

        owner playlocalsound( "scavenger_pack_pickup" );
        owner notify( "scavenged_ammo", self.weapon_name );
        equipmentref = scripts\mp\equipment::getequipmentreffromweapon( makeweapon( self.weapon_name ) );

        if ( isdefined( equipmentref ) && self.owner scripts\mp\equipment::hasequipment( equipmentref ) )
            self.owner scripts\mp\equipment::incrementequipmentammo( equipmentref, 1 );

        thread deleteexplosive();
        return;
    }
}

makeexplosiveusabletag( tagname, isgrenade )
{
    self endon( "death" );
    self endon( "makeExplosiveUnusable" );
    owner = self.owner;
    weaponname = self.weapon_name;

    if ( !isdefined( isgrenade ) )
        isgrenade = 0;

    scripts\mp\utility\usability::setselfusable( owner );

    if ( isgrenade )
        self enablemissilehint( 1 );
    else
        self setcursorhint( "HINT_NOICON" );

    self sethinttag( tagname );
    self setuserange( 72 );
    setexplosiveusablehintstring( self.weapon_name );
    childthread scripts\mp\utility\usability::notusableforjoiningplayers( owner );
    childthread scripts\mp\utility\usability::notusableafterownerchange( owner, self );

    for (;;)
    {
        self waittillmatch( "trigger", owner );

        if ( istrue( owner.isjuggernaut ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
                owner [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/JUGG_CANNOT_BE_PICKED_UP" );

            continue;
        }

        if ( isdefined( weaponname ) )
        {
            switch ( weaponname )
            {
                case "trophy_mp":
                    thread scripts\mp\equipment\trophy_system::trophy_pickup();
                    break;
            }

            owner thread scripts\mp\equipment\c4::c4_resetaltdetonpickup();
        }

        owner notify( "scavenged_ammo", weaponname );
        attachments = _func_6527364C1ECCA6C6( weaponname );
        objweapon = makeweapon( weaponname, attachments );
        equipmentref = scripts\mp\equipment::getequipmentreffromweapon( objweapon );

        if ( isdefined( equipmentref ) )
        {
            if ( self.owner scripts\mp\equipment::hasequipment( equipmentref ) )
            {
                if ( _id_2D9D24F7C63AC143::_id_8B121DD10A442DD2() && self.owner scripts\mp\equipment::getequipmentammo( equipmentref ) >= self.owner scripts\mp\equipment::getequipmentmaxammo( equipmentref ) )
                {
                    lootid = _id_600B944A95C3A7BF::_id_A50B607D2500DDA5( equipmentref, "equipment" );
                    result = self.owner _id_2D9D24F7C63AC143::_id_E01D9736B2D100AC( lootid );

                    if ( istrue( result ) )
                        self.owner _id_2D9D24F7C63AC143::_id_10F6E537F1B5763C( lootid, 1 );
                }
                else if ( self.owner scripts\mp\equipment::getequipmentammo( equipmentref ) < self.owner scripts\mp\equipment::getequipmentmaxammo( equipmentref ) )
                    self.owner scripts\mp\equipment::incrementequipmentammo( equipmentref, 1 );
                else
                {
                    self.owner scripts\mp\hud_message::showerrormessage( "MP/DENY_EQUIP_PICKUP" );
                    continue;
                }
            }
            else if ( isdefined( level.onnewequipmentpickup ) )
                [[ level.onnewequipmentpickup ]]( self.owner, equipmentref );
        }

        switch ( weaponname )
        {
            case "at_mine_mp":
                _id_09D5BC8E32EE3635 = "iw9_proximity_mine_pickup";
                break;
            case "c4_mp":
                _id_09D5BC8E32EE3635 = "iw9_c4_pickup";
                break;
            case "claymore_mp":
                _id_09D5BC8E32EE3635 = "iw9_claymore_pickup";
                break;
            default:
                _id_09D5BC8E32EE3635 = "scavenger_pack_pickup";
        }

        owner playlocalsound( _id_09D5BC8E32EE3635 );

        if ( isdefined( self.useobj ) )
            self.useobj delete();

        thread deleteexplosive();
        return;
    }
}

makeexplosiveunusuabletag()
{
    self notify( "makeExplosiveUnusable" );
    self makeunusable();
}

setexplosiveusablehintstring( weaponname )
{
    switch ( weaponname )
    {
        case "c4_mp":
            self sethintstring( &"EQUIPMENT_HINTS/PICKUP_C4" );
            break;
        case "at_mine_mp":
            self sethintstring( &"EQUIPMENT_HINTS/PICKUP_AT_MINE" );
            break;
        case "claymore_mp":
            self sethintstring( &"EQUIPMENT_HINTS/PICKUP_CLAYMORE" );
            break;
        case "gas_grenade_mp":
            self sethintstring( &"EQUIPMENT_HINTS/PICKUP_GAS_GRENADE" );
            break;
        case "trophy_mp":
            self sethintstring( &"EQUIPMENT_HINTS/PICKUP_TROPHY" );
            break;
    }
}

explosivehandlemovers( parent, _id_B5F7C0806632D99B )
{
    data = spawnstruct();
    data.linkparent = parent;
    data.deathoverridecallback = ::movingplatformdetonate;
    data.endonstring = "death";

    if ( scripts\cp_mp\utility\train_utility::is_train_ent( parent ) )
    {
        data._id_49CB2C45D3230ED8 = 1;
        self _meth_7E73001E97FE87B9( 1 );
    }

    if ( !isdefined( _id_B5F7C0806632D99B ) || !_id_B5F7C0806632D99B )
        data.invalidparentoverridecallback = scripts\mp\movers::moving_platform_empty_func;

    thread scripts\mp\movers::handle_moving_platforms( data );
}

explosivetrigger( target, graceperiod, _id_DEE1E90C5A8243B7 )
{
    if ( isplayer( target ) && target scripts\mp\utility\perk::_hasperk( "specialty_delaymine" ) )
    {
        target thread scripts\cp_mp\challenges::triggereddelayedexplosion();
        graceperiod = level.delayminetime;
    }

    wait( graceperiod );
}

getdamageableents( pos, radius, _id_7C242DFB11E2E6E6, _id_ACC4F45C61ED5FF1 )
{
    ents = [];

    if ( !isdefined( _id_7C242DFB11E2E6E6 ) )
        _id_7C242DFB11E2E6E6 = 0;

    if ( !isdefined( _id_ACC4F45C61ED5FF1 ) )
        _id_ACC4F45C61ED5FF1 = 0;

    radiussq = radius * radius;
    players = level.players;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < players.size; _id_AC0E594AC96AA3A8++ )
    {
        if ( !isalive( players[_id_AC0E594AC96AA3A8] ) || players[_id_AC0E594AC96AA3A8].sessionstate != "playing" )
            continue;

        _id_1925D24D0AE333E6 = scripts\mp\utility\damage::get_damageable_player_pos( players[_id_AC0E594AC96AA3A8] );
        distsq = distancesquared( pos, _id_1925D24D0AE333E6 );

        if ( distsq < radiussq && ( !_id_7C242DFB11E2E6E6 || weapondamagetracepassed( pos, _id_1925D24D0AE333E6, _id_ACC4F45C61ED5FF1, players[_id_AC0E594AC96AA3A8] ) ) )
            ents[ents.size] = scripts\mp\utility\damage::get_damageable_player( players[_id_AC0E594AC96AA3A8], _id_1925D24D0AE333E6 );
    }

    grenades = getentarray( "grenade", "classname" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < grenades.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_D3366E54CC41EA6C = scripts\mp\utility\damage::get_damageable_grenade_pos( grenades[_id_AC0E594AC96AA3A8] );
        distsq = distancesquared( pos, _id_D3366E54CC41EA6C );

        if ( distsq < radiussq && ( !_id_7C242DFB11E2E6E6 || weapondamagetracepassed( pos, _id_D3366E54CC41EA6C, _id_ACC4F45C61ED5FF1, grenades[_id_AC0E594AC96AA3A8] ) ) )
            ents[ents.size] = scripts\mp\utility\damage::get_damageable_grenade( grenades[_id_AC0E594AC96AA3A8], _id_D3366E54CC41EA6C );
    }

    destructibles = getentarray( "destructible", "targetname" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < destructibles.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_D3366E54CC41EA6C = destructibles[_id_AC0E594AC96AA3A8].origin;
        distsq = distancesquared( pos, _id_D3366E54CC41EA6C );

        if ( distsq < radiussq && ( !_id_7C242DFB11E2E6E6 || weapondamagetracepassed( pos, _id_D3366E54CC41EA6C, _id_ACC4F45C61ED5FF1, destructibles[_id_AC0E594AC96AA3A8] ) ) )
        {
            _id_0E14905A4CDF3B12 = spawnstruct();
            _id_0E14905A4CDF3B12.isplayer = 0;
            _id_0E14905A4CDF3B12.isadestructable = 0;
            _id_0E14905A4CDF3B12.entity = destructibles[_id_AC0E594AC96AA3A8];
            _id_0E14905A4CDF3B12.damagecenter = _id_D3366E54CC41EA6C;
            ents[ents.size] = _id_0E14905A4CDF3B12;
        }
    }

    _id_7DD6062F971AC3CC = getentarray( "destructable", "targetname" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_7DD6062F971AC3CC.size; _id_AC0E594AC96AA3A8++ )
    {
        _id_D3366E54CC41EA6C = _id_7DD6062F971AC3CC[_id_AC0E594AC96AA3A8].origin;
        distsq = distancesquared( pos, _id_D3366E54CC41EA6C );

        if ( distsq < radiussq && ( !_id_7C242DFB11E2E6E6 || weapondamagetracepassed( pos, _id_D3366E54CC41EA6C, _id_ACC4F45C61ED5FF1, _id_7DD6062F971AC3CC[_id_AC0E594AC96AA3A8] ) ) )
        {
            _id_0E14905A4CDF3B12 = spawnstruct();
            _id_0E14905A4CDF3B12.isplayer = 0;
            _id_0E14905A4CDF3B12.isadestructable = 1;
            _id_0E14905A4CDF3B12.entity = _id_7DD6062F971AC3CC[_id_AC0E594AC96AA3A8];
            _id_0E14905A4CDF3B12.damagecenter = _id_D3366E54CC41EA6C;
            ents[ents.size] = _id_0E14905A4CDF3B12;
        }
    }

    _id_B261B594E5C09A86 = getentarray( "misc_turret", "classname" );

    foreach ( sentry in _id_B261B594E5C09A86 )
    {
        _id_D3366E54CC41EA6C = sentry.origin + ( 0, 0, 32 );
        distsq = distancesquared( pos, _id_D3366E54CC41EA6C );

        if ( distsq < radiussq && ( !_id_7C242DFB11E2E6E6 || weapondamagetracepassed( pos, _id_D3366E54CC41EA6C, _id_ACC4F45C61ED5FF1, sentry ) ) )
        {
            switch ( sentry.model )
            {
                case "vehicle_ugv_talon_gun_mp":
                case "mp_scramble_turret":
                case "mp_sam_turret":
                case "sentry_minigun_weak":
                    ents[ents.size] = scripts\mp\utility\damage::get_damageable_sentry( sentry, _id_D3366E54CC41EA6C );
                    break;
            }
        }
    }

    mines = getentarray( "script_model", "classname" );

    foreach ( mine in mines )
    {
        if ( mine.model != "projectile_bouncing_betty_grenade" && mine.model != "ims_scorpion_body" )
            continue;

        _id_D3366E54CC41EA6C = mine.origin + ( 0, 0, 32 );
        distsq = distancesquared( pos, _id_D3366E54CC41EA6C );

        if ( distsq < radiussq && ( !_id_7C242DFB11E2E6E6 || weapondamagetracepassed( pos, _id_D3366E54CC41EA6C, _id_ACC4F45C61ED5FF1, mine ) ) )
            ents[ents.size] = scripts\mp\utility\damage::get_damageable_mine( mine, _id_D3366E54CC41EA6C );
    }

    return ents;
}

weapondamagetracepassed( from, to, _id_ACC4F45C61ED5FF1, ent )
{
    midpos = undefined;
    _id_4573A8725DD3748E = to - from;

    if ( lengthsquared( _id_4573A8725DD3748E ) < _id_ACC4F45C61ED5FF1 * _id_ACC4F45C61ED5FF1 )
        return 1;

    dir = vectornormalize( _id_4573A8725DD3748E );
    midpos = from + ( dir[0] * _id_ACC4F45C61ED5FF1, dir[1] * _id_ACC4F45C61ED5FF1, dir[2] * _id_ACC4F45C61ED5FF1 );
    trace = scripts\engine\trace::_bullet_trace( midpos, to, 0, ent );

    if ( getdvarint( "dvar_CFA904AA467801D6" ) != 0 || getdvarint( "dvar_135469CD54831746" ) != 0 )
    {
        thread debugprint( from, ".dmg" );

        if ( isdefined( ent ) )
            thread debugprint( to, "." + ent.classname );
        else
            thread debugprint( to, ".undefined" );

        if ( trace["fraction"] == 1 )
            thread debugline( midpos, to, ( 1, 1, 1 ) );
        else
        {
            thread debugline( midpos, trace["position"], ( 1, 0.9, 0.8 ) );
            thread debugline( trace["position"], to, ( 1, 0.4, 0.3 ) );
        }
    }

    return trace["fraction"] == 1;
}

damageent( einflictor, eattacker, idamage, smeansofdeath, objweapon, damagepos, damagedir )
{
    if ( self.isplayer )
    {
        self.damageorigin = damagepos;
        self.entity thread [[ level.callbackplayerdamage ]]( einflictor, eattacker, idamage, 0, smeansofdeath, objweapon, damagepos, damagedir, "none", 0 );
    }
    else
    {
        if ( self.isadestructable && ( objweapon.basename == "artillery_mp" || objweapon.basename == "claymore_mp" || objweapon.basename == "stealth_bomb_mp" ) )
            return;

        self.entity notify( "damage", idamage, eattacker, ( 0, 0, 0 ), ( 0, 0, 0 ), "MOD_EXPLOSIVE", "", "", "", undefined, objweapon );
    }
}

debugline( a, b, color )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 600; _id_AC0E594AC96AA3A8++ )
        wait 0.05;
}

debugcircle( center, radius, color, segments )
{
    if ( !isdefined( segments ) )
        segments = 16;

    _id_7062EA7309FA49C4 = 360 / segments;
    _id_8AF33769F877B5D6 = [];

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < segments; _id_AC0E594AC96AA3A8++ )
    {
        angle = _id_7062EA7309FA49C4 * _id_AC0E594AC96AA3A8;
        _id_8A9F895755FD607E = cos( angle ) * radius;
        _id_D867033AB311670B = sin( angle ) * radius;
        x = center[0] + _id_8A9F895755FD607E;
        y = center[1] + _id_D867033AB311670B;
        z = center[2];
        _id_8AF33769F877B5D6[_id_8AF33769F877B5D6.size] = ( x, y, z );
    }

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < _id_8AF33769F877B5D6.size; _id_AC0E594AC96AA3A8++ )
    {
        start = _id_8AF33769F877B5D6[_id_AC0E594AC96AA3A8];

        if ( _id_AC0E594AC96AA3A8 + 1 >= _id_8AF33769F877B5D6.size )
            end = _id_8AF33769F877B5D6[0];
        else
            end = _id_8AF33769F877B5D6[_id_AC0E594AC96AA3A8 + 1];

        thread debugline( start, end, color );
    }
}

debugprint( _id_CDCD3178F5176585, _id_E94B62032A5AE9C3 )
{
    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 600; _id_AC0E594AC96AA3A8++ )
        wait 0.05;
}

onweapondamage( einflictor, objweapon, meansofdeath, damage, eattacker )
{
    self endon( "death_or_disconnect" );

    if ( !scripts\mp\utility\player::isreallyalive( self ) )
        return;

    _id_49E6EF3EDADD524E = _func_F581838CE4328F7A( objweapon );

    switch ( _id_49E6EF3EDADD524E )
    {
        case "pac_sentry_turret":
        case "chopper_gunner_turret":
        case "thermite_av":
        case "concussion_grenade":
        case "flash_grenade":
        case "claymore_radial":
        case "molotov":
        case "thermite_ap":
            break;
        case "thermite":
            scripts\cp_mp\utility\shellshock_utility::_shellshock( "thermite_mp", "explosion", 0.5 );
            break;
        case "frag_grenade":
        case "claymore":
        case "at_mine":
        case "semtex":
        case "c4":
            scripts\cp_mp\utility\shellshock_utility::_shellshock( "frag_grenade_mp", "explosion", 2 );
            break;
        default:
            scripts\mp\shellshock::shellshockondamage( meansofdeath, damage );
            break;
    }
}

updatelastweapon()
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    self.lastnormalweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, nullweapon() );
    self.lastweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, nullweapon() );
    self.lastcacweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ) && scripts\mp\utility\weapon::iscacprimaryorsecondary( self.spawnweaponobj ), self.spawnweaponobj, nullweapon() );
    setlastdroppableweaponobj( scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, nullweapon() ) );

    for (;;)
    {
        self waittill( "weapon_change", _id_82533969B4683DE4 );
        self.lastweaponobj = _id_82533969B4683DE4;

        if ( isnormallastweapon( _id_82533969B4683DE4 ) )
            self.lastnormalweaponobj = _id_82533969B4683DE4;

        if ( isdroppableweapon( _id_82533969B4683DE4 ) )
            setlastdroppableweaponobj( _id_82533969B4683DE4 );

        if ( scripts\mp\utility\weapon::iscacprimaryorsecondary( _id_82533969B4683DE4 ) )
            self.lastcacweaponobj = _id_82533969B4683DE4;
    }
}

isnormallastweapon( objweapon )
{
    if ( objweapon.basename == "none" )
        return 0;

    if ( objweapon.classname == "turret" )
        return 0;

    if ( scripts\mp\utility\weapon::issuperweapon( objweapon.basename ) )
        return 0;

    if ( _id_2669878CF5A1B6BC::iskillstreakweapon( objweapon.basename ) )
        return 0;

    if ( scripts\mp\utility\weapon::isspecialmeleeweapon( objweapon ) )
        return 0;

    if ( objweapon.inventorytype != "primary" && objweapon.inventorytype != "altmode" )
        return 0;

    return 1;
}

isdroppableweapon( objweapon )
{
    if ( objweapon.basename == "none" )
        return 0;

    if ( isfistweapon( objweapon.basename ) )
        return 0;

    if ( isbombplantweapon( objweapon.basename ) )
        return 0;

    if ( _id_2669878CF5A1B6BC::iskillstreakweapon( objweapon.basename ) )
        return 0;

    if ( scripts\mp\utility\weapon::issuperweapon( objweapon.basename ) )
        return 0;

    if ( objweapon.inventorytype != "primary" )
        return 0;

    if ( objweapon.classname == "turret" )
        return 0;

    if ( !scripts\mp\utility\weapon::iscacprimaryweapon( objweapon.basename ) && !scripts\mp\utility\weapon::iscacsecondaryweapon( objweapon.basename ) )
        return 0;

    return 1;
}

updatemovespeedonweaponchange()
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );

    for (;;)
    {
        self waittill( "weapon_change", _id_82533969B4683DE4 );

        if ( _id_82533969B4683DE4.basename == "none" )
            continue;
        else if ( scripts\mp\utility\weapon::issuperweapon( _id_82533969B4683DE4.basename ) )
        {
            updatemovespeedscale();
            continue;
        }
        else if ( _id_2669878CF5A1B6BC::iskillstreakweapon( _id_82533969B4683DE4.basename ) )
            continue;
        else if ( _id_82533969B4683DE4.basename == "iw9_me_fists_mp_ls" )
        {
            updatemovespeedscale();
            continue;
        }
        else if ( _id_82533969B4683DE4.inventorytype != "primary" && _id_82533969B4683DE4.inventorytype != "altmode" )
            continue;

        updatemovespeedscale();
    }
}

getweaponspeedslowest()
{
    _id_6155FF1652D3374F = 2.0;
    self.weaponlist = self getweaponslistprimaries();

    if ( self.weaponlist.size )
    {
        foreach ( weapon in self.weaponlist )
        {
            if ( scripts\mp\utility\weapon::issuperweapon( weapon ) )
                weaponspeed = scripts\mp\supers::getmovespeedforsuperweapon( weapon );
            else if ( _id_2669878CF5A1B6BC::iskillstreakweapon( weapon ) )
                weaponspeed = scripts\cp_mp\utility\killstreak_utility::_id_3F76336D7D0B7587( weapon );
            else if ( scripts\mp\utility\weapon::isgamemodeweapon( weapon ) )
                weaponspeed = getgamemodeweaponspeed( weapon );
            else
                weaponspeed = getweaponspeed( weapon );

            if ( weaponspeed == 0 )
                continue;

            if ( weaponspeed < _id_6155FF1652D3374F )
                _id_6155FF1652D3374F = weaponspeed;
        }
    }
    else
        _id_6155FF1652D3374F = 0.85;

    _id_6155FF1652D3374F = clampweaponspeed( _id_6155FF1652D3374F );
    return _id_6155FF1652D3374F;
}

getweaponspeed( weapon )
{
    rootweapon = _id_2669878CF5A1B6BC::getweaponrootname( weapon );

    if ( !isdefined( rootweapon ) || !isdefined( level.weaponmapdata[rootweapon] ) || !isdefined( level.weaponmapdata[rootweapon].speed ) )
        return 1.0;

    return level.weaponmapdata[rootweapon].speed;
}

getgamemodeweaponspeed( weapon )
{
    return 0.93;
}

clampweaponspeed( value )
{
    return clamp( value, 0.0, 1.0 );
}

updateviewkickscale( _id_072BC79F0750FCA9 )
{
    if ( isdefined( _id_072BC79F0750FCA9 ) )
        self.viewkickscale = _id_072BC79F0750FCA9;

    if ( isdefined( self.overchargeviewkickscale ) )
        _id_072BC79F0750FCA9 = self.overchargeviewkickscale;
    else if ( isdefined( self.overrideviewkickscale ) )
    {
        _id_072BC79F0750FCA9 = self.overrideviewkickscale;
        _id_6651DEF69449C4A3 = scripts\mp\utility\weapon::weapongetflinchtype( self getcurrentweapon() );

        if ( _id_6651DEF69449C4A3 == 1 )
            _id_072BC79F0750FCA9 = self.overrideviewkickscalepistol;
        else if ( _id_6651DEF69449C4A3 == 3 )
            _id_072BC79F0750FCA9 = self.overrideviewkickscaledmr;
        else if ( _id_6651DEF69449C4A3 == 4 )
            _id_072BC79F0750FCA9 = self.overrideviewkickscalesniper;
    }
    else if ( isdefined( self.viewkickscale ) )
        _id_072BC79F0750FCA9 = self.viewkickscale;
    else
        _id_072BC79F0750FCA9 = 1.0;

    _id_072BC79F0750FCA9 = clamp( _id_072BC79F0750FCA9, 0.0, 1.0 );
    self setviewkickscale( _id_072BC79F0750FCA9 );
}

updatemovespeedscale()
{
    _id_8F053B6F8634C100 = undefined;

    if ( isdefined( self.playerstreakspeedscale ) )
    {
        _id_8F053B6F8634C100 = 1.0;
        _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + self.playerstreakspeedscale;
    }
    else
    {
        _id_8F053B6F8634C100 = getplayerspeedbyweapon( self );

        if ( isdefined( self.overrideweaponspeed_speedscale ) )
            _id_8F053B6F8634C100 = self.overrideweaponspeed_speedscale;

        _id_F30C40867C01E4F9 = self.chill_data;

        if ( isdefined( _id_F30C40867C01E4F9 ) && isdefined( _id_F30C40867C01E4F9.speedmod ) )
            _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + _id_F30C40867C01E4F9.speedmod;

        if ( isdefined( self.gasspeedmod ) )
            _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + self.gasspeedmod;

        if ( isdefined( self._id_2CEB4AD39CF2F904 ) )
            _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + self._id_2CEB4AD39CF2F904;

        if ( isdefined( self.disabledspeedmod ) )
            _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + self.disabledspeedmod;

        if ( isdefined( self.speedonkillmod ) )
            _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + self.speedonkillmod;

        if ( isdefined( self.momentumspeedincrease ) )
            _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + self.momentumspeedincrease;
    }

    self.weaponspeed = _id_8F053B6F8634C100;

    if ( !isdefined( self.combatspeedscalar ) )
        self.combatspeedscalar = 1;

    _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + ( self.movespeedscaler - 1.0 );
    _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + ( self.combatspeedscalar - 1.0 );
    _id_8F053B6F8634C100 = clamp( _id_8F053B6F8634C100, 0.0, 1.08 );

    if ( isdefined( self.fastcrouchspeedmod ) )
        _id_8F053B6F8634C100 = _id_8F053B6F8634C100 + self.fastcrouchspeedmod;

    self setmovespeedscale( _id_8F053B6F8634C100 );
}

getplayerspeedbyweapon( player )
{
    weaponspeed = 1.0;
    self.weaponlist = self getweaponslistprimaries();

    if ( !self.weaponlist.size )
        weaponspeed = 0.85;
    else
    {
        objweapon = self getcurrentweapon();

        if ( !isdefined( objweapon ) )
            weaponspeed = getweaponspeedslowest();
        else if ( scripts\mp\utility\weapon::issuperweapon( objweapon.basename ) )
            weaponspeed = scripts\mp\supers::getmovespeedforsuperweapon( objweapon );
        else if ( scripts\mp\utility\weapon::isgamemodeweapon( objweapon.basename ) )
            weaponspeed = getgamemodeweaponspeed( objweapon );
        else if ( _id_2669878CF5A1B6BC::iskillstreakweapon( objweapon.basename ) )
            weaponspeed = scripts\cp_mp\utility\killstreak_utility::_id_3F76336D7D0B7587( objweapon );
        else if ( scripts\mp\utility\weapon::isgunlessweapon( objweapon.basename ) )
            weaponspeed = 0.85;
        else
        {
            if ( objweapon.inventorytype != "primary" && objweapon.inventorytype != "altmode" || scripts\mp\utility\weapon::ismeleeoverrideweapon( objweapon ) )
            {
                if ( isdefined( self.lastnormalweaponobj ) )
                    objweapon = self.lastnormalweaponobj;
                else
                    objweapon = undefined;
            }

            if ( !self hasweapon( objweapon ) )
                weaponspeed = getweaponspeedslowest();
            else
            {
                weaponspeed = getweaponspeed( objweapon );

                if ( scripts\cp_mp\utility\game_utility::_id_0B2C4B42F9236924() )
                {
                    class = weaponclass( objweapon );

                    if ( isdefined( level._id_26109C02A53CEA84 ) && isdefined( level._id_26109C02A53CEA84[class] ) )
                        weaponspeed = level._id_26109C02A53CEA84[class];
                }
            }
        }
    }

    weaponspeed = clampweaponspeed( weaponspeed );
    return weaponspeed;
}

stancerecoiladjuster()
{
    if ( !isplayer( self ) )
        return;

    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    self notifyonplayercommand( "adjustedStance", "+stance" );
    self notifyonplayercommand( "adjustedStance", "+goStand" );

    if ( !self isconsoleplayer() && !isai( self ) )
    {
        self notifyonplayercommand( "adjustedStance", "+togglecrouch" );
        self notifyonplayercommand( "adjustedStance", "toggleprone" );
        self notifyonplayercommand( "adjustedStance", "+movedown" );
        self notifyonplayercommand( "adjustedStance", "-movedown" );
        self notifyonplayercommand( "adjustedStance", "+prone" );
        self notifyonplayercommand( "adjustedStance", "-prone" );
    }

    for (;;)
    {
        scripts\engine\utility::waittill_any_3( "adjustedStance", "sprint_begin", "weapon_change" );
        wait 0.5;
        stance = self getstance();
        stancerecoilupdate( stance );
    }
}

stancerecoilupdate( stance )
{
    weapon = self getcurrentprimaryweapon();
    _id_8F7FAD0B4F9853BF = 0;

    if ( isrecoilreducingweapon( weapon ) )
        _id_8F7FAD0B4F9853BF = getrecoilreductionvalue();

    if ( stance == "prone" )
    {
        _id_3A88DF1A7869A537 = scripts\mp\utility\weapon::getweapongroup( weapon );

        if ( _id_3A88DF1A7869A537 == "weapon_lmg" )
        {
            scripts\mp\utility\weapon::setrecoilscale( 0, 0 );
            return;
        }

        if ( _id_3A88DF1A7869A537 == "weapon_sniper" )
        {
            if ( weapon hasattachment( "barrelbored" ) )
            {
                scripts\mp\utility\weapon::setrecoilscale( 0, 0 + _id_8F7FAD0B4F9853BF );
                return;
            }

            scripts\mp\utility\weapon::setrecoilscale( 0, 0 + _id_8F7FAD0B4F9853BF );
            return;
            return;
        }

        scripts\mp\utility\weapon::setrecoilscale();
        return;
        return;
    }
    else if ( stance == "crouch" )
    {
        _id_3A88DF1A7869A537 = scripts\mp\utility\weapon::getweapongroup( weapon );

        if ( _id_3A88DF1A7869A537 == "weapon_lmg" )
        {
            scripts\mp\utility\weapon::setrecoilscale( 0, 0 );
            return;
        }

        if ( _id_3A88DF1A7869A537 == "weapon_sniper" )
        {
            if ( weapon hasattachment( "barrelbored" ) )
            {
                scripts\mp\utility\weapon::setrecoilscale( 0, 0 + _id_8F7FAD0B4F9853BF );
                return;
            }

            scripts\mp\utility\weapon::setrecoilscale( 0, 0 + _id_8F7FAD0B4F9853BF );
            return;
            return;
        }

        scripts\mp\utility\weapon::setrecoilscale();
        return;
        return;
    }
    else if ( _id_8F7FAD0B4F9853BF > 0 )
        scripts\mp\utility\weapon::setrecoilscale( 0, _id_8F7FAD0B4F9853BF );
    else
        scripts\mp\utility\weapon::setrecoilscale();
}

deleteallgrenades()
{
    if ( isdefined( level.grenades ) )
    {
        foreach ( grenade in level.grenades )
        {
            if ( isdefined( grenade ) && !istrue( grenade.exploding ) && !isplantedequipment( grenade ) )
                grenade delete();
        }
    }

    if ( isdefined( level.missiles ) )
    {
        foreach ( missile in level.missiles )
        {
            if ( isdefined( missile ) && !istrue( missile.exploding ) && !isplantedequipment( missile ) )
                missile delete();
        }
    }
}

minegettwohitthreshold()
{
    return 80;
}

minedamagemonitor( _id_ED674BB1196F8987 )
{
    self endon( "mine_selfdestruct" );
    self endon( "death" );
    self setcandamage( 1 );
    self.maxhealth = 100000;
    self.health = self.maxhealth;
    attacker = undefined;
    hits = scripts\engine\utility::_id_53C4C53197386572( _id_ED674BB1196F8987, 1 );
    damagefeedback = "hitequip";

    for (;;)
    {
        self waittill( "damage", damage, attacker, direction_vec, point, type, modelname, tagname, partname, idflags, objweapon, origin, angles, normal, inflictor );
        objweapon = scripts\mp\utility\weapon::mapweapon( objweapon, inflictor );
        _id_7A541E653B7997DB = attacker;

        if ( !isplayer( attacker ) && !isagent( attacker ) )
        {
            if ( isdefined( attacker.owner ) && isplayer( attacker.owner ) )
                _id_7A541E653B7997DB = attacker.owner;
        }

        if ( !isplayer( _id_7A541E653B7997DB ) && !isagent( _id_7A541E653B7997DB ) )
            continue;

        if ( isdefined( objweapon ) && isendstr( objweapon.basename, "betty_mp" ) )
            continue;

        if ( !friendlyfirecheck( self.owner, _id_7A541E653B7997DB ) )
            continue;

        if ( scripts\mp\utility\damage::non_player_should_ignore_damage( _id_7A541E653B7997DB, objweapon, inflictor, type ) )
            continue;

        _id_8C97D5D29E3F5523 = scripts\engine\utility::ter_op( scripts\mp\utility\damage::isfmjdamage( objweapon, type ) || damage >= 80, 2, 1 );
        hits = hits - _id_8C97D5D29E3F5523;
        equipmenthit( self.owner, _id_7A541E653B7997DB, objweapon, type );

        if ( hits <= 0 )
            break;
        else
            _id_7A541E653B7997DB _id_5762AC2F22202BA2::updatedamagefeedback( damagefeedback );
    }

    self notify( "mine_destroyed" );

    if ( isdefined( type ) && ( issubstr( type, "MOD_GRENADE" ) || issubstr( type, "MOD_EXPLOSIVE" ) ) )
        self.waschained = 1;

    if ( isdefined( idflags ) && idflags & level.idflags_penetration )
        self.wasdamagedfrombulletpenetration = 1;

    if ( isdefined( idflags ) && idflags & level.idflags_ricochet )
        self.wasdamagedfrombulletricochet = 1;

    self.wasdamaged = 1;

    if ( isdefined( _id_7A541E653B7997DB ) )
        self.damagedby = _id_7A541E653B7997DB;

    if ( isdefined( self.killcament ) )
        self.killcament.damagedby = _id_7A541E653B7997DB;

    if ( isplayer( _id_7A541E653B7997DB ) )
    {
        _id_7A541E653B7997DB _id_5762AC2F22202BA2::updatedamagefeedback( damagefeedback );

        if ( _id_7A541E653B7997DB != self.owner && _id_7A541E653B7997DB.team != self.owner.team )
        {
            _id_7A541E653B7997DB scripts\mp\killstreaks\killstreaks::givescoreforequipment( self, objweapon );
            _id_7A541E653B7997DB scripts\mp\battlechatter_mp::equipmentdestroyed( self );
            scripts\cp_mp\challenges::equipmentdestroyed( inflictor, attacker, damage, idflags, undefined, objweapon, undefined, _id_7A541E653B7997DB.modifiers );
        }
    }

    if ( level.teambased )
    {
        if ( isdefined( _id_7A541E653B7997DB ) && isdefined( _id_7A541E653B7997DB.pers["team"] ) && isdefined( self.owner ) && isdefined( self.owner.pers["team"] ) )
        {
            if ( _id_7A541E653B7997DB.pers["team"] != self.owner.pers["team"] )
                _id_7A541E653B7997DB notify( "destroyed_equipment" );
        }
    }
    else if ( isdefined( self.owner ) && isdefined( _id_7A541E653B7997DB ) && _id_7A541E653B7997DB != self.owner )
        _id_7A541E653B7997DB notify( "destroyed_equipment" );

    scripts\cp_mp\challenges::minedestroyed( self, _id_7A541E653B7997DB, type );
    self notify( "detonateExplosive", _id_7A541E653B7997DB );
}

mineselfdestruct()
{
    self endon( "mine_triggered" );
    self endon( "mine_destroyed" );
    self endon( "death" );
    wait( level.mineselfdestructtime + randomfloat( 0.4 ) );
    self notify( "mine_selfdestruct" );
    self notify( "detonateExplosive" );
}

mineexplodeonnotify()
{
    self endon( "death" );
    level endon( "game_ended" );
    self waittill( "detonateExplosive", attacker );

    if ( !isdefined( self ) || !isdefined( self.owner ) )
        return;

    if ( !isdefined( attacker ) )
        attacker = self.owner;

    config = self.config;
    vfxtag = config.vfxtag;

    if ( !isdefined( vfxtag ) )
        vfxtag = "tag_fx";

    tagorigin = self gettagorigin( vfxtag );

    if ( !isdefined( tagorigin ) )
        tagorigin = self gettagorigin( "tag_origin" );

    self notify( "explode", tagorigin );
    waitframe();

    if ( !isdefined( self ) || !isdefined( self.owner ) )
        return;

    self hide();

    if ( isdefined( config.onexplodefunc ) )
        self thread [[ config.onexplodefunc ]]();

    if ( isdefined( config.onexplodesfx ) )
        self playsound( config.onexplodesfx );

    onexplodevfx = scripts\engine\utility::ter_op( isdefined( config.onexplodevfx ), config.onexplodevfx, level.mine_explode );
    playfx( onexplodevfx, tagorigin );
    minedamagemin = scripts\engine\utility::ter_op( isdefined( config.minedamagemin ), config.minedamagemin, level.minedamagemin );
    minedamagemax = scripts\engine\utility::ter_op( isdefined( config.minedamagemax ), config.minedamagemax, level.minedamagemax );
    minedamageradius = scripts\engine\utility::ter_op( isdefined( config.minedamageradius ), config.minedamageradius, level.minedamageradius );

    if ( minedamagemax > 0 )
        self radiusdamage( self.origin, minedamageradius, minedamagemax, minedamagemin, attacker, "MOD_EXPLOSIVE", self.weapon_name );

    if ( isdefined( self.owner ) )
        self.owner thread scripts\mp\utility\dialog::leaderdialogonplayer( "mine_destroyed", undefined, undefined, self.origin );

    wait 0.2;
    deleteexplosive();
}

deleteplacedequipment()
{
    if ( isdefined( self.plantedlethalequip ) )
    {
        foreach ( _id_2EB789D043254817 in self.plantedlethalequip )
        {
            if ( isdefined( _id_2EB789D043254817 ) )
                _id_2EB789D043254817 deleteexplosive();
        }
    }

    self.plantedlethalequip = [];

    if ( isdefined( self.plantedtacticalequip ) )
    {
        foreach ( _id_2EB789D043254817 in self.plantedtacticalequip )
        {
            if ( isdefined( _id_2EB789D043254817 ) )
                _id_2EB789D043254817 deleteexplosive();
        }
    }

    self.plantedtacticalequip = [];
    _id_8442DBB6E918259F = scripts\mp\utility\game::isanymlgmatch();

    if ( isdefined( self.plantedhackedequip ) )
    {
        foreach ( index, _id_2EB789D043254817 in self.plantedhackedequip )
        {
            if ( isdefined( _id_2EB789D043254817 ) && ( !_id_8442DBB6E918259F || !istrue( _id_2EB789D043254817.issuper ) ) )
            {
                _id_2EB789D043254817 deleteexplosive();
                self.plantedhackedequip[index] = undefined;
            }
        }

        self.plantedhackedequip = scripts\engine\utility::array_removeundefined( self.plantedhackedequip );
    }

    if ( _id_8442DBB6E918259F && isdefined( self.plantedsuperequip ) )
    {
        foreach ( index, _id_2EB789D043254817 in self.plantedsuperequip )
        {
            _id_2EB789D043254817 deleteexplosive();
            self.plantedsuperequip[index] = undefined;
        }

        self.plantedsuperequip = scripts\engine\utility::array_removeundefined( self.plantedsuperequip );
    }
}

deletedisparateplacedequipment()
{
    _id_0E8F6FDB8F100FF7 = scripts\mp\equipment::getcurrentequipment( "primary" );

    foreach ( _id_2EB789D043254817 in self.plantedlethalequip )
    {
        if ( isdefined( _id_2EB789D043254817 ) )
        {
            if ( !isdefined( _id_2EB789D043254817.equipmentref ) || !isdefined( _id_0E8F6FDB8F100FF7 ) || _id_2EB789D043254817.equipmentref != _id_0E8F6FDB8F100FF7 )
                _id_2EB789D043254817 deleteexplosive();
        }
    }

    tactical = scripts\mp\equipment::getcurrentequipment( "secondary" );

    foreach ( _id_2EB789D043254817 in self.plantedtacticalequip )
    {
        if ( isdefined( _id_2EB789D043254817 ) )
        {
            if ( !isdefined( _id_2EB789D043254817.equipmentref ) || !isdefined( tactical ) || _id_2EB789D043254817.equipmentref != tactical )
                _id_2EB789D043254817 deleteexplosive();
        }
    }
}

equipmentdeletevfx( position, angles )
{
    if ( isdefined( position ) )
    {
        if ( isdefined( angles ) )
        {
            forward = anglestoforward( angles );
            up = anglestoup( angles );
            playfx( scripts\engine\utility::getfx( "equipment_explode" ), position, forward, up );
            playfx( scripts\engine\utility::getfx( "equipment_smoke" ), position, forward, up );
        }
        else
        {
            playfx( scripts\engine\utility::getfx( "equipment_explode" ), position );
            playfx( scripts\engine\utility::getfx( "equipment_smoke" ), position );
        }

        playsoundatpos( position, "mp_killstreak_disappear" );
    }
    else if ( isdefined( self ) )
    {
        origin = self.origin;
        forward = anglestoforward( self.angles );
        up = anglestoup( self.angles );
        playfx( scripts\engine\utility::getfx( "equipment_explode" ), origin, forward, up );
        playfx( scripts\engine\utility::getfx( "equipment_smoke" ), origin, forward, up );
        self playsound( "mp_killstreak_disappear" );
    }
}

grenadestuckto( grenade, stuckto, _id_05F6265D8D7EE3C8 )
{
    if ( !isdefined( self ) )
    {
        grenade.stuckenemyentity = stuckto;
        stuckto.stuckbygrenade = grenade;
        stuckto.stuckbygrenadeowner = grenade.owner;
    }
    else if ( level.teambased && scripts\engine\utility::is_equal( stuckto.team, self.team ) )
        grenade.isstuck = "friendly";
    else
    {
        _id_D658F0B6BC4FD513 = undefined;
        _id_0D5F11D86F917656 = undefined;

        switch ( grenade.weapon_name )
        {
            case "semtex_mp":
                _id_D658F0B6BC4FD513 = "semtex_stuck";
                _id_0D5F11D86F917656 = "stat_CAFA7AD7442C35D5";
                break;
            case "molotov_mp":
                _id_D658F0B6BC4FD513 = "molotov_stuck";
                _id_0D5F11D86F917656 = "stat_CAFA7AD7442C35D5";
                break;
            case "thermite_mp":
                _id_D658F0B6BC4FD513 = "thermite_attacker_stuck";
                _id_0D5F11D86F917656 = "stat_CAFA7AD7442C35D5";
                break;
            case "sonar_pulse_mp":
                _id_D658F0B6BC4FD513 = "sonar_pulse_stuck";
                break;
            case "shock_stick_mp":
                _id_D658F0B6BC4FD513 = "shock_stick_stuck";
                _id_0D5F11D86F917656 = "stat_CAFA7AD7442C35D5";
                break;
            case "bunkerbuster_mp":
                _id_D658F0B6BC4FD513 = "bunkerbuster_stuck";
                _id_0D5F11D86F917656 = "stat_CAFA7AD7442C35D5";
                break;
        }

        grenade.isstuck = "enemy";
        grenade.stuckenemyentity = stuckto;
        stuckto.stuckbygrenade = grenade;
        stuckto.stuckbygrenadeowner = grenade.owner;
        self notify( "grenade_stuck_enemy" );

        if ( isdefined( _id_0D5F11D86F917656 ) )
            level thread scripts\mp\battlechatter_mp::trysaylocalsound( stuckto, _id_0D5F11D86F917656 );

        if ( !istrue( _id_05F6265D8D7EE3C8 ) )
            grenadestucktosplash( _id_D658F0B6BC4FD513, stuckto );
    }
}

grenadestucktosplash( _id_D658F0B6BC4FD513, stuckto )
{
    player = self;

    if ( isplayer( stuckto ) && isdefined( _id_D658F0B6BC4FD513 ) )
    {
        if ( isdefined( player.owner ) )
            player = player.owner;

        player scripts\mp\hud_message::showsplash( _id_D658F0B6BC4FD513 );
    }

    player thread scripts\mp\utility\points::_id_0366980B6A8796AE( "stat_3B7863DCDFF98B13" );
}

outlineequipmentforowner( equipment )
{

}

outlinesuperequipment( equipment, player )
{
    if ( level.teambased )
        thread outlinesuperequipmentforteam( equipment, player );
    else
        thread outlinesuperequipmentforplayer( equipment, player );
}

outlinesuperequipmentforteam( equipment, player )
{
    id = scripts\mp\utility\outline::outlineenableforteam( equipment, player.team, "outline_nodepth_cyan", "killstreak" );
    equipment waittill( "death" );
    scripts\mp\utility\outline::outlinedisable( id, equipment );
}

outlinesuperequipmentforplayer( equipment, player )
{
    id = scripts\mp\utility\outline::outlineenableforplayer( equipment, player, "outline_nodepth_cyan", "killstreak" );
    equipment waittill( "death" );
    scripts\mp\utility\outline::outlinedisable( id, equipment );
}

grenadeheldatdeath()
{
    return istrue( self.grenadeheldatdeath );
}

grenadehealthatdeathframeupdatecallback()
{
    self.grenadeheldatdeath = !isnullweapon( self getheldoffhand() );
}

trace_impale( vpoint, endpoint )
{
    contents = physics_createcontents( [ "physicscontents_glass", "physicscontents_missileclip", "physicscontents_vehicle", "physicscontents_item" ] );
    trace = scripts\engine\trace::ray_trace_detail( vpoint, endpoint, level.players, contents, undefined, 1 );
    return trace;
}

impale_endpoint( vpoint, vdir )
{
    endpoint = vpoint + vdir * 4096;
    return endpoint;
}

impale( eattacker, _id_E851FFA44B7E0D54, objweapon, _id_F98A651C69C13CBA, vpoint, vdir, shitloc, _id_920FF4456CE9A2FC, _id_19F6F25777706F34 )
{
    _id_E851FFA44B7E0D54 endon( "death_or_disconnect" );

    if ( !isdefined( _id_E851FFA44B7E0D54.body ) )
        return;

    playfx( scripts\engine\utility::getfx( "penetration_railgun_impact" ), vpoint );
    endpoint = impale_endpoint( vpoint, vdir );
    trace = trace_impale( vpoint, endpoint );
    endpoint = trace["position"] - vdir * 12;
    _id_80C97B146B16BE3F = length( endpoint - vpoint );
    flighttime = _id_80C97B146B16BE3F / 1000;
    flighttime = max( flighttime, 0.05 );

    if ( trace["hittype"] != "hittype_world" )
        flighttime = 0;

    _id_6CB8A80078D195D0 = flighttime > 0.05;

    if ( isdefined( _id_E851FFA44B7E0D54 ) )
        _id_E851FFA44B7E0D54.body startragdoll();

    waitframe();

    if ( _id_6CB8A80078D195D0 )
    {
        _id_A0480A10EE4E345F = vdir;
        _id_C323F0CB880A051F = anglestoup( eattacker.angles );
        _id_C1148FF802BE2880 = vectorcross( _id_A0480A10EE4E345F, _id_C323F0CB880A051F );
        _id_483E4E4E5B094BE2 = scripts\engine\utility::spawn_tag_origin( vpoint, axistoangles( _id_A0480A10EE4E345F, _id_C1148FF802BE2880, _id_C323F0CB880A051F ) );
        _id_483E4E4E5B094BE2 moveto( endpoint, flighttime );
        _id_D04F3DA69954A74E = spawnragdollconstraint( _id_E851FFA44B7E0D54.body, shitloc, _id_920FF4456CE9A2FC, _id_19F6F25777706F34 );
        _id_D04F3DA69954A74E.origin = _id_483E4E4E5B094BE2.origin;
        _id_D04F3DA69954A74E.angles = _id_483E4E4E5B094BE2.angles;
        _id_D04F3DA69954A74E linkto( _id_483E4E4E5B094BE2 );

        if ( flighttime > 1 )
            thread impale_detachaftertime( _id_D04F3DA69954A74E, 1 );

        thread impale_cleanup( _id_E851FFA44B7E0D54, _id_483E4E4E5B094BE2, flighttime + 0.25 );
        _id_483E4E4E5B094BE2 thread impale_effects( endpoint, flighttime );
    }
}

impale_detachaftertime( _id_D04F3DA69954A74E, time )
{
    wait( time );

    if ( isdefined( _id_D04F3DA69954A74E ) )
        _id_D04F3DA69954A74E delete();
}

impale_effects( endpoint, time )
{
    wait( clamp( time - 0.05, 0.05, 20 ) );
    playfx( scripts\engine\utility::getfx( "vfx_penetration_railgun_impact" ), endpoint );
}

impale_cleanup( _id_E851FFA44B7E0D54, _id_483E4E4E5B094BE2, time )
{
    if ( isdefined( _id_E851FFA44B7E0D54 ) )
        _id_E851FFA44B7E0D54 scripts\engine\utility::waittill_any_timeout_1( time, "death_or_disconnect" );

    _id_483E4E4E5B094BE2 delete();
}

codecallback_getprojectilespeedscale( _id_CF87D5DCE2780061, objweapon )
{
    return [ 1.0, 1.0 ];
}

setplayerstunned()
{
    if ( !isdefined( self.isstunned ) )
        self.isstunned = 1;
    else
        self.isstunned++;
}

setplayerunstunned()
{
    self.isstunned--;
}

isstunned()
{
    return isdefined( self.debuffedbyplayers ) && isdefined( self.debuffedbyplayers["concussion_grenade_mp"] );
}

setplayerblinded()
{
    if ( !isdefined( self.isblinded ) )
        self.isblinded = 1;
    else
        self.isblinded++;
}

setplayerunblinded()
{
    self.isblinded--;
}

isblinded()
{
    return isdefined( self.debuffedbyplayers ) && isdefined( self.debuffedbyplayers["flash_grenade_mp"] );
}

isblindedby( player )
{
    if ( !isdefined( player ) )
        return 0;

    weapon = "flash_grenade_mp";
    entnum = player getentitynumber();

    if ( isdefined( self.debuffedbyplayers ) && isdefined( self.debuffedbyplayers[weapon] ) && isdefined( self.debuffedbyplayers[weapon][entnum] ) )
        return 1;

    return 0;
}

isstunnedby( player )
{
    if ( !isdefined( player ) )
        return 0;

    weapon = "concussion_grenade_mp";
    entnum = player getentitynumber();

    if ( isdefined( self.debuffedbyplayers ) && isdefined( self.debuffedbyplayers[weapon] ) && isdefined( self.debuffedbyplayers[weapon][entnum] ) )
        return 1;

    return 0;
}

isstunnedorblinded()
{
    return isblinded() || isstunned();
}

cleanupconcussionstun( time )
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    wait( time );
    setplayerunstunned();
}

applyweaponsonicstun()
{
    self endon( "death_or_disconnect" );
    wait 0.1;

    if ( isdefined( self ) && isplayer( self ) && !isbot( self ) )
    {
        self playlocalsound( "sonic_shotgun_debuff" );
        self setsoundsubmix( "sonic_shotgun_impact" );
    }
}

watchinvalidweaponchange()
{
    self endon( "death_or_disconnect" );

    for (;;)
    {
        self waittill( "weapon_switch_invalid", _id_DDF65301F7D23098 );
        currentweapon = self getcurrentweapon();

        if ( currentweapon.inventorytype == "item" || currentweapon.inventorytype == "exclusive" )
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( self.lastdroppableweaponobj );
    }
}

weaponhasselectableoptic( fullweaponname )
{
    rootweapon = _id_2669878CF5A1B6BC::getweaponrootname( fullweaponname );
    attachments = getweaponattachments( fullweaponname );

    foreach ( attachment in attachments )
    {
        group = attachmentgroup( attachment );

        if ( group == "rail" )
        {
            if ( scripts\mp\utility\weapon::attachmentisselectable( rootweapon, attachment ) )
                return 1;
        }
    }

    return 0;
}

watchdropweapons()
{
    self endon( "disconnect" );
    self notify( "watchDropWeapons" );
    self endon( "watchDropWeapons" );

    for (;;)
    {
        self waittill( "weapon_dropped", _id_47DCFBC98E2103EE, objweapon );

        if ( isdefined( _id_47DCFBC98E2103EE ) && isdefined( objweapon ) && !scripts\mp\utility\weapon::ismeleeonly( objweapon ) && !scripts\mp\utility\weapon::ismeleeoverrideweapon( objweapon ) && !scripts\cp_mp\utility\weapon_utility::isknifeonly( objweapon ) )
        {
            if ( _id_47DCFBC98E2103EE physics_getnumbodies() > 0 )
            {
                _id_47DCFBC98E2103EE physics_registerforcollisioncallback();
                _id_47DCFBC98E2103EE thread weapondrop_physics_callback_monitor();
            }
        }
    }
}

weapondrop_physics_callback_monitor()
{
    self endon( "death" );
    self endon( "timeout" );
    thread weapondrop_physics_timeout( 2 );
    self waittill( "collision", body0, body1, flag0, flag1, position, normal, _id_D71630B8BAF84FA8, ent );
    _id_895F3C282BC9FC68 = physics_getsurfacetypefromflags( flag1 );
    surfacetype = scripts\engine\utility::_id_53C4C53197386572( _id_895F3C282BC9FC68["name"], "" );
    _id_D6AD99E9C47D89E6 = self.classname;
    _id_164379DA1F8761C0 = "";

    if ( isdefined( self.objweapon ) && isstring( self.objweapon.basename ) && isstring( self.objweapon.material ) )
    {
        _id_D6AD99E9C47D89E6 = self.objweapon.basename;
        _id_164379DA1F8761C0 = self.objweapon.material;
    }

    _id_E7DBBE9220D5E27B( surfacetype, _id_D6AD99E9C47D89E6, _id_164379DA1F8761C0 );
}

_id_E7DBBE9220D5E27B( surfacetype, _id_D6AD99E9C47D89E6, _id_164379DA1F8761C0 )
{
    surfacetype = _func_2E84A570D6AF300A( surfacetype, "surftype_" );
    _id_D6AD99E9C47D89E6 = _func_2E84A570D6AF300A( _id_D6AD99E9C47D89E6, "weapon_" );

    if ( isstartstr( surfacetype, "user_terrain" ) )
    {
        _id_09F558BB94AEC6F2 = _func_95C6391212A25F7C( _func_2E84A570D6AF300A( surfacetype, "user_terrain" ), "_" );
        surfacetype = "user_terrain_" + _id_09F558BB94AEC6F2;
    }

    _id_67F14F8315CB0F2F = strtok( _id_D6AD99E9C47D89E6, "_" );
    _id_BDA0554655BFA690 = scripts\engine\utility::_id_53C4C53197386572( _id_67F14F8315CB0F2F[1], "" );
    _id_DE509E292A5C1450 = scripts\engine\utility::_id_53C4C53197386572( level._id_20F39C8ACB381AD5[_id_BDA0554655BFA690], "weap_drop_med" );
    _id_EE1BE0B772426CA7 = _id_BDA0554655BFA690 == "ar" || _id_BDA0554655BFA690 == "sm" || _id_BDA0554655BFA690 == "sh" || _id_BDA0554655BFA690 == "pi";
    _id_F4E5C6A725490A8D = _id_EE1BE0B772426CA7 && isstring( _id_164379DA1F8761C0 ) && _id_164379DA1F8761C0 == "polymer";

    if ( istrue( _id_F4E5C6A725490A8D ) )
        _id_DE509E292A5C1450 = _id_DE509E292A5C1450 + "_poly";

    if ( soundexists( _id_DE509E292A5C1450 ) )
        self playsurfacesound( _id_DE509E292A5C1450, surfacetype );
    else
    {

    }
}

weapondrop_physics_timeout( time )
{
    wait( time );
    self notify( "timeout" );
}

watchgrenadeaxepickup( player, _id_B37714A572B93F0E )
{
    self endon( "death" );
    level endon( "game_ended" );

    if ( !isdefined( self.weapon_name ) && isdefined( _id_B37714A572B93F0E ) )
        self.weapon_name = _id_B37714A572B93F0E;

    self waittill( "missile_stuck", stuckto, _id_16A48D7056E5C472 );

    if ( isdefined( stuckto ) && ( isplayer( stuckto ) || isagent( stuckto ) ) )
    {
        _id_E24A4C740B224AA0 = _id_16A48D7056E5C472 == "tag_flicker";
        _id_853178727321999C = stuckto scripts\mp\utility\perk::_hasperk( "specialty_rearguard" ) && _id_16A48D7056E5C472 == "tag_origin";
        _id_E13E382321A8580B = isdefined( _id_16A48D7056E5C472 ) && ( _id_E24A4C740B224AA0 || _id_853178727321999C );
        _id_582286AF4FFE5B36 = isdefined( _id_16A48D7056E5C472 ) && _id_16A48D7056E5C472 == "tag_weapon";

        if ( _id_E13E382321A8580B )
        {
            playfx( scripts\engine\utility::getfx( "shield_metal_impact" ), self.origin );

            if ( isdefined( self.owner ) )
            {
                _id_3F6103D9666B07CC = self.owner;
                relaunchaxe( self.weapon_name, _id_3F6103D9666B07CC );
                return;
            }
        }
        else if ( !istrue( _id_E13E382321A8580B ) && isplayer( stuckto ) && !scripts\mp\utility\player::isreallyalive( stuckto ) && ( level.mapname == "mp_neon" || istrue( level.ragdollzerog ) ) )
            return;
    }

    _id_25E0203A75558ABA = 45;
    thread watchaxetimeout( _id_25E0203A75558ABA );
    thread watchgrenadedeath();
    objweapon = makeweaponfromstring( self.weapon_name );
    thread watchaxeuse( player, objweapon );
    thread watchaxeautopickup( player, objweapon );
}

axedetachfromcorpse( _id_B368413898131A3C )
{
    level endon( "game_ended" );
    _id_BE8AC1D2583CAEF7 = _id_B368413898131A3C getlinkedchildren();

    foreach ( ent in _id_BE8AC1D2583CAEF7 )
    {
        if ( !isdefined( ent ) )
            continue;

        weaponname = ent.weapon_name;
        _id_3F6103D9666B07CC = ent.owner;
        _id_8802742623974077 = ent.origin;

        if ( isdefined( weaponname ) && scripts\mp\utility\weapon::isaxeweapon( weaponname ) )
            ent relaunchaxe( weaponname, _id_3F6103D9666B07CC );
    }
}

relaunchaxe( weaponname, _id_3F6103D9666B07CC )
{
    self unlink();
    _id_8EE870EB33C71CD1 = scripts\mp\utility\weapon::getweaponbasenamescript( weaponname );
    _id_61D4C6A9EEE46112 = getsubstr( weaponname, _id_8EE870EB33C71CD1.size );
    _id_45D1215A74E32613 = _id_3F6103D9666B07CC scripts\mp\utility\weapon::_launchgrenade( "iw7_axe_mp_dummy" + _id_61D4C6A9EEE46112, self.origin, ( 0, 0, 0 ), 100, 1, self );
    _id_45D1215A74E32613 setentityowner( _id_3F6103D9666B07CC );
    _id_45D1215A74E32613 thread watchgrenadeaxepickup( _id_3F6103D9666B07CC, self.weapon_name );
}

watchaxetimeout( timeoutduration )
{
    self endon( "death" );
    level endon( "game_ended" );
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( timeoutduration );
    self delete();
}

watchaxeautopickup( player, weapon )
{
    self endon( "death" );
    level endon( "game_ended" );
    trigger = spawn( "trigger_radius", self.origin - ( 0, 0, 40 ), 0, 64, 64 );
    trigger enablelinkto();
    trigger linkto( self );
    self.knife_trigger = trigger;
    trigger endon( "death" );

    for (;;)
    {
        trigger waittill( "trigger", player );

        if ( !isplayer( player ) )
            continue;

        if ( player playercanautopickupaxe( self ) )
        {
            player playerpickupaxe( weapon, 1 );
            self delete();
            break;
        }
    }
}

watchaxeuse( player, weapon )
{
    self endon( "death" );
    level endon( "game_ended" );
    useobj = spawn( "script_model", self.origin );
    useobj linkto( self );
    self.useobj_trigger = useobj;
    useobj makeusable();
    useobj setcursorhint( "HINT_NOICON" );
    useobj sethintonobstruction( "show" );
    useobj sethintstring( &"WEAPON/PICKUP_AXE" );
    useobj sethintdisplayfov( 360 );
    useobj setusefov( 360 );
    useobj sethintdisplayrange( 64 );
    useobj setuserange( 64 );
    useobj setusepriority( 0 );
    useobj waittill( "trigger", player );
    player playerpickupaxe( weapon, 0 );
    self delete();
}

playercanautopickupaxe( _id_44DE964E96E8EC24 )
{
    if ( isdefined( _id_44DE964E96E8EC24.owner ) && self != _id_44DE964E96E8EC24.owner )
        return 0;

    _id_849C1DF4114E0A37 = self getweaponslistprimaries();
    _id_D2472BB1C9E89DEE = 0;
    _id_D3CCA4D847BE4FA4 = 0;

    foreach ( weapon in _id_849C1DF4114E0A37 )
    {
        if ( scripts\mp\utility\weapon::isaxeweapon( weapon ) && self getweaponammoclip( weapon ) == 0 )
        {
            _id_D2472BB1C9E89DEE = 1;
            break;
        }

        if ( issubstr( weapon.basename, "iw9_me_fists_mp" ) )
        {
            _id_D2472BB1C9E89DEE = 1;
            break;
        }

        if ( !weapon.isalternate )
            _id_D3CCA4D847BE4FA4++;
    }

    if ( _id_D3CCA4D847BE4FA4 < 2 )
        _id_D2472BB1C9E89DEE = 1;

    return _id_D2472BB1C9E89DEE;
}

playerpickupaxe( objweapon, _id_796C07FE4C856A8E )
{
    _id_AAA00E27A60773A1 = objweapon getnoaltweapon();
    currentweapon = self getcurrentweapon();
    _id_849C1DF4114E0A37 = self getweaponslistprimaries();

    if ( self hasweapon( objweapon ) )
    {
        _id_7EF185D0CBFCE036 = self getweaponammoclip( objweapon );

        if ( !_id_796C07FE4C856A8E && _id_7EF185D0CBFCE036 > 0 )
        {
            self dropitem( objweapon );
            scripts\cp_mp\utility\inventory_utility::_giveweapon( _id_AAA00E27A60773A1 );
        }
        else if ( !issubstr( currentweapon.basename, objweapon.basename ) )
        {
            scripts\cp_mp\utility\inventory_utility::_takeweapon( objweapon );
            scripts\cp_mp\utility\inventory_utility::_giveweapon( _id_AAA00E27A60773A1 );
        }

        _id_3BCEDEE676D43CF1 = self getweaponammoclip( currentweapon ) == 0 && scripts\mp\utility\weapon::isaxeweapon( currentweapon );
        _id_8A1EF5886931AF59 = issubstr( currentweapon.basename, "iw9_me_fists_mp" );

        if ( !_id_796C07FE4C856A8E || _id_8A1EF5886931AF59 || _id_3BCEDEE676D43CF1 )
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( _id_AAA00E27A60773A1 );

        self setweaponammoclip( _id_AAA00E27A60773A1, 1 );
        scripts\mp\hud_message::showmiscmessage( "axe" );
        return;
    }

    _id_53C6DCC71B89288F = undefined;
    _id_303858271584EB48 = 0;

    foreach ( weapon in _id_849C1DF4114E0A37 )
    {
        if ( weapon.isalternate )
            continue;

        if ( issubstr( weapon.basename, "uplinkball" ) )
            continue;

        _id_CB54202AF3C4E5B8 = self getweaponammoclip( weapon ) == 0 && scripts\mp\utility\weapon::isaxeweapon( weapon );

        if ( !isdefined( _id_53C6DCC71B89288F ) && ( weaponispreferreddrop( weapon ) || _id_CB54202AF3C4E5B8 ) )
            _id_53C6DCC71B89288F = weapon;

        _id_303858271584EB48++;
    }

    _id_0EC22A950F210E39 = undefined;

    if ( isdefined( _id_53C6DCC71B89288F ) )
        _id_0EC22A950F210E39 = _id_53C6DCC71B89288F;
    else if ( _id_303858271584EB48 >= 2 )
        _id_0EC22A950F210E39 = currentweapon;

    _id_107F42911B64CCB4 = !_id_796C07FE4C856A8E || isdefined( _id_0EC22A950F210E39 ) && issubstr( currentweapon.basename, _id_0EC22A950F210E39.basename );

    if ( isdefined( _id_0EC22A950F210E39 ) )
    {
        _id_CB54202AF3C4E5B8 = self getweaponammoclip( _id_0EC22A950F210E39 ) == 0 && scripts\mp\utility\weapon::isaxeweapon( _id_0EC22A950F210E39 );
        _id_4DC7FA49D0968728 = _id_0EC22A950F210E39.basename == "iw9_me_fists_mp";
        candrop = weaponcandrop( _id_0EC22A950F210E39 ) && !_id_CB54202AF3C4E5B8;

        if ( candrop )
        {
            _id_76F4143215683892 = self dropitem( _id_0EC22A950F210E39 );

            if ( isdefined( _id_76F4143215683892 ) )
            {
                _id_5454C4BDCBD350A7 = getcompleteweaponname( _id_0EC22A950F210E39 );

                if ( isdefined( self.tookweaponfrom[_id_5454C4BDCBD350A7] ) )
                {
                    _id_76F4143215683892.owner = self.tookweaponfrom[_id_5454C4BDCBD350A7];
                    self.tookweaponfrom[_id_5454C4BDCBD350A7] = undefined;
                }
                else
                    _id_76F4143215683892.owner = self;

                _id_76F4143215683892.targetname = "dropped_weapon";
                _id_76F4143215683892.objweapon = _id_0EC22A950F210E39;
                _id_76F4143215683892 thread watchpickup( self );
                _id_76F4143215683892 thread deletepickupafterawhile();
            }
        }
        else if ( !candrop && !( _id_4DC7FA49D0968728 && _id_303858271584EB48 < 2 ) && !( _id_CB54202AF3C4E5B8 && _id_303858271584EB48 < 2 ) )
            self takeweapon( _id_0EC22A950F210E39 );
    }

    scripts\cp_mp\utility\inventory_utility::_giveweapon( _id_AAA00E27A60773A1 );
    self setweaponammoclip( _id_AAA00E27A60773A1, 1 );

    if ( _id_107F42911B64CCB4 )
        scripts\cp_mp\utility\inventory_utility::_switchtoweapon( _id_AAA00E27A60773A1 );

    scripts\mp\hud_message::showmiscmessage( "axe" );
    fixupplayerweapons( self, _id_AAA00E27A60773A1 );
}

callback_finishweaponchange( _id_82533969B4683DE4, _id_492B944276064F63, _id_6F14F21684B6976D, _id_14F4860C3D155D12 )
{
    updatecamoscripts( _id_82533969B4683DE4, _id_492B944276064F63 );
    updateweaponscriptvfx( _id_82533969B4683DE4, _id_492B944276064F63, _id_6F14F21684B6976D, _id_14F4860C3D155D12 );
    _id_BC42FC3407BF9B82 = self.weaponchangecallbacks;

    if ( isdefined( _id_BC42FC3407BF9B82 ) )
    {
        foreach ( callback in _id_BC42FC3407BF9B82.callbacks )
            self [[ callback ]]( _id_82533969B4683DE4, _id_492B944276064F63 );

        foreach ( callback in _id_BC42FC3407BF9B82.oneshotcallbacks )
            self [[ callback ]]( _id_82533969B4683DE4, _id_492B944276064F63 );

        _id_BC42FC3407BF9B82.oneshotcallbacks = [];
    }
}

updateweaponscriptvfx( _id_DD515FCF025B2E79, _id_F0FFAFCA5D927A12, _id_6F14F21684B6976D, _id_14F4860C3D155D12 )
{
    if ( ( _id_F0FFAFCA5D927A12.basename == "none" || _id_F0FFAFCA5D927A12.basename == "alt_none" ) && isdefined( self.lastdroppableweapon ) )
    {
        if ( _id_F0FFAFCA5D927A12 == "alt_none" )
            _id_14F4860C3D155D12 = 1;
        else
            _id_14F4860C3D155D12 = 0;

        _id_F0FFAFCA5D927A12 = self.lastdroppableweapon;
    }

    clearweaponscriptvfx( _id_F0FFAFCA5D927A12, _id_14F4860C3D155D12 );
    runweaponscriptvfx( _id_DD515FCF025B2E79, _id_6F14F21684B6976D );
}

runweaponscriptvfx( _id_DD515FCF025B2E79, _id_6F14F21684B6976D )
{
    if ( !isdefined( _id_DD515FCF025B2E79 ) )
        return;

    if ( isdefined( _id_6F14F21684B6976D ) && _id_6F14F21684B6976D == 1 )
        _id_3ECEB0EB18D0E47B = "alt_" + scripts\mp\utility\weapon::getweaponbasenamescript( _id_DD515FCF025B2E79 );
    else
        _id_3ECEB0EB18D0E47B = scripts\mp\utility\weapon::getweaponbasenamescript( _id_DD515FCF025B2E79 );
}

clearweaponscriptvfx( _id_F0FFAFCA5D927A12, _id_14F4860C3D155D12 )
{
    if ( !isdefined( _id_F0FFAFCA5D927A12 ) )
        return;

    if ( isdefined( _id_14F4860C3D155D12 ) && _id_14F4860C3D155D12 == 1 )
        _id_BF67671CE57D3A6C = "alt_" + scripts\mp\utility\weapon::getweaponbasenamescript( _id_F0FFAFCA5D927A12 );
    else
        _id_BF67671CE57D3A6C = scripts\mp\utility\weapon::getweaponbasenamescript( _id_F0FFAFCA5D927A12 );

    switch ( _id_BF67671CE57D3A6C )
    {
        case "iw8_sn_delta_mp":
        case "iw8_sn_alpha50_mp":
        case "iw8_sm_uzulu_mp":
        case "iw8_sm_mpapa7_mp":
        case "iw8_sm_beta_mp":
        case "iw8_sm_augolf_mp":
        case "iw8_sm_mpapa5_mp":
        case "iw8_sm_papa90_mp":
        case "iw8_sh_oscar12_mp":
        case "iw8_sh_charlie725_mp":
        case "iw8_sh_dpapa12_mp":
        case "iw8_pi_papa320_mp":
        case "iw8_pi_decho_mp":
        case "iw8_pi_cpapa_mp":
        case "iw8_pi_mike1911_mp":
        case "iw8_pi_golf21_mp":
        case "iw8_lm_pkilo_mp":
        case "iw8_lm_mgolf34_mp":
        case "iw8_lm_lima86_mp":
        case "iw8_lm_kilo121_mp":
        case "iw8_ar_scharlie_mp":
        case "iw8_ar_mcharlie_mp":
        case "iw8_ar_falpha_mp":
        case "iw8_ar_falima_mp":
        case "iw8_ar_asierra12_mp":
        case "iw8_sn_sbeta_mp":
        case "iw8_sn_mike14_mp":
        case "iw8_sn_kilo98_mp":
        case "iw8_la_rpapa7_mp":
        case "iw8_la_juliet_mp":
        case "iw8_la_kgolf_mp":
        case "iw8_la_gromeo_mp":
        case "iw9_la_gromeo_mp":
        case "iw8_ar_akilo47_mp":
        case "iw8_ar_mike4_mp":
        case "iw8_la_mike32_mp":
        case "iw9_la_juliet_mp":
            break;
    }
}

updatecamoscripts( _id_82533969B4683DE4, _id_492B944276064F63 )
{
    clearcamoscripts( getweaponcamoname( _id_492B944276064F63 ) );
    runcamoscripts( getweaponcamoname( _id_82533969B4683DE4 ) );
}

runcamoscripts( camo )
{
    if ( !isdefined( camo ) )
        return;

    switch ( camo )
    {
        case "camo84":
            thread blood_camo_84();
            break;
    }
}

clearcamoscripts( camo )
{
    if ( !isdefined( camo ) )
        return;

    switch ( camo )
    {
        case "camo84":
            self notify( "blood_camo_84" );
            break;
    }
}

blood_camo_84()
{
    self endon( "death_or_disconnect" );
    self endon( "blood_camo_84" );

    if ( isdefined( self.bloodcamokillcount ) )
        self setscriptablepartstate( "camo_84", self.bloodcamokillcount + "_kills" );
    else
        self.bloodcamokillcount = 0;

    while ( self.bloodcamokillcount < 13 )
    {
        self waittill( "kill_event_buffered" );
        self.bloodcamokillcount = self.bloodcamokillcount + 1;
        self setscriptablepartstate( "camo_84", self.bloodcamokillcount + "_kills" );
    }
}

getactiveequipmentarray()
{
    return scripts\engine\utility::array_remove_duplicates( level.mines );
}

init_function_refs()
{
    level.getactiveequipmentarray = ::getactiveequipmentarray;
}

doesshareammo( objweapon )
{
    return objweapon.isalternate && !issubstr( objweapon.underbarrel, "gl" ) && issubstr( objweapon.underbarrel, "shotgun" );
}

waittill_grenade_throw()
{
    for (;;)
    {
        self waittill( "grenade_fire", grenade, objweapon, tickpercent, originalowner );

        if ( !scripts\mp\utility\weapon::grenadethrown( grenade ) )
            continue;

        grenadeinitialize( grenade, objweapon, tickpercent, originalowner );

        if ( isdefined( originalowner ) && originalowner != self )
            level thread scripts\mp\battlechatter_mp::trysaylocalsound( self, "stat_84AFBF61450B581D" );

        self notify( "grenade_thrown", grenade );
        return grenade;
    }
}

grenadeinitialize( grenade, weapon_object, tickpercent, originalowner )
{
    if ( !isdefined( grenade.weapon_object ) )
        grenade.weapon_object = weapon_object;

    if ( !isdefined( grenade.weapon_name ) )
        grenade.weapon_name = weapon_object.basename;

    if ( !isdefined( grenade.owner ) )
        grenade.owner = self;

    if ( !isdefined( grenade.team ) )
        grenade.team = self.team;

    if ( !isdefined( grenade.tickpercent ) )
        grenade.tickpercent = tickpercent;

    if ( !isdefined( grenade.ticks ) && isdefined( grenade.tickpercent ) )
        grenade.ticks = scripts\mp\utility\script::roundup( 4 * tickpercent );

    equipmentref = scripts\mp\equipment::getequipmentreffromweapon( weapon_object );

    if ( isdefined( equipmentref ) )
    {
        grenade.equipmentref = equipmentref;
        grenade.isequipment = 1;
        grenade._id_D442547D75DFFD09 = scripts\mp\equipment::_id_2113B6F7CB462692( grenade.weapon_name );

        if ( equipmentref == "equip_smoke" )
            grenade.owner scripts\mp\utility\stats::incpersstat( "smokesUsed", 1 );
    }

    grenade.threwback = isdefined( originalowner );
}

waittill_missile_fire()
{
    self waittill( "missile_fire", missile, objweapon );

    if ( isdefined( missile ) )
    {
        if ( !isdefined( missile.weapon_name ) )
        {
            if ( objweapon.isalternate )
                missile.weapon_name = scripts\mp\utility\weapon::getaltmodeweapon( objweapon );
            else
                missile.weapon_name = objweapon.basename;
        }

        if ( !isdefined( missile.owner ) )
            missile.owner = self;

        if ( !isdefined( missile.team ) )
            missile.team = self.team;
    }

    return missile;
}

enableburnfx( _id_0E63D4B8BBF87B92, _id_EE8FA35DAEDF8C6B )
{
    if ( !isdefined( self.burnfxstates ) )
        self.burnfxstates = [];

    if ( !isdefined( _id_EE8FA35DAEDF8C6B ) )
        _id_EE8FA35DAEDF8C6B = "active";

    if ( !istrue( _id_0E63D4B8BBF87B92 ) )
        thread enableburnsfx();

    self.burnfxstates[getburnfxstatepriority( _id_EE8FA35DAEDF8C6B )] = _id_EE8FA35DAEDF8C6B;
    thread startburnfx();
}

getburnfxstatepriority( state )
{
    switch ( state )
    {
        case "nuke_active":
            return 3;
        case "wp_active":
            return 2;
        case "active":
            return 1;
        default:
            return 0;
    }
}

gethightestpriotiryactiveburnstate( burnfxstates )
{
    _id_AC0E594AC96AA3A8 = 3;

    for ( _id_045CF691069C4E2C = undefined; _id_AC0E594AC96AA3A8 >= 0; _id_AC0E594AC96AA3A8-- )
    {
        if ( isdefined( burnfxstates[_id_AC0E594AC96AA3A8] ) )
        {
            _id_045CF691069C4E2C = burnfxstates[_id_AC0E594AC96AA3A8];
            break;
        }
    }

    return _id_045CF691069C4E2C;
}

enableburnsfx()
{
    if ( !isdefined( self.burnsfxenabled ) )
        self.burnsfxenabled = 0;

    if ( !isdefined( self.burnsfx ) )
    {
        self.burnsfx = spawn( "script_origin", self.origin );
        self.burnsfx linkto( self );
        self.burnsfx scripts\cp_mp\ent_manager::registerspawncount( 1 );
        wait 0.05;
    }

    if ( self.burnsfxenabled == 0 )
    {
        self.burnsfx playloopsound( "iw9_weap_molotov_fire_enemy_burn" );
        self.burnsfxenabled = 1;
    }
}

enableburnfxfortime( duration, _id_EE8FA35DAEDF8C6B )
{
    if ( !isdefined( _id_EE8FA35DAEDF8C6B ) )
        _id_EE8FA35DAEDF8C6B = "active";

    _id_67D4FCE90B90214A = "endon_burnfxForTime_" + _id_EE8FA35DAEDF8C6B;
    self notify( _id_67D4FCE90B90214A );
    self endon( "disconnect" );
    self endon( "clearBurnFX" );
    self endon( _id_67D4FCE90B90214A );
    thread enableburnfx( 0, _id_EE8FA35DAEDF8C6B );
    wait( duration );
    thread disableburnfx( 0, _id_EE8FA35DAEDF8C6B );
}

disableburnfx( _id_0E63D4B8BBF87B92, burningstate )
{
    if ( isdefined( burningstate ) )
    {
        if ( self.burnfxstates[getburnfxstatepriority( burningstate )] == burningstate )
            self.burnfxstates[getburnfxstatepriority( burningstate )] = undefined;
    }
    else
        self.burnfxstates = [];

    if ( self.burnfxstates.size > 0 )
        thread startburnfx();
    else
    {
        thread stopburnfx();

        if ( !istrue( _id_0E63D4B8BBF87B92 ) )
            thread disable_burnsfx();
    }
}

disable_burnsfx()
{
    if ( !isdefined( self.burnsfxenabled ) )
        self.burnsfxenabled = 0;

    wait 0.5;

    if ( self.burnsfxenabled == 1 )
    {
        self playsound( "iw9_weap_molotov_fire_enemy_burn_end" );

        if ( isdefined( self.burnsfx ) )
        {
            self.burnsfx scripts\cp_mp\ent_manager::deregisterspawn();
            wait 0.15;

            if ( isdefined( self.burnsfx ) )
            {
                self.burnsfx stoploopsound( "iw9_weap_molotov_fire_enemy_burn" );
                self.burnsfx delete();
            }
        }

        self.burnsfxenabled = 0;
    }
}

supressburnfx( _id_E3108E412AFB3811 )
{
    if ( !isdefined( self.burnfxsuppressed ) )
        self.burnfxsupressed = 0;

    if ( _id_E3108E412AFB3811 )
        self.burnfxsuppressed++;
    else
        self.burnfxsuppressed--;
}

clearburnfx()
{
    self notify( "clearBurnFX" );
    thread stopburnfx();
    self.burnfxsuppressed = undefined;
    self.burnfxplaying = undefined;
    self.burnfxstates = undefined;
}

startburnfx()
{
    self notify( "stopBurnFX" );
    self endon( "disconnect" );
    self endon( "stopBurnFX" );
    _id_EE8FA35DAEDF8C6B = gethightestpriotiryactiveburnstate( self.burnfxstates );

    for (;;)
    {
        burnfxsuppressed = isdefined( self.burnfxsuppressed ) && self.burnfxsuppressed > 0;
        burnfxplaying = isdefined( self.burnfxplaying );

        if ( burnfxsuppressed && burnfxplaying )
        {
            self setscriptablepartstate( "burning", "neutral" );
            scripts\mp\damage::dequeuecorpsetablefunc( "burning" );
            self.burnfxplaying = undefined;
        }
        else if ( !burnfxsuppressed && !burnfxplaying || _id_EE8FA35DAEDF8C6B != self.burnfxplaying )
        {
            self setscriptablepartstate( "burning", _id_EE8FA35DAEDF8C6B );
            self.burnfxplaying = _id_EE8FA35DAEDF8C6B;

            if ( !burnfxplaying )
                scripts\mp\damage::enqueuecorpsetablefunc( "burning", ::burnfxcorpstablefunc );
        }

        waitframe();
    }
}

stopburnfx()
{
    self notify( "stopBurnFX" );

    if ( isdefined( self.burnfxplaying ) )
    {
        self setscriptablepartstate( "burning", "neutral" );
        scripts\mp\damage::dequeuecorpsetablefunc( "burning" );
        self.burnfxplaying = undefined;
    }
}

burnfxcorpstablefunc( _id_3741EA5B9FB53EC3 )
{
    _id_3741EA5B9FB53EC3 setscriptablepartstate( "burning", "flareUp", 0 );
}

semtex_used( grenade )
{
    self endon( "disconnect" );
    grenade endon( "death" );
    grenade._id_D442547D75DFFD09 = scripts\mp\equipment::_id_2113B6F7CB462692( grenade.weapon_name );
    grenade waittill( "missile_stuck", stuckto );

    if ( isplayer( stuckto ) )
    {
        thread grenadestuckto( grenade, stuckto );

        if ( isalive( stuckto ) )
            thread semtex_stuckplayer( grenade, stuckto );
    }
}

semtex_stuckplayer( grenade, stuckto )
{
    self endon( "disconnect" );
    grenade endon( "end_explode" );
    stuckto endon( "death_or_disconnect" );
    grenade thread scripts\mp\utility\script::notifyafterframeend( "death", "end_explode" );
    grenade waittill( "explode", position );
    _id_33E2D54D8812E8CE = stuckto.maxhealth;

    if ( isdefined( grenade._id_D442547D75DFFD09 ) )
    {
        _id_33E2D54D8812E8CE = scripts\engine\utility::_id_53C4C53197386572( grenade._id_D442547D75DFFD09._id_DC6074BF92AED826, stuckto.maxhealth );
        _id_33E2D54D8812E8CE = _id_33E2D54D8812E8CE * scripts\engine\utility::_id_53C4C53197386572( grenade._id_D442547D75DFFD09._id_43F9A1342DA4E1A0, 1 );
    }

    thread _id_AEDBA5F9385B9874( stuckto, position, _id_33E2D54D8812E8CE );
}

_id_AEDBA5F9385B9874( stuckto, position, _id_33E2D54D8812E8CE )
{
    stuckto scripts\cp_mp\utility\damage_utility::forcestuckdamage();
    stuckto dodamage( _id_33E2D54D8812E8CE, position, self, undefined, "MOD_EXPLOSIVE", makeweapon( "semtex_mp" ) );
    stuckto scripts\cp_mp\utility\damage_utility::forcestuckdamageclear();
}
