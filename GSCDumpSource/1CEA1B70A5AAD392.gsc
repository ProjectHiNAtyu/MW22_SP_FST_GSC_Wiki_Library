// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.dogtags = [];
    level.dogtagallyonusecb = _id_0FD32F08E72B657F::dogtagcommonallyonusecb;
    level.dogtagenemyonusecb = _id_0FD32F08E72B657F::dogtagcommonenemyonusecb;
    level._id_50F07451CAEB4973 = getdvarint( "dvar_77FB2F8819915F5C", 1 ) == 1;
    level.conf_fx["vanish"] = loadfx( "vfx/core/impacts/small_snowhit" );
    level.conf_fx["vanish_gos"] = loadfx( "vfx/iw8_mp/gamemode/vfx_gos_tag_pickup.vfx" );

    if ( istrue( level._id_DD7AF80C3EB2C1E0 ) )
        level._id_5261F4479B04F834 = ::_id_C2A00A1D31F16522;

    level.numlifelimited = scripts\mp\utility\game::getgametypenumlives();
    level thread _id_77F5E8D1F8FC4868();
}

shouldspawntags( attacker )
{
    if ( isdefined( self.switching_teams ) )
        return 0;

    if ( isdefined( attacker ) && attacker == self )
        return 0;

    if ( level.teambased && isdefined( attacker ) && isdefined( attacker.team ) && attacker.team == self.team )
        return 0;

    if ( isdefined( attacker ) && !isdefined( attacker.team ) && ( attacker.classname == "trigger_hurt" || attacker.classname == "worldspawn" ) )
        return 0;

    if ( _id_2CEDCC356F1B9FC8::isplayeringulag() )
        return 0;

    return 1;
}

spawndogtags( victim, attacker, _id_1202C39784B176E2, meansofdeath )
{
    shouldspawntags = 1;

    if ( istrue( level.numlifelimited ) )
    {
        shouldspawntags = victim shouldspawntags( attacker );

        if ( shouldspawntags )
            shouldspawntags = shouldspawntags && !scripts\mp\utility\player::isreallyalive( victim );

        if ( shouldspawntags )
            shouldspawntags = shouldspawntags && !victim scripts\mp\playerlogic::mayspawn();
    }

    if ( !shouldspawntags )
        return;

    if ( isagent( victim ) )
        return;

    if ( isagent( attacker ) )
        attacker = attacker.owner;

    tagoffset = 14;
    upangles = ( 0, 0, 0 );
    _id_650440C6A1642E7E = victim.angles;

    if ( victim scripts\mp\gameobjects::touchingarbitraryuptrigger() )
    {
        _id_650440C6A1642E7E = victim getworldupreferenceangles();
        upangles = anglestoup( _id_650440C6A1642E7E );

        if ( upangles[2] < 0 )
            tagoffset = -14;
    }

    if ( isdefined( level.dogtags[victim.guid] ) )
    {
        if ( istrue( level._id_DD7AF80C3EB2C1E0 ) )
            playfx( level.conf_fx["vanish_gos"], level.dogtags[victim.guid].curorigin );
        else
            playfx( level.conf_fx["vanish"], level.dogtags[victim.guid].curorigin );

        level.dogtags[victim.guid] resettags();
        level.dogtags[victim.guid].visuals[0].angles = ( 0, 0, 0 );
        level.dogtags[victim.guid].visuals[1].angles = ( 0, 0, 0 );
    }
    else
    {
        visuals[0] = spawn( "script_model", ( 0, 0, 0 ) );
        visuals[0] setmodel( "military_dogtags_iw8_orange" );
        visuals[1] = spawn( "script_model", ( 0, 0, 0 ) );
        visuals[1] setmodel( "military_dogtags_iw8_blue" );

        if ( level.numlifelimited )
        {
            visuals[0] setclientowner( victim );
            visuals[1] setclientowner( victim );
        }

        visuals[0] setasgametypeobjective();
        visuals[1] setasgametypeobjective();
        trigger = spawn( "trigger_radius", ( 0, 0, 0 ), 0, 32, 32 );

        if ( victim scripts\mp\gameobjects::touchingarbitraryuptrigger() )
        {
            if ( upangles[2] < 0 )
            {
                visuals[0].angles = _id_650440C6A1642E7E;
                visuals[1].angles = _id_650440C6A1642E7E;
            }
        }

        useteam = "any";
        usetime = 0;
        level.dogtags[victim.guid] = scripts\mp\gameobjects::createuseobject( useteam, trigger, visuals, ( 0, 0, 16 ) );
        level.dogtags[victim.guid].onuse = ::onuse;
        level.dogtags[victim.guid] scripts\mp\gameobjects::setusetime( usetime );
        level.dogtags[victim.guid].victim = victim;
        level.dogtags[victim.guid].victimteam = victim.team;
        level thread clearonvictimdisconnect( victim );
        victim thread tagteamupdater( level.dogtags[victim.guid] );
    }

    pos = victim.origin + ( 0, 0, tagoffset );
    level.dogtags[victim.guid].curorigin = pos;
    level.dogtags[victim.guid].trigger.origin = pos;
    level.dogtags[victim.guid].visuals[0].origin = pos;
    level.dogtags[victim.guid].visuals[1].origin = pos;
    level.dogtags[victim.guid] scripts\mp\gameobjects::initializetagpathvariables();
    level.dogtags[victim.guid] scripts\mp\gameobjects::allowuse( "any" );
    level.dogtags[victim.guid].visuals[0] showtoteam( level.dogtags[victim.guid], attacker.team );
    level.dogtags[victim.guid].visuals[1] showtoteam( level.dogtags[victim.guid], victim.team );
    level.dogtags[victim.guid].attacker = attacker;
    level.dogtags[victim.guid].attackerteam = attacker.team;
    level.dogtags[victim.guid].ownerteam = victim.team;

    if ( isdefined( level.dogtags[victim.guid].objidnum ) )
    {
        if ( level.dogtags[victim.guid].objidnum != -1 )
        {
            objid = level.dogtags[victim.guid].objidnum;
            state = "current";

            if ( !istrue( level._id_50F07451CAEB4973 ) )
                state = "active";

            scripts\mp\objidpoolmanager::update_objective_state( objid, state );
            scripts\mp\objidpoolmanager::update_objective_position( objid, victim.origin + ( 0, 0, 36 ) );
            scripts\mp\objidpoolmanager::update_objective_setbackground( objid, 1 );
            scripts\mp\objidpoolmanager::objective_set_play_intro( level.dogtags[victim.guid].objidnum, 0 );
            scripts\mp\objidpoolmanager::objective_set_play_outro( level.dogtags[victim.guid].objidnum, 0 );
            level.dogtags[victim.guid] scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_dogtags_friendly", "waypoint_dogtags" );
            level.dogtags[victim.guid] scripts\mp\gameobjects::setvisibleteam( "any" );
        }
    }

    playsoundatpos( pos, "mp_killconfirm_tags_drop" );
    level notify( _id_1202C39784B176E2, level.dogtags[victim.guid] );
    victim.tagavailable = 1;
    level.dogtags[victim.guid].visuals[0] scriptmodelplayanim( "mp_dogtag_spin" );
    level.dogtags[victim.guid].visuals[1] scriptmodelplayanim( "mp_dogtag_spin" );

    if ( level.numlifelimited )
        victim.statusicon = "hud_status_dogtag";
}

resettags()
{
    self.attacker = undefined;
    self notify( "reset" );
    self.visuals[0] hide();
    self.visuals[1] hide();
    self.visuals[0] dontinterpolate();
    self.visuals[1] dontinterpolate();
    self.curorigin = ( 0, 0, 1000 );
    self.trigger.origin = ( 0, 0, 1000 );
    self.visuals[0].origin = ( 0, 0, 1000 );
    self.visuals[1].origin = ( 0, 0, 1000 );
    scripts\mp\gameobjects::allowuse( "none" );

    if ( self.objidnum != -1 )
        scripts\mp\objidpoolmanager::update_objective_state( self.objidnum, "done" );
}

removetags( guid, _id_3737240CEFE2C793, _id_3B7F2500E2C4760C )
{
    if ( istrue( self._id_BCB19026623AF98B ) )
    {
        foreach ( key, tag in level.dogtags )
        {
            if ( tag == self )
            {
                guid = key;
                break;
            }
        }
    }

    if ( isdefined( level.dogtags[guid] ) )
    {
        level.dogtags[guid] scripts\mp\gameobjects::allowuse( "none" );

        if ( istrue( _id_3737240CEFE2C793 ) && isdefined( level.dogtags[guid].attacker ) )
            level.dogtags[guid].attacker thread scripts\mp\rank::scoreeventpopup( "stat_31C5E73863EE8289" );

        if ( istrue( level._id_DD7AF80C3EB2C1E0 ) )
        {
            if ( isdefined( level._id_5261F4479B04F834 ) )
                level [[ level._id_5261F4479B04F834 ]]( level.dogtags[guid], _id_3B7F2500E2C4760C );
        }
        else
            playfx( level.conf_fx["vanish"], level.dogtags[guid].curorigin );

        level.dogtags[guid] notify( "reset" );
        waitframe();

        if ( !isdefined( level.dogtags[guid] ) )
            return;

        if ( !istrue( level.dogtags[guid]._id_BCB19026623AF98B ) )
        {
            level.dogtags[guid] notify( "death" );

            for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < level.dogtags[guid].visuals.size; _id_AC0E594AC96AA3A8++ )
                level.dogtags[guid].visuals[_id_AC0E594AC96AA3A8] delete();

            if ( !isdefined( level.dogtags[guid].skipminimapids ) )
                level.dogtags[guid] thread scripts\mp\gameobjects::deleteuseobject();

            level.dogtags[guid] = undefined;
        }
        else
        {
            level.dogtags[guid] scripts\mp\gameobjects::disableobject();
            level.dogtags[guid].visuals[0] hide();
            level.dogtags[guid].visuals[1] hide();
        }
    }
}

_id_C2A00A1D31F16522( dogtags, _id_3B7F2500E2C4760C )
{
    _id_869E9FD0CDBD405A = 20;
    _id_12F59CD9E8D7E077 = 600;
    _id_16C9AD20A2797135 = dogtags.curorigin + ( 0, 0, _id_869E9FD0CDBD405A );
    _id_812238F6F1F6728C = dogtags.curorigin + ( 0, 0, _id_12F59CD9E8D7E077 );
    contentoverride = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 1, 1 );
    ignoreents = [];
    ignoreents[ignoreents.size] = dogtags.visuals[0];
    ignoreents[ignoreents.size] = dogtags.visuals[1];

    if ( isplayer( _id_3B7F2500E2C4760C ) )
        ignoreents[ignoreents.size] = _id_3B7F2500E2C4760C;

    trace = scripts\engine\trace::ray_trace( _id_16C9AD20A2797135, _id_812238F6F1F6728C, ignoreents, contentoverride, 0 );

    if ( isplayer( trace["entity"] ) )
        trace["entity"] = undefined;

    if ( isdefined( trace["entity"] ) && isdefined( trace["entity"].code_classname ) && trace["entity"].code_classname == "script_vehicle" )
    {
        ignoreents[ignoreents.size] = trace["entity"];
        trace = scripts\engine\trace::ray_trace( _id_16C9AD20A2797135, _id_812238F6F1F6728C, ignoreents, contentoverride, 0 );
    }

    if ( trace["fraction"] != 1 )
        playfx( level.conf_fx["vanish_gos"], dogtags.curorigin );
    else
    {
        playfx( level.conf_fx["vanish_gos"], dogtags.curorigin );
        playfx( level._id_B6E1C0B3C715B0DF["gos_fireworks"], dogtags.curorigin );
        level thread _id_0FD32F08E72B657F::_id_2C3362A9F434FD8D( dogtags.curorigin );
    }
}

onplayerjoinedteam( player )
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        return;

    foreach ( tags in level.dogtags )
    {
        if ( isdefined( tags.attackerteam ) )
        {
            if ( player.team == tags.attackerteam )
                tags.visuals[0] showtoplayer( player );

            if ( player.team == "spectator" && tags.attackerteam == "allies" )
                tags.visuals[0] showtoplayer( player );
        }

        if ( isdefined( tags.ownerteam ) )
        {
            if ( player.team == tags.ownerteam )
                tags.visuals[1] showtoplayer( player );

            if ( player.team == "spectator" && tags.ownerteam == "allies" )
                tags.visuals[1] showtoplayer( player );
        }
    }
}

showtoteam( gameobject, team )
{
    self hide();

    foreach ( player in level.players )
    {
        if ( player.team == team )
            self showtoplayer( player );

        if ( player.team == "spectator" && team == "allies" )
            self showtoplayer( player );
    }
}

playercanusetags( player )
{
    return 1;
}

onuse( player )
{
    if ( !playercanusetags( player ) )
        return;

    if ( isdefined( player.owner ) )
        player = player.owner;

    if ( scripts\mp\utility\game::getgametype() == "conf" )
        player thread watchrapidtagpickup();

    if ( player.pers["team"] == self.victimteam )
    {
        self.trigger playsound( "mp_killconfirm_tags_deny" );
        player scripts\mp\utility\stats::incpersstat( "denied", 1 );
        player scripts\mp\persistence::statsetchild( "round", "denied", player.pers["denied"] );

        if ( level.numlifelimited && scripts\mp\utility\game::getgametype() != "arena" )
            lifelimitedallyonuse( player );
        else
            allyonuse( player );

        if ( isdefined( level.dogtagallyonusecb ) && !level.gameended )
            self thread [[ level.dogtagallyonusecb ]]( player );
    }
    else
    {
        self.trigger playsound( "mp_killconfirm_tags_pickup" );

        if ( scripts\mp\utility\game::getgametype() != "grind" && scripts\mp\utility\game::getgametype() != "pill" )
        {
            player scripts\mp\utility\stats::incpersstat( "confirmed", 1 );
            player scripts\mp\persistence::statsetchild( "round", "confirmed", player.pers["confirmed"] );
        }

        if ( level.numlifelimited && scripts\mp\utility\game::getgametype() != "arena" )
            lifelimitedenemyonuse( player );
        else
            enemyonuse( player );

        if ( isdefined( level.dogtagenemyonusecb ) && !level.gameended )
            self thread [[ level.dogtagenemyonusecb ]]( player );

        player scripts\cp_mp\challenges::oncapture();
    }

    self.victim notify( "tag_removed" );
    thread removetags( self.victim.guid, undefined, player );
}

watchrapidtagpickup()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self notify( "watchRapidTagPickup()" );
    self endon( "watchRapidTagPickup()" );

    if ( !isdefined( self.recenttagcount ) )
        self.recenttagcount = 1;
    else
    {
        self.recenttagcount++;

        if ( self.recenttagcount == 3 )
            thread scripts\mp\utility\points::_id_0366980B6A8796AE( "stat_538A87430E9CF381" );
    }

    wait 3.0;
    self.recenttagcount = 0;
}

tagteamupdater( tags )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    tags endon( "death" );

    for (;;)
    {
        self waittill( "joined_team" );
        thread removetags( self.guid, 1 );
    }
}

clearonvictimdisconnect( victim )
{
    victim notify( "clearOnVictimDisconnect" );
    victim endon( "clearOnVictimDisconnect" );
    victim endon( "tag_removed" );
    level endon( "game_ended" );
    guid = victim.guid;
    victim waittill( "disconnect" );
    thread removetags( guid, 1 );
}

ontagpickupevent( event )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    while ( !isdefined( self.pers ) )
        waitframe();

    thread scripts\mp\utility\points::_id_0366980B6A8796AE( event );
}

lifelimitedallyonuse( player )
{
    player.pers["rescues"]++;
    player scripts\mp\persistence::statsetchild( "round", "rescues", player.pers["rescues"] );
    _id_4725E52B7C3AA25C = [];
    _id_4725E52B7C3AA25C[_id_4725E52B7C3AA25C.size] = self.victim;
    scripts\mp\hud_message::notifyteam( "sr_ally_respawned", "sr_enemy_respawned", self.victim );

    if ( isdefined( self.victim ) )
    {
        self.victim thread scripts\mp\hud_message::showsplash( "sr_respawned" );
        level notify( "sr_player_respawned", self.victim );
        self.victim scripts\mp\utility\dialog::leaderdialogonplayer( "revived" );

        if ( !level.gameended )
            self.victim thread respawn();

        self.victim.tagavailable = undefined;
        self.victim.statusicon = "";
    }

    if ( isdefined( self.attacker ) )
        self.attacker thread scripts\mp\rank::scoreeventpopup( "stat_31C5E73863EE8289" );

    player thread ontagpickupevent( "stat_31C5E73863EE8289" );

    if ( !isdefined( player.rescuedplayers ) )
        player.rescuedplayers = [];

    player.rescuedplayers[self.victim.guid] = 1;
    self.victim scripts\mp\killstreaks\killstreaks::_id_B7492842AAD6FE82();
}

lifelimitedenemyonuse( player )
{
    if ( isdefined( self.victim ) )
    {
        self.victim thread scripts\mp\hud_message::showsplash( "sr_eliminated" );
        level notify( "sr_player_eliminated", self.victim );
    }

    _id_4725E52B7C3AA25C = [];
    _id_4725E52B7C3AA25C[_id_4725E52B7C3AA25C.size] = self.victim;
    scripts\mp\hud_message::notifyteam( "sr_ally_eliminated", "sr_enemy_eliminated", self.victim );

    if ( isdefined( self.victim ) )
    {
        if ( !level.gameended )
        {
            self.victim scripts\mp\utility\lower_message::setlowermessageomnvar( "spawn_next_round" );
            self.victim thread scripts\mp\playerlogic::removespawnmessageshortly( 3.0 );
        }

        self.victim.tagavailable = undefined;
        self.victim.statusicon = "hud_status_dead";
    }

    if ( self.attacker != player )
        self.attacker thread ontagpickupevent( "stat_E24741BA71BBB56B" );

    player thread ontagpickupevent( "stat_E24741BA71BBB56B" );
    player scripts\mp\utility\dialog::leaderdialogonplayer( "kill_confirmed" );
}

respawn()
{
    scripts\mp\playerlogic::incrementalivecount( self.team );
    self.alreadyaddedtoalivecount = 1;
    thread scripts\mp\playerlogic::waittillcanspawnclient();
}

allyonuse( player )
{
    if ( self.victim == player )
    {
        player thread scripts\mp\rank::scoreeventpopup( "stat_8567CA81F8C59D3C" );
        player thread scripts\mp\utility\points::_id_0366980B6A8796AE( "stat_E4042D7EF2CD089E" );
    }
    else if ( issubstr( scripts\mp\utility\game::getgametype(), "conf" ) )
        player ontagpickupevent( "stat_31C5E73863EE8289" );
    else if ( scripts\mp\utility\game::getgametype() != "grind" )
        player ontagpickupevent( "stat_C164717864E640FF" );
    else
    {
        player ontagpickupevent( "stat_B89E7559B23A1287" );
        player playersettagcount( player.tagscarried + 1 );
    }

    if ( isdefined( self.attacker ) )
        self.attacker thread scripts\mp\rank::scoreeventpopup( "stat_C164717864E640FF" );

    if ( scripts\mp\utility\game::_id_F698BFD3EFA33302() || scripts\mp\utility\game::_id_E9F3A160BBEFE208( player ) )
    {
        if ( isdefined( player.cranked ) && player.cranked )
            player scripts\mp\cranked::setcrankedplayerbombtimer( "friendly_tag" );
        else
            player scripts\mp\cranked::oncranked( undefined, player );
    }
}

enemyonuse( player )
{
    if ( issubstr( scripts\mp\utility\game::getgametype(), "conf" ) )
        player ontagpickupevent( "stat_E24741BA71BBB56B" );
    else
        player ontagpickupevent( "stat_B89E7559B23A1287" );

    if ( scripts\mp\utility\game::getgametype() == "grind" )
        player playersettagcount( player.tagscarried + 1 );

    if ( self.attacker != player )
    {
        if ( scripts\mp\utility\game::getgametype() == "grind" )
            self.attacker thread ontagpickupevent( "stat_FEC13AD5EA891DCE" );
        else
            self.attacker thread ontagpickupevent( "stat_BE03C8D7051ADFA8" );
    }

    if ( scripts\mp\utility\game::_id_F698BFD3EFA33302() || scripts\mp\utility\game::_id_E9F3A160BBEFE208( player ) )
    {
        if ( isdefined( player.cranked ) && player.cranked )
            player scripts\mp\cranked::setcrankedplayerbombtimer( "kill" );
        else
            player scripts\mp\cranked::oncranked( undefined, player );

        if ( player != self.attacker && isdefined( self.attacker.cranked ) && self.attacker.cranked )
            self.attacker scripts\mp\cranked::setcrankedplayerbombtimer( "kill" );
    }
}

playersettagcount( _id_D86673173E8641BE )
{
    self.tagscarried = _id_D86673173E8641BE;
    self.game_extrainfo = _id_D86673173E8641BE;

    if ( _id_D86673173E8641BE > 999 )
        _id_D86673173E8641BE = 999;

    self setclientomnvar( "ui_grind_tags", _id_D86673173E8641BE );
}

_id_77F5E8D1F8FC4868()
{
    level waittill( "scriptables_ready" );

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < 20; _id_AC0E594AC96AA3A8++ )
    {
        visuals[0] = spawn( "script_origin", ( 0, 0, 0 ) );
        visuals[0] setmodel( "military_dogtags_iw8_orange" );
        visuals[1] = spawn( "script_origin", ( 0, 0, 0 ) );
        visuals[1] setmodel( "military_dogtags_iw8_blue" );
        visuals[0] setasgametypeobjective();
        visuals[1] setasgametypeobjective();
        trigger = spawn( "trigger_radius", ( 0, 0, 0 ), 0, 32, 32 );
        useteam = "any";
        usetime = 0;
        _id_34744859AD58739B = scripts\mp\gameobjects::createuseobject( useteam, trigger, visuals, ( 0, 0, 16 ) );
        _id_34744859AD58739B._id_BCB19026623AF98B = 1;
        _id_34744859AD58739B.visuals[0].dogtag = _id_34744859AD58739B;
        _id_34744859AD58739B.visuals[1].dogtag = _id_34744859AD58739B;
        _id_34744859AD58739B.lastusedtime = 0;
        _id_34744859AD58739B.onuse = ::onuse;
        _id_34744859AD58739B scripts\mp\gameobjects::setusetime( usetime );
        _id_34744859AD58739B scripts\mp\gameobjects::allowuse( "none" );
        _id_34744859AD58739B scripts\mp\gameobjects::setvisibleteam( "none" );
        level.dogtags[level.dogtags.size] = _id_34744859AD58739B;
    }
}

gettag()
{
    _id_5D32298B837DFF31 = level.dogtags[0];
    _id_3071102F98CBED33 = gettime();

    foreach ( tag in level.dogtags )
    {
        if ( !isdefined( tag.lastusedtime ) )
            continue;

        if ( tag.interactteam == "none" )
        {
            _id_5D32298B837DFF31 = tag;
            break;
        }

        if ( tag.lastusedtime < _id_3071102F98CBED33 )
        {
            _id_3071102F98CBED33 = tag.lastusedtime;
            _id_5D32298B837DFF31 = tag;
        }
    }

    _id_5D32298B837DFF31 notify( "reset" );
    _id_5D32298B837DFF31 scripts\mp\gameobjects::initializetagpathvariables();
    _id_5D32298B837DFF31.lastusedtime = gettime();
    return _id_5D32298B837DFF31;
}

droptags( attacker, victim, _id_A28B6FB6A6902689 )
{
    if ( isagent( victim ) )
        return;

    if ( _id_A28B6FB6A6902689 == 0 )
        return;

    if ( _id_A28B6FB6A6902689 > 19 )
        _id_A28B6FB6A6902689 = 19;

    for ( counter = 0; counter < _id_A28B6FB6A6902689; counter++ )
    {
        _id_34744859AD58739B = spawntag( attacker, victim );
        level notify( "new_tag_spawned", _id_34744859AD58739B );
    }
}

spawntag( attacker, victim )
{
    _id_76A22C18960F72AF = victim.origin;
    _id_F835C152B2F0F136 = victim.team;
    startpos = _id_76A22C18960F72AF + ( 0, 0, 14 );
    zoffset = 35;
    stance = victim getstance();

    if ( stance == "prone" )
        zoffset = 14;

    if ( stance == "crouch" )
        zoffset = 25;

    _id_9C19496CE8106E6B = _id_76A22C18960F72AF + ( 0, 0, zoffset );
    randomangle = ( 0, randomfloat( 360 ), 0 );
    _id_A76189155F382805 = anglestoforward( randomangle );
    _id_A73587155F07BD39 = randomfloatrange( 30, 150 );
    _id_57C87883AE437750 = 0.5;
    _id_90128D0639A1315D = startpos + _id_A73587155F07BD39 * _id_A76189155F382805;
    _id_B809B8F732448A84 = playerphysicstrace( startpos, _id_90128D0639A1315D );
    _id_34744859AD58739B = gettag();
    _id_34744859AD58739B.curorigin = _id_9C19496CE8106E6B;
    _id_34744859AD58739B.trigger.origin = _id_9C19496CE8106E6B;
    _id_34744859AD58739B.visuals[0].origin = _id_9C19496CE8106E6B;
    _id_34744859AD58739B.visuals[1].origin = _id_9C19496CE8106E6B;
    _id_34744859AD58739B.interactteam = "any";
    _id_34744859AD58739B.attacker = attacker;
    _id_34744859AD58739B.attackerteam = attacker.team;
    _id_34744859AD58739B.ownerteam = victim.team;
    _id_34744859AD58739B.victim = victim;
    _id_34744859AD58739B.victimteam = victim.team;
    _id_34744859AD58739B scripts\mp\gameobjects::enableobject();
    _id_34744859AD58739B scripts\mp\gameobjects::allowuse( "any" );
    _id_34744859AD58739B scripts\mp\gameobjects::initializetagpathvariables();
    _id_34744859AD58739B.visuals[0] showtoteam( _id_34744859AD58739B, attacker.team );
    _id_34744859AD58739B.visuals[1] showtoteam( _id_34744859AD58739B, victim.team );
    playsoundatpos( startpos, "mp_grind_token_drop" );
    _id_34744859AD58739B thread tagmoveto( _id_F835C152B2F0F136, _id_9C19496CE8106E6B, _id_B809B8F732448A84, _id_57C87883AE437750 );
    return _id_34744859AD58739B;
}

tagmoveto( _id_F835C152B2F0F136, _id_9C19496CE8106E6B, _id_B809B8F732448A84, time )
{
    objid = self.objidnum;

    if ( objid != -1 )
    {
        state = "current";

        if ( !istrue( level._id_50F07451CAEB4973 ) )
            state = "active";

        scripts\mp\objidpoolmanager::update_objective_state( objid, state );
        scripts\mp\objidpoolmanager::update_objective_position( objid, self.curorigin + ( 0, 0, 36 ) );
        scripts\mp\objidpoolmanager::update_objective_setbackground( objid, 1 );
        scripts\mp\objidpoolmanager::objective_set_play_intro( self.objidnum, 0 );
        scripts\mp\objidpoolmanager::objective_set_play_outro( self.objidnum, 0 );
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_dogtags_friendly", "waypoint_dogtags" );
    }

    self.visuals[0] setasgametypeobjective();
    self.visuals[1] setasgametypeobjective();
    gravity = getdvarint( "dvar_B5D7D39D32720E78" );
    dist = distance( _id_9C19496CE8106E6B, _id_B809B8F732448A84 );
    _id_3777ECE6A73EADA5 = _id_B809B8F732448A84 - _id_9C19496CE8106E6B;
    _id_920F4173513EB6B8 = 0.5 * gravity * squared( time ) * -1;
    vel = ( _id_3777ECE6A73EADA5[0] / time, _id_3777ECE6A73EADA5[1] / time, ( _id_3777ECE6A73EADA5[2] - _id_920F4173513EB6B8 ) / time );
    self.visuals[0] movegravity( vel, time );
    self.visuals[1] movegravity( vel, time );
    endtime = gettime() + 1000;

    while ( gettime() < endtime )
    {
        self.trigger.origin = self.visuals[0].origin;

        if ( objid != -1 )
            scripts\mp\objidpoolmanager::update_objective_position( objid, self.visuals[0].origin + ( 0, 0, 36 ) );

        waitframe();
    }

    self.trigger.origin = _id_B809B8F732448A84;
    self.curorigin = _id_B809B8F732448A84;
    self.visuals[0] scriptmodelplayanim( "mp_dogtag_spin" );
    self.visuals[1] scriptmodelplayanim( "mp_dogtag_spin" );
}
