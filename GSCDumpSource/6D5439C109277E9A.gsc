// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

setlowermessageomnvar( ref, timer, _id_C84F97ACAD5B2088 )
{
    _id_B2FF82EC901486E4 = getdvar( "dvar_E65E9A96EB2FF62B" );

    if ( _id_B2FF82EC901486E4 != "cp_survival" && _id_B2FF82EC901486E4 != "cp_wave_sv" && _id_B2FF82EC901486E4 != "cp_specops" )
    {
        _id_D861F893072A477E = game["lowerMessageIndex"][ref];

        if ( !isdefined( _id_D861F893072A477E ) )
            return;

        self setclientomnvar( "ui_lower_message", _id_D861F893072A477E );

        if ( isdefined( timer ) )
            self setclientomnvar( "ui_lower_message_time", timer );

        if ( isdefined( _id_C84F97ACAD5B2088 ) )
            thread clearomnvarsaftertime( _id_C84F97ACAD5B2088 );
    }
}

clearomnvarsaftertime( _id_C84F97ACAD5B2088 )
{
    self notify( "message_cleared" );
    self endon( "message_cleared" );
    self endon( "death_or_disconnect" );
    wait( _id_C84F97ACAD5B2088 );
    _id_B2FF82EC901486E4 = getdvar( "dvar_E65E9A96EB2FF62B" );

    if ( _id_B2FF82EC901486E4 != "cp_survival" && _id_B2FF82EC901486E4 != "cp_wave_sv" && _id_B2FF82EC901486E4 != "cp_specops" )
        self setclientomnvar( "ui_lower_message", 0 );
}

_id_05A98C45A6252B4A()
{
    game["lowerMessageIndex"] = [];
    _id_C71A87C9229A2E91 = 0;
    _id_9C3353F4C1204BFE = "clear_lower_msg";

    for (;;)
    {
        _id_9C3353F4C1204BFE = tablelookup( "mp/hints.csv", 0, _id_C71A87C9229A2E91, 1 );

        if ( _id_9C3353F4C1204BFE == "" )
            break;

        game["lowerMessageIndex"][_id_9C3353F4C1204BFE] = _id_C71A87C9229A2E91;
        _id_C71A87C9229A2E91++;
    }
}

setlowermessage( name, text, time, priority, showtimer, shouldfade, fadetoalpha, fadetoalphatime, hidewhenindemo, hidewheninmenu )
{
    if ( !isdefined( priority ) )
        priority = 1;

    if ( !isdefined( time ) )
        time = 0;

    if ( !isdefined( showtimer ) )
        showtimer = 0;

    if ( !isdefined( shouldfade ) )
        shouldfade = 0;

    if ( !isdefined( fadetoalpha ) )
        fadetoalpha = 0.85;

    if ( !isdefined( fadetoalphatime ) )
        fadetoalphatime = 3.0;

    if ( !isdefined( hidewhenindemo ) )
        hidewhenindemo = 0;

    if ( !isdefined( hidewheninmenu ) )
        hidewheninmenu = 1;

    addlowermessage( name, text, time, priority, showtimer, shouldfade, fadetoalpha, fadetoalphatime, hidewhenindemo, hidewheninmenu );
    updatelowermessage();
}

clearlowermessage( name )
{
    removelowermessage( name );
    updatelowermessage();
}

clearlowermessages()
{
    if ( !isdefined( self ) || !isdefined( self.lowermessage ) )
        return;

    for ( _id_AC0E594AC96AA3A8 = 0; _id_AC0E594AC96AA3A8 < self.lowermessages.size; _id_AC0E594AC96AA3A8++ )
        self.lowermessages[_id_AC0E594AC96AA3A8] = undefined;

    updatelowermessage();
}

sortlowermessages()
{
    for ( _id_AC0E594AC96AA3A8 = 1; _id_AC0E594AC96AA3A8 < self.lowermessages.size; _id_AC0E594AC96AA3A8++ )
    {
        message = self.lowermessages[_id_AC0E594AC96AA3A8];
        priority = message.priority;

        for ( _id_AC0E5C4AC96AAA41 = _id_AC0E594AC96AA3A8 - 1; _id_AC0E5C4AC96AAA41 >= 0 && priority > self.lowermessages[_id_AC0E5C4AC96AAA41].priority; _id_AC0E5C4AC96AAA41-- )
            self.lowermessages[_id_AC0E5C4AC96AAA41 + 1] = self.lowermessages[_id_AC0E5C4AC96AAA41];

        self.lowermessages[_id_AC0E5C4AC96AAA41 + 1] = message;
    }
}

addlowermessage( name, text, time, priority, showtimer, shouldfade, fadetoalpha, fadetoalphatime, hidewhenindemo, hidewheninmenu )
{
    _id_28B0F661494FA67C = undefined;

    foreach ( message in self.lowermessages )
    {
        if ( message.name == name )
        {
            if ( message.text == text && message.priority == priority )
                return;

            _id_28B0F661494FA67C = message;
            break;
        }
    }

    if ( !isdefined( _id_28B0F661494FA67C ) )
    {
        _id_28B0F661494FA67C = spawnstruct();
        self.lowermessages[self.lowermessages.size] = _id_28B0F661494FA67C;
    }

    _id_28B0F661494FA67C.name = name;
    _id_28B0F661494FA67C.text = text;
    _id_28B0F661494FA67C.time = time;
    _id_28B0F661494FA67C.addtime = gettime();
    _id_28B0F661494FA67C.priority = priority;
    _id_28B0F661494FA67C.showtimer = showtimer;
    _id_28B0F661494FA67C.shouldfade = shouldfade;
    _id_28B0F661494FA67C.fadetoalpha = fadetoalpha;
    _id_28B0F661494FA67C.fadetoalphatime = fadetoalphatime;
    _id_28B0F661494FA67C.hidewhenindemo = hidewhenindemo;
    _id_28B0F661494FA67C.hidewheninmenu = hidewheninmenu;
    sortlowermessages();
}

removelowermessage( name )
{
    if ( isdefined( self.lowermessages ) )
    {
        for ( _id_AC0E594AC96AA3A8 = self.lowermessages.size; _id_AC0E594AC96AA3A8 > 0; _id_AC0E594AC96AA3A8-- )
        {
            if ( self.lowermessages[_id_AC0E594AC96AA3A8 - 1].name != name )
                continue;

            message = self.lowermessages[_id_AC0E594AC96AA3A8 - 1];

            for ( _id_AC0E5C4AC96AAA41 = _id_AC0E594AC96AA3A8; _id_AC0E5C4AC96AAA41 < self.lowermessages.size; _id_AC0E5C4AC96AAA41++ )
            {
                if ( isdefined( self.lowermessages[_id_AC0E5C4AC96AAA41] ) )
                    self.lowermessages[_id_AC0E5C4AC96AAA41 - 1] = self.lowermessages[_id_AC0E5C4AC96AAA41];
            }

            self.lowermessages[self.lowermessages.size - 1] = undefined;
        }

        sortlowermessages();
    }
}

getlowermessage()
{
    if ( !isdefined( self.lowermessages ) )
        return undefined;

    return self.lowermessages[0];
}

updatelowermessage()
{
    if ( !isdefined( self ) )
        return;

    message = getlowermessage();

    if ( !isdefined( message ) )
    {
        if ( isdefined( self.lowermessage ) && isdefined( self.lowertimer ) )
        {
            self.lowermessage.alpha = 0;
            self.lowertimer.alpha = 0;
        }
    }
    else
    {
        self.lowermessage settext( message.text );
        self.lowermessage.alpha = 0.85;
        self.lowertimer.alpha = 1;
        self.lowermessage.hidewhenindemo = message.hidewhenindemo;
        self.lowermessage.hidewheninmenu = message.hidewheninmenu;

        if ( message.shouldfade )
        {
            self.lowermessage fadeovertime( min( message.fadetoalphatime, 60 ) );
            self.lowermessage.alpha = message.fadetoalpha;
        }

        if ( message.time > 0 && message.showtimer )
            self.lowertimer settimer( max( message.time - ( gettime() - message.addtime ) / 1000, 0.1 ) );
        else
        {
            if ( message.time > 0 && !message.showtimer )
            {
                self.lowertimer settext( "" );
                self.lowermessage fadeovertime( min( message.time, 60 ) );
                self.lowermessage.alpha = 0;
                thread clearondeath( message );
                thread clearafterfade( message );
                return;
            }

            self.lowertimer settext( "" );
        }
    }
}

clearondeath( message )
{
    self notify( "message_cleared" );
    self endon( "message_cleared" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    self waittill( "death" );
    clearlowermessage( message.name );
}

clearafterfade( message )
{
    wait( message.time );
    clearlowermessage( message.name );
    self notify( "message_cleared" );
}
